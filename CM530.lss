
CM530.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000134  08003000  08003000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d44  08003134  08003134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000000d4  20000000  08006e78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000002b8  200000d4  08006f4c  000080d4  2**2
                  ALLOC
  4 ._usrstack    00000100  2000038c  08007204  000080d4  2**0
                  ALLOC
  5 .comment      00000070  00000000  00000000  000080d4  2**0
                  CONTENTS, READONLY
  6 .ARM.attributes 00000031  00000000  00000000  00008144  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000001a8  00000000  00000000  00008178  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000a265  00000000  00000000  00008320  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001a3e  00000000  00000000  00012585  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001af2  00000000  00000000  00013fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d48  00000000  00000000  00015ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000314b  00000000  00000000  00017800  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000059e0  00000000  00000000  0001a94b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001d8  00000000  00000000  0002032b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08003000 <g_pfnVectors>:
 8003000:	20010000 	andcs	r0, r1, r0
 8003004:	08006635 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, sp, lr}
 8003008:	08003135 	stmdaeq	r0, {r0, r2, r4, r5, r8, ip, sp}
 800300c:	08003137 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, ip, sp}
 8003010:	08003139 	stmdaeq	r0, {r0, r3, r4, r5, r8, ip, sp}
 8003014:	0800313b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, ip, sp}
 8003018:	0800313d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, ip, sp}
	...
 800302c:	08003141 	stmdaeq	r0, {r0, r6, r8, ip, sp}
 8003030:	0800313f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r8, ip, sp}
 8003034:	00000000 	andeq	r0, r0, r0
 8003038:	08003143 	stmdaeq	r0, {r0, r1, r6, r8, ip, sp}
 800303c:	08003145 	stmdaeq	r0, {r0, r2, r6, r8, ip, sp}
 8003040:	08003149 	stmdaeq	r0, {r0, r3, r6, r8, ip, sp}
 8003044:	0800314b 	stmdaeq	r0, {r0, r1, r3, r6, r8, ip, sp}
 8003048:	0800314d 	stmdaeq	r0, {r0, r2, r3, r6, r8, ip, sp}
 800304c:	0800314f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, ip, sp}
 8003050:	08003151 	stmdaeq	r0, {r0, r4, r6, r8, ip, sp}
 8003054:	08003153 	stmdaeq	r0, {r0, r1, r4, r6, r8, ip, sp}
 8003058:	08003155 	stmdaeq	r0, {r0, r2, r4, r6, r8, ip, sp}
 800305c:	08003157 	stmdaeq	r0, {r0, r1, r2, r4, r6, r8, ip, sp}
 8003060:	08003159 	stmdaeq	r0, {r0, r3, r4, r6, r8, ip, sp}
 8003064:	0800315b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r8, ip, sp}
 8003068:	0800315d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, ip, sp}
	...
 8003088:	0800316d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, ip, sp}
 800308c:	0800316f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, ip, sp}
 8003090:	08003171 	stmdaeq	r0, {r0, r4, r5, r6, r8, ip, sp}
 8003094:	08003173 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, ip, sp}
 8003098:	08003175 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, ip, sp}
 800309c:	08003177 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r8, ip, sp}
 80030a0:	08003179 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, ip, sp}
 80030a4:	0800317b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r6, r8, ip, sp}
 80030a8:	0800317d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, ip, sp}
 80030ac:	0800317f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, ip, sp}
 80030b0:	08003181 	stmdaeq	r0, {r0, r7, r8, ip, sp}
 80030b4:	08003183 	stmdaeq	r0, {r0, r1, r7, r8, ip, sp}
 80030b8:	08003185 	stmdaeq	r0, {r0, r2, r7, r8, ip, sp}
 80030bc:	08003187 	stmdaeq	r0, {r0, r1, r2, r7, r8, ip, sp}
 80030c0:	08003189 	stmdaeq	r0, {r0, r3, r7, r8, ip, sp}
 80030c4:	0800318b 	stmdaeq	r0, {r0, r1, r3, r7, r8, ip, sp}
 80030c8:	0800318d 	stmdaeq	r0, {r0, r2, r3, r7, r8, ip, sp}
 80030cc:	0800318f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r8, ip, sp}
 80030d0:	08003191 	stmdaeq	r0, {r0, r4, r7, r8, ip, sp}
 80030d4:	08003193 	stmdaeq	r0, {r0, r1, r4, r7, r8, ip, sp}
 80030d8:	08003197 	stmdaeq	r0, {r0, r1, r2, r4, r7, r8, ip, sp}
 80030dc:	08003199 	stmdaeq	r0, {r0, r3, r4, r7, r8, ip, sp}
 80030e0:	0800319d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, ip, sp}
 80030e4:	0800319f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r8, ip, sp}
 80030e8:	080031a1 	stmdaeq	r0, {r0, r5, r7, r8, ip, sp}
 80030ec:	080031a3 	stmdaeq	r0, {r0, r1, r5, r7, r8, ip, sp}
 80030f0:	080031a5 	stmdaeq	r0, {r0, r2, r5, r7, r8, ip, sp}
 80030f4:	080031a7 	stmdaeq	r0, {r0, r1, r2, r5, r7, r8, ip, sp}
 80030f8:	080031a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, ip, sp}
 80030fc:	080031ab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r8, ip, sp}
 8003100:	080031ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, ip, sp}
 8003104:	080031af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r8, ip, sp}
 8003108:	080031b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, ip, sp}
 800310c:	080031b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r8, ip, sp}
 8003110:	080031b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, ip, sp}
 8003114:	080031b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r8, ip, sp}
 8003118:	080031b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, ip, sp}
 800311c:	080031bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r8, ip, sp}
 8003120:	080031bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, ip, sp}
 8003124:	080031bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8, ip, sp}
 8003128:	080031c1 	stmdaeq	r0, {r0, r6, r7, r8, ip, sp}
 800312c:	080031c3 	stmdaeq	r0, {r0, r1, r6, r7, r8, ip, sp}
 8003130:	0000f85f 	andeq	pc, r0, pc, asr r8	; <UNPREDICTABLE>

Disassembly of section .text:

08003134 <NMIException>:
* Description    : This function handles NMI exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void) {
 8003134:	4770      	bx	lr

08003136 <HardFaultException>:
* Description    : This function handles Hard Fault exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFaultException(void) {
 8003136:	e7fe      	b.n	8003136 <HardFaultException>

08003138 <MemManageException>:
* Description    : This function handles Memory Manage exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManageException(void) {
 8003138:	e7fe      	b.n	8003138 <MemManageException>

0800313a <BusFaultException>:
* Description    : This function handles Bus Fault exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFaultException(void) {
 800313a:	e7fe      	b.n	800313a <BusFaultException>

0800313c <UsageFaultException>:
* Description    : This function handles Usage Fault exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFaultException(void) {
 800313c:	e7fe      	b.n	800313c <UsageFaultException>

0800313e <DebugMonitor>:
* Description    : This function handles Debug Monitor exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void) {
 800313e:	4770      	bx	lr

08003140 <SVCHandler>:
* Description    : This function handles SVCall exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void) {
 8003140:	4770      	bx	lr

08003142 <PendSVC>:
* Description    : This function handles PendSVC exception.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void) {
 8003142:	4770      	bx	lr

08003144 <SysTickHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void) {
	ISR_Delay_Base();
 8003144:	f001 bd16 	b.w	8004b74 <ISR_Delay_Base>

08003148 <WWDG_IRQHandler>:
* Description    : This function handles WWDG interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void) {
 8003148:	4770      	bx	lr

0800314a <PVD_IRQHandler>:
* Description    : This function handles PVD interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void) {
 800314a:	4770      	bx	lr

0800314c <TAMPER_IRQHandler>:
* Description    : This function handles Tamper interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void) {
 800314c:	4770      	bx	lr

0800314e <RTC_IRQHandler>:
* Description    : This function handles RTC global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void) {
 800314e:	4770      	bx	lr

08003150 <FLASH_IRQHandler>:
* Description    : This function handles Flash interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void) {
 8003150:	4770      	bx	lr

08003152 <RCC_IRQHandler>:
* Description    : This function handles RCC interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void) {
 8003152:	4770      	bx	lr

08003154 <EXTI0_IRQHandler>:
* Description    : This function handles External interrupt Line 0 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void) {
 8003154:	4770      	bx	lr

08003156 <EXTI1_IRQHandler>:
* Description    : This function handles External interrupt Line 1 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void) {
 8003156:	4770      	bx	lr

08003158 <EXTI2_IRQHandler>:
* Description    : This function handles External interrupt Line 2 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void) {
 8003158:	4770      	bx	lr

0800315a <EXTI3_IRQHandler>:
* Description    : This function handles External interrupt Line 3 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void) {
 800315a:	4770      	bx	lr

0800315c <EXTI4_IRQHandler>:
* Description    : This function handles External interrupt Line 4 request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void) {
 800315c:	4770      	bx	lr

0800315e <DMA1_Channel1_IRQHandler>:
* Description    : This function handles DMA1 Channel 1 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel1_IRQHandler(void) {
 800315e:	4770      	bx	lr

08003160 <DMA1_Channel2_IRQHandler>:
* Description    : This function handles DMA1 Channel 2 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel2_IRQHandler(void) {
 8003160:	4770      	bx	lr

08003162 <DMA1_Channel3_IRQHandler>:
* Description    : This function handles DMA1 Channel 3 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel3_IRQHandler(void) {
 8003162:	4770      	bx	lr

08003164 <DMA1_Channel4_IRQHandler>:
* Description    : This function handles DMA1 Channel 4 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel4_IRQHandler(void) {
 8003164:	4770      	bx	lr

08003166 <DMA1_Channel5_IRQHandler>:
* Description    : This function handles DMA1 Channel 5 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel5_IRQHandler(void) {
 8003166:	4770      	bx	lr

08003168 <DMA1_Channel6_IRQHandler>:
* Description    : This function handles DMA1 Channel 6 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel6_IRQHandler(void) {
 8003168:	4770      	bx	lr

0800316a <DMA1_Channel7_IRQHandler>:
* Description    : This function handles DMA1 Channel 7 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA1_Channel7_IRQHandler(void) {
 800316a:	4770      	bx	lr

0800316c <ADC1_2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/

void ADC1_2_IRQHandler(void) {
 800316c:	4770      	bx	lr

0800316e <USB_HP_CAN_TX_IRQHandler>:
*                  requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void) {
 800316e:	4770      	bx	lr

08003170 <USB_LP_CAN_RX0_IRQHandler>:
*                  requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void) {
 8003170:	4770      	bx	lr

08003172 <CAN_RX1_IRQHandler>:
* Description    : This function handles CAN RX1 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void) {
 8003172:	4770      	bx	lr

08003174 <CAN_SCE_IRQHandler>:
* Description    : This function handles CAN SCE interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void) {
 8003174:	4770      	bx	lr

08003176 <EXTI9_5_IRQHandler>:
* Description    : This function handles External lines 9 to 5 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void) {
 8003176:	4770      	bx	lr

08003178 <TIM1_BRK_IRQHandler>:
* Description    : This function handles TIM1 Break interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void) {
 8003178:	4770      	bx	lr

0800317a <TIM1_UP_IRQHandler>:
*                  request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void) {
 800317a:	4770      	bx	lr

0800317c <TIM1_TRG_COM_IRQHandler>:
*                  requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void) {
 800317c:	4770      	bx	lr

0800317e <TIM1_CC_IRQHandler>:
* Description    : This function handles TIM1 capture compare interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void) {
 800317e:	4770      	bx	lr

08003180 <TIM2_IRQHandler>:
* Description    : This function handles TIM2 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void) {
 8003180:	4770      	bx	lr

08003182 <TIM3_IRQHandler>:
* Description    : This function handles TIM3 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void) {
 8003182:	4770      	bx	lr

08003184 <TIM4_IRQHandler>:
* Description    : This function handles TIM4 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void) {
 8003184:	4770      	bx	lr

08003186 <I2C1_EV_IRQHandler>:
* Description    : This function handles I2C1 Event interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void) {
 8003186:	4770      	bx	lr

08003188 <I2C1_ER_IRQHandler>:
* Description    : This function handles I2C1 Error interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void) {
 8003188:	4770      	bx	lr

0800318a <I2C2_EV_IRQHandler>:
* Description    : This function handles I2C2 Event interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void) {
 800318a:	4770      	bx	lr

0800318c <I2C2_ER_IRQHandler>:
* Description    : This function handles I2C2 Error interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void) {
 800318c:	4770      	bx	lr

0800318e <SPI1_IRQHandler>:
* Description    : This function handles SPI1 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void) {
 800318e:	4770      	bx	lr

08003190 <SPI2_IRQHandler>:
* Description    : This function handles SPI2 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void) {
 8003190:	4770      	bx	lr

08003192 <USART1_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void) {
#ifdef USING_DYNAMIXEL
	RxD_DXL_Interrupt();
 8003192:	f000 bb83 	b.w	800389c <RxD_DXL_Interrupt>

08003196 <USART2_IRQHandler>:
* Description    : This function handles USART2 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void) {
 8003196:	4770      	bx	lr

08003198 <USART3_IRQHandler>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void) {
#ifdef USING_PC_UART
	RxD_PCU_Interrupt();
 8003198:	f001 b844 	b.w	8004224 <RxD_PCU_Interrupt>

0800319c <EXTI15_10_IRQHandler>:
* Description    : This function handles External lines 15 to 10 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void) {
 800319c:	4770      	bx	lr

0800319e <RTCAlarm_IRQHandler>:
* Description    : This function handles RTC Alarm interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void) {
 800319e:	4770      	bx	lr

080031a0 <USBWakeUp_IRQHandler>:
* Description    : This function handles USB WakeUp interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void) {
 80031a0:	4770      	bx	lr

080031a2 <TIM8_BRK_IRQHandler>:
* Description    : This function handles TIM8 Break interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_BRK_IRQHandler(void) {
 80031a2:	4770      	bx	lr

080031a4 <TIM8_UP_IRQHandler>:
*                  request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_UP_IRQHandler(void) {
 80031a4:	4770      	bx	lr

080031a6 <TIM8_TRG_COM_IRQHandler>:
*                  requests.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_TRG_COM_IRQHandler(void) {
 80031a6:	4770      	bx	lr

080031a8 <TIM8_CC_IRQHandler>:
* Description    : This function handles TIM8 capture compare interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM8_CC_IRQHandler(void) {
 80031a8:	4770      	bx	lr

080031aa <ADC3_IRQHandler>:
* Description    : This function handles ADC3 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void ADC3_IRQHandler(void) {
 80031aa:	4770      	bx	lr

080031ac <FSMC_IRQHandler>:
* Description    : This function handles FSMC global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FSMC_IRQHandler(void) {
 80031ac:	4770      	bx	lr

080031ae <SDIO_IRQHandler>:
* Description    : This function handles SDIO global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SDIO_IRQHandler(void) {
 80031ae:	4770      	bx	lr

080031b0 <TIM5_IRQHandler>:
* Description    : This function handles TIM5 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM5_IRQHandler(void) {
 80031b0:	4770      	bx	lr

080031b2 <SPI3_IRQHandler>:
* Description    : This function handles SPI3 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI3_IRQHandler(void) {
 80031b2:	4770      	bx	lr

080031b4 <UART4_IRQHandler>:
* Description    : This function handles UART4 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART4_IRQHandler(void) {
 80031b4:	4770      	bx	lr

080031b6 <UART5_IRQHandler>:
* Description    : This function handles UART5 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UART5_IRQHandler(void) {
 80031b6:	4770      	bx	lr

080031b8 <TIM6_IRQHandler>:
* Description    : This function handles TIM6 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM6_IRQHandler(void) {
 80031b8:	4770      	bx	lr

080031ba <TIM7_IRQHandler>:
* Description    : This function handles TIM7 global interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM7_IRQHandler(void) {
 80031ba:	4770      	bx	lr

080031bc <DMA2_Channel1_IRQHandler>:
* Description    : This function handles DMA2 Channel 1 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel1_IRQHandler(void) {
 80031bc:	4770      	bx	lr

080031be <DMA2_Channel2_IRQHandler>:
* Description    : This function handles DMA2 Channel 2 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel2_IRQHandler(void) {
 80031be:	4770      	bx	lr

080031c0 <DMA2_Channel3_IRQHandler>:
* Description    : This function handles DMA2 Channel 3 interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel3_IRQHandler(void) {
 80031c0:	4770      	bx	lr

080031c2 <DMA2_Channel4_5_IRQHandler>:
*                  interrupt request.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DMA2_Channel4_5_IRQHandler(void) {
 80031c2:	4770      	bx	lr

080031c4 <SetLED.part.0>:

vu32 glBuzzerCounter;

void SetLED(LED_t led, uint8 state) {
	if (state)
		GPIO_ResetBits(EasyLED[led].port, EasyLED[led].pin);
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <SetLED.part.0+0x10>)
 80031c6:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80031ca:	8891      	ldrh	r1, [r2, #4]
 80031cc:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80031d0:	f002 bc0b 	b.w	80059ea <GPIO_ResetBits>
 80031d4:	20000000 	andcs	r0, r0, r0

080031d8 <printString>:

}
void printLine(const char* string) {
	printString('\n' + string);
}
void printString(const char* string) {
 80031d8:	b510      	push	{r4, lr}
 80031da:	1e44      	subs	r4, r0, #1
	int n = 0;
	char c;
	while (string[n]) {
 80031dc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80031e0:	b1f9      	cbz	r1, 8003222 <printString+0x4a>
		c = string[n++];
		if (c == '\n') {
 80031e2:	290a      	cmp	r1, #10
			USART_SendData(USART3, (uint8) '\r');
 80031e4:	480f      	ldr	r0, [pc, #60]	; (8003224 <printString+0x4c>)
void printString(const char* string) {
	int n = 0;
	char c;
	while (string[n]) {
		c = string[n++];
		if (c == '\n') {
 80031e6:	d113      	bne.n	8003210 <printString+0x38>
			USART_SendData(USART3, (uint8) '\r');
 80031e8:	210d      	movs	r1, #13
 80031ea:	f003 f95e 	bl	80064aa <USART_SendData>
			while (USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);
 80031ee:	480d      	ldr	r0, [pc, #52]	; (8003224 <printString+0x4c>)
 80031f0:	2140      	movs	r1, #64	; 0x40
 80031f2:	f003 f9b5 	bl	8006560 <USART_GetFlagStatus>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	d0f9      	beq.n	80031ee <printString+0x16>
			USART_SendData(USART3, (uint8) '\n');
 80031fa:	480a      	ldr	r0, [pc, #40]	; (8003224 <printString+0x4c>)
 80031fc:	210a      	movs	r1, #10
 80031fe:	f003 f954 	bl	80064aa <USART_SendData>
			while (USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);
 8003202:	4808      	ldr	r0, [pc, #32]	; (8003224 <printString+0x4c>)
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	f003 f9ab 	bl	8006560 <USART_GetFlagStatus>
 800320a:	2800      	cmp	r0, #0
 800320c:	d0f9      	beq.n	8003202 <printString+0x2a>
 800320e:	e7e5      	b.n	80031dc <printString+0x4>
		} else {
			USART_SendData(USART3, (uint8) c);
 8003210:	f003 f94b 	bl	80064aa <USART_SendData>
			while (USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);
 8003214:	4803      	ldr	r0, [pc, #12]	; (8003224 <printString+0x4c>)
 8003216:	2140      	movs	r1, #64	; 0x40
 8003218:	f003 f9a2 	bl	8006560 <USART_GetFlagStatus>
 800321c:	2800      	cmp	r0, #0
 800321e:	d0f9      	beq.n	8003214 <printString+0x3c>
 8003220:	e7dc      	b.n	80031dc <printString+0x4>
		}

	}
}
 8003222:	bd10      	pop	{r4, pc}
 8003224:	40004800 	andmi	r4, r0, r0, lsl #16

08003228 <printLine>:
	}
	return line;

}
void printLine(const char* string) {
	printString('\n' + string);
 8003228:	300a      	adds	r0, #10
 800322a:	f7ff bfd5 	b.w	80031d8 <printString>

0800322e <htoi>:
/**********************************************	 Utility functions	 **************************************************/
void _delay_ms(int time) {
	mDelay((uint32)time);
}
int htoi(char digit) {
	if (digit >= 'A' && digit <= 'F') {
 800322e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8003232:	2b05      	cmp	r3, #5
 8003234:	d801      	bhi.n	800323a <htoi+0xc>
		return digit - 'A' + 10;
 8003236:	3837      	subs	r0, #55	; 0x37
 8003238:	4770      	bx	lr
	} else if (digit >= 'a' && digit <= 'f') {
 800323a:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800323e:	2905      	cmp	r1, #5
 8003240:	d801      	bhi.n	8003246 <htoi+0x18>
		return digit - 'a' + 10;
 8003242:	3857      	subs	r0, #87	; 0x57
 8003244:	4770      	bx	lr
	} else if (digit >= '0' && digit <= '9') {
 8003246:	3830      	subs	r0, #48	; 0x30
 8003248:	b2c2      	uxtb	r2, r0
		return digit - '0';
 800324a:	2a09      	cmp	r2, #9
 800324c:	bf88      	it	hi
 800324e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
	}

	return -1; // Bad input.
}
 8003252:	4770      	bx	lr

08003254 <gizmo_init>:
}
/********************************************	 Gizmo setup functions	 ************************************************/
	// 1 May 2013

void gizmo_init() {
	Gizmo.left.arm.shoulder = 4;		// X
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <gizmo_init+0x34>)
 8003256:	2204      	movs	r2, #4
	Gizmo.left.arm.elbow = 6;				// X
 8003258:	2006      	movs	r0, #6
	Gizmo.left.arm.hand = 8;				// X
 800325a:	2108      	movs	r1, #8
}
/********************************************	 Gizmo setup functions	 ************************************************/
	// 1 May 2013

void gizmo_init() {
	Gizmo.left.arm.shoulder = 4;		// X
 800325c:	701a      	strb	r2, [r3, #0]
	Gizmo.left.arm.elbow = 6;				// X
 800325e:	7058      	strb	r0, [r3, #1]
	Gizmo.left.arm.hand = 8;				// X
	Gizmo.left.leg.hip = 12;				// X
 8003260:	220c      	movs	r2, #12
	Gizmo.left.leg.knee = 13;				// X
 8003262:	200d      	movs	r0, #13
	// 1 May 2013

void gizmo_init() {
	Gizmo.left.arm.shoulder = 4;		// X
	Gizmo.left.arm.elbow = 6;				// X
	Gizmo.left.arm.hand = 8;				// X
 8003264:	7099      	strb	r1, [r3, #2]
	Gizmo.left.leg.hip = 12;				// X
 8003266:	70da      	strb	r2, [r3, #3]
	Gizmo.left.leg.knee = 13;				// X
	Gizmo.left.leg.foot = 14;				// X
	Gizmo.right.arm.shoulder = 3;		// X
 8003268:	2103      	movs	r1, #3
	Gizmo.left.arm.shoulder = 4;		// X
	Gizmo.left.arm.elbow = 6;				// X
	Gizmo.left.arm.hand = 8;				// X
	Gizmo.left.leg.hip = 12;				// X
	Gizmo.left.leg.knee = 13;				// X
	Gizmo.left.leg.foot = 14;				// X
 800326a:	220e      	movs	r2, #14
void gizmo_init() {
	Gizmo.left.arm.shoulder = 4;		// X
	Gizmo.left.arm.elbow = 6;				// X
	Gizmo.left.arm.hand = 8;				// X
	Gizmo.left.leg.hip = 12;				// X
	Gizmo.left.leg.knee = 13;				// X
 800326c:	7118      	strb	r0, [r3, #4]
	Gizmo.left.leg.foot = 14;				// X
	Gizmo.right.arm.shoulder = 3;		// X
	Gizmo.right.arm.elbow = 5;			// X
 800326e:	2005      	movs	r0, #5
	Gizmo.left.arm.shoulder = 4;		// X
	Gizmo.left.arm.elbow = 6;				// X
	Gizmo.left.arm.hand = 8;				// X
	Gizmo.left.leg.hip = 12;				// X
	Gizmo.left.leg.knee = 13;				// X
	Gizmo.left.leg.foot = 14;				// X
 8003270:	715a      	strb	r2, [r3, #5]
	Gizmo.right.arm.shoulder = 3;		// X
 8003272:	7199      	strb	r1, [r3, #6]
	Gizmo.right.arm.elbow = 5;			// X
 8003274:	71d8      	strb	r0, [r3, #7]
	Gizmo.right.arm.hand = 7;				// X
 8003276:	2107      	movs	r1, #7
	Gizmo.right.leg.hip = 11;				// X
 8003278:	200b      	movs	r0, #11
	Gizmo.right.leg.knee = 14;			// X
 800327a:	729a      	strb	r2, [r3, #10]
	Gizmo.right.leg.foot = 16;			// X
 800327c:	2210      	movs	r2, #16
	Gizmo.left.leg.hip = 12;				// X
	Gizmo.left.leg.knee = 13;				// X
	Gizmo.left.leg.foot = 14;				// X
	Gizmo.right.arm.shoulder = 3;		// X
	Gizmo.right.arm.elbow = 5;			// X
	Gizmo.right.arm.hand = 7;				// X
 800327e:	7219      	strb	r1, [r3, #8]
	Gizmo.right.leg.hip = 11;				// X
 8003280:	7258      	strb	r0, [r3, #9]
	Gizmo.right.leg.knee = 14;			// X
	Gizmo.right.leg.foot = 16;			// X
 8003282:	72da      	strb	r2, [r3, #11]
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	200000d4 	ldrdcs	r0, [r0], -r4

0800328c <setGizmoLeftArm>:
}
void setGizmoLeftArm(uint8 shoulder, uint8 elbow, uint8 hand) {
	Gizmo.left.arm.shoulder = shoulder;
 800328c:	4b02      	ldr	r3, [pc, #8]	; (8003298 <setGizmoLeftArm+0xc>)
 800328e:	7018      	strb	r0, [r3, #0]
	Gizmo.left.arm.elbow = elbow;
 8003290:	7059      	strb	r1, [r3, #1]
	Gizmo.left.arm.hand = hand;
 8003292:	709a      	strb	r2, [r3, #2]
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	200000d4 	ldrdcs	r0, [r0], -r4

0800329c <setGizmoLeftLeg>:
}
void setGizmoLeftLeg(uint8 hip, uint8 knee, uint8 foot) {
	Gizmo.left.leg.hip = hip;
 800329c:	4b02      	ldr	r3, [pc, #8]	; (80032a8 <setGizmoLeftLeg+0xc>)
 800329e:	70d8      	strb	r0, [r3, #3]
	Gizmo.left.leg.knee = knee;
 80032a0:	7119      	strb	r1, [r3, #4]
	Gizmo.left.leg.foot = foot;
 80032a2:	715a      	strb	r2, [r3, #5]
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	200000d4 	ldrdcs	r0, [r0], -r4

080032ac <setGizmoRightArm>:
}
void setGizmoRightArm(uint8 shoulder, uint8 elbow, uint8 hand) {
	Gizmo.right.arm.shoulder = shoulder;
 80032ac:	4b02      	ldr	r3, [pc, #8]	; (80032b8 <setGizmoRightArm+0xc>)
 80032ae:	7198      	strb	r0, [r3, #6]
	Gizmo.right.arm.elbow = elbow;
 80032b0:	71d9      	strb	r1, [r3, #7]
	Gizmo.right.arm.hand = hand;
 80032b2:	721a      	strb	r2, [r3, #8]
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	200000d4 	ldrdcs	r0, [r0], -r4

080032bc <setGizmoRightLeg>:
}
void setGizmoRightLeg(uint8 hip, uint8 knee, uint8 foot) {
	Gizmo.right.leg.hip = hip;
 80032bc:	4b02      	ldr	r3, [pc, #8]	; (80032c8 <setGizmoRightLeg+0xc>)
 80032be:	7258      	strb	r0, [r3, #9]
	Gizmo.right.leg.knee = knee;
 80032c0:	7299      	strb	r1, [r3, #10]
	Gizmo.right.leg.foot = foot;
 80032c2:	72da      	strb	r2, [r3, #11]
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	200000d4 	ldrdcs	r0, [r0], -r4

080032cc <led_init>:
}
/*******************************************	Helpful & neat LED Functions	*******************************************/
	// 1 April 2013
void led_init() {
 80032cc:	4770      	bx	lr

080032ce <setLED>:
	for (i = 0; i < size; i++)
		GPIO_ResetBits(EasyLED[leds[i]].port, EasyLED[leds[i]].pin);
	mDelay(150);
	setLEDsOff();
}
void setLED(LED_t led, uint8 state) {
 80032ce:	4770      	bx	lr

080032d0 <setLEDsOff>:
	switch (state) {
		case 0:	GPIO_SetBits(EasyLED[led].port, EasyLED[led].pin);		break;
		case 1:	GPIO_ResetBits(EasyLED[led].port, EasyLED[led].pin);	break;
	}
}
void setLEDsOff() {
 80032d0:	b510      	push	{r4, lr}
	GPIO_SetBits(EasyLED[0].port, EasyLED[0].pin);
 80032d2:	4c0f      	ldr	r4, [pc, #60]	; (8003310 <setLEDsOff+0x40>)
 80032d4:	6820      	ldr	r0, [r4, #0]
 80032d6:	88a1      	ldrh	r1, [r4, #4]
 80032d8:	f002 fb85 	bl	80059e6 <GPIO_SetBits>
	GPIO_SetBits(EasyLED[1].port, EasyLED[1].pin);
 80032dc:	68a0      	ldr	r0, [r4, #8]
 80032de:	89a1      	ldrh	r1, [r4, #12]
 80032e0:	f002 fb81 	bl	80059e6 <GPIO_SetBits>
	GPIO_SetBits(EasyLED[2].port, EasyLED[2].pin);
 80032e4:	6920      	ldr	r0, [r4, #16]
 80032e6:	8aa1      	ldrh	r1, [r4, #20]
 80032e8:	f002 fb7d 	bl	80059e6 <GPIO_SetBits>
	GPIO_SetBits(EasyLED[3].port, EasyLED[3].pin);
 80032ec:	69a0      	ldr	r0, [r4, #24]
 80032ee:	8ba1      	ldrh	r1, [r4, #28]
 80032f0:	f002 fb79 	bl	80059e6 <GPIO_SetBits>
	GPIO_SetBits(EasyLED[4].port, EasyLED[4].pin);
 80032f4:	6a20      	ldr	r0, [r4, #32]
 80032f6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80032f8:	f002 fb75 	bl	80059e6 <GPIO_SetBits>
	GPIO_SetBits(EasyLED[5].port, EasyLED[5].pin);
 80032fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80032fe:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003300:	f002 fb71 	bl	80059e6 <GPIO_SetBits>
	GPIO_SetBits(EasyLED[6].port, EasyLED[6].pin);
 8003304:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003306:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
}
 8003308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_SetBits(EasyLED[1].port, EasyLED[1].pin);
	GPIO_SetBits(EasyLED[2].port, EasyLED[2].pin);
	GPIO_SetBits(EasyLED[3].port, EasyLED[3].pin);
	GPIO_SetBits(EasyLED[4].port, EasyLED[4].pin);
	GPIO_SetBits(EasyLED[5].port, EasyLED[5].pin);
	GPIO_SetBits(EasyLED[6].port, EasyLED[6].pin);
 800330c:	f002 bb6b 	b.w	80059e6 <GPIO_SetBits>
 8003310:	20000000 	andcs	r0, r0, r0

08003314 <setLEDsOn>:
}
void setLEDsOn() {
 8003314:	b510      	push	{r4, lr}
	GPIO_ResetBits(EasyLED[0].port, EasyLED[0].pin);
 8003316:	4c0f      	ldr	r4, [pc, #60]	; (8003354 <setLEDsOn+0x40>)
 8003318:	6820      	ldr	r0, [r4, #0]
 800331a:	88a1      	ldrh	r1, [r4, #4]
 800331c:	f002 fb65 	bl	80059ea <GPIO_ResetBits>
	GPIO_ResetBits(EasyLED[1].port, EasyLED[1].pin);
 8003320:	68a0      	ldr	r0, [r4, #8]
 8003322:	89a1      	ldrh	r1, [r4, #12]
 8003324:	f002 fb61 	bl	80059ea <GPIO_ResetBits>
	GPIO_ResetBits(EasyLED[2].port, EasyLED[2].pin);
 8003328:	6920      	ldr	r0, [r4, #16]
 800332a:	8aa1      	ldrh	r1, [r4, #20]
 800332c:	f002 fb5d 	bl	80059ea <GPIO_ResetBits>
	GPIO_ResetBits(EasyLED[3].port, EasyLED[3].pin);
 8003330:	69a0      	ldr	r0, [r4, #24]
 8003332:	8ba1      	ldrh	r1, [r4, #28]
 8003334:	f002 fb59 	bl	80059ea <GPIO_ResetBits>
	GPIO_ResetBits(EasyLED[4].port, EasyLED[4].pin);
 8003338:	6a20      	ldr	r0, [r4, #32]
 800333a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800333c:	f002 fb55 	bl	80059ea <GPIO_ResetBits>
	GPIO_ResetBits(EasyLED[5].port, EasyLED[5].pin);
 8003340:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003342:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003344:	f002 fb51 	bl	80059ea <GPIO_ResetBits>
	GPIO_ResetBits(EasyLED[6].port, EasyLED[6].pin);
 8003348:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800334a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
}
 800334c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GPIO_ResetBits(EasyLED[1].port, EasyLED[1].pin);
	GPIO_ResetBits(EasyLED[2].port, EasyLED[2].pin);
	GPIO_ResetBits(EasyLED[3].port, EasyLED[3].pin);
	GPIO_ResetBits(EasyLED[4].port, EasyLED[4].pin);
	GPIO_ResetBits(EasyLED[5].port, EasyLED[5].pin);
	GPIO_ResetBits(EasyLED[6].port, EasyLED[6].pin);
 8003350:	f002 bb4b 	b.w	80059ea <GPIO_ResetBits>
 8003354:	20000000 	andcs	r0, r0, r0

08003358 <setLEDs>:
}
void setLEDs(bool state) {
	if (state)
 8003358:	b108      	cbz	r0, 800335e <setLEDs+0x6>
		setLEDsOn();
 800335a:	f7ff bfdb 	b.w	8003314 <setLEDsOn>
	else
		setLEDsOff();
 800335e:	f7ff bfb7 	b.w	80032d0 <setLEDsOff>

08003362 <USART_Configuration>:
}



/********************************************				USART Functions				*********************************************/
void USART_Configuration(uint8 PORT, uint32 baudrate) {
 8003362:	4770      	bx	lr

08003364 <DisableUSART1>:
	 USART_Cmd(USART3, ENABLE);												// Enable the USART3
	 }
	 */
}
void DisableUSART1(void) {
	USART_Cmd(USART1, DISABLE);
 8003364:	4801      	ldr	r0, [pc, #4]	; (800336c <DisableUSART1+0x8>)
 8003366:	2100      	movs	r1, #0
 8003368:	f003 b837 	b.w	80063da <USART_Cmd>
 800336c:	40013800 	andmi	r3, r1, r0, lsl #16

08003370 <SetLED>:
	// 3.3V -> Resistor -> Pin -> GND

vu32 glBuzzerCounter;

void SetLED(LED_t led, uint8 state) {
	if (state)
 8003370:	b109      	cbz	r1, 8003376 <SetLED+0x6>
		GPIO_ResetBits(EasyLED[led].port, EasyLED[led].pin);
	else
		GPIO_SetBits(EasyLED[led].port, EasyLED[led].pin);
}
 8003372:	f7ff bf27 	b.w	80031c4 <SetLED.part.0>

void SetLED(LED_t led, uint8 state) {
	if (state)
		GPIO_ResetBits(EasyLED[led].port, EasyLED[led].pin);
	else
		GPIO_SetBits(EasyLED[led].port, EasyLED[led].pin);
 8003376:	4a04      	ldr	r2, [pc, #16]	; (8003388 <SetLED+0x18>)
 8003378:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800337c:	8889      	ldrh	r1, [r1, #4]
 800337e:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
 8003382:	f002 bb30 	b.w	80059e6 <GPIO_SetBits>
 8003386:	bf00      	nop
 8003388:	20000000 	andcs	r0, r0, r0

0800338c <ReadButton>:
}
uint8 ReadButton(Button_t button) {
 800338c:	b508      	push	{r3, lr}
	if (GPIO_ReadInputDataBit(EasyButton[button].port, EasyButton[button].pin) != SET)
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <ReadButton+0x1c>)
 8003390:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
 8003394:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8003396:	8f89      	ldrh	r1, [r1, #60]	; 0x3c
 8003398:	f002 fb13 	bl	80059c2 <GPIO_ReadInputDataBit>
		return 1;
	return 0;
}
 800339c:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 80033a0:	bf18      	it	ne
 80033a2:	2001      	movne	r0, #1
 80033a4:	bd08      	pop	{r3, pc}
 80033a6:	bf00      	nop
 80033a8:	20000000 	andcs	r0, r0, r0

080033ac <SetEPort>:
	}
}
void PlayNote(uint32 mlength, buzzed_note_t note, uint8 octave) {
	Buzzed(mlength, (uint32) (note >> octave));
}
void SetEPort(EPortD_t pin, uint8 state) {
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <SetEPort+0x1c>)
 80033ae:	00c0      	lsls	r0, r0, #3
	if (state)
		GPIO_SetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
 80033b0:	181a      	adds	r2, r3, r0
 80033b2:	6e90      	ldr	r0, [r2, #104]	; 0x68
}
void PlayNote(uint32 mlength, buzzed_note_t note, uint8 octave) {
	Buzzed(mlength, (uint32) (note >> octave));
}
void SetEPort(EPortD_t pin, uint8 state) {
	if (state)
 80033b4:	b119      	cbz	r1, 80033be <SetEPort+0x12>
		GPIO_SetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
 80033b6:	f8b2 106c 	ldrh.w	r1, [r2, #108]	; 0x6c
 80033ba:	f002 bb14 	b.w	80059e6 <GPIO_SetBits>
	else
		GPIO_ResetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
 80033be:	f8b2 106c 	ldrh.w	r1, [r2, #108]	; 0x6c
 80033c2:	f002 bb12 	b.w	80059ea <GPIO_ResetBits>
 80033c6:	bf00      	nop
 80033c8:	20000000 	andcs	r0, r0, r0

080033cc <uDelay>:


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
}
void uDelay(uint32 nTime) {
 80033cc:	b508      	push	{r3, lr}
	if (glDelayCounter == 0)
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <uDelay+0x38>)
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	b91a      	cbnz	r2, 80033dc <uDelay+0x10>
		gbCounterCount++;
 80033d4:	7c19      	ldrb	r1, [r3, #16]
 80033d6:	1c4a      	adds	r2, r1, #1
 80033d8:	b2d1      	uxtb	r1, r2
 80033da:	7419      	strb	r1, [r3, #16]
	if (nTime >= 100)
		glDelayCounter = (nTime / 100);
	else
		glDelayCounter = 1;
#elif defined USING_SYSTICK_10US
	if (nTime >= 10)
 80033dc:	2809      	cmp	r0, #9
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <uDelay+0x38>)
 80033e0:	d904      	bls.n	80033ec <uDelay+0x20>
		glDelayCounter = (nTime / 10);
 80033e2:	220a      	movs	r2, #10
 80033e4:	fbb0 f1f2 	udiv	r1, r0, r2
 80033e8:	60d9      	str	r1, [r3, #12]
 80033ea:	e001      	b.n	80033f0 <uDelay+0x24>
	else
		glDelayCounter = 1;
 80033ec:	2001      	movs	r0, #1
 80033ee:	60d8      	str	r0, [r3, #12]
#elif defined USING_SYSTICK_1US
	glDelayCounter = (nTime);
#endif
	if (gbCounterCount == 1) {
 80033f0:	7c18      	ldrb	r0, [r3, #16]
 80033f2:	2801      	cmp	r0, #1
 80033f4:	d101      	bne.n	80033fa <uDelay+0x2e>
			// Enable the SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Enable);
 80033f6:	f002 ff0d 	bl	8006214 <SysTick_CounterCmd>
	}
	while (glDelayCounter != 0);
 80033fa:	4b02      	ldr	r3, [pc, #8]	; (8003404 <uDelay+0x38>)
 80033fc:	68d8      	ldr	r0, [r3, #12]
 80033fe:	2800      	cmp	r0, #0
 8003400:	d1fb      	bne.n	80033fa <uDelay+0x2e>
}
 8003402:	bd08      	pop	{r3, pc}
 8003404:	200000d4 	ldrdcs	r0, [r0], -r4

08003408 <mDelay>:
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 8003408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340c:	4358      	muls	r0, r3
 800340e:	f7ff bfdd 	b.w	80033cc <uDelay>

08003412 <_delay_ms>:
	}
}

/**********************************************	 Utility functions	 **************************************************/
void _delay_ms(int time) {
	mDelay((uint32)time);
 8003412:	f7ff bff9 	b.w	8003408 <mDelay>

08003416 <ReadAnalog.part.2>:
				// Start ADC2 Software Conversion
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
			uDelay(5);
			return (uint16) (ADC_GetConversionValue(ADC2)) >> ANALOG_RIGHT_BIT_SHIFT;
		}
	} else if ( (port == EPORT2A) || (port == EPORT5A) ) {
 8003416:	2801      	cmp	r0, #1
		GPIO_ResetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
}

#define ANALOG_RIGHT_BIT_SHIFT          0

uint16 ReadAnalog(EPortA_t port) {
 8003418:	b510      	push	{r4, lr}
 800341a:	4604      	mov	r4, r0
				// Start ADC2 Software Conversion
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
			uDelay(5);
			return (uint16) (ADC_GetConversionValue(ADC2)) >> ANALOG_RIGHT_BIT_SHIFT;
		}
	} else if ( (port == EPORT2A) || (port == EPORT5A) ) {
 800341c:	d001      	beq.n	8003422 <ReadAnalog.part.2+0xc>
 800341e:	2804      	cmp	r0, #4
 8003420:	d10f      	bne.n	8003442 <ReadAnalog.part.2+0x2c>
			// Select EPORT2A and EPORT5A via multiplexer
		GPIO_SetBits(PORT_ADC_SELECT0, PIN_ADC_SELECT0);
 8003422:	2102      	movs	r1, #2
 8003424:	482c      	ldr	r0, [pc, #176]	; (80034d8 <ReadAnalog.part.2+0xc2>)
 8003426:	f002 fade 	bl	80059e6 <GPIO_SetBits>
		GPIO_ResetBits(PORT_ADC_SELECT1, PIN_ADC_SELECT1);
 800342a:	2104      	movs	r1, #4
 800342c:	482a      	ldr	r0, [pc, #168]	; (80034d8 <ReadAnalog.part.2+0xc2>)
 800342e:	f002 fadc 	bl	80059ea <GPIO_ResetBits>
		uDelay(5);
 8003432:	2005      	movs	r0, #5
 8003434:	f7ff ffca 	bl	80033cc <uDelay>
		if (port == EPORT2A) {
 8003438:	2c01      	cmp	r4, #1
 800343a:	d11c      	bne.n	8003476 <ReadAnalog.part.2+0x60>
				// Start ADC1 Software Conversion
			ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 800343c:	4827      	ldr	r0, [pc, #156]	; (80034dc <ReadAnalog.part.2+0xc6>)
 800343e:	4621      	mov	r1, r4
 8003440:	e012      	b.n	8003468 <ReadAnalog.part.2+0x52>
				// Start ADC2 Software Conversion
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
			uDelay(5);
			return (uint16) (ADC_GetConversionValue(ADC2)) >> ANALOG_RIGHT_BIT_SHIFT;
		}
	} else if ( (port == EPORT3A) || (port == EPORT6A) ) {
 8003442:	2802      	cmp	r0, #2
 8003444:	d001      	beq.n	800344a <ReadAnalog.part.2+0x34>
 8003446:	2805      	cmp	r0, #5
 8003448:	d121      	bne.n	800348e <ReadAnalog.part.2+0x78>
			// Select EPORT3A and EPORT6A via multiplexer
		GPIO_ResetBits(PORT_ADC_SELECT0, PIN_ADC_SELECT0);
 800344a:	2102      	movs	r1, #2
 800344c:	4822      	ldr	r0, [pc, #136]	; (80034d8 <ReadAnalog.part.2+0xc2>)
 800344e:	f002 facc 	bl	80059ea <GPIO_ResetBits>
		GPIO_SetBits(PORT_ADC_SELECT1, PIN_ADC_SELECT1);
 8003452:	2104      	movs	r1, #4
 8003454:	4820      	ldr	r0, [pc, #128]	; (80034d8 <ReadAnalog.part.2+0xc2>)
 8003456:	f002 fac6 	bl	80059e6 <GPIO_SetBits>
		uDelay(5);
 800345a:	2005      	movs	r0, #5
 800345c:	f7ff ffb6 	bl	80033cc <uDelay>
		if (port == EPORT3A) {
 8003460:	2c02      	cmp	r4, #2
 8003462:	d108      	bne.n	8003476 <ReadAnalog.part.2+0x60>
				// Start ADC1 Software Conversion
			ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8003464:	481d      	ldr	r0, [pc, #116]	; (80034dc <ReadAnalog.part.2+0xc6>)
 8003466:	2101      	movs	r1, #1
 8003468:	f001 fe98 	bl	800519c <ADC_SoftwareStartConvCmd>
			uDelay(5);
 800346c:	2005      	movs	r0, #5
 800346e:	f7ff ffad 	bl	80033cc <uDelay>
			return (uint16) (ADC_GetConversionValue(ADC1)) >> ANALOG_RIGHT_BIT_SHIFT;
 8003472:	481a      	ldr	r0, [pc, #104]	; (80034dc <ReadAnalog.part.2+0xc6>)
 8003474:	e007      	b.n	8003486 <ReadAnalog.part.2+0x70>
		} else {
				// Start ADC2 Software Conversion
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 8003476:	481a      	ldr	r0, [pc, #104]	; (80034e0 <ReadAnalog.part.2+0xca>)
 8003478:	2101      	movs	r1, #1
 800347a:	f001 fe8f 	bl	800519c <ADC_SoftwareStartConvCmd>
			uDelay(5);
 800347e:	2005      	movs	r0, #5
 8003480:	f7ff ffa4 	bl	80033cc <uDelay>
			return (uint16) (ADC_GetConversionValue(ADC2)) >> ANALOG_RIGHT_BIT_SHIFT;
 8003484:	4816      	ldr	r0, [pc, #88]	; (80034e0 <ReadAnalog.part.2+0xca>)
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1 , ADC_SampleTime_239Cycles5);
		uDelay(5);
		return temp;
	}
	return 0x8000;
}
 8003486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return (uint16) (ADC_GetConversionValue(ADC1)) >> ANALOG_RIGHT_BIT_SHIFT;
		} else {
				// Start ADC2 Software Conversion
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
			uDelay(5);
			return (uint16) (ADC_GetConversionValue(ADC2)) >> ANALOG_RIGHT_BIT_SHIFT;
 800348a:	f001 befb 	b.w	8005284 <ADC_GetConversionValue>
		}
	} else if (port == VBUS) {
 800348e:	2806      	cmp	r0, #6
			// Set ADC1 to read SIG_ADC0 (ADC1 multiplexer output) on Channel 10
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1 , ADC_SampleTime_239Cycles5);
		uDelay(5);
		return temp;
	}
	return 0x8000;
 8003490:	bf18      	it	ne
 8003492:	f44f 4400 	movne.w	r4, #32768	; 0x8000
				// Start ADC2 Software Conversion
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
			uDelay(5);
			return (uint16) (ADC_GetConversionValue(ADC2)) >> ANALOG_RIGHT_BIT_SHIFT;
		}
	} else if (port == VBUS) {
 8003496:	d11c      	bne.n	80034d2 <ReadAnalog.part.2+0xbc>
		uint16 temp;
			// Set ADC1 to read SIG_VDD/VBUS on Channel 13
		ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1 , ADC_SampleTime_239Cycles5);
 8003498:	2201      	movs	r2, #1
 800349a:	2307      	movs	r3, #7
 800349c:	210d      	movs	r1, #13
 800349e:	480f      	ldr	r0, [pc, #60]	; (80034dc <ReadAnalog.part.2+0xc6>)
 80034a0:	f001 fe9a 	bl	80051d8 <ADC_RegularChannelConfig>
		uDelay(5);
 80034a4:	2005      	movs	r0, #5
 80034a6:	f7ff ff91 	bl	80033cc <uDelay>
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 80034aa:	2101      	movs	r1, #1
 80034ac:	480b      	ldr	r0, [pc, #44]	; (80034dc <ReadAnalog.part.2+0xc6>)
 80034ae:	f001 fe75 	bl	800519c <ADC_SoftwareStartConvCmd>
		uDelay(5);
 80034b2:	2005      	movs	r0, #5
 80034b4:	f7ff ff8a 	bl	80033cc <uDelay>
		temp = (ADC_GetConversionValue(ADC1)) >> ANALOG_RIGHT_BIT_SHIFT;
 80034b8:	4808      	ldr	r0, [pc, #32]	; (80034dc <ReadAnalog.part.2+0xc6>)
 80034ba:	f001 fee3 	bl	8005284 <ADC_GetConversionValue>
			// Set ADC1 to read SIG_ADC0 (ADC1 multiplexer output) on Channel 10
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1 , ADC_SampleTime_239Cycles5);
 80034be:	210a      	movs	r1, #10
			// Set ADC1 to read SIG_VDD/VBUS on Channel 13
		ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1 , ADC_SampleTime_239Cycles5);
		uDelay(5);
		ADC_SoftwareStartConvCmd(ADC1, ENABLE);
		uDelay(5);
		temp = (ADC_GetConversionValue(ADC1)) >> ANALOG_RIGHT_BIT_SHIFT;
 80034c0:	4604      	mov	r4, r0
			// Set ADC1 to read SIG_ADC0 (ADC1 multiplexer output) on Channel 10
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1 , ADC_SampleTime_239Cycles5);
 80034c2:	2201      	movs	r2, #1
 80034c4:	4805      	ldr	r0, [pc, #20]	; (80034dc <ReadAnalog.part.2+0xc6>)
 80034c6:	2307      	movs	r3, #7
 80034c8:	f001 fe86 	bl	80051d8 <ADC_RegularChannelConfig>
		uDelay(5);
 80034cc:	2005      	movs	r0, #5
 80034ce:	f7ff ff7d 	bl	80033cc <uDelay>
		return temp;
	}
	return 0x8000;
}
 80034d2:	4620      	mov	r0, r4
 80034d4:	bd10      	pop	{r4, pc}
 80034d6:	bf00      	nop
 80034d8:	40011000 	andmi	r1, r1, r0
 80034dc:	40012400 	andmi	r2, r1, r0, lsl #8
 80034e0:	40012800 	andmi	r2, r1, r0, lsl #16

080034e4 <ReadAnalog>:
		GPIO_ResetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
}

#define ANALOG_RIGHT_BIT_SHIFT          0

uint16 ReadAnalog(EPortA_t port) {
 80034e4:	b510      	push	{r4, lr}
	if ((port == EPORT1A) || (port == EPORT4A)) {
 80034e6:	4604      	mov	r4, r0
 80034e8:	b108      	cbz	r0, 80034ee <ReadAnalog+0xa>
 80034ea:	2803      	cmp	r0, #3
 80034ec:	d120      	bne.n	8003530 <ReadAnalog+0x4c>
			// Select EPORT1A and EPORT4A via multiplexer
		GPIO_ResetBits(PORT_ADC_SELECT0, PIN_ADC_SELECT0);
 80034ee:	4812      	ldr	r0, [pc, #72]	; (8003538 <ReadAnalog+0x54>)
 80034f0:	2102      	movs	r1, #2
 80034f2:	f002 fa7a 	bl	80059ea <GPIO_ResetBits>
		GPIO_ResetBits(PORT_ADC_SELECT1, PIN_ADC_SELECT1);
 80034f6:	4810      	ldr	r0, [pc, #64]	; (8003538 <ReadAnalog+0x54>)
 80034f8:	2104      	movs	r1, #4
 80034fa:	f002 fa76 	bl	80059ea <GPIO_ResetBits>
		uDelay(5);
 80034fe:	2005      	movs	r0, #5
 8003500:	f7ff ff64 	bl	80033cc <uDelay>
		if (port == EPORT1A) {
 8003504:	b944      	cbnz	r4, 8003518 <ReadAnalog+0x34>
				// Start ADC1 Software Conversion
			ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8003506:	480d      	ldr	r0, [pc, #52]	; (800353c <ReadAnalog+0x58>)
 8003508:	2101      	movs	r1, #1
 800350a:	f001 fe47 	bl	800519c <ADC_SoftwareStartConvCmd>
			uDelay(5);
 800350e:	2005      	movs	r0, #5
 8003510:	f7ff ff5c 	bl	80033cc <uDelay>
			return (uint16) (ADC_GetConversionValue(ADC1)) >> ANALOG_RIGHT_BIT_SHIFT;
 8003514:	4809      	ldr	r0, [pc, #36]	; (800353c <ReadAnalog+0x58>)
 8003516:	e007      	b.n	8003528 <ReadAnalog+0x44>
		} else {
				// Start ADC2 Software Conversion
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 8003518:	4809      	ldr	r0, [pc, #36]	; (8003540 <ReadAnalog+0x5c>)
 800351a:	2101      	movs	r1, #1
 800351c:	f001 fe3e 	bl	800519c <ADC_SoftwareStartConvCmd>
			uDelay(5);
 8003520:	2005      	movs	r0, #5
 8003522:	f7ff ff53 	bl	80033cc <uDelay>
			return (uint16) (ADC_GetConversionValue(ADC2)) >> ANALOG_RIGHT_BIT_SHIFT;
 8003526:	4806      	ldr	r0, [pc, #24]	; (8003540 <ReadAnalog+0x5c>)
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1 , ADC_SampleTime_239Cycles5);
		uDelay(5);
		return temp;
	}
	return 0x8000;
}
 8003528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return (uint16) (ADC_GetConversionValue(ADC1)) >> ANALOG_RIGHT_BIT_SHIFT;
		} else {
				// Start ADC2 Software Conversion
			ADC_SoftwareStartConvCmd(ADC2, ENABLE);
			uDelay(5);
			return (uint16) (ADC_GetConversionValue(ADC2)) >> ANALOG_RIGHT_BIT_SHIFT;
 800352c:	f001 beaa 	b.w	8005284 <ADC_GetConversionValue>
		ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1 , ADC_SampleTime_239Cycles5);
		uDelay(5);
		return temp;
	}
	return 0x8000;
}
 8003530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003534:	f7ff bf6f 	b.w	8003416 <ReadAnalog.part.2>
 8003538:	40011000 	andmi	r1, r1, r0
 800353c:	40012400 	andmi	r2, r1, r0, lsl #8
 8003540:	40012800 	andmi	r2, r1, r0, lsl #16

08003544 <ReadIR>:
uint16 ReadIR(EPortA_t port) {
 8003544:	b570      	push	{r4, r5, r6, lr}
void PlayNote(uint32 mlength, buzzed_note_t note, uint8 octave) {
	Buzzed(mlength, (uint32) (note >> octave));
}
void SetEPort(EPortD_t pin, uint8 state) {
	if (state)
		GPIO_SetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <ReadIR+0x48>)
	}
	return 0x8000;
}
uint16 ReadIR(EPortA_t port) {
	uint16 temp;
	SetEPort((port * 2), 1);
 8003548:	0044      	lsls	r4, r0, #1
 800354a:	b2e4      	uxtb	r4, r4
void PlayNote(uint32 mlength, buzzed_note_t note, uint8 octave) {
	Buzzed(mlength, (uint32) (note >> octave));
}
void SetEPort(EPortD_t pin, uint8 state) {
	if (state)
		GPIO_SetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
 800354c:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
	return 0x8000;
}
uint16 ReadIR(EPortA_t port) {
	uint16 temp;
	SetEPort((port * 2), 1);
	SetEPort((port * 2) + 1, 0);
 8003550:	1c65      	adds	r5, r4, #1
		uDelay(5);
		return temp;
	}
	return 0x8000;
}
uint16 ReadIR(EPortA_t port) {
 8003552:	4606      	mov	r6, r0
	uint16 temp;
	SetEPort((port * 2), 1);
	SetEPort((port * 2) + 1, 0);
 8003554:	b2ed      	uxtb	r5, r5
void PlayNote(uint32 mlength, buzzed_note_t note, uint8 octave) {
	Buzzed(mlength, (uint32) (note >> octave));
}
void SetEPort(EPortD_t pin, uint8 state) {
	if (state)
		GPIO_SetBits(EasyEPort[pin].port, EasyEPort[pin].pin);
 8003556:	6e88      	ldr	r0, [r1, #104]	; 0x68
 8003558:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
 800355c:	f002 fa43 	bl	80059e6 <GPIO_SetBits>
	return 0x8000;
}
uint16 ReadIR(EPortA_t port) {
	uint16 temp;
	SetEPort((port * 2), 1);
	SetEPort((port * 2) + 1, 0);
 8003560:	2100      	movs	r1, #0
 8003562:	4628      	mov	r0, r5
 8003564:	f7ff ff22 	bl	80033ac <SetEPort>
	uDelay(25);
 8003568:	2019      	movs	r0, #25
 800356a:	f7ff ff2f 	bl	80033cc <uDelay>
	temp = ReadAnalog(port);
 800356e:	4630      	mov	r0, r6
 8003570:	f7ff ffb8 	bl	80034e4 <ReadAnalog>
	SetEPort((port * 2), 0);
 8003574:	2100      	movs	r1, #0
uint16 ReadIR(EPortA_t port) {
	uint16 temp;
	SetEPort((port * 2), 1);
	SetEPort((port * 2) + 1, 0);
	uDelay(25);
	temp = ReadAnalog(port);
 8003576:	4606      	mov	r6, r0
	SetEPort((port * 2), 0);
 8003578:	4620      	mov	r0, r4
 800357a:	f7ff ff17 	bl	80033ac <SetEPort>
	SetEPort((port * 2) + 1, 0);
 800357e:	4628      	mov	r0, r5
 8003580:	2100      	movs	r1, #0
 8003582:	f7ff ff13 	bl	80033ac <SetEPort>
	return temp;
}
 8003586:	4630      	mov	r0, r6
 8003588:	bd70      	pop	{r4, r5, r6, pc}
 800358a:	bf00      	nop
 800358c:	20000000 	andcs	r0, r0, r0

08003590 <readSerialChar>:
void pcu_put_byte(uint8 bTxdData);
char readSerialChar();
char* readSerialLine();

	// Serial and Debug functions
char readSerialChar() {
 8003590:	b510      	push	{r4, lr}
		// Will *attempt* to read a character, or if 10 seconds passes and nothing happens then it returns nothing.
	char c;
	uint16 timeout = 1000;
	while (timeout > 0) {
		if (gbPacketReadPointer != gbPacketWritePointer) break;
 8003592:	4c0b      	ldr	r4, [pc, #44]	; (80035c0 <readSerialChar+0x30>)
 8003594:	7c62      	ldrb	r2, [r4, #17]
 8003596:	7ca3      	ldrb	r3, [r4, #18]
 8003598:	429a      	cmp	r2, r3
 800359a:	d10f      	bne.n	80035bc <readSerialChar+0x2c>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 800359c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035a0:	f7ff ff14 	bl	80033cc <uDelay>
	while (timeout > 0) {
		if (gbPacketReadPointer != gbPacketWritePointer) break;
		mDelay(1);
		timeout--;

		c = gbpPacketDataBuffer[gbPacketReadPointer];
 80035a4:	7c60      	ldrb	r0, [r4, #17]
 80035a6:	1821      	adds	r1, r4, r0
 80035a8:	7cc8      	ldrb	r0, [r1, #19]
		gbPacketReadPointer++;
 80035aa:	7c62      	ldrb	r2, [r4, #17]
 80035ac:	1c53      	adds	r3, r2, #1
 80035ae:	b2d9      	uxtb	r1, r3
 80035b0:	7461      	strb	r1, [r4, #17]
		gbPacketReadPointer = gbPacketReadPointer & 0x1F;
 80035b2:	7c62      	ldrb	r2, [r4, #17]
 80035b4:	f002 031f 	and.w	r3, r2, #31
 80035b8:	7463      	strb	r3, [r4, #17]
		return c;
 80035ba:	bd10      	pop	{r4, pc}
	}
	return 0;
 80035bc:	2000      	movs	r0, #0
}
 80035be:	bd10      	pop	{r4, pc}
 80035c0:	200000d4 	ldrdcs	r0, [r0], -r4

080035c4 <readSerialLine>:
char* readSerialLine() {
 80035c4:	b538      	push	{r3, r4, r5, lr}
	char c, i;
	i = 0;
	char* line = "";
 80035c6:	4c07      	ldr	r4, [pc, #28]	; (80035e4 <readSerialLine+0x20>)
	while (i < 128) {
 80035c8:	2581      	movs	r5, #129	; 0x81
 80035ca:	3d01      	subs	r5, #1
 80035cc:	d007      	beq.n	80035de <readSerialLine+0x1a>
		c = readSerialChar();
 80035ce:	f7ff ffdf 	bl	8003590 <readSerialChar>
		if (c == '\r' || c == '\n')
 80035d2:	280d      	cmp	r0, #13
 80035d4:	d003      	beq.n	80035de <readSerialLine+0x1a>
 80035d6:	280a      	cmp	r0, #10
 80035d8:	d001      	beq.n	80035de <readSerialLine+0x1a>
			break;
		else {
			line = line + c;
 80035da:	1824      	adds	r4, r4, r0
 80035dc:	e7f5      	b.n	80035ca <readSerialLine+0x6>
			i++;
		}
	}
	return line;

}
 80035de:	4620      	mov	r0, r4
 80035e0:	bd38      	pop	{r3, r4, r5, pc}
 80035e2:	bf00      	nop
 80035e4:	08006d80 	stmdaeq	r0, {r7, r8, sl, fp, sp, lr}

080035e8 <blinkMultiLEDs>:
	setLEDsOn();
	mDelay(500);	// Wait 0.5s
	setLEDsOff();
	mDelay(1000);
}
void blinkMultiLEDs(uint8* leds) {
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4605      	mov	r5, r0
 80035ec:	2300      	movs	r3, #0
	uint8 size = sizeof(leds) / sizeof(uint8);
	uint8 i = 0;
	for (i = 0; i < size; i++)				// Check each led value in case it's not a valid LED, and turn each one off.
		if (leds[i] > 6) return;
 80035ee:	5cea      	ldrb	r2, [r5, r3]
 80035f0:	2a06      	cmp	r2, #6
 80035f2:	d818      	bhi.n	8003626 <blinkMultiLEDs+0x3e>
 80035f4:	3301      	adds	r3, #1
	mDelay(1000);
}
void blinkMultiLEDs(uint8* leds) {
	uint8 size = sizeof(leds) / sizeof(uint8);
	uint8 i = 0;
	for (i = 0; i < size; i++)				// Check each led value in case it's not a valid LED, and turn each one off.
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d1f9      	bne.n	80035ee <blinkMultiLEDs+0x6>
		if (leds[i] > 6) return;
	setLEDsOff();
 80035fa:	f7ff fe69 	bl	80032d0 <setLEDsOff>
 80035fe:	2400      	movs	r4, #0
	for (i = 0; i < size; i++)
		GPIO_ResetBits(EasyLED[leds[i]].port, EasyLED[leds[i]].pin);
 8003600:	5d28      	ldrb	r0, [r5, r4]
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <blinkMultiLEDs+0x40>)
 8003604:	3401      	adds	r4, #1
 8003606:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800360a:	8889      	ldrh	r1, [r1, #4]
 800360c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
 8003610:	f002 f9eb 	bl	80059ea <GPIO_ResetBits>
	uint8 size = sizeof(leds) / sizeof(uint8);
	uint8 i = 0;
	for (i = 0; i < size; i++)				// Check each led value in case it's not a valid LED, and turn each one off.
		if (leds[i] > 6) return;
	setLEDsOff();
	for (i = 0; i < size; i++)
 8003614:	2c04      	cmp	r4, #4
 8003616:	d1f3      	bne.n	8003600 <blinkMultiLEDs+0x18>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 8003618:	4804      	ldr	r0, [pc, #16]	; (800362c <blinkMultiLEDs+0x44>)
 800361a:	f7ff fed7 	bl	80033cc <uDelay>
	setLEDsOff();
	for (i = 0; i < size; i++)
		GPIO_ResetBits(EasyLED[leds[i]].port, EasyLED[leds[i]].pin);
	mDelay(150);
	setLEDsOff();
}
 800361e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (leds[i] > 6) return;
	setLEDsOff();
	for (i = 0; i < size; i++)
		GPIO_ResetBits(EasyLED[leds[i]].port, EasyLED[leds[i]].pin);
	mDelay(150);
	setLEDsOff();
 8003622:	f7ff be55 	b.w	80032d0 <setLEDsOff>
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	20000000 	andcs	r0, r0, r0
 800362c:	000249f0 	strdeq	r4, [r2], -r0

08003630 <blinkLEDs>:
	setLED(AUX, 0);
	setLED(MANAGE, 0);
	setLED(PROGRAM, 0);
	setLED(PLAY, 0);
}
void blinkLEDs() {
 8003630:	b508      	push	{r3, lr}
	setLEDsOff();	// Set the LEDs off in case any of them happen to be on.
 8003632:	f7ff fe4d 	bl	80032d0 <setLEDsOff>
	setLEDsOn();
 8003636:	f7ff fe6d 	bl	8003314 <setLEDsOn>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 800363a:	4805      	ldr	r0, [pc, #20]	; (8003650 <blinkLEDs+0x20>)
 800363c:	f7ff fec6 	bl	80033cc <uDelay>
}
void blinkLEDs() {
	setLEDsOff();	// Set the LEDs off in case any of them happen to be on.
	setLEDsOn();
	mDelay(500);	// Wait 0.5s
	setLEDsOff();
 8003640:	f7ff fe46 	bl	80032d0 <setLEDsOff>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 8003644:	4803      	ldr	r0, [pc, #12]	; (8003654 <blinkLEDs+0x24>)
	setLEDsOff();	// Set the LEDs off in case any of them happen to be on.
	setLEDsOn();
	mDelay(500);	// Wait 0.5s
	setLEDsOff();
	mDelay(1000);
}
 8003646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 800364a:	f7ff bebf 	b.w	80033cc <uDelay>
 800364e:	bf00      	nop
 8003650:	0007a120 	andeq	sl, r7, r0, lsr #2
 8003654:	000f4240 	andeq	r4, pc, r0, asr #4

08003658 <StartCountdown>:
		SysTick_CounterCmd(SysTick_Counter_Enable);
	}
	while (glDelayCounter != 0);
}
void StartCountdown(uint32 StartTime) {
	if (glCountdownCounter == 0)
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <StartCountdown+0x24>)
 800365a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800365c:	b91a      	cbnz	r2, 8003666 <StartCountdown+0xe>
		gbCounterCount++;
 800365e:	7c19      	ldrb	r1, [r3, #16]
 8003660:	1c4a      	adds	r2, r1, #1
 8003662:	b2d1      	uxtb	r1, r2
 8003664:	7419      	strb	r1, [r3, #16]
		// Want Timer counting in 1 [ms] intervals
#ifdef USING_SYSTICK_100US
	glCountdownCounter = (StartTime * 10);
#elif defined USING_SYSTICK_10US
	glCountdownCounter = (StartTime * 100);
 8003666:	2364      	movs	r3, #100	; 0x64
 8003668:	4358      	muls	r0, r3
 800366a:	4a04      	ldr	r2, [pc, #16]	; (800367c <StartCountdown+0x24>)
 800366c:	6350      	str	r0, [r2, #52]	; 0x34
#elif defined USING_SYSTICK_1US
	glCountdownCounter = (StartTime * 1000);
#endif
	if (gbCounterCount == 1) {
 800366e:	7c10      	ldrb	r0, [r2, #16]
 8003670:	2801      	cmp	r0, #1
 8003672:	d101      	bne.n	8003678 <StartCountdown+0x20>
			// Enable the SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Enable);
 8003674:	f002 bdce 	b.w	8006214 <SysTick_CounterCmd>
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	200000d4 	ldrdcs	r0, [r0], -r4

08003680 <start_countdown_buzzer>:
	}
}
void start_countdown_buzzer(uint32 nTime) {
	if (glBuzzerCounter == 0)
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <start_countdown_buzzer+0x24>)
 8003682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003684:	b91a      	cbnz	r2, 800368e <start_countdown_buzzer+0xe>
		gbCounterCount++;
 8003686:	7c19      	ldrb	r1, [r3, #16]
 8003688:	1c4a      	adds	r2, r1, #1
 800368a:	b2d1      	uxtb	r1, r2
 800368c:	7419      	strb	r1, [r3, #16]
		// Want Timer counting in 1 [ms] intervals
#ifdef USING_SYSTICK_100US
	glBuzzerCounter = (nTime * 10);
#elif defined USING_SYSTICK_10US
	glBuzzerCounter = (nTime * 100);
 800368e:	2364      	movs	r3, #100	; 0x64
 8003690:	4358      	muls	r0, r3
 8003692:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <start_countdown_buzzer+0x24>)
 8003694:	6390      	str	r0, [r2, #56]	; 0x38
#elif defined USING_SYSTICK_1US
	glBuzzerCounter = (nTime * 1000);
#endif
	if (gbCounterCount == 1) {
 8003696:	7c10      	ldrb	r0, [r2, #16]
 8003698:	2801      	cmp	r0, #1
 800369a:	d101      	bne.n	80036a0 <start_countdown_buzzer+0x20>
			// Enable the SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Enable);
 800369c:	f002 bdba 	b.w	8006214 <SysTick_CounterCmd>
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	200000d4 	ldrdcs	r0, [r0], -r4

080036a8 <Buzzed>:
	return 0;
}

	//volatile uint32 glBuzzerCounter;
void start_countdown_buzzer(uint32);
void Buzzed(uint32 mlength, uint32 tone) {
 80036a8:	b510      	push	{r4, lr}
 80036aa:	460c      	mov	r4, r1
		// n [cents] = 1200 log2(b/a)
		// b = a * 2^(n/1200)
		// tone = 1/(2*1e-6*f) = 1/(2*1e-6*440*2^(cents_relative/1200))
		//   using uDelay(), 50% duty cycle, cents relative to A_5
		//#define FREQTOTONE(f)    (5000000/f)    // (1/(2*1e-6*f))
	start_countdown_buzzer(mlength);
 80036ac:	f7ff ffe8 	bl	8003680 <start_countdown_buzzer>
	while (glBuzzerCounter > 0) {
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <Buzzed+0x30>)
 80036b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036b4:	b170      	cbz	r0, 80036d4 <Buzzed+0x2c>
		GPIO_ResetBits(PORT_BUZZER, PIN_BUZZER);
 80036b6:	2140      	movs	r1, #64	; 0x40
 80036b8:	4808      	ldr	r0, [pc, #32]	; (80036dc <Buzzed+0x34>)
 80036ba:	f002 f996 	bl	80059ea <GPIO_ResetBits>
		uDelay(tone);
 80036be:	4620      	mov	r0, r4
 80036c0:	f7ff fe84 	bl	80033cc <uDelay>
		GPIO_SetBits(PORT_BUZZER, PIN_BUZZER);
 80036c4:	4805      	ldr	r0, [pc, #20]	; (80036dc <Buzzed+0x34>)
 80036c6:	2140      	movs	r1, #64	; 0x40
 80036c8:	f002 f98d 	bl	80059e6 <GPIO_SetBits>
		uDelay(tone);
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff fe7d 	bl	80033cc <uDelay>
 80036d2:	e7ed      	b.n	80036b0 <Buzzed+0x8>
	}
}
 80036d4:	bd10      	pop	{r4, pc}
 80036d6:	bf00      	nop
 80036d8:	200000d4 	ldrdcs	r0, [r0], -r4
 80036dc:	40010800 	andmi	r0, r1, r0, lsl #16

080036e0 <PlayNote>:
void PlayNote(uint32 mlength, buzzed_note_t note, uint8 octave) {
	Buzzed(mlength, (uint32) (note >> octave));
 80036e0:	fa41 f102 	asr.w	r1, r1, r2
 80036e4:	f7ff bfe0 	b.w	80036a8 <Buzzed>

080036e8 <start_timeout_dxl>:
			// Enable the SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Enable);
	}
}
void start_timeout_dxl(uint32 nTime) {
	if (glDxlTimeoutCounter == 0)
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <start_timeout_dxl+0x30>)
 80036ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ec:	b91a      	cbnz	r2, 80036f6 <start_timeout_dxl+0xe>
		gbCounterCount++;
 80036ee:	7c19      	ldrb	r1, [r3, #16]
 80036f0:	1c4a      	adds	r2, r1, #1
 80036f2:	b2d1      	uxtb	r1, r2
 80036f4:	7419      	strb	r1, [r3, #16]
	if (nTime >= 100)
		glDxlTimeoutCounter = (nTime / 100);
	else
		glDxlTimeoutCounter = 1;
#elif defined USING_SYSTICK_10US
	if (nTime >= 10)
 80036f6:	2809      	cmp	r0, #9
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <start_timeout_dxl+0x30>)
 80036fa:	d904      	bls.n	8003706 <start_timeout_dxl+0x1e>
		glDxlTimeoutCounter = (nTime / 10);
 80036fc:	220a      	movs	r2, #10
 80036fe:	fbb0 f1f2 	udiv	r1, r0, r2
 8003702:	63d9      	str	r1, [r3, #60]	; 0x3c
 8003704:	e001      	b.n	800370a <start_timeout_dxl+0x22>
	else
		glDxlTimeoutCounter = 1;
 8003706:	2001      	movs	r0, #1
 8003708:	63d8      	str	r0, [r3, #60]	; 0x3c
#elif defined USING_SYSTICK_1US
	glDxlTimeoutCounter = (nTime);
#endif
	if (gbCounterCount == 1) {
 800370a:	7c18      	ldrb	r0, [r3, #16]
 800370c:	2801      	cmp	r0, #1
 800370e:	d101      	bne.n	8003714 <start_timeout_dxl+0x2c>
			// Enable the SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Enable);
 8003710:	f002 bd80 	b.w	8006214 <SysTick_CounterCmd>
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	200000d4 	ldrdcs	r0, [r0], -r4

0800371c <start_timeout_pcu>:
	}
}
void start_timeout_pcu(uint32 nTime) {
	if (glPcuTimeoutCounter == 0)
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <start_timeout_pcu+0x30>)
 800371e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003720:	b91a      	cbnz	r2, 800372a <start_timeout_pcu+0xe>
		gbCounterCount++;
 8003722:	7c19      	ldrb	r1, [r3, #16]
 8003724:	1c4a      	adds	r2, r1, #1
 8003726:	b2d1      	uxtb	r1, r2
 8003728:	7419      	strb	r1, [r3, #16]
	if (nTime >= 100)
		glPcuTimeoutCounter = (nTime / 100);
	else
		glPcuTimeoutCounter = 1;
#elif defined USING_SYSTICK_10US
	if (nTime >= 10)
 800372a:	2809      	cmp	r0, #9
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <start_timeout_pcu+0x30>)
 800372e:	d904      	bls.n	800373a <start_timeout_pcu+0x1e>
		glPcuTimeoutCounter = (nTime / 10);
 8003730:	220a      	movs	r2, #10
 8003732:	fbb0 f1f2 	udiv	r1, r0, r2
 8003736:	6419      	str	r1, [r3, #64]	; 0x40
 8003738:	e001      	b.n	800373e <start_timeout_pcu+0x22>
	else
		glPcuTimeoutCounter = 1;
 800373a:	2001      	movs	r0, #1
 800373c:	6418      	str	r0, [r3, #64]	; 0x40
#elif defined USING_SYSTICK_1US
	glPcuTimeoutCounter = (nTime);
#endif
	if (gbCounterCount == 1) {
 800373e:	7c18      	ldrb	r0, [r3, #16]
 8003740:	2801      	cmp	r0, #1
 8003742:	d101      	bne.n	8003748 <start_timeout_pcu+0x2c>
			// Enable the SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Enable);
 8003744:	f002 bd66 	b.w	8006214 <SysTick_CounterCmd>
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	200000d4 	ldrdcs	r0, [r0], -r4

08003750 <dxl_hal_open>:
#define DXL_BUFFER_LENGTH               256
static volatile uint16 gbDxlWrite = 0, gbDxlRead = 0;
static volatile uint8 gbpDxlBuffer[DXL_BUFFER_LENGTH];


uint8 dxl_hal_open(uint32 baudrate) {
 8003750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003752:	4604      	mov	r4, r0
	USART_InitTypeDef USART_InitStructure;
	USART_StructInit(&USART_InitStructure);									// Initialize the Dynamixel structure.
 8003754:	4668      	mov	r0, sp
 8003756:	f002 fe1f 	bl	8006398 <USART_StructInit>
	USART_InitStructure.USART_BaudRate = baudrate;					// Set various parameters.
 800375a:	9400      	str	r4, [sp, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_DeInit(USART1);
 800375c:	4c12      	ldr	r4, [pc, #72]	; (80037a8 <dxl_hal_open+0x58>)
	USART_InitStructure.USART_BaudRate = baudrate;					// Set various parameters.
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800375e:	200c      	movs	r0, #12

uint8 dxl_hal_open(uint32 baudrate) {
	USART_InitTypeDef USART_InitStructure;
	USART_StructInit(&USART_InitStructure);									// Initialize the Dynamixel structure.
	USART_InitStructure.USART_BaudRate = baudrate;					// Set various parameters.
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003760:	2300      	movs	r3, #0
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003762:	f8ad 000a 	strh.w	r0, [sp, #10]
	USART_DeInit(USART1);
 8003766:	4620      	mov	r0, r4

uint8 dxl_hal_open(uint32 baudrate) {
	USART_InitTypeDef USART_InitStructure;
	USART_StructInit(&USART_InitStructure);									// Initialize the Dynamixel structure.
	USART_InitStructure.USART_BaudRate = baudrate;					// Set various parameters.
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003768:	f8ad 3004 	strh.w	r3, [sp, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800376c:	f8ad 3006 	strh.w	r3, [sp, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 8003770:	f8ad 3008 	strh.w	r3, [sp, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003774:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_DeInit(USART1);
 8003778:	f002 fd80 	bl	800627c <USART_DeInit>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 800377c:	f242 7010 	movw	r0, #10000	; 0x2710
 8003780:	f7ff fe24 	bl	80033cc <uDelay>
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_DeInit(USART1);
	mDelay(10);																							// Wait 0.01s
	USART_Init(USART1, &USART_InitStructure);								// Configure USART1 (dynamixel)
 8003784:	4620      	mov	r0, r4
 8003786:	4669      	mov	r1, sp
 8003788:	f002 fdc2 	bl	8006310 <USART_Init>
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);					// Enable USART1 (dynamixel) Receive interrupt
 800378c:	4620      	mov	r0, r4
 800378e:	2201      	movs	r2, #1
 8003790:	f240 5125 	movw	r1, #1317	; 0x525
 8003794:	f002 fe2d 	bl	80063f2 <USART_ITConfig>
	USART_Cmd(USART1, ENABLE);															// Enable USART1 (dynamixel)
 8003798:	4620      	mov	r0, r4
 800379a:	2101      	movs	r1, #1
 800379c:	f002 fe1d 	bl	80063da <USART_Cmd>
	return 1;
}
 80037a0:	2001      	movs	r0, #1
 80037a2:	b004      	add	sp, #16
 80037a4:	bd10      	pop	{r4, pc}
 80037a6:	bf00      	nop
 80037a8:	40013800 	andmi	r3, r1, r0, lsl #16

080037ac <dxl_hal_close>:
void dxl_hal_close(void) {
		// Disable USART1 (dynamixel)
	USART_Cmd(USART1, DISABLE);
 80037ac:	4801      	ldr	r0, [pc, #4]	; (80037b4 <dxl_hal_close+0x8>)
 80037ae:	2100      	movs	r1, #0
 80037b0:	f002 be13 	b.w	80063da <USART_Cmd>
 80037b4:	40013800 	andmi	r3, r1, r0, lsl #16

080037b8 <dxl_hal_clear>:
}
void dxl_hal_clear(void) {
 80037b8:	2300      	movs	r3, #0
		// Clear communication buffer
	uint16 i;
	for (i = 0; i < DXL_BUFFER_LENGTH; i++)
		gbpDxlBuffer[i] = 0;
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <dxl_hal_clear+0x20>)
 80037bc:	2100      	movs	r1, #0
 80037be:	18d0      	adds	r0, r2, r3
 80037c0:	3301      	adds	r3, #1
	USART_Cmd(USART1, DISABLE);
}
void dxl_hal_clear(void) {
		// Clear communication buffer
	uint16 i;
	for (i = 0; i < DXL_BUFFER_LENGTH; i++)
 80037c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		gbpDxlBuffer[i] = 0;
 80037c6:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	USART_Cmd(USART1, DISABLE);
}
void dxl_hal_clear(void) {
		// Clear communication buffer
	uint16 i;
	for (i = 0; i < DXL_BUFFER_LENGTH; i++)
 80037ca:	d1f6      	bne.n	80037ba <dxl_hal_clear+0x2>
		gbpDxlBuffer[i] = 0;
	gbDxlRead = 0;
 80037cc:	f8a2 1144 	strh.w	r1, [r2, #324]	; 0x144
	gbDxlWrite = 0;
 80037d0:	f8a2 1146 	strh.w	r1, [r2, #326]	; 0x146
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	200000d4 	ldrdcs	r0, [r0], -r4

080037dc <dxl_hal_tx>:
}
uint8 dxl_hal_tx(uint8 *pPacket, uint8 numPacket) {
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	4606      	mov	r6, r0
 80037e0:	460d      	mov	r5, r1
	uint8 i;
	for (i = 0; i < numPacket; i++) {
 80037e2:	2400      	movs	r4, #0
 80037e4:	b2e3      	uxtb	r3, r4
 80037e6:	42ab      	cmp	r3, r5
 80037e8:	d21b      	bcs.n	8003822 <dxl_hal_tx+0x46>
			// RX Disable
		GPIO_ResetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);
 80037ea:	480f      	ldr	r0, [pc, #60]	; (8003828 <dxl_hal_tx+0x4c>)
 80037ec:	2120      	movs	r1, #32
 80037ee:	f002 f8fc 	bl	80059ea <GPIO_ResetBits>
			// TX Enable
		GPIO_SetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);
 80037f2:	480d      	ldr	r0, [pc, #52]	; (8003828 <dxl_hal_tx+0x4c>)
 80037f4:	2110      	movs	r1, #16
 80037f6:	f002 f8f6 	bl	80059e6 <GPIO_SetBits>
		USART_SendData(USART1, pPacket[i]);
 80037fa:	480c      	ldr	r0, [pc, #48]	; (800382c <dxl_hal_tx+0x50>)
 80037fc:	5d31      	ldrb	r1, [r6, r4]
 80037fe:	f002 fe54 	bl	80064aa <USART_SendData>
		while( USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET );
 8003802:	480a      	ldr	r0, [pc, #40]	; (800382c <dxl_hal_tx+0x50>)
 8003804:	2140      	movs	r1, #64	; 0x40
 8003806:	f002 feab 	bl	8006560 <USART_GetFlagStatus>
 800380a:	2800      	cmp	r0, #0
 800380c:	d0f9      	beq.n	8003802 <dxl_hal_tx+0x26>
			// TX Disable
		GPIO_ResetBits(PORT_ENABLE_TXD, PIN_ENABLE_TXD);
 800380e:	4806      	ldr	r0, [pc, #24]	; (8003828 <dxl_hal_tx+0x4c>)
 8003810:	2110      	movs	r1, #16
 8003812:	f002 f8ea 	bl	80059ea <GPIO_ResetBits>
			// RX Enable
		GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);
 8003816:	4804      	ldr	r0, [pc, #16]	; (8003828 <dxl_hal_tx+0x4c>)
 8003818:	2120      	movs	r1, #32
 800381a:	f002 f8e4 	bl	80059e6 <GPIO_SetBits>
 800381e:	3401      	adds	r4, #1
 8003820:	e7e0      	b.n	80037e4 <dxl_hal_tx+0x8>
	}
	return numPacket;
}
 8003822:	4628      	mov	r0, r5
 8003824:	bd70      	pop	{r4, r5, r6, pc}
 8003826:	bf00      	nop
 8003828:	40010c00 	andmi	r0, r1, r0, lsl #24
 800382c:	40013800 	andmi	r3, r1, r0, lsl #16

08003830 <dxl_hal_rx>:
uint8 dxl_hal_rx(uint8 *pPacket, uint8 numPacket) {
 8003830:	b570      	push	{r4, r5, r6, lr}
	uint8 i;
	for (i = 0; i < numPacket; i++) {
 8003832:	2200      	movs	r2, #0
			// RX Enable
		GPIO_SetBits(PORT_ENABLE_RXD, PIN_ENABLE_RXD);
	}
	return numPacket;
}
uint8 dxl_hal_rx(uint8 *pPacket, uint8 numPacket) {
 8003834:	4605      	mov	r5, r0
 8003836:	b2d0      	uxtb	r0, r2
	uint8 i;
	for (i = 0; i < numPacket; i++) {
 8003838:	4288      	cmp	r0, r1
 800383a:	d21d      	bcs.n	8003878 <dxl_hal_rx+0x48>
		if (gbDxlRead != gbDxlWrite) {
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <dxl_hal_rx+0x4c>)
 800383e:	f8b3 6144 	ldrh.w	r6, [r3, #324]	; 0x144
 8003842:	f8b3 4146 	ldrh.w	r4, [r3, #326]	; 0x146
 8003846:	b2b6      	uxth	r6, r6
 8003848:	b2a4      	uxth	r4, r4
 800384a:	42a6      	cmp	r6, r4
 800384c:	d015      	beq.n	800387a <dxl_hal_rx+0x4a>
			pPacket[i] = gbpDxlBuffer[gbDxlRead++];
 800384e:	f8b3 0144 	ldrh.w	r0, [r3, #324]	; 0x144
 8003852:	b284      	uxth	r4, r0
 8003854:	1918      	adds	r0, r3, r4
 8003856:	3401      	adds	r4, #1
 8003858:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800385c:	b2a4      	uxth	r4, r4
 800385e:	f8a3 4144 	strh.w	r4, [r3, #324]	; 0x144
 8003862:	54a8      	strb	r0, [r5, r2]
			if (gbDxlRead > (DXL_BUFFER_LENGTH - 1))
 8003864:	f8b3 0144 	ldrh.w	r0, [r3, #324]	; 0x144
 8003868:	b280      	uxth	r0, r0
 800386a:	28ff      	cmp	r0, #255	; 0xff
 800386c:	d902      	bls.n	8003874 <dxl_hal_rx+0x44>
				gbDxlRead = 0;
 800386e:	2000      	movs	r0, #0
 8003870:	f8a3 0144 	strh.w	r0, [r3, #324]	; 0x144
 8003874:	3201      	adds	r2, #1
 8003876:	e7de      	b.n	8003836 <dxl_hal_rx+0x6>
	}
	return numPacket;
}
uint8 dxl_hal_rx(uint8 *pPacket, uint8 numPacket) {
	uint8 i;
	for (i = 0; i < numPacket; i++) {
 8003878:	4608      	mov	r0, r1
				gbDxlRead = 0;
		} else
			return i;
	}
	return numPacket;
}
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	200000d4 	ldrdcs	r0, [r0], -r4

08003880 <dxl_hal_set_timeout>:
void dxl_hal_set_timeout(uint8 NumRcvByte) {
	start_timeout_dxl(NumRcvByte * 30);
 8003880:	231e      	movs	r3, #30
 8003882:	4358      	muls	r0, r3
 8003884:	f7ff bf30 	b.w	80036e8 <start_timeout_dxl>

08003888 <dxl_hal_timeout>:
}
uint8 dxl_hal_timeout(void) {
	if (glDxlTimeoutCounter == 0)
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <dxl_hal_timeout+0x10>)
 800388a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
		return 1;
	else
		return 0;
}
 800388c:	f1d0 0001 	rsbs	r0, r0, #1
 8003890:	bf38      	it	cc
 8003892:	2000      	movcc	r0, #0
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	200000d4 	ldrdcs	r0, [r0], -r4

0800389c <RxD_DXL_Interrupt>:
void RxD_DXL_Interrupt(void) {
 800389c:	b508      	push	{r3, lr}
	uint8 temp;
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
 800389e:	481c      	ldr	r0, [pc, #112]	; (8003910 <RxD_DXL_Interrupt+0x74>)
 80038a0:	f240 5125 	movw	r1, #1317	; 0x525
 80038a4:	f002 fe66 	bl	8006574 <USART_GetITStatus>
 80038a8:	b380      	cbz	r0, 800390c <RxD_DXL_Interrupt+0x70>
		temp = USART_ReceiveData(USART1);
 80038aa:	4819      	ldr	r0, [pc, #100]	; (8003910 <RxD_DXL_Interrupt+0x74>)
 80038ac:	f002 fe01 	bl	80064b2 <USART_ReceiveData>
	} else
		return;
	if (gbDxlWrite < (DXL_BUFFER_LENGTH - 1)) {
 80038b0:	4b18      	ldr	r3, [pc, #96]	; (8003914 <RxD_DXL_Interrupt+0x78>)
		return 0;
}
void RxD_DXL_Interrupt(void) {
	uint8 temp;
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
		temp = USART_ReceiveData(USART1);
 80038b2:	b2c0      	uxtb	r0, r0
	} else
		return;
	if (gbDxlWrite < (DXL_BUFFER_LENGTH - 1)) {
 80038b4:	f8b3 2146 	ldrh.w	r2, [r3, #326]	; 0x146
 80038b8:	b291      	uxth	r1, r2
		gbpDxlBuffer[gbDxlWrite++] = temp;
 80038ba:	f8b3 2146 	ldrh.w	r2, [r3, #326]	; 0x146
	uint8 temp;
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
		temp = USART_ReceiveData(USART1);
	} else
		return;
	if (gbDxlWrite < (DXL_BUFFER_LENGTH - 1)) {
 80038be:	29fe      	cmp	r1, #254	; 0xfe
		gbpDxlBuffer[gbDxlWrite++] = temp;
 80038c0:	b292      	uxth	r2, r2
	uint8 temp;
	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
		temp = USART_ReceiveData(USART1);
	} else
		return;
	if (gbDxlWrite < (DXL_BUFFER_LENGTH - 1)) {
 80038c2:	d805      	bhi.n	80038d0 <RxD_DXL_Interrupt+0x34>
		gbpDxlBuffer[gbDxlWrite++] = temp;
 80038c4:	1899      	adds	r1, r3, r2
 80038c6:	3201      	adds	r2, #1
 80038c8:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
 80038cc:	b290      	uxth	r0, r2
 80038ce:	e003      	b.n	80038d8 <RxD_DXL_Interrupt+0x3c>
	} else {
		gbpDxlBuffer[gbDxlWrite] = temp;
 80038d0:	1899      	adds	r1, r3, r2
 80038d2:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
		gbDxlWrite = 0;
 80038d6:	2000      	movs	r0, #0
 80038d8:	f8a3 0146 	strh.w	r0, [r3, #326]	; 0x146
	}
	if (gbDxlRead == gbDxlWrite)
 80038dc:	f8b3 1144 	ldrh.w	r1, [r3, #324]	; 0x144
 80038e0:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
 80038e4:	b28a      	uxth	r2, r1
 80038e6:	b299      	uxth	r1, r3
 80038e8:	428a      	cmp	r2, r1
 80038ea:	480a      	ldr	r0, [pc, #40]	; (8003914 <RxD_DXL_Interrupt+0x78>)
 80038ec:	d105      	bne.n	80038fa <RxD_DXL_Interrupt+0x5e>
		gbDxlRead++;
 80038ee:	f8b0 2144 	ldrh.w	r2, [r0, #324]	; 0x144
 80038f2:	1c53      	adds	r3, r2, #1
 80038f4:	b299      	uxth	r1, r3
 80038f6:	f8a0 1144 	strh.w	r1, [r0, #324]	; 0x144
	if (gbDxlRead > (DXL_BUFFER_LENGTH - 1))
 80038fa:	4806      	ldr	r0, [pc, #24]	; (8003914 <RxD_DXL_Interrupt+0x78>)
 80038fc:	f8b0 2144 	ldrh.w	r2, [r0, #324]	; 0x144
 8003900:	b293      	uxth	r3, r2
 8003902:	2bff      	cmp	r3, #255	; 0xff
 8003904:	d902      	bls.n	800390c <RxD_DXL_Interrupt+0x70>
		gbDxlRead = 0;
 8003906:	2100      	movs	r1, #0
 8003908:	f8a0 1144 	strh.w	r1, [r0, #324]	; 0x144
 800390c:	bd08      	pop	{r3, pc}
 800390e:	bf00      	nop
 8003910:	40013800 	andmi	r3, r1, r0, lsl #16
 8003914:	200000d4 	ldrdcs	r0, [r0], -r4

08003918 <dxl_initialize>:


	// Dynamixel SDK platform independent source


uint8 dxl_initialize(uint8 baudrate) {
 8003918:	b508      	push	{r3, lr}
	if (dxl_hal_open((2000000 / (baudrate + 1))) == 0)
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <dxl_initialize+0x24>)
 800391c:	3001      	adds	r0, #1
 800391e:	fb93 f0f0 	sdiv	r0, r3, r0
 8003922:	f7ff ff15 	bl	8003750 <dxl_hal_open>
 8003926:	b140      	cbz	r0, 800393a <dxl_initialize+0x22>
		return 0;
	gbCommStatus = COMM_RXSUCCESS;
 8003928:	4905      	ldr	r1, [pc, #20]	; (8003940 <dxl_initialize+0x28>)
	giBusUsing = 0;
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <dxl_initialize+0x2c>)
 800392c:	2000      	movs	r0, #0


uint8 dxl_initialize(uint8 baudrate) {
	if (dxl_hal_open((2000000 / (baudrate + 1))) == 0)
		return 0;
	gbCommStatus = COMM_RXSUCCESS;
 800392e:	2202      	movs	r2, #2
 8003930:	f8a1 20c8 	strh.w	r2, [r1, #200]	; 0xc8
	giBusUsing = 0;
 8003934:	f883 0148 	strb.w	r0, [r3, #328]	; 0x148
	return 1;
 8003938:	2001      	movs	r0, #1
}
 800393a:	bd08      	pop	{r3, pc}
 800393c:	001e8480 	andseq	r8, lr, r0, lsl #9
 8003940:	20000000 	andcs	r0, r0, r0
 8003944:	200000d4 	ldrdcs	r0, [r0], -r4

08003948 <dxl_terminate>:
void dxl_terminate() {
	dxl_hal_close();
 8003948:	f7ff bf30 	b.w	80037ac <dxl_hal_close>

0800394c <dxl_tx_packet>:
}
void dxl_tx_packet() {
 800394c:	b538      	push	{r3, r4, r5, lr}
	uint8 i;
	uint8 TxNumByte, RealTxNumByte;
	uint8 checksum = 0;
	if (giBusUsing == 1)
 800394e:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <dxl_tx_packet+0xf0>)
 8003950:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 8003954:	2a01      	cmp	r2, #1
 8003956:	d070      	beq.n	8003a3a <dxl_tx_packet+0xee>
		return;
	giBusUsing = 1;
	gbCommStatus = 0;
 8003958:	4a39      	ldr	r2, [pc, #228]	; (8003a40 <dxl_tx_packet+0xf4>)
 800395a:	2100      	movs	r1, #0
	uint8 i;
	uint8 TxNumByte, RealTxNumByte;
	uint8 checksum = 0;
	if (giBusUsing == 1)
		return;
	giBusUsing = 1;
 800395c:	2001      	movs	r0, #1
 800395e:	f883 0148 	strb.w	r0, [r3, #328]	; 0x148
	gbCommStatus = 0;
 8003962:	460c      	mov	r4, r1
 8003964:	f8a2 10c8 	strh.w	r1, [r2, #200]	; 0xc8
	if (gbInstructionPacket[DXL_PKT_LEN] > (DXL_MAXNUM_TXPARAM + 2)) {
 8003968:	f893 114c 	ldrb.w	r1, [r3, #332]	; 0x14c
 800396c:	2998      	cmp	r1, #152	; 0x98
 800396e:	d905      	bls.n	800397c <dxl_tx_packet+0x30>
		gbCommStatus |= COMM_TXERROR;
 8003970:	f8b2 00c8 	ldrh.w	r0, [r2, #200]	; 0xc8
 8003974:	b281      	uxth	r1, r0
 8003976:	f041 0110 	orr.w	r1, r1, #16
 800397a:	e00d      	b.n	8003998 <dxl_tx_packet+0x4c>
		giBusUsing = 0;
		return;
	}
	if (   (gbInstructionPacket[DXL_PKT_INST] != INST_PING)
 800397c:	f893 014d 	ldrb.w	r0, [r3, #333]	; 0x14d
 8003980:	1e45      	subs	r5, r0, #1
 8003982:	2d05      	cmp	r5, #5
 8003984:	d90d      	bls.n	80039a2 <dxl_tx_packet+0x56>
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_READ_DATA)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_WRITE_DATA)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_REG_WRITE)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_ACTION)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_RESET)
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_SYNC_WRITE)
 8003986:	2883      	cmp	r0, #131	; 0x83
 8003988:	d00b      	beq.n	80039a2 <dxl_tx_packet+0x56>
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_CAP_REGION) ) {
 800398a:	280e      	cmp	r0, #14
 800398c:	d009      	beq.n	80039a2 <dxl_tx_packet+0x56>
		gbCommStatus |= COMM_BAD_INST;
 800398e:	f8b2 10c8 	ldrh.w	r1, [r2, #200]	; 0xc8
 8003992:	b288      	uxth	r0, r1
 8003994:	f040 0120 	orr.w	r1, r0, #32
 8003998:	f8a2 10c8 	strh.w	r1, [r2, #200]	; 0xc8
		giBusUsing = 0;
 800399c:	f883 4148 	strb.w	r4, [r3, #328]	; 0x148
		return;
 80039a0:	bd38      	pop	{r3, r4, r5, pc}
	}
	gbInstructionPacket[0] = 0xFF;
 80039a2:	4c26      	ldr	r4, [pc, #152]	; (8003a3c <dxl_tx_packet+0xf0>)
 80039a4:	25ff      	movs	r5, #255	; 0xff
	dxl_hal_close();
}
void dxl_tx_packet() {
	uint8 i;
	uint8 TxNumByte, RealTxNumByte;
	uint8 checksum = 0;
 80039a6:	2300      	movs	r3, #0
			&& (gbInstructionPacket[DXL_PKT_INST] != INST_CAP_REGION) ) {
		gbCommStatus |= COMM_BAD_INST;
		giBusUsing = 0;
		return;
	}
	gbInstructionPacket[0] = 0xFF;
 80039a8:	f884 5149 	strb.w	r5, [r4, #329]	; 0x149
	gbInstructionPacket[1] = 0xFF;
 80039ac:	f884 514a 	strb.w	r5, [r4, #330]	; 0x14a
	for (i = 0; i < (gbInstructionPacket[DXL_PKT_LEN] + 1); i++)
 80039b0:	461a      	mov	r2, r3
 80039b2:	4291      	cmp	r1, r2
 80039b4:	4821      	ldr	r0, [pc, #132]	; (8003a3c <dxl_tx_packet+0xf0>)
 80039b6:	db07      	blt.n	80039c8 <dxl_tx_packet+0x7c>
		checksum += gbInstructionPacket[i + 2];
 80039b8:	1884      	adds	r4, r0, r2
 80039ba:	f894 514b 	ldrb.w	r5, [r4, #331]	; 0x14b
		giBusUsing = 0;
		return;
	}
	gbInstructionPacket[0] = 0xFF;
	gbInstructionPacket[1] = 0xFF;
	for (i = 0; i < (gbInstructionPacket[DXL_PKT_LEN] + 1); i++)
 80039be:	3201      	adds	r2, #1
		checksum += gbInstructionPacket[i + 2];
 80039c0:	1958      	adds	r0, r3, r5
 80039c2:	b2c3      	uxtb	r3, r0
		giBusUsing = 0;
		return;
	}
	gbInstructionPacket[0] = 0xFF;
	gbInstructionPacket[1] = 0xFF;
	for (i = 0; i < (gbInstructionPacket[DXL_PKT_LEN] + 1); i++)
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	e7f4      	b.n	80039b2 <dxl_tx_packet+0x66>
		checksum += gbInstructionPacket[i + 2];
	gbInstructionPacket[gbInstructionPacket[DXL_PKT_LEN] + 3] = ~checksum;
 80039c8:	1842      	adds	r2, r0, r1
	if (gbCommStatus & (COMM_RXFAIL | COMM_RXTIMEOUT | COMM_RXCHECKSUM | COMM_RXLENGTH | COMM_BAD_INST | COMM_BAD_ID)) {
 80039ca:	491d      	ldr	r1, [pc, #116]	; (8003a40 <dxl_tx_packet+0xf4>)
	}
	gbInstructionPacket[0] = 0xFF;
	gbInstructionPacket[1] = 0xFF;
	for (i = 0; i < (gbInstructionPacket[DXL_PKT_LEN] + 1); i++)
		checksum += gbInstructionPacket[i + 2];
	gbInstructionPacket[gbInstructionPacket[DXL_PKT_LEN] + 3] = ~checksum;
 80039cc:	43db      	mvns	r3, r3
	if (gbCommStatus & (COMM_RXFAIL | COMM_RXTIMEOUT | COMM_RXCHECKSUM | COMM_RXLENGTH | COMM_BAD_INST | COMM_BAD_ID)) {
 80039ce:	f8b1 40c8 	ldrh.w	r4, [r1, #200]	; 0xc8
	}
	gbInstructionPacket[0] = 0xFF;
	gbInstructionPacket[1] = 0xFF;
	for (i = 0; i < (gbInstructionPacket[DXL_PKT_LEN] + 1); i++)
		checksum += gbInstructionPacket[i + 2];
	gbInstructionPacket[gbInstructionPacket[DXL_PKT_LEN] + 3] = ~checksum;
 80039d2:	f882 314c 	strb.w	r3, [r2, #332]	; 0x14c
	if (gbCommStatus & (COMM_RXFAIL | COMM_RXTIMEOUT | COMM_RXCHECKSUM | COMM_RXLENGTH | COMM_BAD_INST | COMM_BAD_ID)) {
 80039d6:	f424 7565 	bic.w	r5, r4, #916	; 0x394
 80039da:	f025 0003 	bic.w	r0, r5, #3
 80039de:	04c2      	lsls	r2, r0, #19
 80039e0:	0cd3      	lsrs	r3, r2, #19
 80039e2:	b10b      	cbz	r3, 80039e8 <dxl_tx_packet+0x9c>
		dxl_hal_clear();
 80039e4:	f7ff fee8 	bl	80037b8 <dxl_hal_clear>
	}
	TxNumByte = gbInstructionPacket[DXL_PKT_LEN] + 4;
 80039e8:	4c14      	ldr	r4, [pc, #80]	; (8003a3c <dxl_tx_packet+0xf0>)
	RealTxNumByte = dxl_hal_tx((uint8*)gbInstructionPacket, TxNumByte);
 80039ea:	4816      	ldr	r0, [pc, #88]	; (8003a44 <dxl_tx_packet+0xf8>)
		checksum += gbInstructionPacket[i + 2];
	gbInstructionPacket[gbInstructionPacket[DXL_PKT_LEN] + 3] = ~checksum;
	if (gbCommStatus & (COMM_RXFAIL | COMM_RXTIMEOUT | COMM_RXCHECKSUM | COMM_RXLENGTH | COMM_BAD_INST | COMM_BAD_ID)) {
		dxl_hal_clear();
	}
	TxNumByte = gbInstructionPacket[DXL_PKT_LEN] + 4;
 80039ec:	f894 114c 	ldrb.w	r1, [r4, #332]	; 0x14c
 80039f0:	1d0d      	adds	r5, r1, #4
 80039f2:	b2ed      	uxtb	r5, r5
	RealTxNumByte = dxl_hal_tx((uint8*)gbInstructionPacket, TxNumByte);
 80039f4:	4629      	mov	r1, r5
 80039f6:	f7ff fef1 	bl	80037dc <dxl_hal_tx>
	if (TxNumByte != RealTxNumByte) {
 80039fa:	4285      	cmp	r5, r0
 80039fc:	d00b      	beq.n	8003a16 <dxl_tx_packet+0xca>
		gbCommStatus |= COMM_TXFAIL;
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <dxl_tx_packet+0xf4>)
 8003a00:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8003a04:	b291      	uxth	r1, r2
 8003a06:	f041 0004 	orr.w	r0, r1, #4
 8003a0a:	f8a3 00c8 	strh.w	r0, [r3, #200]	; 0xc8
		giBusUsing = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
		return;
 8003a14:	bd38      	pop	{r3, r4, r5, pc}
	}
	if (gbInstructionPacket[DXL_PKT_INST] == INST_READ_DATA)
 8003a16:	f894 014d 	ldrb.w	r0, [r4, #333]	; 0x14d
 8003a1a:	2802      	cmp	r0, #2
 8003a1c:	d106      	bne.n	8003a2c <dxl_tx_packet+0xe0>
		dxl_hal_set_timeout(gbInstructionPacket[DXL_PKT_PARA + 1] + 6);
 8003a1e:	f894 214f 	ldrb.w	r2, [r4, #335]	; 0x14f
 8003a22:	1d93      	adds	r3, r2, #6
 8003a24:	b2d8      	uxtb	r0, r3
 8003a26:	f7ff ff2b 	bl	8003880 <dxl_hal_set_timeout>
 8003a2a:	e002      	b.n	8003a32 <dxl_tx_packet+0xe6>
			return i;
	}
	return numPacket;
}
void dxl_hal_set_timeout(uint8 NumRcvByte) {
	start_timeout_dxl(NumRcvByte * 30);
 8003a2c:	20b4      	movs	r0, #180	; 0xb4
 8003a2e:	f7ff fe5b 	bl	80036e8 <start_timeout_dxl>
	}
	if (gbInstructionPacket[DXL_PKT_INST] == INST_READ_DATA)
		dxl_hal_set_timeout(gbInstructionPacket[DXL_PKT_PARA + 1] + 6);
	else
		dxl_hal_set_timeout(6);
	gbCommStatus = COMM_TXSUCCESS;
 8003a32:	4803      	ldr	r0, [pc, #12]	; (8003a40 <dxl_tx_packet+0xf4>)
 8003a34:	2101      	movs	r1, #1
 8003a36:	f8a0 10c8 	strh.w	r1, [r0, #200]	; 0xc8
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
 8003a3c:	200000d4 	ldrdcs	r0, [r0], -r4
 8003a40:	20000000 	andcs	r0, r0, r0
 8003a44:	2000021d 	andcs	r0, r0, sp, lsl r2

08003a48 <dxl_rx_packet>:
}
void dxl_rx_packet() {
 8003a48:	b570      	push	{r4, r5, r6, lr}
	uint8 i, j, nRead;
	uint8 checksum = 0;
	if (giBusUsing == 0) return;
 8003a4a:	4b5c      	ldr	r3, [pc, #368]	; (8003bbc <dxl_rx_packet+0x174>)
 8003a4c:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 8003a50:	2a00      	cmp	r2, #0
 8003a52:	f000 80b2 	beq.w	8003bba <dxl_rx_packet+0x172>
	giBusUsing = 1;
	if (gbInstructionPacket[0x02] == 254) {
 8003a56:	f893 114b 	ldrb.w	r1, [r3, #331]	; 0x14b
}
void dxl_rx_packet() {
	uint8 i, j, nRead;
	uint8 checksum = 0;
	if (giBusUsing == 0) return;
	giBusUsing = 1;
 8003a5a:	2001      	movs	r0, #1
	if (gbInstructionPacket[0x02] == 254) {
 8003a5c:	29fe      	cmp	r1, #254	; 0xfe
}
void dxl_rx_packet() {
	uint8 i, j, nRead;
	uint8 checksum = 0;
	if (giBusUsing == 0) return;
	giBusUsing = 1;
 8003a5e:	f883 0148 	strb.w	r0, [r3, #328]	; 0x148
 8003a62:	4a57      	ldr	r2, [pc, #348]	; (8003bc0 <dxl_rx_packet+0x178>)
	if (gbInstructionPacket[0x02] == 254) {
 8003a64:	d104      	bne.n	8003a70 <dxl_rx_packet+0x28>
		gbCommStatus = COMM_RXSUCCESS;
 8003a66:	2102      	movs	r1, #2
 8003a68:	f8a2 10c8 	strh.w	r1, [r2, #200]	; 0xc8
		giBusUsing = 0;
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	e0a2      	b.n	8003bb6 <dxl_rx_packet+0x16e>
		return;
	}
	if (gbCommStatus & COMM_TXSUCCESS) {
 8003a70:	f8b2 40c8 	ldrh.w	r4, [r2, #200]	; 0xc8
 8003a74:	07e2      	lsls	r2, r4, #31
 8003a76:	d505      	bpl.n	8003a84 <dxl_rx_packet+0x3c>
		gbRxGetLength = 0;
 8003a78:	2500      	movs	r5, #0
		gbRxPacketLength = 6;
 8003a7a:	2606      	movs	r6, #6
		gbCommStatus = COMM_RXSUCCESS;
		giBusUsing = 0;
		return;
	}
	if (gbCommStatus & COMM_TXSUCCESS) {
		gbRxGetLength = 0;
 8003a7c:	f883 51e9 	strb.w	r5, [r3, #489]	; 0x1e9
		gbRxPacketLength = 6;
 8003a80:	f883 61ea 	strb.w	r6, [r3, #490]	; 0x1ea
	}
	nRead = dxl_hal_rx((uint8*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength);
 8003a84:	4d4d      	ldr	r5, [pc, #308]	; (8003bbc <dxl_rx_packet+0x174>)
 8003a86:	484f      	ldr	r0, [pc, #316]	; (8003bc4 <dxl_rx_packet+0x17c>)
 8003a88:	f895 41e9 	ldrb.w	r4, [r5, #489]	; 0x1e9
 8003a8c:	f895 61ea 	ldrb.w	r6, [r5, #490]	; 0x1ea
 8003a90:	1900      	adds	r0, r0, r4
 8003a92:	1b33      	subs	r3, r6, r4
 8003a94:	b2d9      	uxtb	r1, r3
 8003a96:	f7ff fecb 	bl	8003830 <dxl_hal_rx>
	gbRxGetLength += nRead;
 8003a9a:	1901      	adds	r1, r0, r4
 8003a9c:	b2cc      	uxtb	r4, r1
	if (gbRxGetLength < gbRxPacketLength) {
 8003a9e:	42b4      	cmp	r4, r6
	if (gbCommStatus & COMM_TXSUCCESS) {
		gbRxGetLength = 0;
		gbRxPacketLength = 6;
	}
	nRead = dxl_hal_rx((uint8*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength);
	gbRxGetLength += nRead;
 8003aa0:	f885 41e9 	strb.w	r4, [r5, #489]	; 0x1e9
	if (gbRxGetLength < gbRxPacketLength) {
 8003aa4:	d20f      	bcs.n	8003ac6 <dxl_rx_packet+0x7e>
		if (dxl_hal_timeout() == 1) {
 8003aa6:	f7ff feef 	bl	8003888 <dxl_hal_timeout>
 8003aaa:	2801      	cmp	r0, #1
 8003aac:	d10b      	bne.n	8003ac6 <dxl_rx_packet+0x7e>
 8003aae:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <dxl_rx_packet+0x178>)
			if (gbRxGetLength == 0) gbCommStatus = COMM_RXTIMEOUT;
 8003ab0:	b914      	cbnz	r4, 8003ab8 <dxl_rx_packet+0x70>
 8003ab2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003ab6:	e001      	b.n	8003abc <dxl_rx_packet+0x74>
			else gbCommStatus = COMM_RXLENGTH;
 8003ab8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003abc:	f8a3 00c8 	strh.w	r0, [r3, #200]	; 0xc8
			giBusUsing = 0;
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <dxl_rx_packet+0x174>)
 8003ac4:	e077      	b.n	8003bb6 <dxl_rx_packet+0x16e>
			return;
		}
	}
		// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	1e62      	subs	r2, r4, #1
 8003aca:	4293      	cmp	r3, r2
 8003acc:	da09      	bge.n	8003ae2 <dxl_rx_packet+0x9a>
		if ((gbStatusPacket[i] == 0xFF) && (gbStatusPacket[i + 1] == 0xFF)) break;
 8003ace:	483b      	ldr	r0, [pc, #236]	; (8003bbc <dxl_rx_packet+0x174>)
 8003ad0:	18c1      	adds	r1, r0, r3
 8003ad2:	f891 51eb 	ldrb.w	r5, [r1, #491]	; 0x1eb
 8003ad6:	2dff      	cmp	r5, #255	; 0xff
 8003ad8:	d106      	bne.n	8003ae8 <dxl_rx_packet+0xa0>
 8003ada:	f891 11ec 	ldrb.w	r1, [r1, #492]	; 0x1ec
 8003ade:	29ff      	cmp	r1, #255	; 0xff
 8003ae0:	d102      	bne.n	8003ae8 <dxl_rx_packet+0xa0>
		else if ((i == gbRxGetLength - 2) && (gbStatusPacket[gbRxGetLength - 1] == 0xFF)) break;
	}
	if (i > 0) {
 8003ae2:	b1e3      	cbz	r3, 8003b1e <dxl_rx_packet+0xd6>
 8003ae4:	2500      	movs	r5, #0
 8003ae6:	e00a      	b.n	8003afe <dxl_rx_packet+0xb6>
		}
	}
		// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
		if ((gbStatusPacket[i] == 0xFF) && (gbStatusPacket[i + 1] == 0xFF)) break;
		else if ((i == gbRxGetLength - 2) && (gbStatusPacket[gbRxGetLength - 1] == 0xFF)) break;
 8003ae8:	1ea5      	subs	r5, r4, #2
 8003aea:	42ab      	cmp	r3, r5
 8003aec:	d104      	bne.n	8003af8 <dxl_rx_packet+0xb0>
 8003aee:	1882      	adds	r2, r0, r2
 8003af0:	f892 01eb 	ldrb.w	r0, [r2, #491]	; 0x1eb
 8003af4:	28ff      	cmp	r0, #255	; 0xff
 8003af6:	d0f4      	beq.n	8003ae2 <dxl_rx_packet+0x9a>
			giBusUsing = 0;
			return;
		}
	}
		// Find packet header
	for (i = 0; i < (gbRxGetLength - 1); i++) {
 8003af8:	3301      	adds	r3, #1
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	e7e4      	b.n	8003ac8 <dxl_rx_packet+0x80>
		if ((gbStatusPacket[i] == 0xFF) && (gbStatusPacket[i + 1] == 0xFF)) break;
		else if ((i == gbRxGetLength - 2) && (gbStatusPacket[gbRxGetLength - 1] == 0xFF)) break;
	}
	if (i > 0) {
		for (j = 0; j < (gbRxGetLength - i); j++) gbStatusPacket[j] = gbStatusPacket[j + i];
 8003afe:	1ae2      	subs	r2, r4, r3
 8003b00:	4295      	cmp	r5, r2
 8003b02:	492e      	ldr	r1, [pc, #184]	; (8003bbc <dxl_rx_packet+0x174>)
 8003b04:	da09      	bge.n	8003b1a <dxl_rx_packet+0xd2>
 8003b06:	18ca      	adds	r2, r1, r3
 8003b08:	1950      	adds	r0, r2, r5
 8003b0a:	f890 21eb 	ldrb.w	r2, [r0, #491]	; 0x1eb
 8003b0e:	1949      	adds	r1, r1, r5
 8003b10:	3501      	adds	r5, #1
 8003b12:	f881 21eb 	strb.w	r2, [r1, #491]	; 0x1eb
 8003b16:	b2ed      	uxtb	r5, r5
 8003b18:	e7f1      	b.n	8003afe <dxl_rx_packet+0xb6>
		gbRxGetLength -= i;
 8003b1a:	f881 21e9 	strb.w	r2, [r1, #489]	; 0x1e9
	}
		// Check if received full packet
	if (gbRxGetLength < gbRxPacketLength) {
 8003b1e:	4c27      	ldr	r4, [pc, #156]	; (8003bbc <dxl_rx_packet+0x174>)
 8003b20:	f894 51e9 	ldrb.w	r5, [r4, #489]	; 0x1e9
 8003b24:	42b5      	cmp	r5, r6
 8003b26:	d321      	bcc.n	8003b6c <dxl_rx_packet+0x124>
		gbCommStatus = COMM_RXWAITING;
		return;
	}
		// Check id pairing
	if (gbInstructionPacket[0x02] != gbStatusPacket[0x02]) {
 8003b28:	f894 014b 	ldrb.w	r0, [r4, #331]	; 0x14b
 8003b2c:	f894 31ed 	ldrb.w	r3, [r4, #493]	; 0x1ed
 8003b30:	4298      	cmp	r0, r3
 8003b32:	d007      	beq.n	8003b44 <dxl_rx_packet+0xfc>
		gbCommStatus = COMM_BAD_ID | COMM_RXFAIL;
 8003b34:	4b22      	ldr	r3, [pc, #136]	; (8003bc0 <dxl_rx_packet+0x178>)
 8003b36:	2048      	movs	r0, #72	; 0x48
		giBusUsing = 0;
 8003b38:	2200      	movs	r2, #0
		gbCommStatus = COMM_RXWAITING;
		return;
	}
		// Check id pairing
	if (gbInstructionPacket[0x02] != gbStatusPacket[0x02]) {
		gbCommStatus = COMM_BAD_ID | COMM_RXFAIL;
 8003b3a:	f8a3 00c8 	strh.w	r0, [r3, #200]	; 0xc8
		giBusUsing = 0;
 8003b3e:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
		return;
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
	}
	gbRxPacketLength = gbStatusPacket[0x03] + 4;
 8003b44:	f894 61ee 	ldrb.w	r6, [r4, #494]	; 0x1ee
 8003b48:	1d32      	adds	r2, r6, #4
 8003b4a:	b2d6      	uxtb	r6, r2
	if (gbRxGetLength < gbRxPacketLength) {
 8003b4c:	42b5      	cmp	r5, r6
	if (gbInstructionPacket[0x02] != gbStatusPacket[0x02]) {
		gbCommStatus = COMM_BAD_ID | COMM_RXFAIL;
		giBusUsing = 0;
		return;
	}
	gbRxPacketLength = gbStatusPacket[0x03] + 4;
 8003b4e:	f884 61ea 	strb.w	r6, [r4, #490]	; 0x1ea
	if (gbRxGetLength < gbRxPacketLength) {
 8003b52:	d211      	bcs.n	8003b78 <dxl_rx_packet+0x130>
		nRead = dxl_hal_rx((uint8*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength);
 8003b54:	481b      	ldr	r0, [pc, #108]	; (8003bc4 <dxl_rx_packet+0x17c>)
 8003b56:	1b71      	subs	r1, r6, r5
 8003b58:	1940      	adds	r0, r0, r5
 8003b5a:	b2c9      	uxtb	r1, r1
 8003b5c:	f7ff fe68 	bl	8003830 <dxl_hal_rx>
		gbRxGetLength += nRead;
 8003b60:	1945      	adds	r5, r0, r5
 8003b62:	b2ed      	uxtb	r5, r5
		if (gbRxGetLength < gbRxPacketLength) {
 8003b64:	42b5      	cmp	r5, r6
		return;
	}
	gbRxPacketLength = gbStatusPacket[0x03] + 4;
	if (gbRxGetLength < gbRxPacketLength) {
		nRead = dxl_hal_rx((uint8*)&gbStatusPacket[gbRxGetLength], gbRxPacketLength - gbRxGetLength);
		gbRxGetLength += nRead;
 8003b66:	f884 51e9 	strb.w	r5, [r4, #489]	; 0x1e9
		if (gbRxGetLength < gbRxPacketLength) {
 8003b6a:	d205      	bcs.n	8003b78 <dxl_rx_packet+0x130>
			gbCommStatus = COMM_RXWAITING;
 8003b6c:	4814      	ldr	r0, [pc, #80]	; (8003bc0 <dxl_rx_packet+0x178>)
 8003b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b72:	f8a0 10c8 	strh.w	r1, [r0, #200]	; 0xc8
			return;
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
		}
	}
		// Check checksum
	for (i = 0; i < (gbStatusPacket[0x03] + 1); i++) checksum += gbStatusPacket[i + 2];
 8003b78:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <dxl_rx_packet+0x174>)
		dxl_hal_set_timeout(6);
	gbCommStatus = COMM_TXSUCCESS;
}
void dxl_rx_packet() {
	uint8 i, j, nRead;
	uint8 checksum = 0;
 8003b7a:	2200      	movs	r2, #0
			gbCommStatus = COMM_RXWAITING;
			return;
		}
	}
		// Check checksum
	for (i = 0; i < (gbStatusPacket[0x03] + 1); i++) checksum += gbStatusPacket[i + 2];
 8003b7c:	f893 01ee 	ldrb.w	r0, [r3, #494]	; 0x1ee
 8003b80:	4611      	mov	r1, r2
 8003b82:	4288      	cmp	r0, r1
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <dxl_rx_packet+0x174>)
 8003b86:	db07      	blt.n	8003b98 <dxl_rx_packet+0x150>
 8003b88:	185b      	adds	r3, r3, r1
 8003b8a:	f893 31ed 	ldrb.w	r3, [r3, #493]	; 0x1ed
 8003b8e:	3101      	adds	r1, #1
 8003b90:	18d2      	adds	r2, r2, r3
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	b2c9      	uxtb	r1, r1
 8003b96:	e7f4      	b.n	8003b82 <dxl_rx_packet+0x13a>
	checksum = ~checksum;
	if (gbStatusPacket[gbStatusPacket[0x03] + 3] != checksum) {
 8003b98:	1818      	adds	r0, r3, r0
 8003b9a:	f890 11ee 	ldrb.w	r1, [r0, #494]	; 0x1ee
			return;
		}
	}
		// Check checksum
	for (i = 0; i < (gbStatusPacket[0x03] + 1); i++) checksum += gbStatusPacket[i + 2];
	checksum = ~checksum;
 8003b9e:	43d2      	mvns	r2, r2
	if (gbStatusPacket[gbStatusPacket[0x03] + 3] != checksum) {
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	4291      	cmp	r1, r2
 8003ba4:	4906      	ldr	r1, [pc, #24]	; (8003bc0 <dxl_rx_packet+0x178>)
		gbCommStatus = COMM_RXCHECKSUM | COMM_RXFAIL;
 8003ba6:	bf14      	ite	ne
 8003ba8:	f241 0008 	movwne	r0, #4104	; 0x1008
		giBusUsing = 0;
		return;
	}
	gbCommStatus = COMM_RXSUCCESS;
 8003bac:	2002      	moveq	r0, #2
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f8a1 00c8 	strh.w	r0, [r1, #200]	; 0xc8
	giBusUsing = 0;
 8003bb6:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	200000d4 	ldrdcs	r0, [r0], -r4
 8003bc0:	20000000 	andcs	r0, r0, r0
 8003bc4:	200002bf 			; <UNDEFINED> instruction: 0x200002bf

08003bc8 <dxl_get_result>:
	} while (gbCommStatus & COMM_RXWAITING);// || t <= 4999);
																					//if (t >= 5000) gbCommStatus = COMM_RXTIMEOUT;

}
uint16 dxl_get_result() {
	return gbCommStatus;
 8003bc8:	4b02      	ldr	r3, [pc, #8]	; (8003bd4 <dxl_get_result+0xc>)
 8003bca:	f8b3 00c8 	ldrh.w	r0, [r3, #200]	; 0xc8
}
 8003bce:	b280      	uxth	r0, r0
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000000 	andcs	r0, r0, r0

08003bd8 <dxl_set_txpacket_id>:
/**	set_tx_packet functions by Sam Watkins	**/
void dxl_set_txpacket_id(uint8 id) {
	gbInstructionPacket[DXL_PKT_ID] = id;
 8003bd8:	4b01      	ldr	r3, [pc, #4]	; (8003be0 <dxl_set_txpacket_id+0x8>)
 8003bda:	f883 014b 	strb.w	r0, [r3, #331]	; 0x14b
 8003bde:	4770      	bx	lr
 8003be0:	200000d4 	ldrdcs	r0, [r0], -r4

08003be4 <dxl_set_txpacket_instruction>:
}
void dxl_set_txpacket_instruction(uint8 instruction) {
	gbInstructionPacket[DXL_PKT_INST] = instruction;
 8003be4:	4b01      	ldr	r3, [pc, #4]	; (8003bec <dxl_set_txpacket_instruction+0x8>)
 8003be6:	f883 014d 	strb.w	r0, [r3, #333]	; 0x14d
 8003bea:	4770      	bx	lr
 8003bec:	200000d4 	ldrdcs	r0, [r0], -r4

08003bf0 <dxl_set_txpacket_parameter>:
}
void dxl_set_txpacket_parameter(uint8 index, uint8 value ) {
	gbInstructionPacket[DXL_PKT_PARA + index] = value;
 8003bf0:	4b02      	ldr	r3, [pc, #8]	; (8003bfc <dxl_set_txpacket_parameter+0xc>)
 8003bf2:	1818      	adds	r0, r3, r0
 8003bf4:	f880 114e 	strb.w	r1, [r0, #334]	; 0x14e
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	200000d4 	ldrdcs	r0, [r0], -r4

08003c00 <dxl_set_txpacket_length>:
}
void dxl_set_txpacket_length(uint8 length) {
	gbInstructionPacket[DXL_PKT_LEN] = length;
 8003c00:	4b01      	ldr	r3, [pc, #4]	; (8003c08 <dxl_set_txpacket_length+0x8>)
 8003c02:	f883 014c 	strb.w	r0, [r3, #332]	; 0x14c
 8003c06:	4770      	bx	lr
 8003c08:	200000d4 	ldrdcs	r0, [r0], -r4

08003c0c <dxl_get_rxpacket_error>:
}
/********************************************/
uint8 dxl_get_rxpacket_error(uint8 errbit) {
	if ((gbCommStatus & COMM_RXFAIL))
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <dxl_get_rxpacket_error+0x24>)
 8003c0e:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
 8003c12:	f001 0208 	and.w	r2, r1, #8
 8003c16:	b293      	uxth	r3, r2
 8003c18:	b93b      	cbnz	r3, 8003c2a <dxl_get_rxpacket_error+0x1e>
		return 0x80;
	if (gbStatusPacket[DXL_PKT_ERR]&errbit)
 8003c1a:	4906      	ldr	r1, [pc, #24]	; (8003c34 <dxl_get_rxpacket_error+0x28>)
 8003c1c:	f891 21ef 	ldrb.w	r2, [r1, #495]	; 0x1ef
 8003c20:	4210      	tst	r0, r2
		return 1;
 8003c22:	bf0c      	ite	eq
 8003c24:	2000      	moveq	r0, #0
 8003c26:	2001      	movne	r0, #1
 8003c28:	4770      	bx	lr
	gbInstructionPacket[DXL_PKT_LEN] = length;
}
/********************************************/
uint8 dxl_get_rxpacket_error(uint8 errbit) {
	if ((gbCommStatus & COMM_RXFAIL))
		return 0x80;
 8003c2a:	2080      	movs	r0, #128	; 0x80
	if (gbStatusPacket[DXL_PKT_ERR]&errbit)
		return 1;
	return 0;
}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000000 	andcs	r0, r0, r0
 8003c34:	200000d4 	ldrdcs	r0, [r0], -r4

08003c38 <dxl_get_rxpacket_length>:
uint8 dxl_get_rxpacket_length() {
	if ((gbCommStatus & COMM_RXFAIL))
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <dxl_get_rxpacket_length+0x1c>)
 8003c3a:	f8b3 00c8 	ldrh.w	r0, [r3, #200]	; 0xc8
 8003c3e:	f000 0108 	and.w	r1, r0, #8
 8003c42:	b28a      	uxth	r2, r1
 8003c44:	b91a      	cbnz	r2, 8003c4e <dxl_get_rxpacket_length+0x16>
		return 0;
	return gbStatusPacket[DXL_PKT_LEN];
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <dxl_get_rxpacket_length+0x20>)
 8003c48:	f893 01ee 	ldrb.w	r0, [r3, #494]	; 0x1ee
 8003c4c:	4770      	bx	lr
		return 1;
	return 0;
}
uint8 dxl_get_rxpacket_length() {
	if ((gbCommStatus & COMM_RXFAIL))
		return 0;
 8003c4e:	2000      	movs	r0, #0
	return gbStatusPacket[DXL_PKT_LEN];
}
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000000 	andcs	r0, r0, r0
 8003c58:	200000d4 	ldrdcs	r0, [r0], -r4

08003c5c <dxl_get_rxpacket_parameter>:
uint8 dxl_get_rxpacket_parameter(uint8 index) {
	if ((gbCommStatus & COMM_RXFAIL))
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <dxl_get_rxpacket_parameter+0x1c>)
 8003c5e:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
 8003c62:	f001 0208 	and.w	r2, r1, #8
 8003c66:	b293      	uxth	r3, r2
 8003c68:	b923      	cbnz	r3, 8003c74 <dxl_get_rxpacket_parameter+0x18>
		return 0;
	return gbStatusPacket[DXL_PKT_PARA + index];
 8003c6a:	4904      	ldr	r1, [pc, #16]	; (8003c7c <dxl_get_rxpacket_parameter+0x20>)
 8003c6c:	1808      	adds	r0, r1, r0
 8003c6e:	f890 01f0 	ldrb.w	r0, [r0, #496]	; 0x1f0
 8003c72:	4770      	bx	lr
		return 0;
	return gbStatusPacket[DXL_PKT_LEN];
}
uint8 dxl_get_rxpacket_parameter(uint8 index) {
	if ((gbCommStatus & COMM_RXFAIL))
		return 0;
 8003c74:	2000      	movs	r0, #0
	return gbStatusPacket[DXL_PKT_PARA + index];
}
 8003c76:	4770      	bx	lr
 8003c78:	20000000 	andcs	r0, r0, r0
 8003c7c:	200000d4 	ldrdcs	r0, [r0], -r4

08003c80 <dxl_makeword>:
uint16 dxl_makeword(uint8 lowbyte, uint8 highbyte) {
	uint16 word;
	word = highbyte;
	word = word << 8;
	word = word + lowbyte;
 8003c80:	eb00 2001 	add.w	r0, r0, r1, lsl #8
	return word;
}
 8003c84:	b280      	uxth	r0, r0
 8003c86:	4770      	bx	lr

08003c88 <dxl_get_lowbyte>:
 *	to turn on whenever it is being accessed, and to turn it off when the function completes.
 **/
uint8 dxl_get_lowbyte(uint16 word) {
	uint16 temp = (word & 0x00FF);
	return (uint8) temp;
}
 8003c88:	b2c0      	uxtb	r0, r0
 8003c8a:	4770      	bx	lr

08003c8c <dxl_get_highbyte>:
uint8 dxl_get_highbyte(uint16 word) {
	uint16 temp = ((word & 0xFF00) >> 8);
	return (uint8) temp;
}
 8003c8c:	0a00      	lsrs	r0, r0, #8
 8003c8e:	4770      	bx	lr

08003c90 <dxl_clear_statpkt>:
	gbInstructionPacket[DXL_PKT_LEN] = 5;
	dxl_txrx_packet();
	setDXLLEDState(id, 0);
}
void dxl_clear_statpkt(void) {
	uint8 i, max = gbStatusPacket[DXL_PKT_LEN];
 8003c90:	4a10      	ldr	r2, [pc, #64]	; (8003cd4 <dxl_clear_statpkt+0x44>)
 8003c92:	f892 11ee 	ldrb.w	r1, [r2, #494]	; 0x1ee
	if ( (max > 0) && (max < DXL_MAXNUM_RXPARAM) ) {
 8003c96:	1e4b      	subs	r3, r1, #1
 8003c98:	2b3a      	cmp	r3, #58	; 0x3a
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	d90c      	bls.n	8003cba <dxl_clear_statpkt+0x2a>
		for (i = 0; i < (max + 4); i++)
			gbStatusPacket[i] = 0;
	} else {
		for (i = 0; i < 6; i++)
			gbStatusPacket[i] = 0;
 8003ca0:	f882 31eb 	strb.w	r3, [r2, #491]	; 0x1eb
 8003ca4:	f882 31ec 	strb.w	r3, [r2, #492]	; 0x1ec
 8003ca8:	f882 31ed 	strb.w	r3, [r2, #493]	; 0x1ed
 8003cac:	f882 31ee 	strb.w	r3, [r2, #494]	; 0x1ee
 8003cb0:	f882 31ef 	strb.w	r3, [r2, #495]	; 0x1ef
 8003cb4:	f882 31f0 	strb.w	r3, [r2, #496]	; 0x1f0
 8003cb8:	4770      	bx	lr
	setDXLLEDState(id, 0);
}
void dxl_clear_statpkt(void) {
	uint8 i, max = gbStatusPacket[DXL_PKT_LEN];
	if ( (max > 0) && (max < DXL_MAXNUM_RXPARAM) ) {
		for (i = 0; i < (max + 4); i++)
 8003cba:	1cc8      	adds	r0, r1, #3
 8003cbc:	4298      	cmp	r0, r3
 8003cbe:	db07      	blt.n	8003cd0 <dxl_clear_statpkt+0x40>
			gbStatusPacket[i] = 0;
 8003cc0:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <dxl_clear_statpkt+0x44>)
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	18d2      	adds	r2, r2, r3
	setDXLLEDState(id, 0);
}
void dxl_clear_statpkt(void) {
	uint8 i, max = gbStatusPacket[DXL_PKT_LEN];
	if ( (max > 0) && (max < DXL_MAXNUM_RXPARAM) ) {
		for (i = 0; i < (max + 4); i++)
 8003cc6:	3301      	adds	r3, #1
			gbStatusPacket[i] = 0;
 8003cc8:	f882 01eb 	strb.w	r0, [r2, #491]	; 0x1eb
	setDXLLEDState(id, 0);
}
void dxl_clear_statpkt(void) {
	uint8 i, max = gbStatusPacket[DXL_PKT_LEN];
	if ( (max > 0) && (max < DXL_MAXNUM_RXPARAM) ) {
		for (i = 0; i < (max + 4); i++)
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e7f4      	b.n	8003cba <dxl_clear_statpkt+0x2a>
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	200000d4 	ldrdcs	r0, [r0], -r4

08003cd8 <dxl_txrx_packet>:
	}
	gbCommStatus = COMM_RXSUCCESS;
	giBusUsing = 0;

}
void dxl_txrx_packet() {
 8003cd8:	b508      	push	{r3, lr}
		//int t = 0;
	dxl_tx_packet();
 8003cda:	f7ff fe37 	bl	800394c <dxl_tx_packet>
	if (!(gbCommStatus & COMM_TXSUCCESS)) return;
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <dxl_txrx_packet+0x30>)
 8003ce0:	f8b3 00c8 	ldrh.w	r0, [r3, #200]	; 0xc8
 8003ce4:	07c1      	lsls	r1, r0, #31
 8003ce6:	d50e      	bpl.n	8003d06 <dxl_txrx_packet+0x2e>
	dxl_clear_statpkt();
 8003ce8:	f7ff ffd2 	bl	8003c90 <dxl_clear_statpkt>
	do {
		dxl_rx_packet();
 8003cec:	f7ff feac 	bl	8003a48 <dxl_rx_packet>
		uDelay(50);		// mDelay(.05);
 8003cf0:	2032      	movs	r0, #50	; 0x32
 8003cf2:	f7ff fb6b 	bl	80033cc <uDelay>
									//t += 5;
	} while (gbCommStatus & COMM_RXWAITING);// || t <= 4999);
 8003cf6:	4904      	ldr	r1, [pc, #16]	; (8003d08 <dxl_txrx_packet+0x30>)
 8003cf8:	f8b1 20c8 	ldrh.w	r2, [r1, #200]	; 0xc8
 8003cfc:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003d00:	b298      	uxth	r0, r3
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d1f2      	bne.n	8003cec <dxl_txrx_packet+0x14>
 8003d06:	bd08      	pop	{r3, pc}
 8003d08:	20000000 	andcs	r0, r0, r0

08003d0c <dxl_write_byte>:
	setDXLLEDState(id, 0);
	if ((gbCommStatus & COMM_RXFAIL))
		return 0;
	return gbStatusPacket[DXL_PKT_PARA];
}
int dxl_write_byte(uint8 id, uint8 address, uint8 value) {
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	4604      	mov	r4, r0
 8003d10:	460e      	mov	r6, r1
 8003d12:	4617      	mov	r7, r2
 8003d14:	f000 f86a 	bl	8003dec <setDXLLEDState.part.6>
	setDXLLEDState(id, 1);
	while(giBusUsing);
 8003d18:	4b0d      	ldr	r3, [pc, #52]	; (8003d50 <dxl_write_byte+0x44>)
 8003d1a:	f893 5148 	ldrb.w	r5, [r3, #328]	; 0x148
 8003d1e:	2d00      	cmp	r5, #0
 8003d20:	d1fa      	bne.n	8003d18 <dxl_write_byte+0xc>
	gbInstructionPacket[0x02] = id;
	gbInstructionPacket[0x04] = INST_WRITE_DATA;
 8003d22:	2203      	movs	r2, #3
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = value;
	gbInstructionPacket[0x03] = 4;
 8003d24:	2004      	movs	r0, #4
	return gbStatusPacket[DXL_PKT_PARA];
}
int dxl_write_byte(uint8 id, uint8 address, uint8 value) {
	setDXLLEDState(id, 1);
	while(giBusUsing);
	gbInstructionPacket[0x02] = id;
 8003d26:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	gbInstructionPacket[0x04] = INST_WRITE_DATA;
 8003d2a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	gbInstructionPacket[DXL_PKT_PARA] = address;
 8003d2e:	f883 614e 	strb.w	r6, [r3, #334]	; 0x14e
	gbInstructionPacket[DXL_PKT_PARA + 1] = value;
 8003d32:	f883 714f 	strb.w	r7, [r3, #335]	; 0x14f
	gbInstructionPacket[0x03] = 4;
 8003d36:	f883 014c 	strb.w	r0, [r3, #332]	; 0x14c
	dxl_txrx_packet();
 8003d3a:	f7ff ffcd 	bl	8003cd8 <dxl_txrx_packet>
	setDXLLEDState(id, 0);
 8003d3e:	4620      	mov	r0, r4
 8003d40:	4629      	mov	r1, r5
 8003d42:	f000 f857 	bl	8003df4 <setDXLLEDState>
	return gbCommStatus;
 8003d46:	4903      	ldr	r1, [pc, #12]	; (8003d54 <dxl_write_byte+0x48>)
 8003d48:	f8b1 30c8 	ldrh.w	r3, [r1, #200]	; 0xc8
}
 8003d4c:	b298      	uxth	r0, r3
 8003d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d50:	200000d4 	ldrdcs	r0, [r0], -r4
 8003d54:	20000000 	andcs	r0, r0, r0

08003d58 <switchTorque>:
	for (id = 0; id < 18; id++) {
		if (state) dxl_write_byte(id, 0x18, On);
		else dxl_write_byte(id, 0x18, Off);
	}
}
void switchTorque() {
 8003d58:	b510      	push	{r4, lr}
	if (TorqueState) {
 8003d5a:	4c09      	ldr	r4, [pc, #36]	; (8003d80 <switchTorque+0x28>)
		dxl_write_byte(254, 24, 0);
 8003d5c:	20fe      	movs	r0, #254	; 0xfe
		if (state) dxl_write_byte(id, 0x18, On);
		else dxl_write_byte(id, 0x18, Off);
	}
}
void switchTorque() {
	if (TorqueState) {
 8003d5e:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
		dxl_write_byte(254, 24, 0);
 8003d62:	2118      	movs	r1, #24
		if (state) dxl_write_byte(id, 0x18, On);
		else dxl_write_byte(id, 0x18, Off);
	}
}
void switchTorque() {
	if (TorqueState) {
 8003d64:	b10b      	cbz	r3, 8003d6a <switchTorque+0x12>
		dxl_write_byte(254, 24, 0);
 8003d66:	2200      	movs	r2, #0
 8003d68:	e000      	b.n	8003d6c <switchTorque+0x14>
	} else {
		dxl_write_byte(254, 24, 1);
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f7ff ffce 	bl	8003d0c <dxl_write_byte>
	}
	TorqueState = !TorqueState;
 8003d70:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
 8003d74:	f080 0101 	eor.w	r1, r0, #1
 8003d78:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	bf00      	nop
 8003d80:	200000d4 	ldrdcs	r0, [r0], -r4

08003d84 <setTorque>:
	for (id = 0; id < 18; id++) {
		dxl_write_byte(id, 0x18, On);
	}
	TorqueState = TRUE;
}
void setTorque(bool state) {
 8003d84:	b538      	push	{r3, r4, r5, lr}
 8003d86:	4605      	mov	r5, r0
	uint8 id = 0;
	for (id = 0; id < 18; id++) {
 8003d88:	2400      	movs	r4, #0
		if (state) dxl_write_byte(id, 0x18, On);
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	2118      	movs	r1, #24
 8003d8e:	b10d      	cbz	r5, 8003d94 <setTorque+0x10>
 8003d90:	2201      	movs	r2, #1
 8003d92:	e000      	b.n	8003d96 <setTorque+0x12>
		else dxl_write_byte(id, 0x18, Off);
 8003d94:	462a      	mov	r2, r5
	}
	TorqueState = TRUE;
}
void setTorque(bool state) {
	uint8 id = 0;
	for (id = 0; id < 18; id++) {
 8003d96:	3401      	adds	r4, #1
 8003d98:	b2e4      	uxtb	r4, r4
		if (state) dxl_write_byte(id, 0x18, On);
		else dxl_write_byte(id, 0x18, Off);
 8003d9a:	f7ff ffb7 	bl	8003d0c <dxl_write_byte>
	}
	TorqueState = TRUE;
}
void setTorque(bool state) {
	uint8 id = 0;
	for (id = 0; id < 18; id++) {
 8003d9e:	2c12      	cmp	r4, #18
 8003da0:	d1f3      	bne.n	8003d8a <setTorque+0x6>
		if (state) dxl_write_byte(id, 0x18, On);
		else dxl_write_byte(id, 0x18, Off);
	}
}
 8003da2:	bd38      	pop	{r3, r4, r5, pc}

08003da4 <setTorqueOn>:
	for (id = 0; id < 18; id++) {
		dxl_write_byte(id, 0x18, Off);
	}
	TorqueState = FALSE;
}
void setTorqueOn() {
 8003da4:	b510      	push	{r4, lr}
	uint8 id = 0;
	for (id = 0; id < 18; id++) {
 8003da6:	2400      	movs	r4, #0
		dxl_write_byte(id, 0x18, On);
 8003da8:	4620      	mov	r0, r4
	}
	TorqueState = FALSE;
}
void setTorqueOn() {
	uint8 id = 0;
	for (id = 0; id < 18; id++) {
 8003daa:	3401      	adds	r4, #1
		dxl_write_byte(id, 0x18, On);
 8003dac:	2118      	movs	r1, #24
 8003dae:	2201      	movs	r2, #1
	}
	TorqueState = FALSE;
}
void setTorqueOn() {
	uint8 id = 0;
	for (id = 0; id < 18; id++) {
 8003db0:	b2e4      	uxtb	r4, r4
		dxl_write_byte(id, 0x18, On);
 8003db2:	f7ff ffab 	bl	8003d0c <dxl_write_byte>
	}
	TorqueState = FALSE;
}
void setTorqueOn() {
	uint8 id = 0;
	for (id = 0; id < 18; id++) {
 8003db6:	2c12      	cmp	r4, #18
 8003db8:	d1f6      	bne.n	8003da8 <setTorqueOn+0x4>
		dxl_write_byte(id, 0x18, On);
	}
	TorqueState = TRUE;
 8003dba:	4b02      	ldr	r3, [pc, #8]	; (8003dc4 <setTorqueOn+0x20>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 8003dc2:	bd10      	pop	{r4, pc}
 8003dc4:	200000d4 	ldrdcs	r0, [r0], -r4

08003dc8 <setTorqueOff>:
		dxl_write_byte(id, 0x19, 0);
	}
}

/** Global DXL Functions to manipulate ALL DXLs. **/
void setTorqueOff() {
 8003dc8:	b510      	push	{r4, lr}
	uint8 id = 0;
	for (id = 0; id < 18; id++) {
 8003dca:	2400      	movs	r4, #0
		dxl_write_byte(id, 0x18, Off);
 8003dcc:	4620      	mov	r0, r4
}

/** Global DXL Functions to manipulate ALL DXLs. **/
void setTorqueOff() {
	uint8 id = 0;
	for (id = 0; id < 18; id++) {
 8003dce:	3401      	adds	r4, #1
		dxl_write_byte(id, 0x18, Off);
 8003dd0:	2118      	movs	r1, #24
 8003dd2:	2200      	movs	r2, #0
}

/** Global DXL Functions to manipulate ALL DXLs. **/
void setTorqueOff() {
	uint8 id = 0;
	for (id = 0; id < 18; id++) {
 8003dd4:	b2e4      	uxtb	r4, r4
		dxl_write_byte(id, 0x18, Off);
 8003dd6:	f7ff ff99 	bl	8003d0c <dxl_write_byte>
}

/** Global DXL Functions to manipulate ALL DXLs. **/
void setTorqueOff() {
	uint8 id = 0;
	for (id = 0; id < 18; id++) {
 8003dda:	2c12      	cmp	r4, #18
 8003ddc:	d1f6      	bne.n	8003dcc <setTorqueOff+0x4>
		dxl_write_byte(id, 0x18, Off);
	}
	TorqueState = FALSE;
 8003dde:	4b02      	ldr	r3, [pc, #8]	; (8003de8 <setTorqueOff+0x20>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 8003de6:	bd10      	pop	{r4, pc}
 8003de8:	200000d4 	ldrdcs	r0, [r0], -r4

08003dec <setDXLLEDState.part.6>:
	else
		dxl_write_byte(id, 0x18, 0);
}
void setDXLLEDState(uint8 id, bool state) {
	if (state) {
		dxl_write_byte(id, 0x19, 1);
 8003dec:	2119      	movs	r1, #25
 8003dee:	2201      	movs	r2, #1
 8003df0:	f7ff bf8c 	b.w	8003d0c <dxl_write_byte>

08003df4 <setDXLLEDState>:
		dxl_write_byte(id, 0x18, 1);
	else
		dxl_write_byte(id, 0x18, 0);
}
void setDXLLEDState(uint8 id, bool state) {
	if (state) {
 8003df4:	460a      	mov	r2, r1
 8003df6:	b109      	cbz	r1, 8003dfc <setDXLLEDState+0x8>
		dxl_write_byte(id, 0x19, 1);
	} else {
		dxl_write_byte(id, 0x19, 0);
	}
}
 8003df8:	f7ff bff8 	b.w	8003dec <setDXLLEDState.part.6>
}
void setDXLLEDState(uint8 id, bool state) {
	if (state) {
		dxl_write_byte(id, 0x19, 1);
	} else {
		dxl_write_byte(id, 0x19, 0);
 8003dfc:	2119      	movs	r1, #25
 8003dfe:	f7ff bf85 	b.w	8003d0c <dxl_write_byte>

08003e02 <setDXLTorqueState>:
		// Setting the Goal Position changes the DXL's position, but changing the current won't.
	dxl_write_word(id, 0x1E, pos);
		//dxl_write_word(id, 30, pos);
}
void setDXLTorqueState(uint8 id, bool state) {
	if (state)
 8003e02:	460a      	mov	r2, r1
		dxl_write_byte(id, 0x18, 1);
 8003e04:	2118      	movs	r1, #24
		// Setting the Goal Position changes the DXL's position, but changing the current won't.
	dxl_write_word(id, 0x1E, pos);
		//dxl_write_word(id, 30, pos);
}
void setDXLTorqueState(uint8 id, bool state) {
	if (state)
 8003e06:	b102      	cbz	r2, 8003e0a <setDXLTorqueState+0x8>
		dxl_write_byte(id, 0x18, 1);
 8003e08:	2201      	movs	r2, #1
	else
		dxl_write_byte(id, 0x18, 0);
 8003e0a:	f7ff bf7f 	b.w	8003d0c <dxl_write_byte>

08003e0e <dxl_read_word>:
	gbInstructionPacket[0x03] = 4;
	dxl_txrx_packet();
	setDXLLEDState(id, 0);
	return gbCommStatus;
}
uint16 dxl_read_word(uint8 id, uint8 address) {
 8003e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e10:	4606      	mov	r6, r0
 8003e12:	460f      	mov	r7, r1
 8003e14:	f7ff ffea 	bl	8003dec <setDXLLEDState.part.6>
	setDXLLEDState(id, 1);
	while (giBusUsing);
 8003e18:	4c13      	ldr	r4, [pc, #76]	; (8003e68 <dxl_read_word+0x5a>)
 8003e1a:	f894 5148 	ldrb.w	r5, [r4, #328]	; 0x148
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	d1fa      	bne.n	8003e18 <dxl_read_word+0xa>
	gbInstructionPacket[DXL_PKT_ID] = id;
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
 8003e22:	2302      	movs	r3, #2
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = 2;
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 8003e24:	2004      	movs	r0, #4
}
uint16 dxl_read_word(uint8 id, uint8 address) {
	setDXLLEDState(id, 1);
	while (giBusUsing);
	gbInstructionPacket[DXL_PKT_ID] = id;
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
 8003e26:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = 2;
 8003e2a:	f884 314f 	strb.w	r3, [r4, #335]	; 0x14f
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 8003e2e:	f884 014c 	strb.w	r0, [r4, #332]	; 0x14c
	return gbCommStatus;
}
uint16 dxl_read_word(uint8 id, uint8 address) {
	setDXLLEDState(id, 1);
	while (giBusUsing);
	gbInstructionPacket[DXL_PKT_ID] = id;
 8003e32:	f884 614b 	strb.w	r6, [r4, #331]	; 0x14b
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
 8003e36:	f884 714e 	strb.w	r7, [r4, #334]	; 0x14e
	gbInstructionPacket[DXL_PKT_PARA + 1] = 2;
	gbInstructionPacket[DXL_PKT_LEN] = 4;
	dxl_txrx_packet();
 8003e3a:	f7ff ff4d 	bl	8003cd8 <dxl_txrx_packet>
	setDXLLEDState(id, 0);
 8003e3e:	4630      	mov	r0, r6
 8003e40:	4629      	mov	r1, r5
 8003e42:	f7ff ffd7 	bl	8003df4 <setDXLLEDState>
	if ((gbCommStatus & COMM_RXFAIL))
 8003e46:	4909      	ldr	r1, [pc, #36]	; (8003e6c <dxl_read_word+0x5e>)
 8003e48:	f8b1 20c8 	ldrh.w	r2, [r1, #200]	; 0xc8
 8003e4c:	f002 0308 	and.w	r3, r2, #8
 8003e50:	b298      	uxth	r0, r3
 8003e52:	b938      	cbnz	r0, 8003e64 <dxl_read_word+0x56>
		return 0;
	return gbStatusPacket[DXL_PKT_PARA + index];
}
uint16 dxl_makeword(uint8 lowbyte, uint8 highbyte) {
	uint16 word;
	word = highbyte;
 8003e54:	f894 11f1 	ldrb.w	r1, [r4, #497]	; 0x1f1
	word = word << 8;
	word = word + lowbyte;
 8003e58:	f894 21f0 	ldrb.w	r2, [r4, #496]	; 0x1f0
 8003e5c:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 8003e60:	b298      	uxth	r0, r3
 8003e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gbInstructionPacket[DXL_PKT_PARA + 1] = 2;
	gbInstructionPacket[DXL_PKT_LEN] = 4;
	dxl_txrx_packet();
	setDXLLEDState(id, 0);
	if ((gbCommStatus & COMM_RXFAIL))
		return 0;
 8003e64:	4628      	mov	r0, r5
	return dxl_makeword(gbStatusPacket[DXL_PKT_PARA], gbStatusPacket[DXL_PKT_PARA + 1]);
}
 8003e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e68:	200000d4 	ldrdcs	r0, [r0], -r4
 8003e6c:	20000000 	andcs	r0, r0, r0

08003e70 <dxl_read_byte>:
	dxl_txrx_packet();
	mDelay(25);															// Wait for .025s to help the system bus flush
	setDXLLEDState(id, 0);
	return dxl_get_result();
}
uint8 dxl_read_byte(uint8 id, uint8 address) {
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	4606      	mov	r6, r0
 8003e74:	460f      	mov	r7, r1
 8003e76:	f7ff ffb9 	bl	8003dec <setDXLLEDState.part.6>
	setDXLLEDState(id, 1);
	while(giBusUsing);
 8003e7a:	4c12      	ldr	r4, [pc, #72]	; (8003ec4 <dxl_read_byte+0x54>)
 8003e7c:	f894 5148 	ldrb.w	r5, [r4, #328]	; 0x148
 8003e80:	2d00      	cmp	r5, #0
 8003e82:	d1fa      	bne.n	8003e7a <dxl_read_byte+0xa>
	gbInstructionPacket[DXL_PKT_ID] = id;
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
 8003e84:	2302      	movs	r3, #2
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = 1;
 8003e86:	2001      	movs	r0, #1
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 8003e88:	2104      	movs	r1, #4
}
uint8 dxl_read_byte(uint8 id, uint8 address) {
	setDXLLEDState(id, 1);
	while(giBusUsing);
	gbInstructionPacket[DXL_PKT_ID] = id;
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
 8003e8a:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = 1;
 8003e8e:	f884 014f 	strb.w	r0, [r4, #335]	; 0x14f
	gbInstructionPacket[DXL_PKT_LEN] = 4;
 8003e92:	f884 114c 	strb.w	r1, [r4, #332]	; 0x14c
	return dxl_get_result();
}
uint8 dxl_read_byte(uint8 id, uint8 address) {
	setDXLLEDState(id, 1);
	while(giBusUsing);
	gbInstructionPacket[DXL_PKT_ID] = id;
 8003e96:	f884 614b 	strb.w	r6, [r4, #331]	; 0x14b
	gbInstructionPacket[DXL_PKT_INST] = INST_READ_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
 8003e9a:	f884 714e 	strb.w	r7, [r4, #334]	; 0x14e
	gbInstructionPacket[DXL_PKT_PARA + 1] = 1;
	gbInstructionPacket[DXL_PKT_LEN] = 4;
	dxl_txrx_packet();
 8003e9e:	f7ff ff1b 	bl	8003cd8 <dxl_txrx_packet>
	setDXLLEDState(id, 0);
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f7ff ffa5 	bl	8003df4 <setDXLLEDState>
	if ((gbCommStatus & COMM_RXFAIL))
 8003eaa:	4a07      	ldr	r2, [pc, #28]	; (8003ec8 <dxl_read_byte+0x58>)
 8003eac:	f8b2 30c8 	ldrh.w	r3, [r2, #200]	; 0xc8
 8003eb0:	f003 0008 	and.w	r0, r3, #8
 8003eb4:	b281      	uxth	r1, r0
 8003eb6:	b911      	cbnz	r1, 8003ebe <dxl_read_byte+0x4e>
		return 0;
	return gbStatusPacket[DXL_PKT_PARA];
 8003eb8:	f894 01f0 	ldrb.w	r0, [r4, #496]	; 0x1f0
 8003ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gbInstructionPacket[DXL_PKT_PARA + 1] = 1;
	gbInstructionPacket[DXL_PKT_LEN] = 4;
	dxl_txrx_packet();
	setDXLLEDState(id, 0);
	if ((gbCommStatus & COMM_RXFAIL))
		return 0;
 8003ebe:	4628      	mov	r0, r5
	return gbStatusPacket[DXL_PKT_PARA];
}
 8003ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	200000d4 	ldrdcs	r0, [r0], -r4
 8003ec8:	20000000 	andcs	r0, r0, r0

08003ecc <getDXLCurrentLoad>:
	return dxl_makeword(dxl_read_byte(id, 0x24), dxl_read_byte(id, 0x25));
}
uint16 getDXLCurrentSpeed(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x26), dxl_read_byte(id, 0x27));
}
uint16 getDXLCurrentLoad(uint8 id) {
 8003ecc:	b538      	push	{r3, r4, r5, lr}
	return dxl_makeword(dxl_read_byte(id, 0x28), dxl_read_byte(id, 0x29));
 8003ece:	2128      	movs	r1, #40	; 0x28
	return dxl_makeword(dxl_read_byte(id, 0x24), dxl_read_byte(id, 0x25));
}
uint16 getDXLCurrentSpeed(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x26), dxl_read_byte(id, 0x27));
}
uint16 getDXLCurrentLoad(uint8 id) {
 8003ed0:	4605      	mov	r5, r0
	return dxl_makeword(dxl_read_byte(id, 0x28), dxl_read_byte(id, 0x29));
 8003ed2:	f7ff ffcd 	bl	8003e70 <dxl_read_byte>
 8003ed6:	2129      	movs	r1, #41	; 0x29
 8003ed8:	4604      	mov	r4, r0
 8003eda:	4628      	mov	r0, r5
 8003edc:	f7ff ffc8 	bl	8003e70 <dxl_read_byte>
}
uint16 dxl_makeword(uint8 lowbyte, uint8 highbyte) {
	uint16 word;
	word = highbyte;
	word = word << 8;
	word = word + lowbyte;
 8003ee0:	eb04 2000 	add.w	r0, r4, r0, lsl #8
uint16 getDXLCurrentSpeed(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x26), dxl_read_byte(id, 0x27));
}
uint16 getDXLCurrentLoad(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x28), dxl_read_byte(id, 0x29));
}
 8003ee4:	b280      	uxth	r0, r0
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}

08003ee8 <getDXLCurrentSpeed>:
	return dxl_makeword(dxl_read_byte(id, 0x1E), dxl_read_byte(id, 0x1F));
}
uint16 getDXLCurrentPosition(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x24), dxl_read_byte(id, 0x25));
}
uint16 getDXLCurrentSpeed(uint8 id) {
 8003ee8:	b538      	push	{r3, r4, r5, lr}
	return dxl_makeword(dxl_read_byte(id, 0x26), dxl_read_byte(id, 0x27));
 8003eea:	2126      	movs	r1, #38	; 0x26
	return dxl_makeword(dxl_read_byte(id, 0x1E), dxl_read_byte(id, 0x1F));
}
uint16 getDXLCurrentPosition(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x24), dxl_read_byte(id, 0x25));
}
uint16 getDXLCurrentSpeed(uint8 id) {
 8003eec:	4605      	mov	r5, r0
	return dxl_makeword(dxl_read_byte(id, 0x26), dxl_read_byte(id, 0x27));
 8003eee:	f7ff ffbf 	bl	8003e70 <dxl_read_byte>
 8003ef2:	2127      	movs	r1, #39	; 0x27
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7ff ffba 	bl	8003e70 <dxl_read_byte>
}
uint16 dxl_makeword(uint8 lowbyte, uint8 highbyte) {
	uint16 word;
	word = highbyte;
	word = word << 8;
	word = word + lowbyte;
 8003efc:	eb04 2000 	add.w	r0, r4, r0, lsl #8
uint16 getDXLCurrentPosition(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x24), dxl_read_byte(id, 0x25));
}
uint16 getDXLCurrentSpeed(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x26), dxl_read_byte(id, 0x27));
}
 8003f00:	b280      	uxth	r0, r0
 8003f02:	bd38      	pop	{r3, r4, r5, pc}

08003f04 <getDXLCurrentPosition>:
	return dxl_makeword(dxl_read_byte(id, 0x00), dxl_read_byte(id, 0x01));
}
uint16 getDXLGoalPosition(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x1E), dxl_read_byte(id, 0x1F));
}
uint16 getDXLCurrentPosition(uint8 id) {
 8003f04:	b538      	push	{r3, r4, r5, lr}
	return dxl_makeword(dxl_read_byte(id, 0x24), dxl_read_byte(id, 0x25));
 8003f06:	2124      	movs	r1, #36	; 0x24
	return dxl_makeword(dxl_read_byte(id, 0x00), dxl_read_byte(id, 0x01));
}
uint16 getDXLGoalPosition(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x1E), dxl_read_byte(id, 0x1F));
}
uint16 getDXLCurrentPosition(uint8 id) {
 8003f08:	4605      	mov	r5, r0
	return dxl_makeword(dxl_read_byte(id, 0x24), dxl_read_byte(id, 0x25));
 8003f0a:	f7ff ffb1 	bl	8003e70 <dxl_read_byte>
 8003f0e:	2125      	movs	r1, #37	; 0x25
 8003f10:	4604      	mov	r4, r0
 8003f12:	4628      	mov	r0, r5
 8003f14:	f7ff ffac 	bl	8003e70 <dxl_read_byte>
}
uint16 dxl_makeword(uint8 lowbyte, uint8 highbyte) {
	uint16 word;
	word = highbyte;
	word = word << 8;
	word = word + lowbyte;
 8003f18:	eb04 2000 	add.w	r0, r4, r0, lsl #8
uint16 getDXLGoalPosition(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x1E), dxl_read_byte(id, 0x1F));
}
uint16 getDXLCurrentPosition(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x24), dxl_read_byte(id, 0x25));
}
 8003f1c:	b280      	uxth	r0, r0
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}

08003f20 <getDXLCurrentState>:
	return dxl_read_byte(id, 0x10);
}
uint8 getDXLTorqueState(uint8 id) {
	return dxl_read_byte(id, 0x18);
}
uint8 getDXLCurrentState(uint8 id) {
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4605      	mov	r5, r0
	uint16 pos[2];
	pos[0] = getDXLCurrentPosition(id);
 8003f24:	f7ff ffee 	bl	8003f04 <getDXLCurrentPosition>
 8003f28:	4604      	mov	r4, r0
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 8003f2a:	f242 7010 	movw	r0, #10000	; 0x2710
 8003f2e:	f7ff fa4d 	bl	80033cc <uDelay>
}
uint8 getDXLCurrentState(uint8 id) {
	uint16 pos[2];
	pos[0] = getDXLCurrentPosition(id);
	mDelay(10);
	pos[1] = getDXLCurrentPosition(id);
 8003f32:	4628      	mov	r0, r5
 8003f34:	f7ff ffe6 	bl	8003f04 <getDXLCurrentPosition>
	if (pos[0] != pos[1]) {
		return 1;
	} else {
		return 0;
	}
}
 8003f38:	1a20      	subs	r0, r4, r0
 8003f3a:	bf18      	it	ne
 8003f3c:	2001      	movne	r0, #1
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}

08003f40 <getDXLGoalPosition>:
	return dxl_read_byte(id, 0x2B);
}
uint16 getDXLModel(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x00), dxl_read_byte(id, 0x01));
}
uint16 getDXLGoalPosition(uint8 id) {
 8003f40:	b538      	push	{r3, r4, r5, lr}
	return dxl_makeword(dxl_read_byte(id, 0x1E), dxl_read_byte(id, 0x1F));
 8003f42:	211e      	movs	r1, #30
	return dxl_read_byte(id, 0x2B);
}
uint16 getDXLModel(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x00), dxl_read_byte(id, 0x01));
}
uint16 getDXLGoalPosition(uint8 id) {
 8003f44:	4605      	mov	r5, r0
	return dxl_makeword(dxl_read_byte(id, 0x1E), dxl_read_byte(id, 0x1F));
 8003f46:	f7ff ff93 	bl	8003e70 <dxl_read_byte>
 8003f4a:	211f      	movs	r1, #31
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	4628      	mov	r0, r5
 8003f50:	f7ff ff8e 	bl	8003e70 <dxl_read_byte>
}
uint16 dxl_makeword(uint8 lowbyte, uint8 highbyte) {
	uint16 word;
	word = highbyte;
	word = word << 8;
	word = word + lowbyte;
 8003f54:	eb04 2000 	add.w	r0, r4, r0, lsl #8
uint16 getDXLModel(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x00), dxl_read_byte(id, 0x01));
}
uint16 getDXLGoalPosition(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x1E), dxl_read_byte(id, 0x1F));
}
 8003f58:	b280      	uxth	r0, r0
 8003f5a:	bd38      	pop	{r3, r4, r5, pc}

08003f5c <getDXLModel>:
	return dxl_read_byte(id, 0x2A);
}
uint8 getDXLCurrentTemperature(uint8 id) {
	return dxl_read_byte(id, 0x2B);
}
uint16 getDXLModel(uint8 id) {
 8003f5c:	b538      	push	{r3, r4, r5, lr}
	return dxl_makeword(dxl_read_byte(id, 0x00), dxl_read_byte(id, 0x01));
 8003f5e:	2100      	movs	r1, #0
	return dxl_read_byte(id, 0x2A);
}
uint8 getDXLCurrentTemperature(uint8 id) {
	return dxl_read_byte(id, 0x2B);
}
uint16 getDXLModel(uint8 id) {
 8003f60:	4605      	mov	r5, r0
	return dxl_makeword(dxl_read_byte(id, 0x00), dxl_read_byte(id, 0x01));
 8003f62:	f7ff ff85 	bl	8003e70 <dxl_read_byte>
 8003f66:	2101      	movs	r1, #1
 8003f68:	4604      	mov	r4, r0
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f7ff ff80 	bl	8003e70 <dxl_read_byte>
}
uint16 dxl_makeword(uint8 lowbyte, uint8 highbyte) {
	uint16 word;
	word = highbyte;
	word = word << 8;
	word = word + lowbyte;
 8003f70:	eb04 2000 	add.w	r0, r4, r0, lsl #8
uint8 getDXLCurrentTemperature(uint8 id) {
	return dxl_read_byte(id, 0x2B);
}
uint16 getDXLModel(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x00), dxl_read_byte(id, 0x01));
}
 8003f74:	b280      	uxth	r0, r0
 8003f76:	bd38      	pop	{r3, r4, r5, pc}

08003f78 <getDXLCurrentTemperature>:
}
uint8 getDXLCurrentVoltage(uint8 id) {
	return dxl_read_byte(id, 0x2A);
}
uint8 getDXLCurrentTemperature(uint8 id) {
	return dxl_read_byte(id, 0x2B);
 8003f78:	212b      	movs	r1, #43	; 0x2b
 8003f7a:	f7ff bf79 	b.w	8003e70 <dxl_read_byte>

08003f7e <getDXLCurrentVoltage>:
	} else {
		return 0;
	}
}
uint8 getDXLCurrentVoltage(uint8 id) {
	return dxl_read_byte(id, 0x2A);
 8003f7e:	212a      	movs	r1, #42	; 0x2a
 8003f80:	f7ff bf76 	b.w	8003e70 <dxl_read_byte>

08003f84 <getDXLTorqueState>:
}
uint8 getDXLStatus(uint8 id) {
	return dxl_read_byte(id, 0x10);
}
uint8 getDXLTorqueState(uint8 id) {
	return dxl_read_byte(id, 0x18);
 8003f84:	2118      	movs	r1, #24
 8003f86:	f7ff bf73 	b.w	8003e70 <dxl_read_byte>

08003f8a <getDXLStatus>:
}
uint8 getDXLBaudrate(uint8 id) {
	return dxl_read_byte(id, 0x04);
}
uint8 getDXLStatus(uint8 id) {
	return dxl_read_byte(id, 0x10);
 8003f8a:	2110      	movs	r1, #16
 8003f8c:	f7ff bf70 	b.w	8003e70 <dxl_read_byte>

08003f90 <getDXLBaudrate>:
	// 15 May 2013 Dynamixel R|W functions
uint8 getDXLFirmware(uint8 id) {
	return dxl_read_byte(id, 0x02);
}
uint8 getDXLBaudrate(uint8 id) {
	return dxl_read_byte(id, 0x04);
 8003f90:	2104      	movs	r1, #4
 8003f92:	f7ff bf6d 	b.w	8003e70 <dxl_read_byte>

08003f96 <getDXLFirmware>:
	pcu_put_byte(dxl_read_word(id,dxl_makeword(dxl_read_byte(id, 0x24), dxl_read_byte(id, 0x25))));
}

	// 15 May 2013 Dynamixel R|W functions
uint8 getDXLFirmware(uint8 id) {
	return dxl_read_byte(id, 0x02);
 8003f96:	2102      	movs	r1, #2
 8003f98:	f7ff bf6a 	b.w	8003e70 <dxl_read_byte>

08003f9c <dxl_ping>:
}
uint8 dxl_get_highbyte(uint16 word) {
	uint16 temp = ((word & 0xFF00) >> 8);
	return (uint8) temp;
}
uint16 dxl_ping(uint8 id) {
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	4605      	mov	r5, r0
	while (giBusUsing);
 8003fa0:	4c0f      	ldr	r4, [pc, #60]	; (8003fe0 <dxl_ping+0x44>)
 8003fa2:	f894 6148 	ldrb.w	r6, [r4, #328]	; 0x148
 8003fa6:	2e00      	cmp	r6, #0
 8003fa8:	d1fa      	bne.n	8003fa0 <dxl_ping+0x4>
 8003faa:	4628      	mov	r0, r5
 8003fac:	f7ff ff1e 	bl	8003dec <setDXLLEDState.part.6>
	setDXLLEDState(id, 1);
	gbInstructionPacket[0x02] = id;
	gbInstructionPacket[0x04] = 0x01;
 8003fb0:	2301      	movs	r3, #1
	gbInstructionPacket[0x03] = 2;
 8003fb2:	2002      	movs	r0, #2
}
uint16 dxl_ping(uint8 id) {
	while (giBusUsing);
	setDXLLEDState(id, 1);
	gbInstructionPacket[0x02] = id;
	gbInstructionPacket[0x04] = 0x01;
 8003fb4:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
	gbInstructionPacket[0x03] = 2;
 8003fb8:	f884 014c 	strb.w	r0, [r4, #332]	; 0x14c
	return (uint8) temp;
}
uint16 dxl_ping(uint8 id) {
	while (giBusUsing);
	setDXLLEDState(id, 1);
	gbInstructionPacket[0x02] = id;
 8003fbc:	f884 514b 	strb.w	r5, [r4, #331]	; 0x14b
	gbInstructionPacket[0x04] = 0x01;
	gbInstructionPacket[0x03] = 2;
	dxl_txrx_packet();
 8003fc0:	f7ff fe8a 	bl	8003cd8 <dxl_txrx_packet>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 8003fc4:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8003fc8:	f7ff fa00 	bl	80033cc <uDelay>
	gbInstructionPacket[0x02] = id;
	gbInstructionPacket[0x04] = 0x01;
	gbInstructionPacket[0x03] = 2;
	dxl_txrx_packet();
	mDelay(25);															// Wait for .025s to help the system bus flush
	setDXLLEDState(id, 0);
 8003fcc:	4628      	mov	r0, r5
 8003fce:	4631      	mov	r1, r6
 8003fd0:	f7ff ff10 	bl	8003df4 <setDXLLEDState>
	} while (gbCommStatus & COMM_RXWAITING);// || t <= 4999);
																					//if (t >= 5000) gbCommStatus = COMM_RXTIMEOUT;

}
uint16 dxl_get_result() {
	return gbCommStatus;
 8003fd4:	4903      	ldr	r1, [pc, #12]	; (8003fe4 <dxl_ping+0x48>)
 8003fd6:	f8b1 20c8 	ldrh.w	r2, [r1, #200]	; 0xc8
	gbInstructionPacket[0x03] = 2;
	dxl_txrx_packet();
	mDelay(25);															// Wait for .025s to help the system bus flush
	setDXLLEDState(id, 0);
	return dxl_get_result();
}
 8003fda:	b290      	uxth	r0, r2
 8003fdc:	bd70      	pop	{r4, r5, r6, pc}
 8003fde:	bf00      	nop
 8003fe0:	200000d4 	ldrdcs	r0, [r0], -r4
 8003fe4:	20000000 	andcs	r0, r0, r0

08003fe8 <dxl_capture>:
	} else {
		for (i = 0; i < 6; i++)
			gbStatusPacket[i] = 0;
	}
}
void dxl_capture(uint8 id) {
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	4604      	mov	r4, r0
 8003fec:	f7ff fefe 	bl	8003dec <setDXLLEDState.part.6>
		//    while(giBusUsing);
		//    gbInstructionPacket[DXL_PKT_ID] = id;
		//    gbInstructionPacket[DXL_PKT_INST] = INST_CAP_REGION;
		//    gbInstructionPacket[DXL_PKT_LEN] = 2;
		//    dxl_txrx_packet();
	dxl_write_byte(id, 0, 0);
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	460a      	mov	r2, r1
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	f7ff fe89 	bl	8003d0c <dxl_write_byte>
	setDXLLEDState(id, 0);
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	2100      	movs	r1, #0
}
 8003ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		//    gbInstructionPacket[DXL_PKT_ID] = id;
		//    gbInstructionPacket[DXL_PKT_INST] = INST_CAP_REGION;
		//    gbInstructionPacket[DXL_PKT_LEN] = 2;
		//    dxl_txrx_packet();
	dxl_write_byte(id, 0, 0);
	setDXLLEDState(id, 0);
 8004002:	f7ff bef7 	b.w	8003df4 <setDXLLEDState>

08004006 <pcu_hal_open>:
	//uint8 pcu_get_qstate(void);
void pcu_clear_queue(void);
void pcu_put_queue(void);
void RxD_PCU_Interrupt(void);
	//static FILE *PC_UART_Device;
uint8 pcu_hal_open(uint32 baudrate) {
 8004006:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004008:	4604      	mov	r4, r0
	USART_InitTypeDef USART_InitStructure;
	USART_StructInit(&USART_InitStructure);
 800400a:	4668      	mov	r0, sp
 800400c:	f002 f9c4 	bl	8006398 <USART_StructInit>
	USART_InitStructure.USART_BaudRate = baudrate;
 8004010:	9400      	str	r4, [sp, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_DeInit(USART3);
 8004012:	4c12      	ldr	r4, [pc, #72]	; (800405c <pcu_hal_open+0x56>)
	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004014:	200c      	movs	r0, #12
	//static FILE *PC_UART_Device;
uint8 pcu_hal_open(uint32 baudrate) {
	USART_InitTypeDef USART_InitStructure;
	USART_StructInit(&USART_InitStructure);
	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8004016:	2300      	movs	r3, #0
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No ;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004018:	f8ad 000a 	strh.w	r0, [sp, #10]
	USART_DeInit(USART3);
 800401c:	4620      	mov	r0, r4
	//static FILE *PC_UART_Device;
uint8 pcu_hal_open(uint32 baudrate) {
	USART_InitTypeDef USART_InitStructure;
	USART_StructInit(&USART_InitStructure);
	USART_InitStructure.USART_BaudRate = baudrate;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800401e:	f8ad 3004 	strh.w	r3, [sp, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8004022:	f8ad 3006 	strh.w	r3, [sp, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 8004026:	f8ad 3008 	strh.w	r3, [sp, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800402a:	f8ad 300c 	strh.w	r3, [sp, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_DeInit(USART3);
 800402e:	f002 f925 	bl	800627c <USART_DeInit>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 8004032:	f242 7010 	movw	r0, #10000	; 0x2710
 8004036:	f7ff f9c9 	bl	80033cc <uDelay>
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	USART_DeInit(USART3);
	mDelay(10);
		// Configure USART3 (PC_UART)
	USART_Init(USART3, &USART_InitStructure);
 800403a:	4620      	mov	r0, r4
 800403c:	4669      	mov	r1, sp
 800403e:	f002 f967 	bl	8006310 <USART_Init>
		// Enable USART3 (PC_UART) Receive interrupt
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 8004042:	4620      	mov	r0, r4
 8004044:	2201      	movs	r2, #1
 8004046:	f240 5125 	movw	r1, #1317	; 0x525
 800404a:	f002 f9d2 	bl	80063f2 <USART_ITConfig>
		// Enable USART3 (PC_UART)
	USART_Cmd(USART3, ENABLE);
 800404e:	4620      	mov	r0, r4
 8004050:	2101      	movs	r1, #1
 8004052:	f002 f9c2 	bl	80063da <USART_Cmd>
		//    PC_UART_Device = fdevopen( std_putchar, std_getchar );
	return 1;

}
 8004056:	2001      	movs	r0, #1
 8004058:	b004      	add	sp, #16
 800405a:	bd10      	pop	{r4, pc}
 800405c:	40004800 	andmi	r4, r0, r0, lsl #16

08004060 <pcu_hal_close>:
void pcu_hal_close(void) {
		// Disable USART3 (PC UART)
	USART_Cmd(USART3, DISABLE);
 8004060:	4801      	ldr	r0, [pc, #4]	; (8004068 <pcu_hal_close+0x8>)
 8004062:	2100      	movs	r1, #0
 8004064:	f002 b9b9 	b.w	80063da <USART_Cmd>
 8004068:	40004800 	andmi	r4, r0, r0, lsl #16

0800406c <pcu_hal_set_timeout>:
}
void pcu_hal_set_timeout(uint8 NumRcvByte) {
		// 200us; ~180 us to transmit one byte at 57600 bps
	start_timeout_pcu(NumRcvByte * 200);
 800406c:	23c8      	movs	r3, #200	; 0xc8
 800406e:	4358      	muls	r0, r3
 8004070:	f7ff bb54 	b.w	800371c <start_timeout_pcu>

08004074 <pcu_hal_timeout>:
}
uint8 pcu_hal_timeout(void) {
	if (glPcuTimeoutCounter == 0)
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <pcu_hal_timeout+0x10>)
 8004076:	6c18      	ldr	r0, [r3, #64]	; 0x40
		return 1;
	else
		return 0;
}
 8004078:	f1d0 0001 	rsbs	r0, r0, #1
 800407c:	bf38      	it	cc
 800407e:	2000      	movcc	r0, #0
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	200000d4 	ldrdcs	r0, [r0], -r4

08004088 <pcu_put_byte>:
void pcu_put_byte(uint8 bTxdData) {
 8004088:	b510      	push	{r4, lr}
 800408a:	4604      	mov	r4, r0
 800408c:	2004      	movs	r0, #4
 800408e:	f7ff f899 	bl	80031c4 <SetLED.part.0>
	SetLED(TXD, 1);
	USART_SendData(USART3, bTxdData);
 8004092:	4808      	ldr	r0, [pc, #32]	; (80040b4 <pcu_put_byte+0x2c>)
 8004094:	4621      	mov	r1, r4
 8004096:	f002 fa08 	bl	80064aa <USART_SendData>
	while (USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);
 800409a:	4806      	ldr	r0, [pc, #24]	; (80040b4 <pcu_put_byte+0x2c>)
 800409c:	2140      	movs	r1, #64	; 0x40
 800409e:	f002 fa5f 	bl	8006560 <USART_GetFlagStatus>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d0f9      	beq.n	800409a <pcu_put_byte+0x12>
	SetLED(TXD, 0);
 80040a6:	2004      	movs	r0, #4
 80040a8:	2100      	movs	r1, #0
}
 80040aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}
void pcu_put_byte(uint8 bTxdData) {
	SetLED(TXD, 1);
	USART_SendData(USART3, bTxdData);
	while (USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);
	SetLED(TXD, 0);
 80040ae:	f7ff b95f 	b.w	8003370 <SetLED>
 80040b2:	bf00      	nop
 80040b4:	40004800 	andmi	r4, r0, r0, lsl #16

080040b8 <pcu_get_queue>:
}
uint8 pcu_get_queue(void) {
	if (gbPcuWrite == gbPcuRead)
 80040b8:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <pcu_get_queue+0x3c>)
 80040ba:	f8b3 1232 	ldrh.w	r1, [r3, #562]	; 0x232
 80040be:	f8b3 2234 	ldrh.w	r2, [r3, #564]	; 0x234
 80040c2:	b288      	uxth	r0, r1
 80040c4:	b291      	uxth	r1, r2
 80040c6:	4288      	cmp	r0, r1
 80040c8:	d012      	beq.n	80040f0 <pcu_get_queue+0x38>
		return 0xFF;
	uint8 data = gbpPcuBuffer[gbPcuRead++];
 80040ca:	f8b3 0234 	ldrh.w	r0, [r3, #564]	; 0x234
 80040ce:	b282      	uxth	r2, r0
 80040d0:	1899      	adds	r1, r3, r2
 80040d2:	3201      	adds	r2, #1
 80040d4:	f891 0236 	ldrb.w	r0, [r1, #566]	; 0x236
 80040d8:	b291      	uxth	r1, r2
 80040da:	f8a3 1234 	strh.w	r1, [r3, #564]	; 0x234
	if (gbPcuRead > (PC_UART_BUFFER_LENGTH - 1))
 80040de:	f8b3 2234 	ldrh.w	r2, [r3, #564]	; 0x234
 80040e2:	b291      	uxth	r1, r2
 80040e4:	297f      	cmp	r1, #127	; 0x7f
 80040e6:	d904      	bls.n	80040f2 <pcu_get_queue+0x3a>
		gbPcuRead = 0;
 80040e8:	2200      	movs	r2, #0
 80040ea:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
 80040ee:	4770      	bx	lr
	while (USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);
	SetLED(TXD, 0);
}
uint8 pcu_get_queue(void) {
	if (gbPcuWrite == gbPcuRead)
		return 0xFF;
 80040f0:	20ff      	movs	r0, #255	; 0xff
	uint8 data = gbpPcuBuffer[gbPcuRead++];
	if (gbPcuRead > (PC_UART_BUFFER_LENGTH - 1))
		gbPcuRead = 0;
	return data;
}
 80040f2:	4770      	bx	lr
 80040f4:	200000d4 	ldrdcs	r0, [r0], -r4

080040f8 <pcu_peek_queue>:
uint8 pcu_peek_queue(void) {
	if (gbPcuWrite == gbPcuRead)
 80040f8:	4b08      	ldr	r3, [pc, #32]	; (800411c <pcu_peek_queue+0x24>)
 80040fa:	f8b3 1232 	ldrh.w	r1, [r3, #562]	; 0x232
 80040fe:	f8b3 2234 	ldrh.w	r2, [r3, #564]	; 0x234
 8004102:	b288      	uxth	r0, r1
 8004104:	b291      	uxth	r1, r2
 8004106:	4288      	cmp	r0, r1
 8004108:	d006      	beq.n	8004118 <pcu_peek_queue+0x20>
		return 0xFF;
	uint8 data = gbpPcuBuffer[gbPcuRead];
 800410a:	f8b3 0234 	ldrh.w	r0, [r3, #564]	; 0x234
 800410e:	b282      	uxth	r2, r0
 8004110:	189b      	adds	r3, r3, r2
 8004112:	f893 0236 	ldrb.w	r0, [r3, #566]	; 0x236
	return data;
 8004116:	4770      	bx	lr
		gbPcuRead = 0;
	return data;
}
uint8 pcu_peek_queue(void) {
	if (gbPcuWrite == gbPcuRead)
		return 0xFF;
 8004118:	20ff      	movs	r0, #255	; 0xff
	uint8 data = gbpPcuBuffer[gbPcuRead];
	return data;
}
 800411a:	4770      	bx	lr
 800411c:	200000d4 	ldrdcs	r0, [r0], -r4

08004120 <pcu_put_queue>:
void pcu_put_queue(void) {
 8004120:	b570      	push	{r4, r5, r6, lr}
	uint8 temp;
	if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET) {
 8004122:	4827      	ldr	r0, [pc, #156]	; (80041c0 <pcu_put_queue+0xa0>)
 8004124:	f240 5125 	movw	r1, #1317	; 0x525
 8004128:	f002 fa24 	bl	8006574 <USART_GetITStatus>
 800412c:	2800      	cmp	r0, #0
 800412e:	d046      	beq.n	80041be <pcu_put_queue+0x9e>
		temp = USART_ReceiveData(USART3);
 8004130:	4823      	ldr	r0, [pc, #140]	; (80041c0 <pcu_put_queue+0xa0>)
 8004132:	f002 f9be 	bl	80064b2 <USART_ReceiveData>
 8004136:	b2c6      	uxtb	r6, r0
		if (temp == '#')
 8004138:	2e23      	cmp	r6, #35	; 0x23
 800413a:	4d22      	ldr	r5, [pc, #136]	; (80041c4 <pcu_put_queue+0xa4>)
 800413c:	d104      	bne.n	8004148 <pcu_put_queue+0x28>
			ReBootToBootLoader++;
 800413e:	f895 02b6 	ldrb.w	r0, [r5, #694]	; 0x2b6
 8004142:	1c41      	adds	r1, r0, #1
 8004144:	b2cb      	uxtb	r3, r1
 8004146:	e000      	b.n	800414a <pcu_put_queue+0x2a>
		else
			ReBootToBootLoader = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	2005      	movs	r0, #5
 800414c:	f885 32b6 	strb.w	r3, [r5, #694]	; 0x2b6
		if (ReBootToBootLoader > 15) {
 8004150:	f895 32b6 	ldrb.w	r3, [r5, #694]	; 0x2b6
 8004154:	4c1b      	ldr	r4, [pc, #108]	; (80041c4 <pcu_put_queue+0xa4>)
 8004156:	f7ff f835 	bl	80031c4 <SetLED.part.0>
#endif
		}
	} else
		return;
	SetLED(RXD, 1);
	if (gbPcuWrite < (PC_UART_BUFFER_LENGTH - 1)) {
 800415a:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
		gbpPcuBuffer[gbPcuWrite++] = temp;
 800415e:	f8b4 0232 	ldrh.w	r0, [r4, #562]	; 0x232
#endif
		}
	} else
		return;
	SetLED(RXD, 1);
	if (gbPcuWrite < (PC_UART_BUFFER_LENGTH - 1)) {
 8004162:	b293      	uxth	r3, r2
 8004164:	2b7e      	cmp	r3, #126	; 0x7e
		gbpPcuBuffer[gbPcuWrite++] = temp;
 8004166:	b281      	uxth	r1, r0
#endif
		}
	} else
		return;
	SetLED(RXD, 1);
	if (gbPcuWrite < (PC_UART_BUFFER_LENGTH - 1)) {
 8004168:	d805      	bhi.n	8004176 <pcu_put_queue+0x56>
		gbpPcuBuffer[gbPcuWrite++] = temp;
 800416a:	1860      	adds	r0, r4, r1
 800416c:	3101      	adds	r1, #1
 800416e:	f880 6236 	strb.w	r6, [r0, #566]	; 0x236
 8004172:	b28b      	uxth	r3, r1
 8004174:	e003      	b.n	800417e <pcu_put_queue+0x5e>
	} else {
		gbpPcuBuffer[gbPcuWrite] = temp;
 8004176:	1862      	adds	r2, r4, r1
 8004178:	f882 6236 	strb.w	r6, [r2, #566]	; 0x236
		gbPcuWrite = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
	}
	if (gbPcuRead == gbPcuWrite)
 8004182:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <pcu_put_queue+0xa4>)
 8004184:	f8b3 2234 	ldrh.w	r2, [r3, #564]	; 0x234
 8004188:	f8b3 1232 	ldrh.w	r1, [r3, #562]	; 0x232
 800418c:	b290      	uxth	r0, r2
 800418e:	b28a      	uxth	r2, r1
 8004190:	4290      	cmp	r0, r2
 8004192:	d105      	bne.n	80041a0 <pcu_put_queue+0x80>
		gbPcuRead++;
 8004194:	f8b3 0234 	ldrh.w	r0, [r3, #564]	; 0x234
 8004198:	1c41      	adds	r1, r0, #1
 800419a:	b28a      	uxth	r2, r1
 800419c:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
	if (gbPcuRead > (PC_UART_BUFFER_LENGTH - 1))
 80041a0:	f8b3 3234 	ldrh.w	r3, [r3, #564]	; 0x234
 80041a4:	b298      	uxth	r0, r3
 80041a6:	287f      	cmp	r0, #127	; 0x7f
 80041a8:	d903      	bls.n	80041b2 <pcu_put_queue+0x92>
		gbPcuRead = 0;
 80041aa:	4a06      	ldr	r2, [pc, #24]	; (80041c4 <pcu_put_queue+0xa4>)
 80041ac:	2100      	movs	r1, #0
 80041ae:	f8a2 1234 	strh.w	r1, [r2, #564]	; 0x234
	SetLED(RXD, 0);
 80041b2:	2005      	movs	r0, #5
 80041b4:	2100      	movs	r1, #0
}
 80041b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	}
	if (gbPcuRead == gbPcuWrite)
		gbPcuRead++;
	if (gbPcuRead > (PC_UART_BUFFER_LENGTH - 1))
		gbPcuRead = 0;
	SetLED(RXD, 0);
 80041ba:	f7ff b8d9 	b.w	8003370 <SetLED>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	40004800 	andmi	r4, r0, r0, lsl #16
 80041c4:	200000d4 	ldrdcs	r0, [r0], -r4

080041c8 <pcu_clear_queue>:
}
void pcu_clear_queue(void) {
	gbPcuWrite = 0;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <pcu_clear_queue+0x10>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
	gbPcuRead = 0;
 80041d0:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	200000d4 	ldrdcs	r0, [r0], -r4

080041dc <pcu_get_qstate>:
}
uint8 pcu_get_qstate(void) {
 80041dc:	b508      	push	{r3, lr}
	if (gbPcuWrite == gbPcuRead) {
 80041de:	4b10      	ldr	r3, [pc, #64]	; (8004220 <pcu_get_qstate+0x44>)
 80041e0:	f8b3 1232 	ldrh.w	r1, [r3, #562]	; 0x232
 80041e4:	f8b3 2234 	ldrh.w	r2, [r3, #564]	; 0x234
 80041e8:	b288      	uxth	r0, r1
 80041ea:	b291      	uxth	r1, r2
 80041ec:	4288      	cmp	r0, r1
 80041ee:	d103      	bne.n	80041f8 <pcu_get_qstate+0x1c>
		pcu_clear_queue();
 80041f0:	f7ff ffea 	bl	80041c8 <pcu_clear_queue>
		return 0;
 80041f4:	2000      	movs	r0, #0
 80041f6:	bd08      	pop	{r3, pc}
	} else if (gbPcuRead < gbPcuWrite)
 80041f8:	f8b3 0234 	ldrh.w	r0, [r3, #564]	; 0x234
 80041fc:	f8b3 2232 	ldrh.w	r2, [r3, #562]	; 0x232
 8004200:	b281      	uxth	r1, r0
 8004202:	b292      	uxth	r2, r2
		return (uint8) (gbPcuWrite - gbPcuRead);
 8004204:	f8b3 0232 	ldrh.w	r0, [r3, #562]	; 0x232
}
uint8 pcu_get_qstate(void) {
	if (gbPcuWrite == gbPcuRead) {
		pcu_clear_queue();
		return 0;
	} else if (gbPcuRead < gbPcuWrite)
 8004208:	4291      	cmp	r1, r2
		return (uint8) (gbPcuWrite - gbPcuRead);
	else
		return (uint8) (PC_UART_BUFFER_LENGTH - (gbPcuRead - gbPcuWrite));
 800420a:	bf29      	itett	cs
 800420c:	b280      	uxthcs	r0, r0
uint8 pcu_get_qstate(void) {
	if (gbPcuWrite == gbPcuRead) {
		pcu_clear_queue();
		return 0;
	} else if (gbPcuRead < gbPcuWrite)
		return (uint8) (gbPcuWrite - gbPcuRead);
 800420e:	f8b3 3234 	ldrhcc.w	r3, [r3, #564]	; 0x234
	else
		return (uint8) (PC_UART_BUFFER_LENGTH - (gbPcuRead - gbPcuWrite));
 8004212:	f8b3 3234 	ldrhcs.w	r3, [r3, #564]	; 0x234
 8004216:	3880      	subcs	r0, #128	; 0x80
 8004218:	1ac3      	subs	r3, r0, r3
 800421a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
}
 800421e:	bd08      	pop	{r3, pc}
 8004220:	200000d4 	ldrdcs	r0, [r0], -r4

08004224 <RxD_PCU_Interrupt>:
void RxD_PCU_Interrupt(void) {
	pcu_put_queue();
 8004224:	f7ff bf7c 	b.w	8004120 <pcu_put_queue>

08004228 <pcu_initialize>:
}


	// PC UART platform independent source
uint8 pcu_initialize(uint32 baudrate) {
 8004228:	b508      	push	{r3, lr}
	if (pcu_hal_open(baudrate) == 0)
 800422a:	f7ff feec 	bl	8004006 <pcu_hal_open>
		return 0;
	return 1;
}
 800422e:	3000      	adds	r0, #0
 8004230:	bf18      	it	ne
 8004232:	2001      	movne	r0, #1
 8004234:	bd08      	pop	{r3, pc}

08004236 <pcu_terminate>:
void pcu_terminate(void) {
	pcu_hal_close();
 8004236:	f7ff bf13 	b.w	8004060 <pcu_hal_close>

0800423a <std_putchar>:
}
int std_putchar(char c) {
	if (c == '\n') {
 800423a:	280a      	cmp	r0, #10
	return 1;
}
void pcu_terminate(void) {
	pcu_hal_close();
}
int std_putchar(char c) {
 800423c:	b510      	push	{r4, lr}
 800423e:	4604      	mov	r4, r0
	if (c == '\n') {
 8004240:	d103      	bne.n	800424a <std_putchar+0x10>
		pcu_put_byte((uint8) '\r'); //0x0D
 8004242:	200d      	movs	r0, #13
 8004244:	f7ff ff20 	bl	8004088 <pcu_put_byte>
		pcu_put_byte((uint8) '\n'); //0x0A
 8004248:	4620      	mov	r0, r4
	} else {
		pcu_put_byte((uint8) c);
 800424a:	f7ff ff1d 	bl	8004088 <pcu_put_byte>
	}
	return c;
}
 800424e:	4620      	mov	r0, r4
 8004250:	bd10      	pop	{r4, pc}

08004252 <std_puts>:
int std_puts(const char *str) {
 8004252:	b538      	push	{r3, r4, r5, lr}
 8004254:	4605      	mov	r5, r0
	int n = 0;
 8004256:	2400      	movs	r4, #0
	while (str[n])
 8004258:	5d28      	ldrb	r0, [r5, r4]
 800425a:	b118      	cbz	r0, 8004264 <std_puts+0x12>
		std_putchar(str[n++]);
 800425c:	3401      	adds	r4, #1
 800425e:	f7ff ffec 	bl	800423a <std_putchar>
 8004262:	e7f9      	b.n	8004258 <std_puts+0x6>
	return n;
}
 8004264:	4620      	mov	r0, r4
 8004266:	bd38      	pop	{r3, r4, r5, pc}

08004268 <std_getchar>:
int std_getchar(void) {
 8004268:	b508      	push	{r3, lr}
		// Disable USART3 (PC UART)
	USART_Cmd(USART3, DISABLE);
}
void pcu_hal_set_timeout(uint8 NumRcvByte) {
		// 200us; ~180 us to transmit one byte at 57600 bps
	start_timeout_pcu(NumRcvByte * 200);
 800426a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800426e:	f7ff fa55 	bl	800371c <start_timeout_pcu>
	return n;
}
int std_getchar(void) {
	char c;
	pcu_hal_set_timeout(10);
	while ( (pcu_hal_timeout() == 0) && (pcu_get_qstate() == 0) );
 8004272:	f7ff feff 	bl	8004074 <pcu_hal_timeout>
 8004276:	b140      	cbz	r0, 800428a <std_getchar+0x22>
	if (pcu_get_qstate() == 0)
 8004278:	f7ff ffb0 	bl	80041dc <pcu_get_qstate>
 800427c:	b150      	cbz	r0, 8004294 <std_getchar+0x2c>
		return 0xFF;
	c = pcu_get_queue();
 800427e:	f7ff ff1b 	bl	80040b8 <pcu_get_queue>
	if (c == '\r')
		c = '\n';
 8004282:	280d      	cmp	r0, #13
 8004284:	bf08      	it	eq
 8004286:	200a      	moveq	r0, #10
	return c;
 8004288:	bd08      	pop	{r3, pc}
	return n;
}
int std_getchar(void) {
	char c;
	pcu_hal_set_timeout(10);
	while ( (pcu_hal_timeout() == 0) && (pcu_get_qstate() == 0) );
 800428a:	f7ff ffa7 	bl	80041dc <pcu_get_qstate>
 800428e:	2800      	cmp	r0, #0
 8004290:	d0ef      	beq.n	8004272 <std_getchar+0xa>
 8004292:	e7f1      	b.n	8004278 <std_getchar+0x10>
	if (pcu_get_qstate() == 0)
		return 0xFF;
 8004294:	20ff      	movs	r0, #255	; 0xff
	c = pcu_get_queue();
	if (c == '\r')
		c = '\n';
	return c;
}
 8004296:	bd08      	pop	{r3, pc}

08004298 <std_gets>:
char* std_gets(char *str) {
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	4605      	mov	r5, r0
	uint8 c, len = 0;
 800429c:	2400      	movs	r4, #0
		// Disable USART3 (PC UART)
	USART_Cmd(USART3, DISABLE);
}
void pcu_hal_set_timeout(uint8 NumRcvByte) {
		// 200us; ~180 us to transmit one byte at 57600 bps
	start_timeout_pcu(NumRcvByte * 200);
 800429e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80042a2:	f7ff fa3b 	bl	800371c <start_timeout_pcu>
}
char* std_gets(char *str) {
	uint8 c, len = 0;
	while (len < 128) {
		pcu_hal_set_timeout(10);
		while ( (pcu_hal_timeout() == 0) && (pcu_get_qstate() == 0) );
 80042a6:	f7ff fee5 	bl	8004074 <pcu_hal_timeout>
 80042aa:	b118      	cbz	r0, 80042b4 <std_gets+0x1c>
		if (pcu_get_qstate() == 0) {
 80042ac:	f7ff ff96 	bl	80041dc <pcu_get_qstate>
 80042b0:	b950      	cbnz	r0, 80042c8 <std_gets+0x30>
 80042b2:	e004      	b.n	80042be <std_gets+0x26>
}
char* std_gets(char *str) {
	uint8 c, len = 0;
	while (len < 128) {
		pcu_hal_set_timeout(10);
		while ( (pcu_hal_timeout() == 0) && (pcu_get_qstate() == 0) );
 80042b4:	f7ff ff92 	bl	80041dc <pcu_get_qstate>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d0f4      	beq.n	80042a6 <std_gets+0xe>
 80042bc:	e7f6      	b.n	80042ac <std_gets+0x14>
		if (pcu_get_qstate() == 0) {
			if (len == 0) {
 80042be:	b90c      	cbnz	r4, 80042c4 <std_gets+0x2c>
				return 0;//NULL;
 80042c0:	2500      	movs	r5, #0
 80042c2:	e011      	b.n	80042e8 <std_gets+0x50>
			} else {
				str[len] = '\0';
 80042c4:	5528      	strb	r0, [r5, r4]
				return str;
 80042c6:	e00f      	b.n	80042e8 <std_gets+0x50>
			}
		}
		c = pcu_get_queue();
 80042c8:	f7ff fef6 	bl	80040b8 <pcu_get_queue>
		if ( (c == '\n') || (c == '\0') ) {
 80042cc:	280a      	cmp	r0, #10
 80042ce:	d104      	bne.n	80042da <std_gets+0x42>
			if (len == 0) {
 80042d0:	2c00      	cmp	r4, #0
 80042d2:	d0f5      	beq.n	80042c0 <std_gets+0x28>
				return 0;//NULL;
			} else {
				str[len] = '\0';
 80042d4:	2300      	movs	r3, #0
 80042d6:	552b      	strb	r3, [r5, r4]
				return str;
 80042d8:	e006      	b.n	80042e8 <std_gets+0x50>
				str[len] = '\0';
				return str;
			}
		}
		c = pcu_get_queue();
		if ( (c == '\n') || (c == '\0') ) {
 80042da:	2800      	cmp	r0, #0
 80042dc:	d0f8      	beq.n	80042d0 <std_gets+0x38>
			} else {
				str[len] = '\0';
				return str;
			}
		} else
			str[len++] = (int8) c;
 80042de:	5528      	strb	r0, [r5, r4]
 80042e0:	3401      	adds	r4, #1
 80042e2:	b2e4      	uxtb	r4, r4
		c = '\n';
	return c;
}
char* std_gets(char *str) {
	uint8 c, len = 0;
	while (len < 128) {
 80042e4:	2c80      	cmp	r4, #128	; 0x80
 80042e6:	d1da      	bne.n	800429e <std_gets+0x6>
			}
		} else
			str[len++] = (int8) c;
	}
	return str;
}
 80042e8:	4628      	mov	r0, r5
 80042ea:	bd38      	pop	{r3, r4, r5, pc}

080042ec <PrintCommStatus>:
void PrintCommStatus(uint16 Status) {
	if (Status & COMM_TXFAIL)
 80042ec:	f000 0304 	and.w	r3, r0, #4
		} else
			str[len++] = (int8) c;
	}
	return str;
}
void PrintCommStatus(uint16 Status) {
 80042f0:	b510      	push	{r4, lr}
 80042f2:	4604      	mov	r4, r0
	if (Status & COMM_TXFAIL)
 80042f4:	b298      	uxth	r0, r3
 80042f6:	b110      	cbz	r0, 80042fe <PrintCommStatus+0x12>
		std_puts("COMM_TXFAIL: Failed transmit instruction packet!\n");
 80042f8:	481b      	ldr	r0, [pc, #108]	; (8004368 <PrintCommStatus+0x7c>)
 80042fa:	f7ff ffaa 	bl	8004252 <std_puts>
	if (Status & COMM_RXFAIL)
 80042fe:	f004 0108 	and.w	r1, r4, #8
 8004302:	b28a      	uxth	r2, r1
 8004304:	b112      	cbz	r2, 800430c <PrintCommStatus+0x20>
		std_puts("COMM_RXFAIL: Failed get status packet from device!\n");
 8004306:	4819      	ldr	r0, [pc, #100]	; (800436c <PrintCommStatus+0x80>)
 8004308:	f7ff ffa3 	bl	8004252 <std_puts>
	if (Status & COMM_TXERROR)
 800430c:	f004 0310 	and.w	r3, r4, #16
 8004310:	b298      	uxth	r0, r3
 8004312:	b110      	cbz	r0, 800431a <PrintCommStatus+0x2e>
		std_puts("COMM_TXERROR: Incorrect instruction packet!\n");
 8004314:	4816      	ldr	r0, [pc, #88]	; (8004370 <PrintCommStatus+0x84>)
 8004316:	f7ff ff9c 	bl	8004252 <std_puts>
	if (Status & COMM_BAD_INST)
 800431a:	f004 0120 	and.w	r1, r4, #32
 800431e:	b28a      	uxth	r2, r1
 8004320:	b112      	cbz	r2, 8004328 <PrintCommStatus+0x3c>
		std_puts("COMM_BAD_INST: Invalid Instruction byte\n");
 8004322:	4814      	ldr	r0, [pc, #80]	; (8004374 <PrintCommStatus+0x88>)
 8004324:	f7ff ff95 	bl	8004252 <std_puts>
	if (Status & COMM_BAD_ID)
 8004328:	f004 0340 	and.w	r3, r4, #64	; 0x40
 800432c:	b298      	uxth	r0, r3
 800432e:	b110      	cbz	r0, 8004336 <PrintCommStatus+0x4a>
		std_puts("COMM_BAD_ID: ID's not same for instruction and status packets\n");
 8004330:	4811      	ldr	r0, [pc, #68]	; (8004378 <PrintCommStatus+0x8c>)
 8004332:	f7ff ff8e 	bl	8004252 <std_puts>
	if (Status & COMM_RXWAITING)
 8004336:	f404 7100 	and.w	r1, r4, #512	; 0x200
 800433a:	b28a      	uxth	r2, r1
 800433c:	b112      	cbz	r2, 8004344 <PrintCommStatus+0x58>
		std_puts("COMM_RXWAITING: Now receiving status packet!\n");
 800433e:	480f      	ldr	r0, [pc, #60]	; (800437c <PrintCommStatus+0x90>)
 8004340:	f7ff ff87 	bl	8004252 <std_puts>
	if (Status & COMM_RXTIMEOUT)
 8004344:	f404 6380 	and.w	r3, r4, #1024	; 0x400
 8004348:	b298      	uxth	r0, r3
 800434a:	b110      	cbz	r0, 8004352 <PrintCommStatus+0x66>
		std_puts("COMM_RXTIMEOUT: There is no status packet!\n");
 800434c:	480c      	ldr	r0, [pc, #48]	; (8004380 <PrintCommStatus+0x94>)
 800434e:	f7ff ff80 	bl	8004252 <std_puts>
	if (Status & COMM_RXCHECKSUM)
 8004352:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
 8004356:	b2a4      	uxth	r4, r4
 8004358:	b124      	cbz	r4, 8004364 <PrintCommStatus+0x78>
		std_puts("COMM_RXCHECKSUM: Incorrect status packet checksum!\n");
 800435a:	480a      	ldr	r0, [pc, #40]	; (8004384 <PrintCommStatus+0x98>)
		//    else
		//        std_puts("\nThis is unknown error code!\n");
}
 800435c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (Status & COMM_RXWAITING)
		std_puts("COMM_RXWAITING: Now receiving status packet!\n");
	if (Status & COMM_RXTIMEOUT)
		std_puts("COMM_RXTIMEOUT: There is no status packet!\n");
	if (Status & COMM_RXCHECKSUM)
		std_puts("COMM_RXCHECKSUM: Incorrect status packet checksum!\n");
 8004360:	f7ff bf77 	b.w	8004252 <std_puts>
 8004364:	bd10      	pop	{r4, pc}
 8004366:	bf00      	nop
 8004368:	08006855 	stmdaeq	r0, {r0, r2, r4, r6, fp, sp, lr}
 800436c:	08006887 	stmdaeq	r0, {r0, r1, r2, r7, fp, sp, lr}
 8004370:	080068bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, fp, sp, lr}
 8004374:	080068e8 	stmdaeq	r0, {r3, r5, r6, r7, fp, sp, lr}
 8004378:	08006911 	stmdaeq	r0, {r0, r4, r8, fp, sp, lr}
 800437c:	08006950 	stmdaeq	r0, {r4, r6, r8, fp, sp, lr}
 8004380:	0800697e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp, sp, lr}
 8004384:	080069aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, fp, sp, lr}

08004388 <setDXLParams>:
}
uint16 getDXLCurrentLoad(uint8 id) {
	return dxl_makeword(dxl_read_byte(id, 0x28), dxl_read_byte(id, 0x29));
}

void setDXLParams() {
 8004388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int ping, i;
	uint8 PARAM[7] = {
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <setDXLParams+0x4c>)
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	8899      	ldrh	r1, [r3, #4]
 8004390:	799a      	ldrb	r2, [r3, #6]
		DXL_VOLT_LOW_LIMIT,
		DXL_CW_COMP_MARGIN,
		DXL_CCW_COMP_MARGIN,
		DXL_TORQ_ENABLE
	};
	uint8 VALUE[7] = {36, 36, 70, 70, 2, 2, 1};
 8004392:	f853 4f07 	ldr.w	r4, [r3, #7]!
	return dxl_makeword(dxl_read_byte(id, 0x28), dxl_read_byte(id, 0x29));
}

void setDXLParams() {
	int ping, i;
	uint8 PARAM[7] = {
 8004396:	9000      	str	r0, [sp, #0]
		DXL_VOLT_LOW_LIMIT,
		DXL_CW_COMP_MARGIN,
		DXL_CCW_COMP_MARGIN,
		DXL_TORQ_ENABLE
	};
	uint8 VALUE[7] = {36, 36, 70, 70, 2, 2, 1};
 8004398:	8898      	ldrh	r0, [r3, #4]
 800439a:	799b      	ldrb	r3, [r3, #6]
 800439c:	9402      	str	r4, [sp, #8]
	return dxl_makeword(dxl_read_byte(id, 0x28), dxl_read_byte(id, 0x29));
}

void setDXLParams() {
	int ping, i;
	uint8 PARAM[7] = {
 800439e:	f8ad 1004 	strh.w	r1, [sp, #4]
 80043a2:	f88d 2006 	strb.w	r2, [sp, #6]
		DXL_VOLT_LOW_LIMIT,
		DXL_CW_COMP_MARGIN,
		DXL_CCW_COMP_MARGIN,
		DXL_TORQ_ENABLE
	};
	uint8 VALUE[7] = {36, 36, 70, 70, 2, 2, 1};
 80043a6:	f8ad 000c 	strh.w	r0, [sp, #12]
 80043aa:	f88d 300e 	strb.w	r3, [sp, #14]
	for (i = 0; i < sizeof(PARAM)/sizeof(uint8); i++) {
 80043ae:	2400      	movs	r4, #0
		setLED(MANAGE, 1);
		ping = dxl_write_byte(BROADCAST_ID, PARAM[i], VALUE[i]);
 80043b0:	aa02      	add	r2, sp, #8
 80043b2:	f81d 1004 	ldrb.w	r1, [sp, r4]
 80043b6:	5d12      	ldrb	r2, [r2, r4]
 80043b8:	20fe      	movs	r0, #254	; 0xfe
 80043ba:	f7ff fca7 	bl	8003d0c <dxl_write_byte>
		PrintCommStatus(ping);
 80043be:	b280      	uxth	r0, r0
 80043c0:	f7ff ff94 	bl	80042ec <PrintCommStatus>
		DXL_CW_COMP_MARGIN,
		DXL_CCW_COMP_MARGIN,
		DXL_TORQ_ENABLE
	};
	uint8 VALUE[7] = {36, 36, 70, 70, 2, 2, 1};
	for (i = 0; i < sizeof(PARAM)/sizeof(uint8); i++) {
 80043c4:	3401      	adds	r4, #1
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 80043c6:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80043ca:	f7fe ffff 	bl	80033cc <uDelay>
		DXL_CW_COMP_MARGIN,
		DXL_CCW_COMP_MARGIN,
		DXL_TORQ_ENABLE
	};
	uint8 VALUE[7] = {36, 36, 70, 70, 2, 2, 1};
	for (i = 0; i < sizeof(PARAM)/sizeof(uint8); i++) {
 80043ce:	2c07      	cmp	r4, #7
 80043d0:	d1ee      	bne.n	80043b0 <setDXLParams+0x28>
		if(dxl_write_byte(BROADCAST_ID, DXL_CW_COMP_MARGIN, 2) != COMM_RXSUCCESS)		PrintErrorCode();	// Set a 2-point
		if(dxl_write_byte(BROADCAST_ID, DXL_CCW_COMP_MARGIN, 2) != COMM_RXSUCCESS)	PrintErrorCode();	// compliance margin
		_delay_ms(100);
		if(dxl_write_byte(BROADCAST_ID, DXL_TORQ_ENABLE, 1) != COMM_RXSUCCESS)			PrintErrorCode();	// Enable torque
		*/
}
 80043d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 80043d4:	08006724 	stmdaeq	r0, {r2, r5, r8, r9, sl, sp, lr}

080043d8 <PrintChar>:
	 PrintString("\nOverload error!\n");
	 else if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
	 PrintString("\nInstruction code error!\n");*/
}
int PrintChar(char c) {
	return std_putchar(c);
 80043d8:	f7ff bf2f 	b.w	800423a <std_putchar>

080043dc <printID>:
	}

	return -1; // Bad input.
}

void printID(uint8 id) {
 80043dc:	b570      	push	{r4, r5, r6, lr}
	char vals[30][2] = {
 80043de:	4b0f      	ldr	r3, [pc, #60]	; (800441c <printID+0x40>)
	}

	return -1; // Bad input.
}

void printID(uint8 id) {
 80043e0:	b090      	sub	sp, #64	; 0x40
 80043e2:	4605      	mov	r5, r0
	char vals[30][2] = {
 80043e4:	aa01      	add	r2, sp, #4
 80043e6:	f103 0638 	add.w	r6, r3, #56	; 0x38
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	6859      	ldr	r1, [r3, #4]
 80043ee:	4614      	mov	r4, r2
 80043f0:	c403      	stmia	r4!, {r0, r1}
 80043f2:	3308      	adds	r3, #8
 80043f4:	42b3      	cmp	r3, r6
 80043f6:	4622      	mov	r2, r4
 80043f8:	d1f7      	bne.n	80043ea <printID+0xe>
 80043fa:	6818      	ldr	r0, [r3, #0]
		"13", "14", "15", "16", "17", "18",
		"19", "20", "21", "22", "23", "24",
		"25", "26", "27", "28", "29", "30"
	};
		// For some reason PrintString(vals[id]) will print EVERY string in the array until id == (int) i is reached. Weird.
	PrintChar(vals[id][0]);
 80043fc:	a910      	add	r1, sp, #64	; 0x40

	return -1; // Bad input.
}

void printID(uint8 id) {
	char vals[30][2] = {
 80043fe:	6020      	str	r0, [r4, #0]
		"13", "14", "15", "16", "17", "18",
		"19", "20", "21", "22", "23", "24",
		"25", "26", "27", "28", "29", "30"
	};
		// For some reason PrintString(vals[id]) will print EVERY string in the array until id == (int) i is reached. Weird.
	PrintChar(vals[id][0]);
 8004400:	eb01 0445 	add.w	r4, r1, r5, lsl #1
 8004404:	f814 0c3c 	ldrb.w	r0, [r4, #-60]
 8004408:	f7ff ffe6 	bl	80043d8 <PrintChar>
	PrintChar(vals[id][1]);
 800440c:	f814 0c3b 	ldrb.w	r0, [r4, #-59]
}
 8004410:	b010      	add	sp, #64	; 0x40
 8004412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		"19", "20", "21", "22", "23", "24",
		"25", "26", "27", "28", "29", "30"
	};
		// For some reason PrintString(vals[id]) will print EVERY string in the array until id == (int) i is reached. Weird.
	PrintChar(vals[id][0]);
	PrintChar(vals[id][1]);
 8004416:	f7ff bfdf 	b.w	80043d8 <PrintChar>
 800441a:	bf00      	nop
 800441c:	08006732 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, sp, lr}

08004420 <PrintLine>:
	 PrintString("\nInstruction code error!\n");*/
}
int PrintChar(char c) {
	return std_putchar(c);
}
int PrintLine(const char* string) {
 8004420:	b510      	push	{r4, lr}
 8004422:	4604      	mov	r4, r0
	std_puts("\n");
 8004424:	4808      	ldr	r0, [pc, #32]	; (8004448 <PrintLine+0x28>)
 8004426:	f7ff ff14 	bl	8004252 <std_puts>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 800442a:	f242 7010 	movw	r0, #10000	; 0x2710
 800442e:	f7fe ffcd 	bl	80033cc <uDelay>
	return std_putchar(c);
}
int PrintLine(const char* string) {
	std_puts("\n");
	mDelay(10);
	int ret = std_puts(string);
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff ff0d 	bl	8004252 <std_puts>
 8004438:	4604      	mov	r4, r0
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 800443a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800443e:	f7fe ffc5 	bl	80033cc <uDelay>
	std_puts("\n");
	mDelay(10);
	int ret = std_puts(string);
	mDelay(25);
	return ret;
}
 8004442:	4620      	mov	r0, r4
 8004444:	bd10      	pop	{r4, pc}
 8004446:	bf00      	nop
 8004448:	08006d7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, sl, fp, sp, lr}

0800444c <end>:
	};
		// For some reason PrintString(vals[id]) will print EVERY string in the array until id == (int) i is reached. Weird.
	PrintChar(vals[id][0]);
	PrintChar(vals[id][1]);
}
void end() {
 800444c:	b508      	push	{r3, lr}
	while (giBusUsing);			// Wait for the bus to flush.
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <end+0x38>)
 8004450:	f893 0148 	ldrb.w	r0, [r3, #328]	; 0x148
 8004454:	2800      	cmp	r0, #0
 8004456:	d1fa      	bne.n	800444e <end+0x2>
	PrintLine("End of Program.\n");
 8004458:	480b      	ldr	r0, [pc, #44]	; (8004488 <end+0x3c>)
 800445a:	f7ff ffe1 	bl	8004420 <PrintLine>
	setLEDsOff();						// Turn off all LEDs
 800445e:	f7fe ff37 	bl	80032d0 <setLEDsOff>
	 }
	 }
	 **/
		// Just flash the Power LED on and off
	while (1) {
		GPIO_ResetBits(GPIOC, (uint16)0x2000);
 8004462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004466:	4809      	ldr	r0, [pc, #36]	; (800448c <end+0x40>)
 8004468:	f001 fabf 	bl	80059ea <GPIO_ResetBits>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 800446c:	4808      	ldr	r0, [pc, #32]	; (8004490 <end+0x44>)
 800446e:	f7fe ffad 	bl	80033cc <uDelay>
	 **/
		// Just flash the Power LED on and off
	while (1) {
		GPIO_ResetBits(GPIOC, (uint16)0x2000);
		mDelay(750);
		GPIO_SetBits(GPIOC, (uint16)0x2000);
 8004472:	4806      	ldr	r0, [pc, #24]	; (800448c <end+0x40>)
 8004474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004478:	f001 fab5 	bl	80059e6 <GPIO_SetBits>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 800447c:	4804      	ldr	r0, [pc, #16]	; (8004490 <end+0x44>)
 800447e:	f7fe ffa5 	bl	80033cc <uDelay>
 8004482:	e7ee      	b.n	8004462 <end+0x16>
 8004484:	200000d4 	ldrdcs	r0, [r0], -r4
 8004488:	080069de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, fp, sp, lr}
 800448c:	40011000 	andmi	r1, r1, r0
 8004490:	000b71b0 			; <UNDEFINED> instruction: 0x000b71b0

08004494 <PrintString>:
	mDelay(10);
	int ret = std_puts(string);
	mDelay(25);
	return ret;
}
int PrintString(const char* s) {
 8004494:	b510      	push	{r4, lr}
	int ret = std_puts(s);
 8004496:	f7ff fedc 	bl	8004252 <std_puts>
 800449a:	4604      	mov	r4, r0
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 800449c:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80044a0:	f7fe ff94 	bl	80033cc <uDelay>
}
int PrintString(const char* s) {
	int ret = std_puts(s);
	mDelay(25);						// Give it a little time to clean itself up; .025s should do it.
	return ret;
}
 80044a4:	4620      	mov	r0, r4
 80044a6:	bd10      	pop	{r4, pc}

080044a8 <PrintErrorCode>:
	if (Status & COMM_RXCHECKSUM)
		std_puts("COMM_RXCHECKSUM: Incorrect status packet checksum!\n");
		//    else
		//        std_puts("\nThis is unknown error code!\n");
}
void PrintErrorCode(void) {
 80044a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8 bits[7] = {ERRBIT_VOLTAGE,ERRBIT_ANGLE, ERRBIT_OVERHEAT,
 80044aa:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <PrintErrorCode+0x50>)
 80044ac:	2400      	movs	r4, #0
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	889a      	ldrh	r2, [r3, #4]
 80044b2:	7999      	ldrb	r1, [r3, #6]
 80044b4:	9000      	str	r0, [sp, #0]
 80044b6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80044ba:	f88d 1006 	strb.w	r1, [sp, #6]
		ERRBIT_RANGE,ERRBIT_CHECKSUM, ERRBIT_OVERLOAD, ERRBIT_INSTRUCTION
	};
	uint8 bit = 0;
	for (bit = 0; bit < 7; bit++)
		if (dxl_get_rxpacket_error(bits[bit]) == 1) {
 80044be:	f81d 0004 	ldrb.w	r0, [sp, r4]
 80044c2:	f7ff fba3 	bl	8003c0c <dxl_get_rxpacket_error>
 80044c6:	2801      	cmp	r0, #1
 80044c8:	b2e5      	uxtb	r5, r4
 80044ca:	d10f      	bne.n	80044ec <PrintErrorCode+0x44>
			switch (bit) {
 80044cc:	2d02      	cmp	r5, #2
 80044ce:	d005      	beq.n	80044dc <PrintErrorCode+0x34>
 80044d0:	2d04      	cmp	r5, #4
 80044d2:	d005      	beq.n	80044e0 <PrintErrorCode+0x38>
 80044d4:	2d01      	cmp	r5, #1
 80044d6:	d10c      	bne.n	80044f2 <PrintErrorCode+0x4a>
				case ERRBIT_VOLTAGE:			PrintString("Input voltage error!\n");		break;
 80044d8:	4808      	ldr	r0, [pc, #32]	; (80044fc <PrintErrorCode+0x54>)
 80044da:	e002      	b.n	80044e2 <PrintErrorCode+0x3a>
				case ERRBIT_ANGLE:				PrintString("Angle limit error!\n");			break;
 80044dc:	4808      	ldr	r0, [pc, #32]	; (8004500 <PrintErrorCode+0x58>)
 80044de:	e000      	b.n	80044e2 <PrintErrorCode+0x3a>
				case ERRBIT_OVERHEAT:			PrintString("Overheat error!\n");					break;
 80044e0:	4808      	ldr	r0, [pc, #32]	; (8004504 <PrintErrorCode+0x5c>)
	 PrintString("\nChecksum error!\n");
	 else if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
	 PrintString("\nOverload error!\n");
	 else if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
	 PrintString("\nInstruction code error!\n");*/
}
 80044e2:	b003      	add	sp, #12
 80044e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	for (bit = 0; bit < 7; bit++)
		if (dxl_get_rxpacket_error(bits[bit]) == 1) {
			switch (bit) {
				case ERRBIT_VOLTAGE:			PrintString("Input voltage error!\n");		break;
				case ERRBIT_ANGLE:				PrintString("Angle limit error!\n");			break;
				case ERRBIT_OVERHEAT:			PrintString("Overheat error!\n");					break;
 80044e8:	f7ff bfd4 	b.w	8004494 <PrintString>
 80044ec:	3401      	adds	r4, #1
void PrintErrorCode(void) {
	uint8 bits[7] = {ERRBIT_VOLTAGE,ERRBIT_ANGLE, ERRBIT_OVERHEAT,
		ERRBIT_RANGE,ERRBIT_CHECKSUM, ERRBIT_OVERLOAD, ERRBIT_INSTRUCTION
	};
	uint8 bit = 0;
	for (bit = 0; bit < 7; bit++)
 80044ee:	2c07      	cmp	r4, #7
 80044f0:	d1e5      	bne.n	80044be <PrintErrorCode+0x16>
	 PrintString("\nChecksum error!\n");
	 else if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
	 PrintString("\nOverload error!\n");
	 else if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
	 PrintString("\nInstruction code error!\n");*/
}
 80044f2:	b003      	add	sp, #12
 80044f4:	bd30      	pop	{r4, r5, pc}
 80044f6:	bf00      	nop
 80044f8:	0800676e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 80044fc:	080069ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, fp, sp, lr}
 8004500:	08006a05 	stmdaeq	r0, {r0, r2, r9, fp, sp, lr}
 8004504:	08006a19 	stmdaeq	r0, {r0, r3, r4, r9, fp, sp, lr}

08004508 <dxl_write_word>:
	setDXLLEDState(id, 0);
	if ((gbCommStatus & COMM_RXFAIL))
		return 0;
	return dxl_makeword(gbStatusPacket[DXL_PKT_PARA], gbStatusPacket[DXL_PKT_PARA + 1]);
}
void dxl_write_word(uint8 id, uint8 address, uint16 value) {
 8004508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800450c:	4616      	mov	r6, r2
 800450e:	4605      	mov	r5, r0
 8004510:	4688      	mov	r8, r1
 8004512:	f7ff fc6b 	bl	8003dec <setDXLLEDState.part.6>
	setDXLLEDState(id, 1);
#ifdef DEBUGMODE
	if (giBusUsing) PrintString("Attempting to write_word, but bus in use.");
 8004516:	4b13      	ldr	r3, [pc, #76]	; (8004564 <dxl_write_word+0x5c>)
 8004518:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800451c:	4699      	mov	r9, r3
 800451e:	b112      	cbz	r2, 8004526 <dxl_write_word+0x1e>
 8004520:	4811      	ldr	r0, [pc, #68]	; (8004568 <dxl_write_word+0x60>)
 8004522:	f7ff ffb7 	bl	8004494 <PrintString>
#endif
	while (giBusUsing);
 8004526:	f899 7148 	ldrb.w	r7, [r9, #328]	; 0x148
 800452a:	4c0e      	ldr	r4, [pc, #56]	; (8004564 <dxl_write_word+0x5c>)
 800452c:	2f00      	cmp	r7, #0
 800452e:	d1fa      	bne.n	8004526 <dxl_write_word+0x1e>
#ifdef DEBUGMODE
	PrintString("Done waiting");
 8004530:	480e      	ldr	r0, [pc, #56]	; (800456c <dxl_write_word+0x64>)
 8004532:	f7ff ffaf 	bl	8004494 <PrintString>
#endif
	gbInstructionPacket[DXL_PKT_ID] = id;
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
 8004536:	2003      	movs	r0, #3
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = dxl_get_lowbyte(value);
	gbInstructionPacket[DXL_PKT_PARA + 2] = dxl_get_highbyte(value);
	gbInstructionPacket[DXL_PKT_LEN] = 5;
 8004538:	2105      	movs	r1, #5
 *	All Read/Write functions were edited to set the LED of the DXL servo that is being accessed
 *	to turn on whenever it is being accessed, and to turn it off when the function completes.
 **/
uint8 dxl_get_lowbyte(uint16 word) {
	uint16 temp = (word & 0x00FF);
	return (uint8) temp;
 800453a:	f884 614f 	strb.w	r6, [r4, #335]	; 0x14f
}
uint8 dxl_get_highbyte(uint16 word) {
	uint16 temp = ((word & 0xFF00) >> 8);
 800453e:	0a36      	lsrs	r6, r6, #8
	while (giBusUsing);
#ifdef DEBUGMODE
	PrintString("Done waiting");
#endif
	gbInstructionPacket[DXL_PKT_ID] = id;
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
 8004540:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = dxl_get_lowbyte(value);
	gbInstructionPacket[DXL_PKT_PARA + 2] = dxl_get_highbyte(value);
	gbInstructionPacket[DXL_PKT_LEN] = 5;
 8004544:	f884 114c 	strb.w	r1, [r4, #332]	; 0x14c
#endif
	while (giBusUsing);
#ifdef DEBUGMODE
	PrintString("Done waiting");
#endif
	gbInstructionPacket[DXL_PKT_ID] = id;
 8004548:	f884 514b 	strb.w	r5, [r4, #331]	; 0x14b
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
 800454c:	f884 814e 	strb.w	r8, [r4, #334]	; 0x14e
	uint16 temp = (word & 0x00FF);
	return (uint8) temp;
}
uint8 dxl_get_highbyte(uint16 word) {
	uint16 temp = ((word & 0xFF00) >> 8);
	return (uint8) temp;
 8004550:	f884 6150 	strb.w	r6, [r4, #336]	; 0x150
	gbInstructionPacket[DXL_PKT_INST] = INST_WRITE_DATA;
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = dxl_get_lowbyte(value);
	gbInstructionPacket[DXL_PKT_PARA + 2] = dxl_get_highbyte(value);
	gbInstructionPacket[DXL_PKT_LEN] = 5;
	dxl_txrx_packet();
 8004554:	f7ff fbc0 	bl	8003cd8 <dxl_txrx_packet>
	setDXLLEDState(id, 0);
 8004558:	4628      	mov	r0, r5
 800455a:	4639      	mov	r1, r7
}
 800455c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	gbInstructionPacket[DXL_PKT_PARA] = address;
	gbInstructionPacket[DXL_PKT_PARA + 1] = dxl_get_lowbyte(value);
	gbInstructionPacket[DXL_PKT_PARA + 2] = dxl_get_highbyte(value);
	gbInstructionPacket[DXL_PKT_LEN] = 5;
	dxl_txrx_packet();
	setDXLLEDState(id, 0);
 8004560:	f7ff bc48 	b.w	8003df4 <setDXLLEDState>
 8004564:	200000d4 	ldrdcs	r0, [r0], -r4
 8004568:	08006a2a 	stmdaeq	r0, {r1, r3, r5, r9, fp, sp, lr}
 800456c:	08006a54 	stmdaeq	r0, {r2, r4, r6, r9, fp, sp, lr}

08004570 <setDXLPosition>:
		_delay_ms(100);
		if(dxl_write_byte(BROADCAST_ID, DXL_TORQ_ENABLE, 1) != COMM_RXSUCCESS)			PrintErrorCode();	// Enable torque
		*/
}
void setDXLPosition(uint8 id, int pos) {
	if (pos < 0 || pos > 1023) return;
 8004570:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
		if(dxl_write_byte(BROADCAST_ID, DXL_CCW_COMP_MARGIN, 2) != COMM_RXSUCCESS)	PrintErrorCode();	// compliance margin
		_delay_ms(100);
		if(dxl_write_byte(BROADCAST_ID, DXL_TORQ_ENABLE, 1) != COMM_RXSUCCESS)			PrintErrorCode();	// Enable torque
		*/
}
void setDXLPosition(uint8 id, int pos) {
 8004574:	460a      	mov	r2, r1
	if (pos < 0 || pos > 1023) return;
 8004576:	d203      	bcs.n	8004580 <setDXLPosition+0x10>
		// Setting the Goal Position changes the DXL's position, but changing the current won't.
	dxl_write_word(id, 0x1E, pos);
 8004578:	211e      	movs	r1, #30
 800457a:	b292      	uxth	r2, r2
 800457c:	f7ff bfc4 	b.w	8004508 <dxl_write_word>
 8004580:	4770      	bx	lr

08004582 <printServoInfo>:
	for (id = 0; id < NUM_AX12_SERVOS; id++) {
		printServoInfo(id);
		mDelay(1);
	}
}
void printServoInfo(uint8 id) {
 8004582:	b538      	push	{r3, r4, r5, lr}
	dxl_write_byte(id, DXL_LED, 1);
 8004584:	2201      	movs	r2, #1
 8004586:	2119      	movs	r1, #25
	for (id = 0; id < NUM_AX12_SERVOS; id++) {
		printServoInfo(id);
		mDelay(1);
	}
}
void printServoInfo(uint8 id) {
 8004588:	4604      	mov	r4, r0
	dxl_write_byte(id, DXL_LED, 1);
 800458a:	f7ff fbbf 	bl	8003d0c <dxl_write_byte>
	PrintString("DXL ID:            ");
 800458e:	482a      	ldr	r0, [pc, #168]	; (8004638 <printServoInfo+0xb6>)
 8004590:	f7ff ff80 	bl	8004494 <PrintString>
	pcu_put_byte(dxl_read_byte(id, 0x03));
 8004594:	2103      	movs	r1, #3
 8004596:	4620      	mov	r0, r4
 8004598:	f7ff fc6a 	bl	8003e70 <dxl_read_byte>
 800459c:	f7ff fd74 	bl	8004088 <pcu_put_byte>
		// Transmit the model number of the DXL
	PrintString("DXL Model:         ");
 80045a0:	4826      	ldr	r0, [pc, #152]	; (800463c <printServoInfo+0xba>)
 80045a2:	f7ff ff77 	bl	8004494 <PrintString>
	pcu_put_byte(dxl_read_word(id, dxl_makeword(dxl_read_byte(id, 0x00), dxl_read_byte(id, 0x01))));
 80045a6:	2100      	movs	r1, #0
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7ff fc61 	bl	8003e70 <dxl_read_byte>
 80045ae:	2101      	movs	r1, #1
 80045b0:	4605      	mov	r5, r0
 80045b2:	4620      	mov	r0, r4
 80045b4:	f7ff fc5c 	bl	8003e70 <dxl_read_byte>
 80045b8:	b2e9      	uxtb	r1, r5
 80045ba:	4620      	mov	r0, r4
 80045bc:	f7ff fc27 	bl	8003e0e <dxl_read_word>
 80045c0:	b2c0      	uxtb	r0, r0
 80045c2:	f7ff fd61 	bl	8004088 <pcu_put_byte>
		// Transmit the firmware of the DXL
	PrintString("DXL Firmware:      ");
 80045c6:	481e      	ldr	r0, [pc, #120]	; (8004640 <printServoInfo+0xbe>)
 80045c8:	f7ff ff64 	bl	8004494 <PrintString>
	pcu_put_byte(dxl_read_byte(id, 0x02));
 80045cc:	2102      	movs	r1, #2
 80045ce:	4620      	mov	r0, r4
 80045d0:	f7ff fc4e 	bl	8003e70 <dxl_read_byte>
 80045d4:	f7ff fd58 	bl	8004088 <pcu_put_byte>
		// Transmit the baudrate used by the DXL
	PrintString("DXL Baudrate:      ");
 80045d8:	481a      	ldr	r0, [pc, #104]	; (8004644 <printServoInfo+0xc2>)
 80045da:	f7ff ff5b 	bl	8004494 <PrintString>
	pcu_put_byte(dxl_read_byte(id, 0x04));
 80045de:	2104      	movs	r1, #4
 80045e0:	4620      	mov	r0, r4
 80045e2:	f7ff fc45 	bl	8003e70 <dxl_read_byte>
 80045e6:	f7ff fd4f 	bl	8004088 <pcu_put_byte>
		// Transmit the delay when sending/receiving data to/from the DXL
	PrintString("Delay:             ");
 80045ea:	4817      	ldr	r0, [pc, #92]	; (8004648 <printServoInfo+0xc6>)
 80045ec:	f7ff ff52 	bl	8004494 <PrintString>
	pcu_put_byte(dxl_read_byte(id, 0x05));
 80045f0:	2105      	movs	r1, #5
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7ff fc3c 	bl	8003e70 <dxl_read_byte>
 80045f8:	f7ff fd46 	bl	8004088 <pcu_put_byte>
		// Transmit the status level of the DXL
	PrintString("Status Level:      ");
 80045fc:	4813      	ldr	r0, [pc, #76]	; (800464c <printServoInfo+0xca>)
 80045fe:	f7ff ff49 	bl	8004494 <PrintString>
	pcu_put_byte(dxl_read_byte(id, 0x10));
 8004602:	2110      	movs	r1, #16
 8004604:	4620      	mov	r0, r4
 8004606:	f7ff fc33 	bl	8003e70 <dxl_read_byte>
 800460a:	f7ff fd3d 	bl	8004088 <pcu_put_byte>
		// Transmit the current position of the DXL
	PrintString("Current Position:  ");
 800460e:	4810      	ldr	r0, [pc, #64]	; (8004650 <printServoInfo+0xce>)
 8004610:	f7ff ff40 	bl	8004494 <PrintString>
	pcu_put_byte(dxl_read_word(id,dxl_makeword(dxl_read_byte(id, 0x24), dxl_read_byte(id, 0x25))));
 8004614:	4620      	mov	r0, r4
 8004616:	2124      	movs	r1, #36	; 0x24
 8004618:	f7ff fc2a 	bl	8003e70 <dxl_read_byte>
 800461c:	2125      	movs	r1, #37	; 0x25
 800461e:	4605      	mov	r5, r0
 8004620:	4620      	mov	r0, r4
 8004622:	f7ff fc25 	bl	8003e70 <dxl_read_byte>
 8004626:	4620      	mov	r0, r4
 8004628:	b2e9      	uxtb	r1, r5
 800462a:	f7ff fbf0 	bl	8003e0e <dxl_read_word>
 800462e:	b2c0      	uxtb	r0, r0
}
 8004630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		// Transmit the status level of the DXL
	PrintString("Status Level:      ");
	pcu_put_byte(dxl_read_byte(id, 0x10));
		// Transmit the current position of the DXL
	PrintString("Current Position:  ");
	pcu_put_byte(dxl_read_word(id,dxl_makeword(dxl_read_byte(id, 0x24), dxl_read_byte(id, 0x25))));
 8004634:	f7ff bd28 	b.w	8004088 <pcu_put_byte>
 8004638:	08006a61 	stmdaeq	r0, {r0, r5, r6, r9, fp, sp, lr}
 800463c:	08006a75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp, sp, lr}
 8004640:	08006a89 	stmdaeq	r0, {r0, r3, r7, r9, fp, sp, lr}
 8004644:	08006a9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, fp, sp, lr}
 8004648:	08006ab1 	stmdaeq	r0, {r0, r4, r5, r7, r9, fp, sp, lr}
 800464c:	08006ac5 	stmdaeq	r0, {r0, r2, r6, r7, r9, fp, sp, lr}
 8004650:	08006ad9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, fp, sp, lr}

08004654 <printAllServoInfo>:
	}
	PrintString("\n");
}

	// Dynamixel debug functions
void printAllServoInfo() {
 8004654:	b510      	push	{r4, lr}
	uint8 id = 0;
	for (id = 0; id < NUM_AX12_SERVOS; id++) {
 8004656:	2400      	movs	r4, #0
		printServoInfo(id);
 8004658:	4620      	mov	r0, r4
}

	// Dynamixel debug functions
void printAllServoInfo() {
	uint8 id = 0;
	for (id = 0; id < NUM_AX12_SERVOS; id++) {
 800465a:	3401      	adds	r4, #1
		printServoInfo(id);
 800465c:	f7ff ff91 	bl	8004582 <printServoInfo>
}

	// Dynamixel debug functions
void printAllServoInfo() {
	uint8 id = 0;
	for (id = 0; id < NUM_AX12_SERVOS; id++) {
 8004660:	b2e4      	uxtb	r4, r4
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 8004662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004666:	f7fe feb1 	bl	80033cc <uDelay>
}

	// Dynamixel debug functions
void printAllServoInfo() {
	uint8 id = 0;
	for (id = 0; id < NUM_AX12_SERVOS; id++) {
 800466a:	2c12      	cmp	r4, #18
 800466c:	d1f4      	bne.n	8004658 <printAllServoInfo+0x4>
		printServoInfo(id);
		mDelay(1);
	}
}
 800466e:	bd10      	pop	{r4, pc}

08004670 <printStatus>:
		}
		setLED(TXD, 0);
	}
	PrintString("Done checking Dynamixels.\n");
}
void printStatus() {
 8004670:	b538      	push	{r3, r4, r5, lr}
	} while (gbCommStatus & COMM_RXWAITING);// || t <= 4999);
																					//if (t >= 5000) gbCommStatus = COMM_RXTIMEOUT;

}
uint16 dxl_get_result() {
	return gbCommStatus;
 8004672:	4b2d      	ldr	r3, [pc, #180]	; (8004728 <printStatus+0xb8>)
 8004674:	f8b3 00c8 	ldrh.w	r0, [r3, #200]	; 0xc8
 8004678:	b281      	uxth	r1, r0
	uint8 stat = dxl_get_result();
	/*uint8 e_bits[7] = {ERRBIT_VOLTAGE,ERRBIT_ANGLE, ERRBIT_OVERHEAT,
	 ERRBIT_RANGE,ERRBIT_CHECKSUM, ERRBIT_OVERLOAD, ERRBIT_INSTRUCTION
	 };*/
	uint8 e_bit = 0;
	if (stat == COMM_TXSUCCESS || stat == COMM_RXSUCCESS) {
 800467a:	1e4a      	subs	r2, r1, #1
 800467c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8004680:	2b01      	cmp	r3, #1
 8004682:	d801      	bhi.n	8004688 <printStatus+0x18>
		PrintString("Success\n");
 8004684:	4829      	ldr	r0, [pc, #164]	; (800472c <printStatus+0xbc>)
 8004686:	e04a      	b.n	800471e <printStatus+0xae>
		return;
	} else if (stat == COMM_RXTIMEOUT) {
		PrintString("Timeout\n");
		return;
	}
	if (stat & COMM_TXFAIL)
 8004688:	f001 0004 	and.w	r0, r1, #4
 800468c:	b2c2      	uxtb	r2, r0
 800468e:	b10a      	cbz	r2, 8004694 <printStatus+0x24>
		PrintString("COMM_TXFAIL: Failed transmit instruction packet!");
 8004690:	4827      	ldr	r0, [pc, #156]	; (8004730 <printStatus+0xc0>)
 8004692:	e004      	b.n	800469e <printStatus+0x2e>
	else if (stat & COMM_RXFAIL)
 8004694:	f001 0308 	and.w	r3, r1, #8
 8004698:	b2d8      	uxtb	r0, r3
 800469a:	b118      	cbz	r0, 80046a4 <printStatus+0x34>
		PrintString("COMM_RXFAIL: Failed get status packet from device!");
 800469c:	4825      	ldr	r0, [pc, #148]	; (8004734 <printStatus+0xc4>)
 800469e:	f7ff fef9 	bl	8004494 <PrintString>
 80046a2:	e03b      	b.n	800471c <printStatus+0xac>
	else if (stat & COMM_TXERROR)
 80046a4:	f001 0210 	and.w	r2, r1, #16
 80046a8:	b2d3      	uxtb	r3, r2
 80046aa:	b10b      	cbz	r3, 80046b0 <printStatus+0x40>
		PrintString("COMM_TXERROR: Incorrect instruction packet!");
 80046ac:	4822      	ldr	r0, [pc, #136]	; (8004738 <printStatus+0xc8>)
 80046ae:	e7f6      	b.n	800469e <printStatus+0x2e>
	else if (stat & COMM_BAD_INST)
 80046b0:	f001 0020 	and.w	r0, r1, #32
 80046b4:	b2c2      	uxtb	r2, r0
 80046b6:	b10a      	cbz	r2, 80046bc <printStatus+0x4c>
		PrintString("COMM_BAD_INST: Invalid Instruction byte");
 80046b8:	4820      	ldr	r0, [pc, #128]	; (800473c <printStatus+0xcc>)
 80046ba:	e7f0      	b.n	800469e <printStatus+0x2e>
	else if (stat & COMM_BAD_ID)
 80046bc:	f001 0140 	and.w	r1, r1, #64	; 0x40
 80046c0:	b2cb      	uxtb	r3, r1
 80046c2:	b10b      	cbz	r3, 80046c8 <printStatus+0x58>
		PrintString("COMM_BAD_ID: ID's not same for instruction and status packets");
 80046c4:	481e      	ldr	r0, [pc, #120]	; (8004740 <printStatus+0xd0>)
 80046c6:	e7ea      	b.n	800469e <printStatus+0x2e>
	else if (stat & COMM_RXWAITING)
		PrintString("COMM_RXWAITING: Now receiving status packet!");
	else if (stat & COMM_RXTIMEOUT)
		PrintString("COMM_RXTIMEOUT: There is no status packet!");
	else if (stat & COMM_RXCHECKSUM)
 80046c8:	2506      	movs	r5, #6
 80046ca:	2401      	movs	r4, #1
		PrintString("COMM_RXCHECKSUM: Incorrect status packet checksum!");
	else {
		for (e_bit = ERRBIT_VOLTAGE; e_bit < 64; e_bit = e_bit * 2) {
			switch (dxl_get_rxpacket_error(e_bit)) {
 80046cc:	4620      	mov	r0, r4
 80046ce:	f7ff fa9d 	bl	8003c0c <dxl_get_rxpacket_error>
 80046d2:	b1e0      	cbz	r0, 800470e <printStatus+0x9e>
 80046d4:	2801      	cmp	r0, #1
 80046d6:	d11d      	bne.n	8004714 <printStatus+0xa4>
				case 1:
					switch (e_bit) {
 80046d8:	2c04      	cmp	r4, #4
 80046da:	d010      	beq.n	80046fe <printStatus+0x8e>
 80046dc:	d805      	bhi.n	80046ea <printStatus+0x7a>
 80046de:	2c01      	cmp	r4, #1
 80046e0:	d00b      	beq.n	80046fa <printStatus+0x8a>
 80046e2:	2c02      	cmp	r4, #2
 80046e4:	d111      	bne.n	800470a <printStatus+0x9a>
						case ERRBIT_VOLTAGE:			PrintString("Input voltage error!\n");		break;
						case ERRBIT_ANGLE:				PrintString("Angle limit error!\n");			break;
 80046e6:	4817      	ldr	r0, [pc, #92]	; (8004744 <printStatus+0xd4>)
 80046e8:	e019      	b.n	800471e <printStatus+0xae>
		PrintString("COMM_RXCHECKSUM: Incorrect status packet checksum!");
	else {
		for (e_bit = ERRBIT_VOLTAGE; e_bit < 64; e_bit = e_bit * 2) {
			switch (dxl_get_rxpacket_error(e_bit)) {
				case 1:
					switch (e_bit) {
 80046ea:	2c10      	cmp	r4, #16
 80046ec:	d009      	beq.n	8004702 <printStatus+0x92>
 80046ee:	2c20      	cmp	r4, #32
 80046f0:	d009      	beq.n	8004706 <printStatus+0x96>
 80046f2:	2c08      	cmp	r4, #8
 80046f4:	d109      	bne.n	800470a <printStatus+0x9a>
						case ERRBIT_VOLTAGE:			PrintString("Input voltage error!\n");		break;
						case ERRBIT_ANGLE:				PrintString("Angle limit error!\n");			break;
						case ERRBIT_OVERHEAT:			PrintString("Overheat error!\n");					break;
						case ERRBIT_RANGE:				PrintString("Out of range error!\n");			break;
 80046f6:	4814      	ldr	r0, [pc, #80]	; (8004748 <printStatus+0xd8>)
 80046f8:	e011      	b.n	800471e <printStatus+0xae>
	else {
		for (e_bit = ERRBIT_VOLTAGE; e_bit < 64; e_bit = e_bit * 2) {
			switch (dxl_get_rxpacket_error(e_bit)) {
				case 1:
					switch (e_bit) {
						case ERRBIT_VOLTAGE:			PrintString("Input voltage error!\n");		break;
 80046fa:	4814      	ldr	r0, [pc, #80]	; (800474c <printStatus+0xdc>)
 80046fc:	e00f      	b.n	800471e <printStatus+0xae>
						case ERRBIT_ANGLE:				PrintString("Angle limit error!\n");			break;
						case ERRBIT_OVERHEAT:			PrintString("Overheat error!\n");					break;
 80046fe:	4814      	ldr	r0, [pc, #80]	; (8004750 <printStatus+0xe0>)
 8004700:	e00d      	b.n	800471e <printStatus+0xae>
						case ERRBIT_RANGE:				PrintString("Out of range error!\n");			break;
						case ERRBIT_CHECKSUM:			PrintString("Checksum error!\n");					break;
 8004702:	4814      	ldr	r0, [pc, #80]	; (8004754 <printStatus+0xe4>)
 8004704:	e00b      	b.n	800471e <printStatus+0xae>
						case ERRBIT_OVERLOAD:			PrintString("Overload error!\n");					break;
 8004706:	4814      	ldr	r0, [pc, #80]	; (8004758 <printStatus+0xe8>)
 8004708:	e009      	b.n	800471e <printStatus+0xae>
						case ERRBIT_INSTRUCTION:	PrintString("Instruction code error!\n");	break;
						default:									PrintString("Unknown error code! WHAT DID YOU DO!?"); break;
 800470a:	4814      	ldr	r0, [pc, #80]	; (800475c <printStatus+0xec>)
 800470c:	e007      	b.n	800471e <printStatus+0xae>
					}
					return;
					break;
				case 0:
					PrintString(".");
 800470e:	4814      	ldr	r0, [pc, #80]	; (8004760 <printStatus+0xf0>)
 8004710:	f7ff fec0 	bl	8004494 <PrintString>
	else if (stat & COMM_RXTIMEOUT)
		PrintString("COMM_RXTIMEOUT: There is no status packet!");
	else if (stat & COMM_RXCHECKSUM)
		PrintString("COMM_RXCHECKSUM: Incorrect status packet checksum!");
	else {
		for (e_bit = ERRBIT_VOLTAGE; e_bit < 64; e_bit = e_bit * 2) {
 8004714:	0064      	lsls	r4, r4, #1
 8004716:	3d01      	subs	r5, #1
 8004718:	b2e4      	uxtb	r4, r4
 800471a:	d1d7      	bne.n	80046cc <printStatus+0x5c>
					PrintString(".");
					break;
			}
		}
	}
	PrintString("\n");
 800471c:	4811      	ldr	r0, [pc, #68]	; (8004764 <printStatus+0xf4>)
}
 800471e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
					PrintString(".");
					break;
			}
		}
	}
	PrintString("\n");
 8004722:	f7ff beb7 	b.w	8004494 <PrintString>
 8004726:	bf00      	nop
 8004728:	20000000 	andcs	r0, r0, r0
 800472c:	08006aed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r9, fp, sp, lr}
 8004730:	08006af6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, fp, sp, lr}
 8004734:	08006b27 	stmdaeq	r0, {r0, r1, r2, r5, r8, r9, fp, sp, lr}
 8004738:	08006b5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, fp, sp, lr}
 800473c:	08006b86 	stmdaeq	r0, {r1, r2, r7, r8, r9, fp, sp, lr}
 8004740:	08006bae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, fp, sp, lr}
 8004744:	08006a05 	stmdaeq	r0, {r0, r2, r9, fp, sp, lr}
 8004748:	08006c77 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, sl, fp, sp, lr}
 800474c:	080069ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, fp, sp, lr}
 8004750:	08006a19 	stmdaeq	r0, {r0, r3, r4, r9, fp, sp, lr}
 8004754:	08006c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp, lr}
 8004758:	08006c9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, sl, fp, sp, lr}
 800475c:	08006cae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, fp, sp, lr}
 8004760:	08006a52 	stmdaeq	r0, {r1, r4, r6, r9, fp, sp, lr}
 8004764:	08006d7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, sl, fp, sp, lr}

08004768 <ping_dxl>:
	PrintString("Clearing packet... ");
	dxl_clear_statpkt();
	PrintString("Cleared.\n\n");

}
void ping_dxl(uint8 id) {
 8004768:	b570      	push	{r4, r5, r6, lr}
	id++;																												// The DXLs accept 1-n, not 0-n. Add 1 to get a good value
 800476a:	1c46      	adds	r6, r0, #1
	PrintString("Clearing packet... ");
	dxl_clear_statpkt();
	PrintString("Cleared.\n\n");

}
void ping_dxl(uint8 id) {
 800476c:	4605      	mov	r5, r0
	id++;																												// The DXLs accept 1-n, not 0-n. Add 1 to get a good value
 800476e:	b2f6      	uxtb	r6, r6
	while (giBusUsing);
 8004770:	4c26      	ldr	r4, [pc, #152]	; (800480c <ping_dxl+0xa4>)
 8004772:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1fa      	bne.n	8004770 <ping_dxl+0x8>
	dxl_clear_statpkt();																				// Clear the packet.
 800477a:	f7ff fa89 	bl	8003c90 <dxl_clear_statpkt>
/**	set_tx_packet functions by Sam Watkins	**/
void dxl_set_txpacket_id(uint8 id) {
	gbInstructionPacket[DXL_PKT_ID] = id;
}
void dxl_set_txpacket_instruction(uint8 instruction) {
	gbInstructionPacket[DXL_PKT_INST] = instruction;
 800477e:	2001      	movs	r0, #1
}
void dxl_set_txpacket_parameter(uint8 index, uint8 value ) {
	gbInstructionPacket[DXL_PKT_PARA + index] = value;
}
void dxl_set_txpacket_length(uint8 length) {
	gbInstructionPacket[DXL_PKT_LEN] = length;
 8004780:	2102      	movs	r1, #2
/**	set_tx_packet functions by Sam Watkins	**/
void dxl_set_txpacket_id(uint8 id) {
	gbInstructionPacket[DXL_PKT_ID] = id;
}
void dxl_set_txpacket_instruction(uint8 instruction) {
	gbInstructionPacket[DXL_PKT_INST] = instruction;
 8004782:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
	dxl_clear_statpkt();																				// Clear the packet.
	dxl_set_txpacket_id(id);																		// Set the ID that will receive the packet.
	dxl_set_txpacket_instruction(INST_PING);										// Set the type of instruction the packet is containing.
	dxl_set_txpacket_length(2);																	// Set the length of the packet.
	setLED(AUX, 1);
	PrintLine("DXL-");
 8004786:	4822      	ldr	r0, [pc, #136]	; (8004810 <ping_dxl+0xa8>)
}
void dxl_set_txpacket_parameter(uint8 index, uint8 value ) {
	gbInstructionPacket[DXL_PKT_PARA + index] = value;
}
void dxl_set_txpacket_length(uint8 length) {
	gbInstructionPacket[DXL_PKT_LEN] = length;
 8004788:	f884 114c 	strb.w	r1, [r4, #332]	; 0x14c
uint16 dxl_get_result() {
	return gbCommStatus;
}
/**	set_tx_packet functions by Sam Watkins	**/
void dxl_set_txpacket_id(uint8 id) {
	gbInstructionPacket[DXL_PKT_ID] = id;
 800478c:	f884 614b 	strb.w	r6, [r4, #331]	; 0x14b
	dxl_clear_statpkt();																				// Clear the packet.
	dxl_set_txpacket_id(id);																		// Set the ID that will receive the packet.
	dxl_set_txpacket_instruction(INST_PING);										// Set the type of instruction the packet is containing.
	dxl_set_txpacket_length(2);																	// Set the length of the packet.
	setLED(AUX, 1);
	PrintLine("DXL-");
 8004790:	f7ff fe46 	bl	8004420 <PrintLine>
	printID(id - 1);
 8004794:	4628      	mov	r0, r5
 8004796:	f7ff fe21 	bl	80043dc <printID>
	PrintString(" Ping Status: ");
 800479a:	481e      	ldr	r0, [pc, #120]	; (8004814 <ping_dxl+0xac>)
 800479c:	f7ff fe7a 	bl	8004494 <PrintString>
	dxl_txrx_packet();																					// Transmit the packet.
 80047a0:	f7ff fa9a 	bl	8003cd8 <dxl_txrx_packet>
	int time = 1000;																						// Set the timeout value to 2.5s (1s = 1000ms)
 80047a4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	} while (gbCommStatus & COMM_RXWAITING);// || t <= 4999);
																					//if (t >= 5000) gbCommStatus = COMM_RXTIMEOUT;

}
uint16 dxl_get_result() {
	return gbCommStatus;
 80047a8:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <ping_dxl+0xb0>)
 80047aa:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 80047ae:	b295      	uxth	r5, r2
	PrintLine("DXL-");
	printID(id - 1);
	PrintString(" Ping Status: ");
	dxl_txrx_packet();																					// Transmit the packet.
	int time = 1000;																						// Set the timeout value to 2.5s (1s = 1000ms)
	while (time - 1 > 0 && dxl_get_result() != COMM_RXTIMEOUT) {// Loop while the status isn't timeout, or time is up.
 80047b0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80047b4:	461d      	mov	r5, r3
 80047b6:	d010      	beq.n	80047da <ping_dxl+0x72>
	} while (gbCommStatus & COMM_RXWAITING);// || t <= 4999);
																					//if (t >= 5000) gbCommStatus = COMM_RXTIMEOUT;

}
uint16 dxl_get_result() {
	return gbCommStatus;
 80047b8:	f8b3 00c8 	ldrh.w	r0, [r3, #200]	; 0xc8
 80047bc:	b281      	uxth	r1, r0
	printID(id - 1);
	PrintString(" Ping Status: ");
	dxl_txrx_packet();																					// Transmit the packet.
	int time = 1000;																						// Set the timeout value to 2.5s (1s = 1000ms)
	while (time - 1 > 0 && dxl_get_result() != COMM_RXTIMEOUT) {// Loop while the status isn't timeout, or time is up.
		if (dxl_get_result() == COMM_RXSUCCESS ||
 80047be:	2902      	cmp	r1, #2
 80047c0:	d00b      	beq.n	80047da <ping_dxl+0x72>
	} while (gbCommStatus & COMM_RXWAITING);// || t <= 4999);
																					//if (t >= 5000) gbCommStatus = COMM_RXTIMEOUT;

}
uint16 dxl_get_result() {
	return gbCommStatus;
 80047c2:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80047c6:	b29a      	uxth	r2, r3
	printID(id - 1);
	PrintString(" Ping Status: ");
	dxl_txrx_packet();																					// Transmit the packet.
	int time = 1000;																						// Set the timeout value to 2.5s (1s = 1000ms)
	while (time - 1 > 0 && dxl_get_result() != COMM_RXTIMEOUT) {// Loop while the status isn't timeout, or time is up.
		if (dxl_get_result() == COMM_RXSUCCESS ||
 80047c8:	2a01      	cmp	r2, #1
 80047ca:	d006      	beq.n	80047da <ping_dxl+0x72>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 80047cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	int time = 1000;																						// Set the timeout value to 2.5s (1s = 1000ms)
	while (time - 1 > 0 && dxl_get_result() != COMM_RXTIMEOUT) {// Loop while the status isn't timeout, or time is up.
		if (dxl_get_result() == COMM_RXSUCCESS ||
				dxl_get_result() == COMM_TXSUCCESS) break;
		mDelay(1);
		time--;
 80047d0:	3c01      	subs	r4, #1
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 80047d2:	f7fe fdfb 	bl	80033cc <uDelay>
	PrintLine("DXL-");
	printID(id - 1);
	PrintString(" Ping Status: ");
	dxl_txrx_packet();																					// Transmit the packet.
	int time = 1000;																						// Set the timeout value to 2.5s (1s = 1000ms)
	while (time - 1 > 0 && dxl_get_result() != COMM_RXTIMEOUT) {// Loop while the status isn't timeout, or time is up.
 80047d6:	2c01      	cmp	r4, #1
 80047d8:	d1e6      	bne.n	80047a8 <ping_dxl+0x40>
	} while (gbCommStatus & COMM_RXWAITING);// || t <= 4999);
																					//if (t >= 5000) gbCommStatus = COMM_RXTIMEOUT;

}
uint16 dxl_get_result() {
	return gbCommStatus;
 80047da:	f8b5 00c8 	ldrh.w	r0, [r5, #200]	; 0xc8
 80047de:	b281      	uxth	r1, r0
		if (dxl_get_result() == COMM_RXSUCCESS ||
				dxl_get_result() == COMM_TXSUCCESS) break;
		mDelay(1);
		time--;
	}
	if (dxl_get_result() == COMM_RXSUCCESS || dxl_get_result() == COMM_TXSUCCESS)
 80047e0:	2902      	cmp	r1, #2
 80047e2:	d005      	beq.n	80047f0 <ping_dxl+0x88>
	} while (gbCommStatus & COMM_RXWAITING);// || t <= 4999);
																					//if (t >= 5000) gbCommStatus = COMM_RXTIMEOUT;

}
uint16 dxl_get_result() {
	return gbCommStatus;
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <ping_dxl+0xb0>)
 80047e6:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 80047ea:	b290      	uxth	r0, r2
		if (dxl_get_result() == COMM_RXSUCCESS ||
				dxl_get_result() == COMM_TXSUCCESS) break;
		mDelay(1);
		time--;
	}
	if (dxl_get_result() == COMM_RXSUCCESS || dxl_get_result() == COMM_TXSUCCESS)
 80047ec:	2801      	cmp	r0, #1
 80047ee:	d101      	bne.n	80047f4 <ping_dxl+0x8c>
		PrintString("Success.");
 80047f0:	480a      	ldr	r0, [pc, #40]	; (800481c <ping_dxl+0xb4>)
 80047f2:	e002      	b.n	80047fa <ping_dxl+0x92>
	else {
		if (time < 10)
 80047f4:	2c09      	cmp	r4, #9
 80047f6:	dc03      	bgt.n	8004800 <ping_dxl+0x98>
			PrintString("Timeout.");
 80047f8:	4809      	ldr	r0, [pc, #36]	; (8004820 <ping_dxl+0xb8>)
 80047fa:	f7ff fe4b 	bl	8004494 <PrintString>
 80047fe:	e001      	b.n	8004804 <ping_dxl+0x9c>
		else
			printStatus();
 8004800:	f7ff ff36 	bl	8004670 <printStatus>
	}
	dxl_clear_statpkt();

}
 8004804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (time < 10)
			PrintString("Timeout.");
		else
			printStatus();
	}
	dxl_clear_statpkt();
 8004808:	f7ff ba42 	b.w	8003c90 <dxl_clear_statpkt>
 800480c:	200000d4 	ldrdcs	r0, [r0], -r4
 8004810:	08006cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, sp, lr}
 8004814:	08006cd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp, sp, lr}
 8004818:	20000000 	andcs	r0, r0, r0
 800481c:	08006ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, sp, lr}
 8004820:	08006cf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, sl, fp, sp, lr}

08004824 <verbose_ping_dxl>:
	for (i = 0; i < NUM_AX12_SERVOS; i++) {
		verbose_ping_dxl(i);
		PrintString("\n");
	}
}
void verbose_ping_dxl(uint8 id) {
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4605      	mov	r5, r0
		// This is a VERY verbose function that was created to detail everything that happens when creating, sending,
		// and receiving packets to Dynamixel servos in order to debug it and/or it's connectivity.
		// Don't use this frequently. It's bulky and not very memory-efficient.
	PrintString("Waiting on bus to clear... ");
 8004828:	4814      	ldr	r0, [pc, #80]	; (800487c <verbose_ping_dxl+0x58>)
 800482a:	f7ff fe33 	bl	8004494 <PrintString>
	while (giBusUsing);
 800482e:	4c14      	ldr	r4, [pc, #80]	; (8004880 <verbose_ping_dxl+0x5c>)
 8004830:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1fa      	bne.n	800482e <verbose_ping_dxl+0xa>
	PrintString("Bus cleared\nClearing packet... ");
 8004838:	4812      	ldr	r0, [pc, #72]	; (8004884 <verbose_ping_dxl+0x60>)
 800483a:	f7ff fe2b 	bl	8004494 <PrintString>
	dxl_clear_statpkt();														// Clear the packet.
 800483e:	f7ff fa27 	bl	8003c90 <dxl_clear_statpkt>
	PrintString("Cleared\nSetting new packet ID, Len, & Inst... ");
 8004842:	4811      	ldr	r0, [pc, #68]	; (8004888 <verbose_ping_dxl+0x64>)
 8004844:	f7ff fe26 	bl	8004494 <PrintString>
/**	set_tx_packet functions by Sam Watkins	**/
void dxl_set_txpacket_id(uint8 id) {
	gbInstructionPacket[DXL_PKT_ID] = id;
}
void dxl_set_txpacket_instruction(uint8 instruction) {
	gbInstructionPacket[DXL_PKT_INST] = instruction;
 8004848:	2001      	movs	r0, #1
}
void dxl_set_txpacket_parameter(uint8 index, uint8 value ) {
	gbInstructionPacket[DXL_PKT_PARA + index] = value;
}
void dxl_set_txpacket_length(uint8 length) {
	gbInstructionPacket[DXL_PKT_LEN] = length;
 800484a:	2102      	movs	r1, #2
/**	set_tx_packet functions by Sam Watkins	**/
void dxl_set_txpacket_id(uint8 id) {
	gbInstructionPacket[DXL_PKT_ID] = id;
}
void dxl_set_txpacket_instruction(uint8 instruction) {
	gbInstructionPacket[DXL_PKT_INST] = instruction;
 800484c:	f884 014d 	strb.w	r0, [r4, #333]	; 0x14d
	dxl_clear_statpkt();														// Clear the packet.
	PrintString("Cleared\nSetting new packet ID, Len, & Inst... ");
	dxl_set_txpacket_id(id);												// Set the ID that will receive the packet.
	dxl_set_txpacket_instruction(INST_PING);				// Set the type of instruction that the packet is containing.
	dxl_set_txpacket_length(2);											// Set the length of the packet.
	PrintString("Done\nPinging... ");
 8004850:	480e      	ldr	r0, [pc, #56]	; (800488c <verbose_ping_dxl+0x68>)
}
void dxl_set_txpacket_parameter(uint8 index, uint8 value ) {
	gbInstructionPacket[DXL_PKT_PARA + index] = value;
}
void dxl_set_txpacket_length(uint8 length) {
	gbInstructionPacket[DXL_PKT_LEN] = length;
 8004852:	f884 114c 	strb.w	r1, [r4, #332]	; 0x14c
uint16 dxl_get_result() {
	return gbCommStatus;
}
/**	set_tx_packet functions by Sam Watkins	**/
void dxl_set_txpacket_id(uint8 id) {
	gbInstructionPacket[DXL_PKT_ID] = id;
 8004856:	f884 514b 	strb.w	r5, [r4, #331]	; 0x14b
	dxl_clear_statpkt();														// Clear the packet.
	PrintString("Cleared\nSetting new packet ID, Len, & Inst... ");
	dxl_set_txpacket_id(id);												// Set the ID that will receive the packet.
	dxl_set_txpacket_instruction(INST_PING);				// Set the type of instruction that the packet is containing.
	dxl_set_txpacket_length(2);											// Set the length of the packet.
	PrintString("Done\nPinging... ");
 800485a:	f7ff fe1b 	bl	8004494 <PrintString>
	setLED(AUX, 1);
	dxl_txrx_packet();															// Transmit the packet.
 800485e:	f7ff fa3b 	bl	8003cd8 <dxl_txrx_packet>
	//mDelay(500);																		// Wait for half a second
	setLED(AUX, 0);																	// Now turn off the LED.
	//mDelay(25);
		// If we don't time out do this stuff.
	printStatus();
 8004862:	f7ff ff05 	bl	8004670 <printStatus>
	PrintString("Clearing packet... ");
 8004866:	480a      	ldr	r0, [pc, #40]	; (8004890 <verbose_ping_dxl+0x6c>)
 8004868:	f7ff fe14 	bl	8004494 <PrintString>
	dxl_clear_statpkt();
 800486c:	f7ff fa10 	bl	8003c90 <dxl_clear_statpkt>
	PrintString("Cleared.\n\n");
 8004870:	4808      	ldr	r0, [pc, #32]	; (8004894 <verbose_ping_dxl+0x70>)

}
 8004872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	//mDelay(25);
		// If we don't time out do this stuff.
	printStatus();
	PrintString("Clearing packet... ");
	dxl_clear_statpkt();
	PrintString("Cleared.\n\n");
 8004876:	f7ff be0d 	b.w	8004494 <PrintString>
 800487a:	bf00      	nop
 800487c:	08006cfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, fp, sp, lr}
 8004880:	200000d4 	ldrdcs	r0, [r0], -r4
 8004884:	08006d16 	stmdaeq	r0, {r1, r2, r4, r8, sl, fp, sp, lr}
 8004888:	08006d36 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, fp, sp, lr}
 800488c:	08006d65 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
 8004890:	08006d22 	stmdaeq	r0, {r1, r5, r8, sl, fp, sp, lr}
 8004894:	08006d76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}

08004898 <verbose_ping_all_dxl>:
	else
		PrintString("Unable to Initialize DXLs");
	setLED(TXD, 0);																// Turn off the TxD LED
	mDelay(50);
}
void verbose_ping_all_dxl() {
 8004898:	b510      	push	{r4, lr}
	uint8 i = 0;
	for (i = 0; i < NUM_AX12_SERVOS; i++) {
 800489a:	2400      	movs	r4, #0
		verbose_ping_dxl(i);
 800489c:	4620      	mov	r0, r4
	setLED(TXD, 0);																// Turn off the TxD LED
	mDelay(50);
}
void verbose_ping_all_dxl() {
	uint8 i = 0;
	for (i = 0; i < NUM_AX12_SERVOS; i++) {
 800489e:	3401      	adds	r4, #1
		verbose_ping_dxl(i);
 80048a0:	f7ff ffc0 	bl	8004824 <verbose_ping_dxl>
	setLED(TXD, 0);																// Turn off the TxD LED
	mDelay(50);
}
void verbose_ping_all_dxl() {
	uint8 i = 0;
	for (i = 0; i < NUM_AX12_SERVOS; i++) {
 80048a4:	b2e4      	uxtb	r4, r4
		verbose_ping_dxl(i);
		PrintString("\n");
 80048a6:	4803      	ldr	r0, [pc, #12]	; (80048b4 <verbose_ping_all_dxl+0x1c>)
 80048a8:	f7ff fdf4 	bl	8004494 <PrintString>
	setLED(TXD, 0);																// Turn off the TxD LED
	mDelay(50);
}
void verbose_ping_all_dxl() {
	uint8 i = 0;
	for (i = 0; i < NUM_AX12_SERVOS; i++) {
 80048ac:	2c12      	cmp	r4, #18
 80048ae:	d1f5      	bne.n	800489c <verbose_ping_all_dxl+0x4>
		verbose_ping_dxl(i);
		PrintString("\n");
	}
}
 80048b0:	bd10      	pop	{r4, pc}
 80048b2:	bf00      	nop
 80048b4:	08006d7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, sl, fp, sp, lr}

080048b8 <dxl_init>:
		setLEDsOff();
}
/*******************************************		Dynamixel Servo functions		*******************************************/
	// 7 April 2013
	// Dynmixel config functions
void dxl_init() {
 80048b8:	b508      	push	{r3, lr}
	PrintString("\nInitializing Dynamixels... ");
 80048ba:	4809      	ldr	r0, [pc, #36]	; (80048e0 <dxl_init+0x28>)
 80048bc:	f7ff fdea 	bl	8004494 <PrintString>
	USART_Configuration(USART_DXL, 1);
	setLED(TXD, 1);																// Set the TxD LED to On.
	if (dxl_initialize(1))												// Initialize the bus
 80048c0:	2001      	movs	r0, #1
 80048c2:	f7ff f829 	bl	8003918 <dxl_initialize>
 80048c6:	b108      	cbz	r0, 80048cc <dxl_init+0x14>
		PrintString("Initialized.\n");
 80048c8:	4806      	ldr	r0, [pc, #24]	; (80048e4 <dxl_init+0x2c>)
 80048ca:	e000      	b.n	80048ce <dxl_init+0x16>
	else
		PrintString("Unable to Initialize DXLs");
 80048cc:	4806      	ldr	r0, [pc, #24]	; (80048e8 <dxl_init+0x30>)
 80048ce:	f7ff fde1 	bl	8004494 <PrintString>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 80048d2:	f24c 3050 	movw	r0, #50000	; 0xc350
		PrintString("Initialized.\n");
	else
		PrintString("Unable to Initialize DXLs");
	setLED(TXD, 0);																// Turn off the TxD LED
	mDelay(50);
}
 80048d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 80048da:	f7fe bd77 	b.w	80033cc <uDelay>
 80048de:	bf00      	nop
 80048e0:	08006d81 	stmdaeq	r0, {r0, r7, r8, sl, fp, sp, lr}
 80048e4:	08006e68 	stmdaeq	r0, {r3, r5, r6, r9, sl, fp, sp, lr}
 80048e8:	08006d9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, fp, sp, lr}

080048ec <GetChar>:
	int ret = std_puts(s);
	mDelay(25);						// Give it a little time to clean itself up; .025s should do it.
	return ret;
}
int GetChar(void) {
	return std_getchar();
 80048ec:	f7ff bcbc 	b.w	8004268 <std_getchar>

080048f0 <GetString>:
}
char* GetString(char* s) {
	return std_gets(s);
 80048f0:	f7ff bcd2 	b.w	8004298 <std_gets>

080048f4 <Printu32d>:
}
void Printu32d(uint32 lNum) {
 80048f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint32 temp, div = 1000000000;
 80048f6:	4a16      	ldr	r2, [pc, #88]	; (8004950 <Printu32d+0x5c>)
	return std_getchar();
}
char* GetString(char* s) {
	return std_gets(s);
}
void Printu32d(uint32 lNum) {
 80048f8:	2300      	movs	r3, #0
	uint32 temp, div = 1000000000;
	char out[11];
	uint8 i, j;
	for (i = 0; i < 10; i++) {
		temp = (char) (lNum / div);
 80048fa:	fbb0 f1f2 	udiv	r1, r0, r2
		lNum = (lNum % div);
 80048fe:	fb02 0011 	mls	r0, r2, r1, r0
			//        lNum -= (uint32) (temp*div);
			//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
 8004902:	f001 010f 	and.w	r1, r1, #15
 8004906:	3130      	adds	r1, #48	; 0x30
 8004908:	ac01      	add	r4, sp, #4
 800490a:	5519      	strb	r1, [r3, r4]
		div /= 10;
 800490c:	210a      	movs	r1, #10
 800490e:	3301      	adds	r3, #1
}
void Printu32d(uint32 lNum) {
	uint32 temp, div = 1000000000;
	char out[11];
	uint8 i, j;
	for (i = 0; i < 10; i++) {
 8004910:	428b      	cmp	r3, r1
		temp = (char) (lNum / div);
		lNum = (lNum % div);
			//        lNum -= (uint32) (temp*div);
			//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
 8004912:	fbb2 f2f1 	udiv	r2, r2, r1
}
void Printu32d(uint32 lNum) {
	uint32 temp, div = 1000000000;
	char out[11];
	uint8 i, j;
	for (i = 0; i < 10; i++) {
 8004916:	d1f0      	bne.n	80048fa <Printu32d+0x6>
			//        lNum -= (uint32) (temp*div);
			//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';
 8004918:	2000      	movs	r0, #0
 800491a:	f88d 000e 	strb.w	r0, [sp, #14]
	for (i = 0; i < 10; i++) {
		if (out[0] == '0') {
 800491e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004922:	2930      	cmp	r1, #48	; 0x30
 8004924:	d007      	beq.n	8004936 <Printu32d+0x42>
 8004926:	3b01      	subs	r3, #1
			//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';
	for (i = 0; i < 10; i++) {
 8004928:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800492c:	d1f7      	bne.n	800491e <Printu32d+0x2a>
				if (out[j] == '\0')
					break;
			}
		}
	}
	std_puts(out);
 800492e:	a801      	add	r0, sp, #4
 8004930:	f7ff fc8f 	bl	8004252 <std_puts>
	return;
}
 8004934:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	return std_getchar();
}
char* GetString(char* s) {
	return std_gets(s);
}
void Printu32d(uint32 lNum) {
 8004936:	a801      	add	r0, sp, #4
 8004938:	f10d 0203 	add.w	r2, sp, #3
 800493c:	3009      	adds	r0, #9
	}
	out[i] = '\0';
	for (i = 0; i < 10; i++) {
		if (out[0] == '0') {
			for (j = 0; j < 10; j++) {
				out[j] = out[j + 1];
 800493e:	7891      	ldrb	r1, [r2, #2]
 8004940:	f802 1f01 	strb.w	r1, [r2, #1]!
				if (out[j] == '\0')
 8004944:	2900      	cmp	r1, #0
 8004946:	d0ee      	beq.n	8004926 <Printu32d+0x32>
		div /= 10;
	}
	out[i] = '\0';
	for (i = 0; i < 10; i++) {
		if (out[0] == '0') {
			for (j = 0; j < 10; j++) {
 8004948:	4282      	cmp	r2, r0
 800494a:	d1f8      	bne.n	800493e <Printu32d+0x4a>
 800494c:	e7eb      	b.n	8004926 <Printu32d+0x32>
 800494e:	bf00      	nop
 8004950:	3b9aca00 	blcc	66b7158 <__Stack_Size+0x66b6d58>

08004954 <Battery_Monitor_Alarm>:
	temp = ReadAnalog(port);
	SetEPort((port * 2), 0);
	SetEPort((port * 2) + 1, 0);
	return temp;
}
void Battery_Monitor_Alarm(void) {
 8004954:	b510      	push	{r4, lr}
 8004956:	2006      	movs	r0, #6
 8004958:	f7fe fd5d 	bl	8003416 <ReadAnalog.part.2>
	uint16 volt = ReadAnalog(VBUS) >> 4;
 800495c:	f3c0 140f 	ubfx	r4, r0, #4, #16
#ifdef DEBUG_PRINT_VOLTAGE
	PrintString("\nBattery Voltage: ");
 8004960:	4816      	ldr	r0, [pc, #88]	; (80049bc <Battery_Monitor_Alarm+0x68>)
 8004962:	f7ff fd97 	bl	8004494 <PrintString>
	Printu32d(volt);
 8004966:	4620      	mov	r0, r4
 8004968:	f7ff ffc4 	bl	80048f4 <Printu32d>
	PrintString("e-1 [Volts]\n");
 800496c:	4814      	ldr	r0, [pc, #80]	; (80049c0 <Battery_Monitor_Alarm+0x6c>)
 800496e:	f7ff fd91 	bl	8004494 <PrintString>
#endif
		// ALARM!!!
	if (volt < VBUS_LOW_LIMIT) {
 8004972:	2c72      	cmp	r4, #114	; 0x72
 8004974:	d820      	bhi.n	80049b8 <Battery_Monitor_Alarm+0x64>
		Buzzed(500, 100);
 8004976:	2164      	movs	r1, #100	; 0x64
 8004978:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800497c:	f7fe fe94 	bl	80036a8 <Buzzed>
		Buzzed(500, 5000);
 8004980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004984:	f241 3188 	movw	r1, #5000	; 0x1388
 8004988:	f7fe fe8e 	bl	80036a8 <Buzzed>
		Buzzed(500, 100);
 800498c:	2164      	movs	r1, #100	; 0x64
 800498e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004992:	f7fe fe89 	bl	80036a8 <Buzzed>
		Buzzed(500, 5000);
 8004996:	f241 3188 	movw	r1, #5000	; 0x1388
 800499a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800499e:	f7fe fe83 	bl	80036a8 <Buzzed>
		PrintString("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
 80049a2:	4808      	ldr	r0, [pc, #32]	; (80049c4 <Battery_Monitor_Alarm+0x70>)
 80049a4:	f7ff fd76 	bl	8004494 <PrintString>
		PrintString("Battery Voltage Critical");
 80049a8:	4807      	ldr	r0, [pc, #28]	; (80049c8 <Battery_Monitor_Alarm+0x74>)
 80049aa:	f7ff fd73 	bl	8004494 <PrintString>
		PrintString("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
 80049ae:	4805      	ldr	r0, [pc, #20]	; (80049c4 <Battery_Monitor_Alarm+0x70>)
	}
	return;
}
 80049b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Buzzed(500, 5000);
		Buzzed(500, 100);
		Buzzed(500, 5000);
		PrintString("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
		PrintString("Battery Voltage Critical");
		PrintString("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
 80049b4:	f7ff bd6e 	b.w	8004494 <PrintString>
 80049b8:	bd10      	pop	{r4, pc}
 80049ba:	bf00      	nop
 80049bc:	08006db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp, sp, lr}
 80049c0:	08006dcb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, sl, fp, sp, lr}
 80049c4:	08006dd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, fp, sp, lr}
 80049c8:	08006e03 	stmdaeq	r0, {r0, r1, r9, sl, fp, sp, lr}

080049cc <Prints32d>:
		}
	}
	std_puts(out);
	return;
}
void Prints32d(int32 lNumS) {
 80049cc:	b530      	push	{r4, r5, lr}
	uint8 i, j;
	if (lNum < 0) {
		out[0] = '-';
		lNum = (uint32) ((~lNumS) + 1);
	} else {
		out[0] = '+';
 80049ce:	232b      	movs	r3, #43	; 0x2b
		}
	}
	std_puts(out);
	return;
}
void Prints32d(int32 lNumS) {
 80049d0:	b085      	sub	sp, #20
	uint32 temp, lNum, div = 1000000000;
 80049d2:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <Prints32d+0x6c>)
	uint8 i, j;
	if (lNum < 0) {
		out[0] = '-';
		lNum = (uint32) ((~lNumS) + 1);
	} else {
		out[0] = '+';
 80049d4:	f88d 3004 	strb.w	r3, [sp, #4]
		lNum = (uint32) (lNumS);
 80049d8:	2300      	movs	r3, #0
	}
	for (i = 1; i < 11; i++) {
		temp = (lNum / div);
 80049da:	fbb0 f1f2 	udiv	r1, r0, r2
		lNum = (lNum % div);
 80049de:	fb02 0011 	mls	r0, r2, r1, r0
		}
	}
	std_puts(out);
	return;
}
void Prints32d(int32 lNumS) {
 80049e2:	ad04      	add	r5, sp, #16
	for (i = 1; i < 11; i++) {
		temp = (lNum / div);
		lNum = (lNum % div);
			//        lNum -= (uint32) (temp*div);
			//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
 80049e4:	f001 010f 	and.w	r1, r1, #15
 80049e8:	3130      	adds	r1, #48	; 0x30
		}
	}
	std_puts(out);
	return;
}
void Prints32d(int32 lNumS) {
 80049ea:	18ec      	adds	r4, r5, r3
	for (i = 1; i < 11; i++) {
		temp = (lNum / div);
		lNum = (lNum % div);
			//        lNum -= (uint32) (temp*div);
			//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
 80049ec:	f804 1c0b 	strb.w	r1, [r4, #-11]
 80049f0:	3301      	adds	r3, #1
		div /= 10;
 80049f2:	210a      	movs	r1, #10
		lNum = (uint32) ((~lNumS) + 1);
	} else {
		out[0] = '+';
		lNum = (uint32) (lNumS);
	}
	for (i = 1; i < 11; i++) {
 80049f4:	428b      	cmp	r3, r1
		temp = (lNum / div);
		lNum = (lNum % div);
			//        lNum -= (uint32) (temp*div);
			//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
 80049f6:	fbb2 f2f1 	udiv	r2, r2, r1
		lNum = (uint32) ((~lNumS) + 1);
	} else {
		out[0] = '+';
		lNum = (uint32) (lNumS);
	}
	for (i = 1; i < 11; i++) {
 80049fa:	d1ee      	bne.n	80049da <Prints32d+0xe>
			//        lNum -= (uint32) (temp*div);
			//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';
 80049fc:	2000      	movs	r0, #0
 80049fe:	f88d 000f 	strb.w	r0, [sp, #15]
 8004a02:	220b      	movs	r2, #11
	for (i = 0; i < 11; i++) {
		if (out[0] == '0') {
 8004a04:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004a08:	2930      	cmp	r1, #48	; 0x30
 8004a0a:	d008      	beq.n	8004a1e <Prints32d+0x52>
 8004a0c:	3a01      	subs	r2, #1
			//        out[i] = (char) (temp&0x0000000F)+0x30;
		out[i] = (char) ((temp & 0x0F) + 0x30);
		div /= 10;
	}
	out[i] = '\0';
	for (i = 0; i < 11; i++) {
 8004a0e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8004a12:	d1f7      	bne.n	8004a04 <Prints32d+0x38>
				if (out[j] == '\0')
					break;
			}
		}
	}
	std_puts(out);
 8004a14:	a801      	add	r0, sp, #4
 8004a16:	f7ff fc1c 	bl	8004252 <std_puts>
	return;
}
 8004a1a:	b005      	add	sp, #20
 8004a1c:	bd30      	pop	{r4, r5, pc}
		}
	}
	std_puts(out);
	return;
}
void Prints32d(int32 lNumS) {
 8004a1e:	a801      	add	r0, sp, #4
 8004a20:	f10d 0303 	add.w	r3, sp, #3
 8004a24:	300a      	adds	r0, #10
	}
	out[i] = '\0';
	for (i = 0; i < 11; i++) {
		if (out[0] == '0') {
			for (j = 0; j < 11; j++) {
				out[j] = out[j + 1];
 8004a26:	7899      	ldrb	r1, [r3, #2]
 8004a28:	f803 1f01 	strb.w	r1, [r3, #1]!
				if (out[j] == '\0')
 8004a2c:	2900      	cmp	r1, #0
 8004a2e:	d0ed      	beq.n	8004a0c <Prints32d+0x40>
		div /= 10;
	}
	out[i] = '\0';
	for (i = 0; i < 11; i++) {
		if (out[0] == '0') {
			for (j = 0; j < 11; j++) {
 8004a30:	4283      	cmp	r3, r0
 8004a32:	d1f8      	bne.n	8004a26 <Prints32d+0x5a>
 8004a34:	e7ea      	b.n	8004a0c <Prints32d+0x40>
 8004a36:	bf00      	nop
 8004a38:	3b9aca00 	blcc	66b7240 <__Stack_Size+0x66b6e40>

08004a3c <Printu16h>:
		}
	}
	std_puts(out);
	return;
}
void Printu16h(uint16 wNum) {
 8004a3c:	b507      	push	{r0, r1, r2, lr}
	char out[7];
	out[0] = '0';
 8004a3e:	2330      	movs	r3, #48	; 0x30
	out[1] = 'x';
 8004a40:	2178      	movs	r1, #120	; 0x78
	std_puts(out);
	return;
}
void Printu16h(uint16 wNum) {
	char out[7];
	out[0] = '0';
 8004a42:	f88d 3000 	strb.w	r3, [sp]
	out[1] = 'x';
	out[6] = '\0';
	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
 8004a46:	0b03      	lsrs	r3, r0, #12
	return;
}
void Printu16h(uint16 wNum) {
	char out[7];
	out[0] = '0';
	out[1] = 'x';
 8004a48:	f88d 1001 	strb.w	r1, [sp, #1]
	out[6] = '\0';
	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
 8004a4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
}
void Printu16h(uint16 wNum) {
	char out[7];
	out[0] = '0';
	out[1] = 'x';
	out[6] = '\0';
 8004a50:	2200      	movs	r2, #0
	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
	if (out[2] > '9')
 8004a52:	2939      	cmp	r1, #57	; 0x39
}
void Printu16h(uint16 wNum) {
	char out[7];
	out[0] = '0';
	out[1] = 'x';
	out[6] = '\0';
 8004a54:	f88d 2006 	strb.w	r2, [sp, #6]
	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
	if (out[2] > '9')
 8004a58:	d802      	bhi.n	8004a60 <Printu16h+0x24>
void Printu16h(uint16 wNum) {
	char out[7];
	out[0] = '0';
	out[1] = 'x';
	out[6] = '\0';
	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
 8004a5a:	f88d 1002 	strb.w	r1, [sp, #2]
 8004a5e:	e002      	b.n	8004a66 <Printu16h+0x2a>
	if (out[2] > '9')
		out[2] += 7;
 8004a60:	3337      	adds	r3, #55	; 0x37
 8004a62:	f88d 3002 	strb.w	r3, [sp, #2]
	out[3] = (char) ((wNum >> 8) & 0x0F) + 0x30;
 8004a66:	f3c0 2303 	ubfx	r3, r0, #8, #4
 8004a6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
	if (out[3] > '9')
 8004a6e:	2a39      	cmp	r2, #57	; 0x39
 8004a70:	d802      	bhi.n	8004a78 <Printu16h+0x3c>
	out[1] = 'x';
	out[6] = '\0';
	out[2] = (char) ((wNum >> 12) & 0x0F) + 0x30;
	if (out[2] > '9')
		out[2] += 7;
	out[3] = (char) ((wNum >> 8) & 0x0F) + 0x30;
 8004a72:	f88d 2003 	strb.w	r2, [sp, #3]
 8004a76:	e002      	b.n	8004a7e <Printu16h+0x42>
	if (out[3] > '9')
		out[3] += 7;
 8004a78:	3337      	adds	r3, #55	; 0x37
 8004a7a:	f88d 3003 	strb.w	r3, [sp, #3]
	out[4] = (char) ((wNum >> 4) & 0x0F) + 0x30;
 8004a7e:	f3c0 1103 	ubfx	r1, r0, #4, #4
 8004a82:	f101 0330 	add.w	r3, r1, #48	; 0x30
	if (out[4] > '9')
 8004a86:	2b39      	cmp	r3, #57	; 0x39
 8004a88:	d802      	bhi.n	8004a90 <Printu16h+0x54>
	if (out[2] > '9')
		out[2] += 7;
	out[3] = (char) ((wNum >> 8) & 0x0F) + 0x30;
	if (out[3] > '9')
		out[3] += 7;
	out[4] = (char) ((wNum >> 4) & 0x0F) + 0x30;
 8004a8a:	f88d 3004 	strb.w	r3, [sp, #4]
 8004a8e:	e002      	b.n	8004a96 <Printu16h+0x5a>
	if (out[4] > '9')
		out[4] += 7;
 8004a90:	3137      	adds	r1, #55	; 0x37
 8004a92:	f88d 1004 	strb.w	r1, [sp, #4]
	out[5] = (char) (wNum & 0x0F) + 0x30;
 8004a96:	f000 000f 	and.w	r0, r0, #15
 8004a9a:	f100 0230 	add.w	r2, r0, #48	; 0x30
	if (out[5] > '9')
 8004a9e:	2a39      	cmp	r2, #57	; 0x39
 8004aa0:	d802      	bhi.n	8004aa8 <Printu16h+0x6c>
	if (out[3] > '9')
		out[3] += 7;
	out[4] = (char) ((wNum >> 4) & 0x0F) + 0x30;
	if (out[4] > '9')
		out[4] += 7;
	out[5] = (char) (wNum & 0x0F) + 0x30;
 8004aa2:	f88d 2005 	strb.w	r2, [sp, #5]
 8004aa6:	e002      	b.n	8004aae <Printu16h+0x72>
	if (out[5] > '9')
		out[5] += 7;
 8004aa8:	3037      	adds	r0, #55	; 0x37
 8004aaa:	f88d 0005 	strb.w	r0, [sp, #5]
	std_puts(out);
 8004aae:	4668      	mov	r0, sp
 8004ab0:	f7ff fbcf 	bl	8004252 <std_puts>
	return;
}
 8004ab4:	bd0e      	pop	{r1, r2, r3, pc}

08004ab6 <Printu8h>:
void Printu8h(uint8 bNum) {
 8004ab6:	b507      	push	{r0, r1, r2, lr}
	char out[5];
	out[0] = '0';
 8004ab8:	2330      	movs	r3, #48	; 0x30
	out[1] = 'x';
 8004aba:	2178      	movs	r1, #120	; 0x78
	std_puts(out);
	return;
}
void Printu8h(uint8 bNum) {
	char out[5];
	out[0] = '0';
 8004abc:	f88d 3000 	strb.w	r3, [sp]
	out[1] = 'x';
	out[4] = '\0';
	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
 8004ac0:	0903      	lsrs	r3, r0, #4
	return;
}
void Printu8h(uint8 bNum) {
	char out[5];
	out[0] = '0';
	out[1] = 'x';
 8004ac2:	f88d 1001 	strb.w	r1, [sp, #1]
	out[4] = '\0';
	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
 8004ac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
}
void Printu8h(uint8 bNum) {
	char out[5];
	out[0] = '0';
	out[1] = 'x';
	out[4] = '\0';
 8004aca:	2200      	movs	r2, #0
	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
	if (out[2] > '9')
 8004acc:	2939      	cmp	r1, #57	; 0x39
}
void Printu8h(uint8 bNum) {
	char out[5];
	out[0] = '0';
	out[1] = 'x';
	out[4] = '\0';
 8004ace:	f88d 2004 	strb.w	r2, [sp, #4]
	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
	if (out[2] > '9')
 8004ad2:	d802      	bhi.n	8004ada <Printu8h+0x24>
void Printu8h(uint8 bNum) {
	char out[5];
	out[0] = '0';
	out[1] = 'x';
	out[4] = '\0';
	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
 8004ad4:	f88d 1002 	strb.w	r1, [sp, #2]
 8004ad8:	e002      	b.n	8004ae0 <Printu8h+0x2a>
	if (out[2] > '9')
		out[2] += 7;
 8004ada:	3337      	adds	r3, #55	; 0x37
 8004adc:	f88d 3002 	strb.w	r3, [sp, #2]
	out[3] = (char) (bNum & 0x0F) + 0x30;
 8004ae0:	f000 000f 	and.w	r0, r0, #15
 8004ae4:	f100 0230 	add.w	r2, r0, #48	; 0x30
	if (out[3] > '9')
 8004ae8:	2a39      	cmp	r2, #57	; 0x39
 8004aea:	d802      	bhi.n	8004af2 <Printu8h+0x3c>
	out[1] = 'x';
	out[4] = '\0';
	out[2] = (char) ((bNum >> 4) & 0x0F) + 0x30;
	if (out[2] > '9')
		out[2] += 7;
	out[3] = (char) (bNum & 0x0F) + 0x30;
 8004aec:	f88d 2003 	strb.w	r2, [sp, #3]
 8004af0:	e002      	b.n	8004af8 <Printu8h+0x42>
	if (out[3] > '9')
		out[3] += 7;
 8004af2:	3037      	adds	r0, #55	; 0x37
 8004af4:	f88d 0003 	strb.w	r0, [sp, #3]
	std_puts(out);
 8004af8:	4668      	mov	r0, sp
 8004afa:	f7ff fbaa 	bl	8004252 <std_puts>
	return;
}
 8004afe:	bd0e      	pop	{r1, r2, r3, pc}

08004b00 <dxl_check>:
			printStatus();
	}
	dxl_clear_statpkt();

}
void dxl_check() {
 8004b00:	b538      	push	{r3, r4, r5, lr}
	PrintString("Checking Dynamixels...\n");
 8004b02:	4815      	ldr	r0, [pc, #84]	; (8004b58 <dxl_check+0x58>)
 8004b04:	f7ff fcc6 	bl	8004494 <PrintString>
	uint8 id = 0;
	int ping;
	for (id = 0; id < NUM_AX12_SERVOS; id++) {			// Go through each servo listed.
 8004b08:	2400      	movs	r4, #0
		PrintString("DXL ");													// Print out some
		Printu8h(id+1);																// debugging info via
 8004b0a:	1c65      	adds	r5, r4, #1
void dxl_check() {
	PrintString("Checking Dynamixels...\n");
	uint8 id = 0;
	int ping;
	for (id = 0; id < NUM_AX12_SERVOS; id++) {			// Go through each servo listed.
		PrintString("DXL ");													// Print out some
 8004b0c:	4813      	ldr	r0, [pc, #76]	; (8004b5c <dxl_check+0x5c>)
		Printu8h(id+1);																// debugging info via
 8004b0e:	b2ed      	uxtb	r5, r5
void dxl_check() {
	PrintString("Checking Dynamixels...\n");
	uint8 id = 0;
	int ping;
	for (id = 0; id < NUM_AX12_SERVOS; id++) {			// Go through each servo listed.
		PrintString("DXL ");													// Print out some
 8004b10:	f7ff fcc0 	bl	8004494 <PrintString>
		Printu8h(id+1);																// debugging info via
 8004b14:	4628      	mov	r0, r5
 8004b16:	f7ff ffce 	bl	8004ab6 <Printu8h>
		PrintString(": ");														// the serial link.
 8004b1a:	4811      	ldr	r0, [pc, #68]	; (8004b60 <dxl_check+0x60>)
 8004b1c:	f7ff fcba 	bl	8004494 <PrintString>
		setLED(TXD, 1);
		ping = dxl_ping(id);
 8004b20:	4620      	mov	r0, r4
 8004b22:	f7ff fa3b 	bl	8003f9c <dxl_ping>
			// If the ping times out or generates an error, let us know by printing a string to the Terminal.
		switch (ping) {
 8004b26:	2804      	cmp	r0, #4
 8004b28:	d00b      	beq.n	8004b42 <dxl_check+0x42>
 8004b2a:	d804      	bhi.n	8004b36 <dxl_check+0x36>
 8004b2c:	2801      	cmp	r0, #1
 8004b2e:	d006      	beq.n	8004b3e <dxl_check+0x3e>
 8004b30:	2802      	cmp	r0, #2
 8004b32:	d106      	bne.n	8004b42 <dxl_check+0x42>
 8004b34:	e003      	b.n	8004b3e <dxl_check+0x3e>
 8004b36:	2810      	cmp	r0, #16
 8004b38:	d103      	bne.n	8004b42 <dxl_check+0x42>
			case COMM_RXSUCCESS:	PrintString("PASS\n"); break;
			case COMM_TXSUCCESS:	PrintString("PASS\n"); break;
			case COMM_RXTIMEOUT:	PrintString("FAIL\n"); break;
			case COMM_TXERROR:		PrintString("ERROR\n");break;
 8004b3a:	480a      	ldr	r0, [pc, #40]	; (8004b64 <dxl_check+0x64>)
 8004b3c:	e002      	b.n	8004b44 <dxl_check+0x44>
		setLED(TXD, 1);
		ping = dxl_ping(id);
			// If the ping times out or generates an error, let us know by printing a string to the Terminal.
		switch (ping) {
			case COMM_RXSUCCESS:	PrintString("PASS\n"); break;
			case COMM_TXSUCCESS:	PrintString("PASS\n"); break;
 8004b3e:	480a      	ldr	r0, [pc, #40]	; (8004b68 <dxl_check+0x68>)
 8004b40:	e000      	b.n	8004b44 <dxl_check+0x44>
			case COMM_RXTIMEOUT:	PrintString("FAIL\n"); break;
			case COMM_TXERROR:		PrintString("ERROR\n");break;
			case COMM_RXFAIL:			PrintString("FAIL\n"); break;
			case COMM_TXFAIL:			PrintString("FAIL\n"); break;
			default:							PrintString("FAIL\n"); break;		// Innocent until proven guilty does not apply here.
 8004b42:	480a      	ldr	r0, [pc, #40]	; (8004b6c <dxl_check+0x6c>)
 8004b44:	f7ff fca6 	bl	8004494 <PrintString>
}
void dxl_check() {
	PrintString("Checking Dynamixels...\n");
	uint8 id = 0;
	int ping;
	for (id = 0; id < NUM_AX12_SERVOS; id++) {			// Go through each servo listed.
 8004b48:	2d12      	cmp	r5, #18
 8004b4a:	462c      	mov	r4, r5
 8004b4c:	d1dd      	bne.n	8004b0a <dxl_check+0xa>
			case COMM_TXFAIL:			PrintString("FAIL\n"); break;
			default:							PrintString("FAIL\n"); break;		// Innocent until proven guilty does not apply here.
		}
		setLED(TXD, 0);
	}
	PrintString("Done checking Dynamixels.\n");
 8004b4e:	4808      	ldr	r0, [pc, #32]	; (8004b70 <dxl_check+0x70>)
}
 8004b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			case COMM_TXFAIL:			PrintString("FAIL\n"); break;
			default:							PrintString("FAIL\n"); break;		// Innocent until proven guilty does not apply here.
		}
		setLED(TXD, 0);
	}
	PrintString("Done checking Dynamixels.\n");
 8004b54:	f7ff bc9e 	b.w	8004494 <PrintString>
 8004b58:	08006e1c 	stmdaeq	r0, {r2, r3, r4, r9, sl, fp, sp, lr}
 8004b5c:	08006e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, sp, lr}
 8004b60:	08006dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, sp, lr}
 8004b64:	08006e45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, sp, lr}
 8004b68:	08006e39 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, fp, sp, lr}
 8004b6c:	08006e3f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r9, sl, fp, sp, lr}
 8004b70:	08006e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, sp, lr}

08004b74 <ISR_Delay_Base>:
	setLED(POWER, 0);
	PrintString("\nInitialized.\n");
}
void ISR_Delay_Base() {
		// User accessible delay counter
	if (glDelayCounter > 1)
 8004b74:	4b35      	ldr	r3, [pc, #212]	; (8004c4c <ISR_Delay_Base+0xd8>)
	setLED(POWER, 1);
	mDelay(100);
	setLED(POWER, 0);
	PrintString("\nInitialized.\n");
}
void ISR_Delay_Base() {
 8004b76:	b510      	push	{r4, lr}
		// User accessible delay counter
	if (glDelayCounter > 1)
 8004b78:	68da      	ldr	r2, [r3, #12]
		glDelayCounter--;
 8004b7a:	68d8      	ldr	r0, [r3, #12]
	setLED(POWER, 0);
	PrintString("\nInitialized.\n");
}
void ISR_Delay_Base() {
		// User accessible delay counter
	if (glDelayCounter > 1)
 8004b7c:	2a01      	cmp	r2, #1
 8004b7e:	d902      	bls.n	8004b86 <ISR_Delay_Base+0x12>
		glDelayCounter--;
 8004b80:	1e44      	subs	r4, r0, #1
 8004b82:	60dc      	str	r4, [r3, #12]
 8004b84:	e007      	b.n	8004b96 <ISR_Delay_Base+0x22>
	else if (glDelayCounter > 0) {
 8004b86:	b130      	cbz	r0, 8004b96 <ISR_Delay_Base+0x22>
		glDelayCounter--;
 8004b88:	68d9      	ldr	r1, [r3, #12]
 8004b8a:	1e4c      	subs	r4, r1, #1
 8004b8c:	60dc      	str	r4, [r3, #12]
		gbCounterCount--;
 8004b8e:	7c1a      	ldrb	r2, [r3, #16]
 8004b90:	1e50      	subs	r0, r2, #1
 8004b92:	b2c1      	uxtb	r1, r0
 8004b94:	7419      	strb	r1, [r3, #16]
	}
		// User accessible timeout/countdown counter
	if (glCountdownCounter > 1) {
 8004b96:	4c2d      	ldr	r4, [pc, #180]	; (8004c4c <ISR_Delay_Base+0xd8>)
 8004b98:	6b63      	ldr	r3, [r4, #52]	; 0x34
		glCountdownCounter--;
 8004b9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
	else if (glDelayCounter > 0) {
		glDelayCounter--;
		gbCounterCount--;
	}
		// User accessible timeout/countdown counter
	if (glCountdownCounter > 1) {
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d90c      	bls.n	8004bba <ISR_Delay_Base+0x46>
		glCountdownCounter--;
 8004ba0:	1e51      	subs	r1, r2, #1
 8004ba2:	6361      	str	r1, [r4, #52]	; 0x34
#ifdef USING_SYSTICK_100US
		if ( (glCountdownCounter & 0x00000200) )
#elif defined USING_SYSTICK_10US
			if ( (glCountdownCounter & 0x00001000) )
 8004ba4:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8004ba6:	2006      	movs	r0, #6
 8004ba8:	f414 5180 	ands.w	r1, r4, #4096	; 0x1000
 8004bac:	d002      	beq.n	8004bb4 <ISR_Delay_Base+0x40>
 8004bae:	f7fe fb09 	bl	80031c4 <SetLED.part.0>
 8004bb2:	e00e      	b.n	8004bd2 <ISR_Delay_Base+0x5e>
#elif defined USING_SYSTICK_1US
				if ( (glCountdownCounter & 0x00010000) )
#endif
					SetLED(AUX, 1);
				else
					SetLED(AUX, 0);
 8004bb4:	f7fe fbdc 	bl	8003370 <SetLED>
 8004bb8:	e00b      	b.n	8004bd2 <ISR_Delay_Base+0x5e>
	} else if (glCountdownCounter > 0) {
 8004bba:	b152      	cbz	r2, 8004bd2 <ISR_Delay_Base+0x5e>
		SetLED(AUX, 0);
 8004bbc:	2006      	movs	r0, #6
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f7fe fbd6 	bl	8003370 <SetLED>
		glCountdownCounter--;
 8004bc4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004bc6:	1e41      	subs	r1, r0, #1
 8004bc8:	6361      	str	r1, [r4, #52]	; 0x34
		gbCounterCount--;
 8004bca:	7c23      	ldrb	r3, [r4, #16]
 8004bcc:	1e5a      	subs	r2, r3, #1
 8004bce:	b2d0      	uxtb	r0, r2
 8004bd0:	7420      	strb	r0, [r4, #16]
	}
		// Buzzer countdown counter
	if (glBuzzerCounter > 1)
 8004bd2:	4b1e      	ldr	r3, [pc, #120]	; (8004c4c <ISR_Delay_Base+0xd8>)
 8004bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		glBuzzerCounter--;
 8004bd6:	6b98      	ldr	r0, [r3, #56]	; 0x38
		SetLED(AUX, 0);
		glCountdownCounter--;
		gbCounterCount--;
	}
		// Buzzer countdown counter
	if (glBuzzerCounter > 1)
 8004bd8:	2a01      	cmp	r2, #1
 8004bda:	d902      	bls.n	8004be2 <ISR_Delay_Base+0x6e>
		glBuzzerCounter--;
 8004bdc:	1e44      	subs	r4, r0, #1
 8004bde:	639c      	str	r4, [r3, #56]	; 0x38
 8004be0:	e007      	b.n	8004bf2 <ISR_Delay_Base+0x7e>
	else if (glBuzzerCounter > 0) {
 8004be2:	b130      	cbz	r0, 8004bf2 <ISR_Delay_Base+0x7e>
		glBuzzerCounter--;
 8004be4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004be6:	1e4c      	subs	r4, r1, #1
 8004be8:	639c      	str	r4, [r3, #56]	; 0x38
		gbCounterCount--;
 8004bea:	7c1a      	ldrb	r2, [r3, #16]
 8004bec:	1e50      	subs	r0, r2, #1
 8004bee:	b2c1      	uxtb	r1, r0
 8004bf0:	7419      	strb	r1, [r3, #16]
	}
		// Dynamixel timeout counter
	if (glDxlTimeoutCounter > 1)
 8004bf2:	4b16      	ldr	r3, [pc, #88]	; (8004c4c <ISR_Delay_Base+0xd8>)
 8004bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
		glDxlTimeoutCounter--;
 8004bf6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	else if (glBuzzerCounter > 0) {
		glBuzzerCounter--;
		gbCounterCount--;
	}
		// Dynamixel timeout counter
	if (glDxlTimeoutCounter > 1)
 8004bf8:	2a01      	cmp	r2, #1
 8004bfa:	d902      	bls.n	8004c02 <ISR_Delay_Base+0x8e>
		glDxlTimeoutCounter--;
 8004bfc:	1e44      	subs	r4, r0, #1
 8004bfe:	63dc      	str	r4, [r3, #60]	; 0x3c
 8004c00:	e007      	b.n	8004c12 <ISR_Delay_Base+0x9e>
	else if (glDxlTimeoutCounter > 0) {
 8004c02:	b130      	cbz	r0, 8004c12 <ISR_Delay_Base+0x9e>
		glDxlTimeoutCounter--;
 8004c04:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004c06:	1e4c      	subs	r4, r1, #1
 8004c08:	63dc      	str	r4, [r3, #60]	; 0x3c
		gbCounterCount--;
 8004c0a:	7c1a      	ldrb	r2, [r3, #16]
 8004c0c:	1e50      	subs	r0, r2, #1
 8004c0e:	b2c1      	uxtb	r1, r0
 8004c10:	7419      	strb	r1, [r3, #16]
	}
		// PC UART timeout counter
	if (glPcuTimeoutCounter > 1)
 8004c12:	4b0e      	ldr	r3, [pc, #56]	; (8004c4c <ISR_Delay_Base+0xd8>)
 8004c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		glPcuTimeoutCounter--;
 8004c16:	6c18      	ldr	r0, [r3, #64]	; 0x40
	else if (glDxlTimeoutCounter > 0) {
		glDxlTimeoutCounter--;
		gbCounterCount--;
	}
		// PC UART timeout counter
	if (glPcuTimeoutCounter > 1)
 8004c18:	2a01      	cmp	r2, #1
 8004c1a:	d902      	bls.n	8004c22 <ISR_Delay_Base+0xae>
		glPcuTimeoutCounter--;
 8004c1c:	1e44      	subs	r4, r0, #1
 8004c1e:	641c      	str	r4, [r3, #64]	; 0x40
 8004c20:	e007      	b.n	8004c32 <ISR_Delay_Base+0xbe>
	else if (glPcuTimeoutCounter > 0) {
 8004c22:	b130      	cbz	r0, 8004c32 <ISR_Delay_Base+0xbe>
		glPcuTimeoutCounter--;
 8004c24:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c26:	1e4c      	subs	r4, r1, #1
 8004c28:	641c      	str	r4, [r3, #64]	; 0x40
		gbCounterCount--;
 8004c2a:	7c1a      	ldrb	r2, [r3, #16]
 8004c2c:	1e50      	subs	r0, r2, #1
 8004c2e:	b2c1      	uxtb	r1, r0
 8004c30:	7419      	strb	r1, [r3, #16]
		//            glBatTimeoutCounter = glBatTimeoutSet;
		//        else
		//            glBatTimeoutCounter = 100000;
		//    }
		// If no active counters, disable interrupt
	if (gbCounterCount == 0) {
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <ISR_Delay_Base+0xd8>)
 8004c34:	7c1c      	ldrb	r4, [r3, #16]
 8004c36:	b944      	cbnz	r4, 8004c4a <ISR_Delay_Base+0xd6>
			// Disable SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Disable);
 8004c38:	f06f 0001 	mvn.w	r0, #1
 8004c3c:	f001 faea 	bl	8006214 <SysTick_CounterCmd>
			// Clear SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Clear);
 8004c40:	4620      	mov	r0, r4
	}
}
 8004c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		// If no active counters, disable interrupt
	if (gbCounterCount == 0) {
			// Disable SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Disable);
			// Clear SysTick Counter
		SysTick_CounterCmd(SysTick_Counter_Clear);
 8004c46:	f001 bae5 	b.w	8006214 <SysTick_CounterCmd>
 8004c4a:	bd10      	pop	{r4, pc}
 8004c4c:	200000d4 	ldrdcs	r0, [r0], -r4

08004c50 <SysTick_Configuration>:
	}
}
void SysTick_Configuration() {
 8004c50:	b508      	push	{r3, lr}
#ifdef USING_SYSTICK_100US
		// SysTick end of count event each 100us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(900);
#elif defined USING_SYSTICK_10US
		// SysTick end of count event each 10us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(90);
 8004c52:	205a      	movs	r0, #90	; 0x5a
 8004c54:	f001 fad8 	bl	8006208 <SysTick_SetReload>
#elif defined USING_SYSTICK_1US
		// SysTick end of count event each 1us with input clock equal to 9MHz (HCLK/8, default)
	SysTick_SetReload(9);
#endif
		// Enable SysTick interrupt
	SysTick_ITConfig(ENABLE);
 8004c58:	2001      	movs	r0, #1
 8004c5a:	f001 faef 	bl	800623c <SysTick_ITConfig>
		// Reset Active Counter count
	gbCounterCount = 0;
 8004c5e:	4b02      	ldr	r3, [pc, #8]	; (8004c68 <SysTick_Configuration+0x18>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	741a      	strb	r2, [r3, #16]
 8004c64:	bd08      	pop	{r3, pc}
 8004c66:	bf00      	nop
 8004c68:	200000d4 	ldrdcs	r0, [r0], -r4

08004c6c <RCC_Configuration>:
}
void RCC_Configuration() {
 8004c6c:	b510      	push	{r4, lr}
	ErrorStatus HSEStartUpStatus;
		// RCC system reset(for debug purpose)
	RCC_DeInit();
 8004c6e:	f001 f923 	bl	8005eb8 <RCC_DeInit>
		// Enable HSE
	RCC_HSEConfig(RCC_HSE_ON);
 8004c72:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004c76:	f001 f93d 	bl	8005ef4 <RCC_HSEConfig>
		// Wait till HSE is ready
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8004c7a:	f001 fa8b 	bl	8006194 <RCC_WaitForHSEStartUp>
	if (HSEStartUpStatus == SUCCESS) {
 8004c7e:	2801      	cmp	r0, #1
		// RCC system reset(for debug purpose)
	RCC_DeInit();
		// Enable HSE
	RCC_HSEConfig(RCC_HSE_ON);
		// Wait till HSE is ready
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8004c80:	4604      	mov	r4, r0
	if (HSEStartUpStatus == SUCCESS) {
 8004c82:	d013      	beq.n	8004cac <RCC_Configuration+0x40>
		while (RCC_GetSYSCLKSource() != 0x08) {
		}
	}
		// Enable peripheral clocks
		// Enable GPIOB and GPIOC clocks
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);
 8004c84:	2101      	movs	r1, #1
 8004c86:	f240 601c 	movw	r0, #1564	; 0x61c
 8004c8a:	f001 fa2d 	bl	80060e8 <RCC_APB2PeriphClockCmd>
		// Enable USART1 Clock (Dynamixel)
#ifdef USING_DYNAMIXEL
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8004c8e:	2101      	movs	r1, #1
 8004c90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004c94:	f001 fa28 	bl	80060e8 <RCC_APB2PeriphClockCmd>
#endif
#ifdef USING_PC_UART
		// Enable USART3 Clock (PC_UART)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8004c98:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	f001 fa2f 	bl	8006100 <RCC_APB1PeriphClockCmd>
#endif
#ifdef USING_ZIGBEE
		// Enable UART5 Clock (Zigbee)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
#endif
	PWR_BackupAccessCmd(ENABLE);
 8004ca2:	2001      	movs	r0, #1
}
 8004ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
#ifdef USING_ZIGBEE
		// Enable UART5 Clock (Zigbee)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
#endif
	PWR_BackupAccessCmd(ENABLE);
 8004ca8:	f001 b8af 	b.w	8005e0a <PWR_BackupAccessCmd>
	RCC_HSEConfig(RCC_HSE_ON);
		// Wait till HSE is ready
	HSEStartUpStatus = RCC_WaitForHSEStartUp();
	if (HSEStartUpStatus == SUCCESS) {
			// Enable Prefetch Buffer
		FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8004cac:	2010      	movs	r0, #16
 8004cae:	f000 fbab 	bl	8005408 <FLASH_PrefetchBufferCmd>
			// Flash 2 wait state
		FLASH_SetLatency(FLASH_Latency_2);
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	f000 fb90 	bl	80053d8 <FLASH_SetLatency>
			// HCLK = SYSCLK
		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8004cb8:	2000      	movs	r0, #0
 8004cba:	f001 f967 	bl	8005f8c <RCC_HCLKConfig>
			// PCLK2 = HCLK
		RCC_PCLK2Config(RCC_HCLK_Div1);
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f001 f978 	bl	8005fb4 <RCC_PCLK2Config>
			// PCLK1 = HCLK/2
		RCC_PCLK1Config(RCC_HCLK_Div2);
 8004cc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004cc8:	f001 f96a 	bl	8005fa0 <RCC_PCLK1Config>
			// PLLCLK = 8MHz * 9 = 72 MHz
		RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 8004ccc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004cd0:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8004cd4:	f001 f938 	bl	8005f48 <RCC_PLLConfig>
			// Enable PLL
		RCC_PLLCmd(ENABLE);
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f001 f93f 	bl	8005f5c <RCC_PLLCmd>
			// Wait till PLL is ready
		while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET) {
 8004cde:	2039      	movs	r0, #57	; 0x39
 8004ce0:	f001 fa44 	bl	800616c <RCC_GetFlagStatus>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d0fa      	beq.n	8004cde <RCC_Configuration+0x72>
		}
			// Select PLL as system clock source
		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8004ce8:	2002      	movs	r0, #2
 8004cea:	f001 f93d 	bl	8005f68 <RCC_SYSCLKConfig>
			// Wait till PLL is used as system clock source
		while (RCC_GetSYSCLKSource() != 0x08) {
 8004cee:	f001 f945 	bl	8005f7c <RCC_GetSYSCLKSource>
 8004cf2:	2808      	cmp	r0, #8
 8004cf4:	d1fb      	bne.n	8004cee <RCC_Configuration+0x82>
 8004cf6:	e7c5      	b.n	8004c84 <RCC_Configuration+0x18>

08004cf8 <NVIC_Configuration>:
		// Enable UART5 Clock (Zigbee)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
#endif
	PWR_BackupAccessCmd(ENABLE);
}
void NVIC_Configuration() {
 8004cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
#ifdef  VECT_TAB_RAM
		// Set the Vector Table base location at 0x20000000
	NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
#else  // VECT_TAB_FLASH
			 // Set the Vector Table base location at 0x08003000
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
 8004cfa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004cfe:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8004d02:	f000 ffbb 	bl	8005c7c <NVIC_SetVectorTable>
#endif
		// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8004d06:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004d0a:	f000 ff0b 	bl	8005b24 <NVIC_PriorityGroupConfig>
		// Enable the USART1 Interrupt (Dynamixel)
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004d0e:	2500      	movs	r5, #0
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004d10:	2401      	movs	r4, #1
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif
		// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
		// Enable the USART1 Interrupt (Dynamixel)
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 8004d12:	2325      	movs	r3, #37	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8004d14:	a801      	add	r0, sp, #4
	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif
		// Configure the NVIC Preemption Priority Bits
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
		// Enable the USART1 Interrupt (Dynamixel)
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
 8004d16:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004d1a:	f88d 5005 	strb.w	r5, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8004d1e:	f88d 5006 	strb.w	r5, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004d22:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8004d26:	f000 ff07 	bl	8005b38 <NVIC_Init>
		// Enable the USART3 Interrupt (Serial/PC_UART)
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
 8004d2a:	2027      	movs	r0, #39	; 0x27
 8004d2c:	f88d 0004 	strb.w	r0, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8004d30:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
		// Enable the USART3 Interrupt (Serial/PC_UART)
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQChannel;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004d32:	f88d 5005 	strb.w	r5, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8004d36:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004d3a:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8004d3e:	f000 fefb 	bl	8005b38 <NVIC_Init>
		// Enable the UART5 Interrupt (Zigbee)
	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQChannel;
 8004d42:	2135      	movs	r1, #53	; 0x35
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8004d44:	2202      	movs	r2, #2
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8004d46:	a801      	add	r0, sp, #4
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
		// Enable the UART5 Interrupt (Zigbee)
	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQChannel;
 8004d48:	f88d 1004 	strb.w	r1, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004d4c:	f88d 5005 	strb.w	r5, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
 8004d50:	f88d 2006 	strb.w	r2, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004d54:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 8004d58:	f000 feee 	bl	8005b38 <NVIC_Init>
}
 8004d5c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08004d5e <GPIO_Configuration>:
void GPIO_Configuration() {
 8004d5e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	GPIO_StructInit(&GPIO_InitStructure);
		// PORTA CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P | PIN_SIG_MOT2M  | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004d62:	4e6c      	ldr	r6, [pc, #432]	; (8004f14 <GPIO_Configuration+0x1b6>)
	NVIC_Init(&NVIC_InitStructure);
}
void GPIO_Configuration() {
		//if (sizeof(port) != sizeof(char[1])) return 0;
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 8004d64:	a801      	add	r0, sp, #4
		// PORTA CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P | PIN_SIG_MOT2M  | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004d66:	2403      	movs	r4, #3
	NVIC_Init(&NVIC_InitStructure);
}
void GPIO_Configuration() {
		//if (sizeof(port) != sizeof(char[1])) return 0;
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
 8004d68:	f000 fe23 	bl	80059b2 <GPIO_StructInit>
		// PORTA CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P | PIN_SIG_MOT2M  | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004d6c:	2510      	movs	r5, #16
void GPIO_Configuration() {
		//if (sizeof(port) != sizeof(char[1])) return 0;
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
		// PORTA CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P | PIN_SIG_MOT2M  | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
 8004d6e:	f640 130f 	movw	r3, #2319	; 0x90f
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004d72:	4630      	mov	r0, r6
 8004d74:	a901      	add	r1, sp, #4
void GPIO_Configuration() {
		//if (sizeof(port) != sizeof(char[1])) return 0;
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_StructInit(&GPIO_InitStructure);
		// PORTA CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P | PIN_SIG_MOT2M  | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
 8004d76:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004d7a:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004d7e:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004d82:	f000 fdc6 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_BUZZER | PIN_ZIGBEE_RESET;
 8004d86:	f44f 5082 	mov.w	r0, #4160	; 0x1040
 8004d8a:	f8ad 0004 	strh.w	r0, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004d8e:	a901      	add	r1, sp, #4
 8004d90:	4630      	mov	r0, r6
	GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT1P | PIN_SIG_MOT1M | PIN_SIG_MOT2P | PIN_SIG_MOT2M  | PIN_SIG_MOT5P | PIN_SIG_MOT5M;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_BUZZER | PIN_ZIGBEE_RESET;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004d92:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004d96:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004d9a:	f000 fdba 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
 8004d9e:	2120      	movs	r1, #32
 8004da0:	f8ad 1004 	strh.w	r1, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8004da4:	f04f 0900 	mov.w	r9, #0
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004da8:	4630      	mov	r0, r6
 8004daa:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004dac:	2748      	movs	r7, #72	; 0x48
	GPIO_InitStructure.GPIO_Pin = PIN_BUZZER | PIN_ZIGBEE_RESET;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8004dae:	f88d 9007 	strb.w	r9, [sp, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004db2:	f000 fdae 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
 8004db6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004dba:	4630      	mov	r0, r6
 8004dbc:	a901      	add	r1, sp, #4
	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM | PIN_LED_PLAY;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004dbe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_ADC1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
 8004dc2:	f8ad 2004 	strh.w	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004dc6:	f88d 7007 	strb.w	r7, [sp, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004dca:	f000 fda2 	bl	8005912 <GPIO_Init>
	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM | PIN_LED_PLAY;
 8004dce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	a901      	add	r1, sp, #4
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_SW_RIGHT | PIN_SW_LEFT;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	// PORTB CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM | PIN_LED_PLAY;
 8004dd6:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004dda:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004dde:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004de2:	f000 fd96 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_ENABLE_TXD | PIN_ENABLE_RXD;
 8004de6:	2030      	movs	r0, #48	; 0x30
 8004de8:	f8ad 0004 	strh.w	r0, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004dec:	a901      	add	r1, sp, #4
 8004dee:	4630      	mov	r0, r6
	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004df0:	f04f 0804 	mov.w	r8, #4
	GPIO_InitStructure.GPIO_Pin = PIN_LED_AUX | PIN_LED_MANAGE | PIN_LED_PROGRAM | PIN_LED_PLAY;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_ENABLE_TXD | PIN_ENABLE_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004df4:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004df8:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004dfc:	f000 fd89 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
 8004e00:	f44f 6108 	mov.w	r1, #2176	; 0x880
 8004e04:	f8ad 1004 	strh.w	r1, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004e08:	4630      	mov	r0, r6
 8004e0a:	eb0d 0108 	add.w	r1, sp, r8
	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004e0e:	f04f 0a18 	mov.w	sl, #24
	GPIO_InitStructure.GPIO_Pin = PIN_ENABLE_TXD | PIN_ENABLE_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004e12:	f88d 8007 	strb.w	r8, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004e16:	f000 fd7c 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
 8004e1a:	f44f 6288 	mov.w	r2, #1088	; 0x440
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004e1e:	4630      	mov	r0, r6
 8004e20:	eb0d 0108 	add.w	r1, sp, r8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_DXL_RXD | PIN_PC_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
 8004e24:	f8ad 2004 	strh.w	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004e28:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004e2c:	f88d a007 	strb.w	sl, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004e30:	f000 fd6f 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
 8004e34:	2308      	movs	r3, #8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004e36:	4630      	mov	r0, r6
 8004e38:	eb0d 0108 	add.w	r1, sp, r8
		// PORTC CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT3P | PIN_SIG_MOT3M | PIN_SIG_MOT4P | PIN_SIG_MOT4M;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004e3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_DXL_TXD | PIN_PC_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
 8004e40:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004e44:	f88d 7007 	strb.w	r7, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004e48:	f000 fd63 	bl	8005912 <GPIO_Init>
		// PORTC CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT3P | PIN_SIG_MOT3M | PIN_SIG_MOT4P | PIN_SIG_MOT4M;
 8004e4c:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8004e50:	f8ad 0004 	strh.w	r0, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004e54:	eb0d 0108 	add.w	r1, sp, r8
 8004e58:	4630      	mov	r0, r6
	GPIO_InitStructure.GPIO_Pin = PIN_SW_START;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
		// PORTC CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT3P | PIN_SIG_MOT3M | PIN_SIG_MOT4P | PIN_SIG_MOT4M;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004e5a:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004e5e:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004e62:	f000 fd56 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_ADC_SELECT0 | PIN_ADC_SELECT1;
 8004e66:	2106      	movs	r1, #6
 8004e68:	f8ad 1004 	strh.w	r1, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	eb0d 0108 	add.w	r1, sp, r8
	GPIO_InitStructure.GPIO_Pin = PIN_SIG_MOT3P | PIN_SIG_MOT3M | PIN_SIG_MOT4P | PIN_SIG_MOT4M;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_ADC_SELECT0 | PIN_ADC_SELECT1;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004e72:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004e76:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004e7a:	f000 fd4a 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_LED_POWER | PIN_LED_TXD | PIN_LED_RXD;
 8004e7e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004e82:	4630      	mov	r0, r6
 8004e84:	eb0d 0108 	add.w	r1, sp, r8
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_ADC_SELECT0 | PIN_ADC_SELECT1;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_LED_POWER | PIN_LED_TXD | PIN_LED_RXD;
 8004e88:	f8ad 2004 	strh.w	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004e8c:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004e90:	f88d 5007 	strb.w	r5, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004e94:	f000 fd3d 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_TXD;
 8004e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	eb0d 0108 	add.w	r1, sp, r8
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_LED_POWER | PIN_LED_TXD | PIN_LED_RXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_TXD;
 8004ea2:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004ea6:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004eaa:	f88d a007 	strb.w	sl, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004eae:	f000 fd30 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
 8004eb2:	2009      	movs	r0, #9
 8004eb4:	f8ad 0004 	strh.w	r0, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004eb8:	eb0d 0108 	add.w	r1, sp, r8
 8004ebc:	4630      	mov	r0, r6
	GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_TXD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8004ebe:	f88d 9007 	strb.w	r9, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004ec2:	f000 fd26 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_MIC;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	eb0d 0108 	add.w	r1, sp, r8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_ADC0 | PIN_VDD_VOLT;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_MIC;
 8004ecc:	f8ad 5004 	strh.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004ed0:	f88d 7007 	strb.w	r7, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004ed4:	f000 fd1d 	bl	8005912 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = PIN_SW_UP | PIN_SW_DOWN;
 8004ed8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004edc:	f8ad 1004 	strh.w	r1, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	eb0d 0108 	add.w	r1, sp, r8
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_MIC;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_SW_UP | PIN_SW_DOWN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8004ee6:	f88d 7007 	strb.w	r7, [sp, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004eea:	f000 fd12 	bl	8005912 <GPIO_Init>
		// PORTD CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_RXD;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004eee:	eb0d 0108 	add.w	r1, sp, r8
 8004ef2:	4809      	ldr	r0, [pc, #36]	; (8004f18 <GPIO_Configuration+0x1ba>)
	GPIO_Init(GPIOC, &GPIO_InitStructure);
	GPIO_InitStructure.GPIO_Pin = PIN_SW_UP | PIN_SW_DOWN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
		// PORTD CONFIG
	GPIO_InitStructure.GPIO_Pin = PIN_ZIGBEE_RXD;
 8004ef4:	f8ad 8004 	strh.w	r8, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004ef8:	f88d 8007 	strb.w	r8, [sp, #7]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004efc:	f000 fd09 	bl	8005912 <GPIO_Init>
	GPIO_PinRemapConfig( GPIO_Remap_USART1, ENABLE);
 8004f00:	4640      	mov	r0, r8
 8004f02:	2101      	movs	r1, #1
 8004f04:	f000 fd96 	bl	8005a34 <GPIO_PinRemapConfig>
	GPIO_PinRemapConfig( GPIO_Remap_SWJ_Disable, ENABLE);
 8004f08:	4804      	ldr	r0, [pc, #16]	; (8004f1c <GPIO_Configuration+0x1be>)
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	f000 fd92 	bl	8005a34 <GPIO_PinRemapConfig>
}
 8004f10:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 8004f14:	40010800 	andmi	r0, r1, r0, lsl #16
 8004f18:	40011400 	andmi	r1, r1, r0, lsl #8
 8004f1c:	00300400 	eorseq	r0, r0, r0, lsl #8

08004f20 <ADC_Configuration>:
void ADC_Configuration() {
 8004f20:	b530      	push	{r4, r5, lr}
 8004f22:	b087      	sub	sp, #28
	ADC_InitTypeDef ADC_InitStructure;
	ADC_StructInit(&ADC_InitStructure);
 8004f24:	a801      	add	r0, sp, #4
 8004f26:	f000 f903 	bl	8005130 <ADC_StructInit>
		// ADC1 configuration
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8004f2a:	2400      	movs	r4, #0
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfChannel = 2;
 8004f2c:	2302      	movs	r3, #2
	ADC_StructInit(&ADC_InitStructure);
		// ADC1 configuration
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8004f2e:	f44f 2560 	mov.w	r5, #917504	; 0xe0000
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfChannel = 2;
	ADC_Init(ADC1, &ADC_InitStructure);
 8004f32:	482c      	ldr	r0, [pc, #176]	; (8004fe4 <ADC_Configuration+0xc4>)
 8004f34:	a901      	add	r1, sp, #4
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfChannel = 2;
 8004f36:	f88d 3014 	strb.w	r3, [sp, #20]
}
void ADC_Configuration() {
	ADC_InitTypeDef ADC_InitStructure;
	ADC_StructInit(&ADC_InitStructure);
		// ADC1 configuration
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8004f3a:	9401      	str	r4, [sp, #4]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8004f3c:	f88d 4008 	strb.w	r4, [sp, #8]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8004f40:	f88d 4009 	strb.w	r4, [sp, #9]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8004f44:	9404      	str	r4, [sp, #16]
	ADC_StructInit(&ADC_InitStructure);
		// ADC1 configuration
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8004f46:	9503      	str	r5, [sp, #12]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfChannel = 2;
	ADC_Init(ADC1, &ADC_InitStructure);
 8004f48:	f000 f8ce 	bl	80050e8 <ADC_Init>
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 8004f4c:	9401      	str	r4, [sp, #4]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8004f4e:	f88d 4008 	strb.w	r4, [sp, #8]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8004f52:	f88d 4009 	strb.w	r4, [sp, #9]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8004f56:	9404      	str	r4, [sp, #16]
	ADC_InitStructure.ADC_NbrOfChannel = 1;
	ADC_Init(ADC2, &ADC_InitStructure);
 8004f58:	4823      	ldr	r0, [pc, #140]	; (8004fe8 <ADC_Configuration+0xc8>)
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfChannel = 1;
 8004f5a:	2401      	movs	r4, #1
	ADC_Init(ADC2, &ADC_InitStructure);
 8004f5c:	a901      	add	r1, sp, #4
	ADC_InitStructure.ADC_NbrOfChannel = 2;
	ADC_Init(ADC1, &ADC_InitStructure);
	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8004f5e:	9503      	str	r5, [sp, #12]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfChannel = 1;
 8004f60:	f88d 4014 	strb.w	r4, [sp, #20]
	ADC_Init(ADC2, &ADC_InitStructure);
 8004f64:	f000 f8c0 	bl	80050e8 <ADC_Init>
		// ADC1 regular channels configuration
		// Set ADC1 to read SIG_ADC0 (ADC1 multiplexer output) on Channel 10
	ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1 , ADC_SampleTime_239Cycles5);
 8004f68:	481e      	ldr	r0, [pc, #120]	; (8004fe4 <ADC_Configuration+0xc4>)
 8004f6a:	210a      	movs	r1, #10
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	2307      	movs	r3, #7
 8004f70:	f000 f932 	bl	80051d8 <ADC_RegularChannelConfig>
		// Set ADC1 to read VBUS on Channel 13
		//    ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1 , ADC_SampleTime_239Cycles5);    // SIG_VDD/VBUS
		//ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
		// ADC2 regular channels configuration
		// Set ADC2 to read SIG_ADC1 (ADC2 multiplexer output) on Channel 5
	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 1, ADC_SampleTime_239Cycles5);    // SIG_ADC1
 8004f74:	4622      	mov	r2, r4
 8004f76:	2307      	movs	r3, #7
 8004f78:	481b      	ldr	r0, [pc, #108]	; (8004fe8 <ADC_Configuration+0xc8>)
 8004f7a:	2105      	movs	r1, #5
 8004f7c:	f000 f92c 	bl	80051d8 <ADC_RegularChannelConfig>
																																									//ADC_ITConfig(ADC2, ADC_IT_EOC, ENABLE);
																																									// Enable ADC1 DMA
																																									//ADC_DMACmd(ADC1, ENABLE);
																																									// Enable ADC1,2
	ADC_Cmd(ADC1, ENABLE);
 8004f80:	4818      	ldr	r0, [pc, #96]	; (8004fe4 <ADC_Configuration+0xc4>)
 8004f82:	4621      	mov	r1, r4
 8004f84:	f000 f8dd 	bl	8005142 <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);
 8004f88:	4817      	ldr	r0, [pc, #92]	; (8004fe8 <ADC_Configuration+0xc8>)
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	f000 f8d9 	bl	8005142 <ADC_Cmd>
		// Enable ADC1,2 reset calibration register
		// Check the end of ADC1,2 reset calibration register
	ADC_ResetCalibration(ADC1);
 8004f90:	4814      	ldr	r0, [pc, #80]	; (8004fe4 <ADC_Configuration+0xc4>)
 8004f92:	f000 f8f1 	bl	8005178 <ADC_ResetCalibration>
	while(ADC_GetResetCalibrationStatus(ADC1));
 8004f96:	4813      	ldr	r0, [pc, #76]	; (8004fe4 <ADC_Configuration+0xc4>)
 8004f98:	f000 f8f3 	bl	8005182 <ADC_GetResetCalibrationStatus>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d1fa      	bne.n	8004f96 <ADC_Configuration+0x76>
	ADC_ResetCalibration(ADC2);
 8004fa0:	4811      	ldr	r0, [pc, #68]	; (8004fe8 <ADC_Configuration+0xc8>)
 8004fa2:	f000 f8e9 	bl	8005178 <ADC_ResetCalibration>
	while(ADC_GetResetCalibrationStatus(ADC2));
 8004fa6:	4810      	ldr	r0, [pc, #64]	; (8004fe8 <ADC_Configuration+0xc8>)
 8004fa8:	f000 f8eb 	bl	8005182 <ADC_GetResetCalibrationStatus>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d1fa      	bne.n	8004fa6 <ADC_Configuration+0x86>
		// Start ADC1,2 calibration
		// Check the end of ADC1,2 calibration
	ADC_StartCalibration(ADC1);
 8004fb0:	480c      	ldr	r0, [pc, #48]	; (8004fe4 <ADC_Configuration+0xc4>)
 8004fb2:	f000 f8ea 	bl	800518a <ADC_StartCalibration>
	while(ADC_GetCalibrationStatus(ADC1));
 8004fb6:	480b      	ldr	r0, [pc, #44]	; (8004fe4 <ADC_Configuration+0xc4>)
 8004fb8:	f000 f8ec 	bl	8005194 <ADC_GetCalibrationStatus>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d1fa      	bne.n	8004fb6 <ADC_Configuration+0x96>
	ADC_StartCalibration(ADC2);
 8004fc0:	4809      	ldr	r0, [pc, #36]	; (8004fe8 <ADC_Configuration+0xc8>)
 8004fc2:	f000 f8e2 	bl	800518a <ADC_StartCalibration>
	while(ADC_GetCalibrationStatus(ADC2));
 8004fc6:	4808      	ldr	r0, [pc, #32]	; (8004fe8 <ADC_Configuration+0xc8>)
 8004fc8:	f000 f8e4 	bl	8005194 <ADC_GetCalibrationStatus>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d1fa      	bne.n	8004fc6 <ADC_Configuration+0xa6>
		// Start ADC2 Software Conversion
	ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4804      	ldr	r0, [pc, #16]	; (8004fe4 <ADC_Configuration+0xc4>)
 8004fd4:	f000 f8e2 	bl	800519c <ADC_SoftwareStartConvCmd>
	ADC_SoftwareStartConvCmd(ADC2, ENABLE);
 8004fd8:	4803      	ldr	r0, [pc, #12]	; (8004fe8 <ADC_Configuration+0xc8>)
 8004fda:	2101      	movs	r1, #1
 8004fdc:	f000 f8de 	bl	800519c <ADC_SoftwareStartConvCmd>
 8004fe0:	b007      	add	sp, #28
 8004fe2:	bd30      	pop	{r4, r5, pc}
 8004fe4:	40012400 	andmi	r2, r1, r0, lsl #8
 8004fe8:	40012800 	andmi	r2, r1, r0, lsl #16

08004fec <SysInit>:
void RCC_Configuration(void);
void NVIC_Configuration(void);
void GPIO_Configuration(void);
void ADC_Configuration(void);

void SysInit(void) {
 8004fec:	b538      	push	{r3, r4, r5, lr}
		//WWDG_ClearFlag();					// Clear the WatchDog Early Wakeup interrupt flag
		// System Init MUST go in this order: RCC, NVIC, GPIO, SysTick, ADC, then USART
	ReBootToBootLoader = 0;
 8004fee:	4b23      	ldr	r3, [pc, #140]	; (800507c <SysInit+0x90>)
 8004ff0:	2200      	movs	r2, #0
	setLED(MANAGE, 1);
		//SetLED(MANAGE, 1);
	USART_Configuration(USART_DXL, 1);
	USART_Configuration(USART_PCU, 57600);
#ifdef USING_PC_UART
	mDelay(100); if (!pcu_initialize(Baudrate_PCU)) error|=(1<<0);
 8004ff2:	4d23      	ldr	r5, [pc, #140]	; (8005080 <SysInit+0x94>)
void ADC_Configuration(void);

void SysInit(void) {
		//WWDG_ClearFlag();					// Clear the WatchDog Early Wakeup interrupt flag
		// System Init MUST go in this order: RCC, NVIC, GPIO, SysTick, ADC, then USART
	ReBootToBootLoader = 0;
 8004ff4:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
	RCC_Configuration();					// System Clocks Configuration
 8004ff8:	f7ff fe38 	bl	8004c6c <RCC_Configuration>
	NVIC_Configuration();					// NVIC Configuration
 8004ffc:	f7ff fe7c 	bl	8004cf8 <NVIC_Configuration>
	GPIO_Configuration();					// GP I/O port Configuration
 8005000:	f7ff fead 	bl	8004d5e <GPIO_Configuration>
	SysTick_Configuration();			// System clock count Configuration
 8005004:	f7ff fe24 	bl	8004c50 <SysTick_Configuration>
	ADC_Configuration();					// Analog to Digital Converter Configuration
 8005008:	f7ff ff8a 	bl	8004f20 <ADC_Configuration>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 800500c:	481d      	ldr	r0, [pc, #116]	; (8005084 <SysInit+0x98>)
 800500e:	f7fe f9dd 	bl	80033cc <uDelay>
	setLED(MANAGE, 1);
		//SetLED(MANAGE, 1);
	USART_Configuration(USART_DXL, 1);
	USART_Configuration(USART_PCU, 57600);
#ifdef USING_PC_UART
	mDelay(100); if (!pcu_initialize(Baudrate_PCU)) error|=(1<<0);
 8005012:	f8d5 00cc 	ldr.w	r0, [r5, #204]	; 0xcc
 8005016:	f7ff f907 	bl	8004228 <pcu_initialize>
	RCC_Configuration();					// System Clocks Configuration
	NVIC_Configuration();					// NVIC Configuration
	GPIO_Configuration();					// GP I/O port Configuration
	SysTick_Configuration();			// System clock count Configuration
	ADC_Configuration();					// Analog to Digital Converter Configuration
	uint16 error = 0, tog = 0;
 800501a:	f1d0 0401 	rsbs	r4, r0, #1
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 800501e:	4819      	ldr	r0, [pc, #100]	; (8005084 <SysInit+0x98>)
	RCC_Configuration();					// System Clocks Configuration
	NVIC_Configuration();					// NVIC Configuration
	GPIO_Configuration();					// GP I/O port Configuration
	SysTick_Configuration();			// System clock count Configuration
	ADC_Configuration();					// Analog to Digital Converter Configuration
	uint16 error = 0, tog = 0;
 8005020:	bf38      	it	cc
 8005022:	2400      	movcc	r4, #0
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 8005024:	f7fe f9d2 	bl	80033cc <uDelay>
#endif
#ifdef USING_ZIGBEE
	mDelay(100); if (!zgb_initialize(Baudrate_ZIG)) error|=(1<<1);
#endif
#ifdef USING_DYNAMIXEL
	mDelay(100); if (!dxl_initialize(Baudrate_DXL)) error|=(1<<2);
 8005028:	f895 00d0 	ldrb.w	r0, [r5, #208]	; 0xd0
 800502c:	f7fe fc74 	bl	8003918 <dxl_initialize>
 8005030:	b910      	cbnz	r0, 8005038 <SysInit+0x4c>
 8005032:	f044 0404 	orr.w	r4, r4, #4
 8005036:	b2a4      	uxth	r4, r4
#endif

	SetLED(PLAY, (error&(1<<0)));
 8005038:	2003      	movs	r0, #3
 800503a:	f004 0101 	and.w	r1, r4, #1
 800503e:	f7fe f997 	bl	8003370 <SetLED>
	SetLED(PROGRAM, (error&(1<<1)));
 8005042:	2002      	movs	r0, #2
 8005044:	2100      	movs	r1, #0
 8005046:	f7fe f993 	bl	8003370 <SetLED>
	SetLED(MANAGE, (error&(1<<2)));
 800504a:	2001      	movs	r0, #1
 800504c:	f004 0104 	and.w	r1, r4, #4
 8005050:	f7fe f98e 	bl	8003370 <SetLED>

	while (error) {
 8005054:	b154      	cbz	r4, 800506c <SysInit+0x80>
 8005056:	2500      	movs	r5, #0
		SetLED(POWER, tog);
 8005058:	2000      	movs	r0, #0
 800505a:	b2e9      	uxtb	r1, r5
 800505c:	f7fe f988 	bl	8003370 <SetLED>
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 8005060:	4809      	ldr	r0, [pc, #36]	; (8005088 <SysInit+0x9c>)
	SetLED(PROGRAM, (error&(1<<1)));
	SetLED(MANAGE, (error&(1<<2)));

	while (error) {
		SetLED(POWER, tog);
		tog ^= 1;
 8005062:	f085 0501 	eor.w	r5, r5, #1
void BreakToBootLoader(void);
#endif


void mDelay(uint32 nTime) {
	uDelay(nTime * 1000);
 8005066:	f7fe f9b1 	bl	80033cc <uDelay>
 800506a:	e7f5      	b.n	8005058 <SysInit+0x6c>
 800506c:	4805      	ldr	r0, [pc, #20]	; (8005084 <SysInit+0x98>)
 800506e:	f7fe f9ad 	bl	80033cc <uDelay>
		mDelay(500);
	}
	setLED(POWER, 1);
	mDelay(100);
	setLED(POWER, 0);
	PrintString("\nInitialized.\n");
 8005072:	4806      	ldr	r0, [pc, #24]	; (800508c <SysInit+0xa0>)
}
 8005074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mDelay(500);
	}
	setLED(POWER, 1);
	mDelay(100);
	setLED(POWER, 0);
	PrintString("\nInitialized.\n");
 8005078:	f7ff ba0c 	b.w	8004494 <PrintString>
 800507c:	200000d4 	ldrdcs	r0, [r0], -r4
 8005080:	20000000 	andcs	r0, r0, r0
 8005084:	000186a0 	andeq	r8, r1, r0, lsr #13
 8005088:	0007a120 	andeq	sl, r7, r0, lsr #2
 800508c:	08006e67 	stmdaeq	r0, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}

08005090 <ADC_DeInit>:
* Input          : - ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8005090:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  switch (*(u32*)&ADCx)
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <ADC_DeInit+0x54>)
 8005094:	4298      	cmp	r0, r3
 8005096:	d00f      	beq.n	80050b8 <ADC_DeInit+0x28>
 8005098:	f503 51a0 	add.w	r1, r3, #5120	; 0x1400
 800509c:	4288      	cmp	r0, r1
 800509e:	d013      	beq.n	80050c8 <ADC_DeInit+0x38>
 80050a0:	f5a1 52c0 	sub.w	r2, r1, #6144	; 0x1800
 80050a4:	4290      	cmp	r0, r2
 80050a6:	d11b      	bne.n	80050e0 <ADC_DeInit+0x50>
  {
    case ADC1_BASE:
      /* Enable ADC1 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 80050a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80050ac:	2101      	movs	r1, #1
 80050ae:	f001 f833 	bl	8006118 <RCC_APB2PeriphResetCmd>
      /* Release ADC1 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 80050b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80050b6:	e00e      	b.n	80050d6 <ADC_DeInit+0x46>
      break;
    
    case ADC2_BASE:
      /* Enable ADC2 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 80050b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80050bc:	2101      	movs	r1, #1
 80050be:	f001 f82b 	bl	8006118 <RCC_APB2PeriphResetCmd>
      /* Release ADC2 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 80050c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80050c6:	e006      	b.n	80050d6 <ADC_DeInit+0x46>
      break;
      
    case ADC3_BASE:
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 80050c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80050cc:	2101      	movs	r1, #1
 80050ce:	f001 f823 	bl	8006118 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 80050d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80050d6:	2100      	movs	r1, #0
      break; 

    default:
      break;
  }
}
 80050d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      
    case ADC3_BASE:
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 80050dc:	f001 b81c 	b.w	8006118 <RCC_APB2PeriphResetCmd>
 80050e0:	bd08      	pop	{r3, pc}
 80050e2:	bf00      	nop
 80050e4:	40012800 	andmi	r2, r1, r0, lsl #16

080050e8 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80050e8:	6842      	ldr	r2, [r0, #4]
*                    ADC peripheral.
* Output         : None
* Return         : None
******************************************************************************/
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80050ea:	b510      	push	{r4, lr}

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 80050ec:	f422 2370 	bic.w	r3, r2, #983040	; 0xf0000
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_Mode | ((u32)ADC_InitStruct->ADC_ScanConvMode << 8));
 80050f0:	680a      	ldr	r2, [r1, #0]

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 80050f2:	f423 7480 	bic.w	r4, r3, #256	; 0x100
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_Mode | ((u32)ADC_InitStruct->ADC_ScanConvMode << 8));
 80050f6:	ea44 0302 	orr.w	r3, r4, r2
 80050fa:	790c      	ldrb	r4, [r1, #4]
 80050fc:	ea43 2204 	orr.w	r2, r3, r4, lsl #8
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8005100:	6042      	str	r2, [r0, #4]
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8005102:	68cb      	ldr	r3, [r1, #12]
 8005104:	688a      	ldr	r2, [r1, #8]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8005106:	6884      	ldr	r4, [r0, #8]
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8005108:	431a      	orrs	r2, r3

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <ADC_Init+0x44>)
 800510c:	4023      	ands	r3, r4
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800510e:	4313      	orrs	r3, r2
            ((u32)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8005110:	794a      	ldrb	r2, [r1, #5]
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (u32)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8005112:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
            ((u32)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8005116:	6083      	str	r3, [r0, #8]
  tmpreg1 = ADCx->SQR1;
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (ADC_InitStruct->ADC_NbrOfChannel - 1);
 8005118:	7c09      	ldrb	r1, [r1, #16]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800511a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (ADC_InitStruct->ADC_NbrOfChannel - 1);
 800511c:	1e4b      	subs	r3, r1, #1

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 800511e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (ADC_InitStruct->ADC_NbrOfChannel - 1);
  tmpreg1 |= ((u32)tmpreg2 << 20);
 8005122:	b2d9      	uxtb	r1, r3
 8005124:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8005128:	62c2      	str	r2, [r0, #44]	; 0x2c
 800512a:	bd10      	pop	{r4, pc}
 800512c:	fff1f7fd 			; <UNDEFINED> instruction: 0xfff1f7fd

08005130 <ADC_StructInit>:
*******************************************************************************/
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8005130:	2300      	movs	r3, #0

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;

  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 8005132:	2101      	movs	r1, #1
*******************************************************************************/
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8005134:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8005136:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8005138:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 800513a:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800513c:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 800513e:	7401      	strb	r1, [r0, #16]
 8005140:	4770      	bx	lr

08005142 <ADC_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8005142:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005144:	b111      	cbz	r1, 800514c <ADC_Cmd+0xa>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8005146:	f043 0101 	orr.w	r1, r3, #1
 800514a:	e001      	b.n	8005150 <ADC_Cmd+0xe>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 800514c:	f023 0101 	bic.w	r1, r3, #1
 8005150:	6081      	str	r1, [r0, #8]
 8005152:	4770      	bx	lr

08005154 <ADC_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 8005154:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005156:	b111      	cbz	r1, 800515e <ADC_DMACmd+0xa>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 8005158:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 800515c:	e001      	b.n	8005162 <ADC_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
 800515e:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005162:	6081      	str	r1, [r0, #8]
 8005164:	4770      	bx	lr

08005166 <ADC_ITConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = (u8)ADC_IT;
 8005166:	b2c9      	uxtb	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8005168:	6843      	ldr	r3, [r0, #4]
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = (u8)ADC_IT;

  if (NewState != DISABLE)
 800516a:	b10a      	cbz	r2, 8005170 <ADC_ITConfig+0xa>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800516c:	4319      	orrs	r1, r3
 800516e:	e001      	b.n	8005174 <ADC_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(u32)itmask);
 8005170:	ea23 0101 	bic.w	r1, r3, r1
 8005174:	6041      	str	r1, [r0, #4]
 8005176:	4770      	bx	lr

08005178 <ADC_ResetCalibration>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Resets the selected ADC calibartion registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 8005178:	6883      	ldr	r3, [r0, #8]
 800517a:	f043 0108 	orr.w	r1, r3, #8
 800517e:	6081      	str	r1, [r0, #8]
 8005180:	4770      	bx	lr

08005182 <ADC_GetResetCalibrationStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (u32)RESET)
 8005182:	6880      	ldr	r0, [r0, #8]
    bitstatus = RESET;
  }

  /* Return the RSTCAL bit status */
  return  bitstatus;
}
 8005184:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8005188:	4770      	bx	lr

0800518a <ADC_StartCalibration>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 800518a:	6883      	ldr	r3, [r0, #8]
 800518c:	f043 0104 	orr.w	r1, r3, #4
 8005190:	6081      	str	r1, [r0, #8]
 8005192:	4770      	bx	lr

08005194 <ADC_GetCalibrationStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (u32)RESET)
 8005194:	6880      	ldr	r0, [r0, #8]
    bitstatus = RESET;
  }

  /* Return the CAL bit status */
  return  bitstatus;
}
 8005196:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800519a:	4770      	bx	lr

0800519c <ADC_SoftwareStartConvCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 800519c:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800519e:	b111      	cbz	r1, 80051a6 <ADC_SoftwareStartConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80051a0:	f443 01a0 	orr.w	r1, r3, #5242880	; 0x500000
 80051a4:	e001      	b.n	80051aa <ADC_SoftwareStartConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80051a6:	f423 01a0 	bic.w	r1, r3, #5242880	; 0x500000
 80051aa:	6081      	str	r1, [r0, #8]
 80051ac:	4770      	bx	lr

080051ae <ADC_GetSoftwareStartConvStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (u32)RESET)
 80051ae:	6880      	ldr	r0, [r0, #8]
    bitstatus = RESET;
  }

  /* Return the SWSTART bit status */
  return  bitstatus;
}
 80051b0:	f3c0 5080 	ubfx	r0, r0, #22, #1
 80051b4:	4770      	bx	lr

080051b6 <ADC_DiscModeChannelCountConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 80051b6:	6843      	ldr	r3, [r0, #4]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 80051b8:	3901      	subs	r1, #1
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));

  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
 80051ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 80051be:	ea42 3341 	orr.w	r3, r2, r1, lsl #13
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80051c2:	6043      	str	r3, [r0, #4]
 80051c4:	4770      	bx	lr

080051c6 <ADC_DiscModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 80051c6:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80051c8:	b111      	cbz	r1, 80051d0 <ADC_DiscModeCmd+0xa>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 80051ca:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 80051ce:	e001      	b.n	80051d4 <ADC_DiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
 80051d0:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80051d4:	6041      	str	r1, [r0, #4]
 80051d6:	4770      	bx	lr

080051d8 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80051d8:	2909      	cmp	r1, #9
*                       - ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, u8 ADC_Channel, u8 Rank, u8 ADC_SampleTime)
{
 80051da:	b570      	push	{r4, r5, r6, lr}
 80051dc:	f04f 0403 	mov.w	r4, #3
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80051e0:	d90c      	bls.n	80051fc <ADC_RegularChannelConfig+0x24>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80051e2:	434c      	muls	r4, r1
 80051e4:	2507      	movs	r5, #7
 80051e6:	3c1e      	subs	r4, #30
 80051e8:	fa05 f504 	lsl.w	r5, r5, r4
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80051ec:	fa03 f304 	lsl.w	r3, r3, r4

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80051f0:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 80051f2:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * (ADC_Channel - 10));
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 80051f6:	432b      	orrs	r3, r5
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80051f8:	60c3      	str	r3, [r0, #12]
 80051fa:	e00b      	b.n	8005214 <ADC_RegularChannelConfig+0x3c>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 80051fc:	434c      	muls	r4, r1
 80051fe:	2507      	movs	r5, #7
 8005200:	fa05 f504 	lsl.w	r5, r5, r4
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
 8005204:	fa03 f304 	lsl.w	r3, r3, r4
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8005208:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 800520a:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 800520e:	ea45 0403 	orr.w	r4, r5, r3
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8005212:	6104      	str	r4, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8005214:	2a06      	cmp	r2, #6
 8005216:	f04f 0305 	mov.w	r3, #5
 800521a:	d80d      	bhi.n	8005238 <ADC_RegularChannelConfig+0x60>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800521c:	3a01      	subs	r2, #1
 800521e:	4353      	muls	r3, r2
 8005220:	221f      	movs	r2, #31
 8005222:	fa02 f203 	lsl.w	r2, r2, r3
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 1));
 8005226:	fa01 f103 	lsl.w	r1, r1, r3
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800522a:	6b44      	ldr	r4, [r0, #52]	; 0x34
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800522c:	ea24 0202 	bic.w	r2, r4, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 1));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005230:	ea42 0301 	orr.w	r3, r2, r1
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8005234:	6343      	str	r3, [r0, #52]	; 0x34
 8005236:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8005238:	2a0c      	cmp	r2, #12
 800523a:	d80d      	bhi.n	8005258 <ADC_RegularChannelConfig+0x80>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 800523c:	4353      	muls	r3, r2
 800523e:	221f      	movs	r2, #31
 8005240:	3b23      	subs	r3, #35	; 0x23
 8005242:	fa02 f203 	lsl.w	r2, r2, r3
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 7));
 8005246:	fa01 f103 	lsl.w	r1, r1, r3
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800524a:	6b04      	ldr	r4, [r0, #48]	; 0x30
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800524c:	ea24 0202 	bic.w	r2, r4, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 7));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8005250:	ea42 0301 	orr.w	r3, r2, r1
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8005254:	6303      	str	r3, [r0, #48]	; 0x30
 8005256:	bd70      	pop	{r4, r5, r6, pc}
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8005258:	4353      	muls	r3, r2
 800525a:	221f      	movs	r2, #31
 800525c:	3b41      	subs	r3, #65	; 0x41
 800525e:	fa02 f203 	lsl.w	r2, r2, r3
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 13));
 8005262:	fa01 f103 	lsl.w	r1, r1, r3
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8005266:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8005268:	ea24 0202 	bic.w	r2, r4, r2
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 13));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800526c:	4311      	orrs	r1, r2
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800526e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8005270:	bd70      	pop	{r4, r5, r6, pc}

08005272 <ADC_ExternalTrigConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 8005272:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005274:	b111      	cbz	r1, 800527c <ADC_ExternalTrigConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 8005276:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800527a:	e001      	b.n	8005280 <ADC_ExternalTrigConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
 800527c:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005280:	6081      	str	r1, [r0, #8]
 8005282:	4770      	bx	lr

08005284 <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (u16) ADCx->DR;
 8005284:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 8005286:	b280      	uxth	r0, r0
 8005288:	4770      	bx	lr

0800528a <ADC_GetDualModeConversionValue>:
* Return         : The Data conversion value.
*******************************************************************************/
u32 ADC_GetDualModeConversionValue(void)
{
  /* Return the dual mode conversion value */
  return (*(vu32 *) DR_ADDRESS);
 800528a:	4b01      	ldr	r3, [pc, #4]	; (8005290 <ADC_GetDualModeConversionValue+0x6>)
 800528c:	6818      	ldr	r0, [r3, #0]
}
 800528e:	4770      	bx	lr
 8005290:	4001244c 	andmi	r2, r1, ip, asr #8

08005294 <ADC_AutoInjectedConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 8005294:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005296:	b111      	cbz	r1, 800529e <ADC_AutoInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 8005298:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 800529c:	e001      	b.n	80052a2 <ADC_AutoInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
 800529e:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 80052a2:	6041      	str	r1, [r0, #4]
 80052a4:	4770      	bx	lr

080052a6 <ADC_InjectedDiscModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 80052a6:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80052a8:	b111      	cbz	r1, 80052b0 <ADC_InjectedDiscModeCmd+0xa>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 80052aa:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 80052ae:	e001      	b.n	80052b4 <ADC_InjectedDiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
 80052b0:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052b4:	6041      	str	r1, [r0, #4]
 80052b6:	4770      	bx	lr

080052b8 <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));

  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80052b8:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
 80052ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 80052be:	4311      	orrs	r1, r2
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80052c0:	6081      	str	r1, [r0, #8]
 80052c2:	4770      	bx	lr

080052c4 <ADC_ExternalTrigInjectedConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 80052c4:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80052c6:	b111      	cbz	r1, 80052ce <ADC_ExternalTrigInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 80052c8:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80052cc:	e001      	b.n	80052d2 <ADC_ExternalTrigInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 80052ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052d2:	6081      	str	r1, [r0, #8]
 80052d4:	4770      	bx	lr

080052d6 <ADC_SoftwareStartInjectedConvCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 80052d6:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80052d8:	b111      	cbz	r1, 80052e0 <ADC_SoftwareStartInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 80052da:	f443 1102 	orr.w	r1, r3, #2129920	; 0x208000
 80052de:	e001      	b.n	80052e4 <ADC_SoftwareStartInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 80052e0:	f423 1102 	bic.w	r1, r3, #2129920	; 0x208000
 80052e4:	6081      	str	r1, [r0, #8]
 80052e6:	4770      	bx	lr

080052e8 <ADC_GetSoftwareStartInjectedConvCmdStatus>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (u32)RESET)
 80052e8:	6880      	ldr	r0, [r0, #8]
    bitstatus = RESET;
  }

  /* Return the JSWSTART bit status */
  return  bitstatus;
}
 80052ea:	f3c0 5040 	ubfx	r0, r0, #21, #1
 80052ee:	4770      	bx	lr

080052f0 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80052f0:	2909      	cmp	r1, #9
*                       - ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, u8 ADC_Channel, u8 Rank, u8 ADC_SampleTime)
{
 80052f2:	b570      	push	{r4, r5, r6, lr}
 80052f4:	f04f 0403 	mov.w	r4, #3
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80052f8:	d90c      	bls.n	8005314 <ADC_InjectedChannelConfig+0x24>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 80052fa:	434c      	muls	r4, r1
 80052fc:	2507      	movs	r5, #7
 80052fe:	3c1e      	subs	r4, #30
 8005300:	fa05 f504 	lsl.w	r5, r5, r4
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3*(ADC_Channel - 10));
 8005304:	fa03 f304 	lsl.w	r3, r3, r4

  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8005308:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 800530a:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 800530e:	432b      	orrs	r3, r5
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8005310:	60c3      	str	r3, [r0, #12]
 8005312:	e00b      	b.n	800532c <ADC_InjectedChannelConfig+0x3c>
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8005314:	434c      	muls	r4, r1
 8005316:	2507      	movs	r5, #7
 8005318:	fa05 f504 	lsl.w	r5, r5, r4
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
 800531c:	fa03 f304 	lsl.w	r3, r3, r4
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8005320:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    /* Clear the old discontinuous mode channel count */
    tmpreg1 &= ~tmpreg2;
 8005322:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the discontinuous mode channel count */
    tmpreg1 |= tmpreg2;
 8005326:	ea45 0403 	orr.w	r4, r5, r3
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800532a:	6104      	str	r4, [r0, #16]
  }

  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800532c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
 800532e:	f3c4 5301 	ubfx	r3, r4, #20, #2
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
 8005332:	1ad2      	subs	r2, r2, r3
 8005334:	1c93      	adds	r3, r2, #2
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2205      	movs	r2, #5
 800533a:	4353      	muls	r3, r2
 800533c:	221f      	movs	r2, #31
 800533e:	fa02 f203 	lsl.w	r2, r2, r3
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (u32)ADC_Channel << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
 8005342:	fa01 f103 	lsl.w	r1, r1, r3
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8005346:	ea24 0402 	bic.w	r4, r4, r2
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (u32)ADC_Channel << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 800534a:	4321      	orrs	r1, r4
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800534c:	6381      	str	r1, [r0, #56]	; 0x38
 800534e:	bd70      	pop	{r4, r5, r6, pc}

08005350 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8005350:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
 8005352:	3901      	subs	r1, #1
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
 8005354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8005358:	ea42 5301 	orr.w	r3, r2, r1, lsl #20
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800535c:	6383      	str	r3, [r0, #56]	; 0x38
 800535e:	4770      	bx	lr

08005360 <ADC_SetInjectedOffset>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  

  /* Set the selected injected channel data offset */
  *((vu32 *)((*(u32*)&ADCx) + ADC_InjectedChannel)) = (u32)Offset;
 8005360:	5042      	str	r2, [r0, r1]
 8005362:	4770      	bx	lr

08005364 <ADC_GetInjectedConversionValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  /* Returns the selected injected channel conversion data value */
  return (u16) (*(vu32*) (((*(u32*)&ADCx) + ADC_InjectedChannel + JDR_Offset)));
 8005364:	3028      	adds	r0, #40	; 0x28
 8005366:	5840      	ldr	r0, [r0, r1]
}
 8005368:	b280      	uxth	r0, r0
 800536a:	4770      	bx	lr

0800536c <ADC_AnalogWatchdogCmd>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));

  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800536c:	6843      	ldr	r3, [r0, #4]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
 800536e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005372:	f422 7300 	bic.w	r3, r2, #512	; 0x200
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8005376:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8005378:	6041      	str	r1, [r0, #4]
 800537a:	4770      	bx	lr

0800537c <ADC_AnalogWatchdogThresholdsConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));

  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 800537c:	6241      	str	r1, [r0, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800537e:	6282      	str	r2, [r0, #40]	; 0x28
 8005380:	4770      	bx	lr

08005382 <ADC_AnalogWatchdogSingleChannelConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));

  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8005382:	6843      	ldr	r3, [r0, #4]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
 8005384:	f023 021f 	bic.w	r2, r3, #31
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8005388:	4311      	orrs	r1, r2
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 800538a:	6041      	str	r1, [r0, #4]
 800538c:	4770      	bx	lr

0800538e <ADC_TempSensorVrefintCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <ADC_TempSensorVrefintCmd+0x16>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8005390:	689a      	ldr	r2, [r3, #8]
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005392:	b110      	cbz	r0, 800539a <ADC_TempSensorVrefintCmd+0xc>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8005394:	f442 0000 	orr.w	r0, r2, #8388608	; 0x800000
 8005398:	e001      	b.n	800539e <ADC_TempSensorVrefintCmd+0x10>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 800539a:	f422 0000 	bic.w	r0, r2, #8388608	; 0x800000
 800539e:	6098      	str	r0, [r3, #8]
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40012400 	andmi	r2, r1, r0, lsl #8

080053a8 <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (u8)RESET)
 80053a8:	6803      	ldr	r3, [r0, #0]
 80053aa:	4219      	tst	r1, r3
    bitstatus = RESET;
  }

  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 80053ac:	bf0c      	ite	eq
 80053ae:	2000      	moveq	r0, #0
 80053b0:	2001      	movne	r0, #1
 80053b2:	4770      	bx	lr

080053b4 <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(u32)ADC_FLAG;
 80053b4:	43c9      	mvns	r1, r1
 80053b6:	6001      	str	r1, [r0, #0]
 80053b8:	4770      	bx	lr

080053ba <ADC_GetITStatus>:

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (u8)ADC_IT) ;
 80053ba:	6843      	ldr	r3, [r0, #4]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (u32)RESET) && enablestatus)
 80053bc:	6800      	ldr	r0, [r0, #0]
 80053be:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 80053c2:	d004      	beq.n	80053ce <ADC_GetITStatus+0x14>

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (u8)ADC_IT) ;
 80053c4:	b2c9      	uxtb	r1, r1

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (u32)RESET) && enablestatus)
 80053c6:	4219      	tst	r1, r3
  {
    /* ADC_IT is set */
    bitstatus = SET;
 80053c8:	bf0c      	ite	eq
 80053ca:	2000      	moveq	r0, #0
 80053cc:	2001      	movne	r0, #1
    bitstatus = RESET;
  }

  /* Return the ADC_IT status */
  return  bitstatus;
}
 80053ce:	4770      	bx	lr

080053d0 <ADC_ClearITPendingBit>:

  /* Get the ADC IT index */
  itmask = (u8)(ADC_IT >> 8);

  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(u32)itmask;
 80053d0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80053d4:	6001      	str	r1, [r0, #0]
 80053d6:	4770      	bx	lr

080053d8 <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 80053d8:	4b04      	ldr	r3, [pc, #16]	; (80053ec <FLASH_SetLatency+0x14>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	f002 0138 	and.w	r1, r2, #56	; 0x38
 80053e0:	6019      	str	r1, [r3, #0]
  FLASH->ACR |= FLASH_Latency;
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4310      	orrs	r0, r2
 80053e6:	6018      	str	r0, [r3, #0]
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40022000 	andmi	r2, r2, r0

080053f0 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 80053f0:	4b04      	ldr	r3, [pc, #16]	; (8005404 <FLASH_HalfCycleAccessCmd+0x14>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	f022 0108 	bic.w	r1, r2, #8
 80053f8:	6019      	str	r1, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	4310      	orrs	r0, r2
 80053fe:	6018      	str	r0, [r3, #0]
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40022000 	andmi	r2, r2, r0

08005408 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8005408:	4b04      	ldr	r3, [pc, #16]	; (800541c <FLASH_PrefetchBufferCmd+0x14>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	f022 0110 	bic.w	r1, r2, #16
 8005410:	6019      	str	r1, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	4310      	orrs	r0, r2
 8005416:	6018      	str	r0, [r3, #0]
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40022000 	andmi	r2, r2, r0

08005420 <FLASH_Unlock>:
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8005420:	4a03      	ldr	r2, [pc, #12]	; (8005430 <FLASH_Unlock+0x10>)
 8005422:	4b04      	ldr	r3, [pc, #16]	; (8005434 <FLASH_Unlock+0x14>)
  FLASH->KEYR = FLASH_KEY2;
 8005424:	f102 3088 	add.w	r0, r2, #2290649224	; 0x88888888
* Return         : None
*******************************************************************************/
void FLASH_Unlock(void)
{
  /* Authorize the FPEC Access */
  FLASH->KEYR = FLASH_KEY1;
 8005428:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 800542a:	6058      	str	r0, [r3, #4]
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8005434:	40022000 	andmi	r2, r2, r0

08005438 <FLASH_Lock>:
* Return         : None
*******************************************************************************/
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the FCR */
  FLASH->CR |= CR_LOCK_Set;
 8005438:	4b02      	ldr	r3, [pc, #8]	; (8005444 <FLASH_Lock+0xc>)
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	f042 0080 	orr.w	r0, r2, #128	; 0x80
 8005440:	6118      	str	r0, [r3, #16]
 8005442:	4770      	bx	lr
 8005444:	40022000 	andmi	r2, r2, r0

08005448 <FLASH_GetUserOptionByte>:
*                  and RST_STDBY(Bit2).
*******************************************************************************/
u32 FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (u32)(FLASH->OBR >> 2);
 8005448:	4b01      	ldr	r3, [pc, #4]	; (8005450 <FLASH_GetUserOptionByte+0x8>)
 800544a:	69d8      	ldr	r0, [r3, #28]
}
 800544c:	0880      	lsrs	r0, r0, #2
 800544e:	4770      	bx	lr
 8005450:	40022000 	andmi	r2, r2, r0

08005454 <FLASH_GetWriteProtectionOptionByte>:
* Return         : The FLASH Write Protection  Option Bytes Register value
*******************************************************************************/
u32 FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (u32)(FLASH->WRPR);
 8005454:	4b01      	ldr	r3, [pc, #4]	; (800545c <FLASH_GetWriteProtectionOptionByte+0x8>)
 8005456:	6a18      	ldr	r0, [r3, #32]
}
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40022000 	andmi	r2, r2, r0

08005460 <FLASH_GetReadOutProtectionStatus>:
*******************************************************************************/
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;

  if ((FLASH->OBR & RDPRT_Mask) != (u32)RESET)
 8005460:	4b02      	ldr	r3, [pc, #8]	; (800546c <FLASH_GetReadOutProtectionStatus+0xc>)
 8005462:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 8005464:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40022000 	andmi	r2, r2, r0

08005470 <FLASH_GetPrefetchBufferStatus>:
*******************************************************************************/
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (u32)RESET)
 8005470:	4b02      	ldr	r3, [pc, #8]	; (800547c <FLASH_GetPrefetchBufferStatus+0xc>)
 8005472:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 8005474:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40022000 	andmi	r2, r2, r0

08005480 <FLASH_ITConfig>:
*                       - FLASH_IT_EOP: FLASH end of operation Interrupt
* Output         : None
* Return         : None 
*******************************************************************************/
void FLASH_ITConfig(u16 FLASH_IT, FunctionalState NewState)
{
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8005482:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8005484:	b109      	cbz	r1, 800548a <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8005486:	4310      	orrs	r0, r2
 8005488:	e001      	b.n	800548e <FLASH_ITConfig+0xe>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(u32)FLASH_IT;
 800548a:	ea22 0000 	bic.w	r0, r2, r0
 800548e:	6118      	str	r0, [r3, #16]
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40022000 	andmi	r2, r2, r0

08005498 <FLASH_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;

  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 8005498:	2801      	cmp	r0, #1
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <FLASH_GetFlagStatus+0x1c>)
 800549c:	d103      	bne.n	80054a6 <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (u32)RESET)
 800549e:	69d8      	ldr	r0, [r3, #28]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 80054a0:	f000 0001 	and.w	r0, r0, #1
 80054a4:	4770      	bx	lr
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (u32)RESET)
 80054a6:	68d9      	ldr	r1, [r3, #12]
 80054a8:	4208      	tst	r0, r1
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 80054aa:	bf0c      	ite	eq
 80054ac:	2000      	moveq	r0, #0
 80054ae:	2001      	movne	r0, #1
      bitstatus = RESET;
    }
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40022000 	andmi	r2, r2, r0

080054b8 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80054b8:	4b01      	ldr	r3, [pc, #4]	; (80054c0 <FLASH_ClearFlag+0x8>)
 80054ba:	60d8      	str	r0, [r3, #12]
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40022000 	andmi	r2, r2, r0

080054c4 <FLASH_GetStatus>:
*******************************************************************************/
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80054c4:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <FLASH_GetStatus+0x24>)
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	07d1      	lsls	r1, r2, #31
 80054ca:	d409      	bmi.n	80054e0 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
 80054cc:	68d8      	ldr	r0, [r3, #12]
 80054ce:	0742      	lsls	r2, r0, #29
 80054d0:	d408      	bmi.n	80054e4 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if(FLASH->SR & FLASH_FLAG_WRPRTERR)
 80054d2:	68d9      	ldr	r1, [r3, #12]
 80054d4:	f011 0f10 	tst.w	r1, #16
      {
        flashstatus = FLASH_ERROR_WRP;
 80054d8:	bf0c      	ite	eq
 80054da:	2004      	moveq	r0, #4
 80054dc:	2003      	movne	r0, #3
 80054de:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80054e0:	2001      	movs	r0, #1
 80054e2:	4770      	bx	lr
  }
  else 
  {  
    if(FLASH->SR & FLASH_FLAG_PGERR)
    { 
      flashstatus = FLASH_ERROR_PG;
 80054e4:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80054e6:	4770      	bx	lr
 80054e8:	40022000 	andmi	r2, r2, r0

080054ec <FLASH_WaitForLastOperation>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_WaitForLastOperation(u32 Timeout)
{ 
 80054ec:	b513      	push	{r0, r1, r4, lr}
 80054ee:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetStatus();
 80054f0:	f7ff ffe8 	bl	80054c4 <FLASH_GetStatus>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80054f4:	2801      	cmp	r0, #1
 80054f6:	d10f      	bne.n	8005518 <FLASH_WaitForLastOperation+0x2c>
 80054f8:	b164      	cbz	r4, 8005514 <FLASH_WaitForLastOperation+0x28>
* Output         : None
* Return         : None
*******************************************************************************/
static void delay(void)
{
  vu32 i = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	9301      	str	r3, [sp, #4]

  for(i = 0xFF; i != 0; i--)
 80054fe:	22ff      	movs	r2, #255	; 0xff
 8005500:	9201      	str	r2, [sp, #4]
 8005502:	9801      	ldr	r0, [sp, #4]
 8005504:	b110      	cbz	r0, 800550c <FLASH_WaitForLastOperation+0x20>
 8005506:	9901      	ldr	r1, [sp, #4]
 8005508:	1e4a      	subs	r2, r1, #1
 800550a:	e7f9      	b.n	8005500 <FLASH_WaitForLastOperation+0x14>

  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    delay();
    status = FLASH_GetStatus();
 800550c:	f7ff ffda 	bl	80054c4 <FLASH_GetStatus>
    Timeout--;
 8005510:	3c01      	subs	r4, #1
 8005512:	e7ef      	b.n	80054f4 <FLASH_WaitForLastOperation+0x8>
  }

  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8005514:	2005      	movs	r0, #5
 8005516:	e002      	b.n	800551e <FLASH_WaitForLastOperation+0x32>
 8005518:	2c00      	cmp	r4, #0
 800551a:	bf08      	it	eq
 800551c:	2005      	moveq	r0, #5
  }

  /* Return the operation status */
  return status;
}
 800551e:	bd1c      	pop	{r2, r3, r4, pc}

08005520 <FLASH_UserOptionByteConfig>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <FLASH_UserOptionByteConfig+0x48>)
 8005524:	4c11      	ldr	r4, [pc, #68]	; (800556c <FLASH_UserOptionByteConfig+0x4c>)
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8005526:	4605      	mov	r5, r0
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 8005528:	f103 3088 	add.w	r0, r3, #2290649224	; 0x88888888
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800552c:	60a3      	str	r3, [r4, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 800552e:	60a0      	str	r0, [r4, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005530:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_UserOptionByteConfig(u16 OB_IWDG, u16 OB_STOP, u16 OB_STDBY)
{
 8005532:	460e      	mov	r6, r1
 8005534:	4617      	mov	r7, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005536:	f7ff ffd9 	bl	80054ec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800553a:	2804      	cmp	r0, #4
 800553c:	d113      	bne.n	8005566 <FLASH_UserOptionByteConfig+0x46>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 800553e:	6921      	ldr	r1, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 8005540:	f045 05f8 	orr.w	r5, r5, #248	; 0xf8
 8005544:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <FLASH_UserOptionByteConfig+0x50>)
 8005546:	432e      	orrs	r6, r5
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8005548:	f041 0210 	orr.w	r2, r1, #16
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 800554c:	4337      	orrs	r7, r6
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 800554e:	6122      	str	r2, [r4, #16]
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005550:	200f      	movs	r0, #15
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
           
    OB->USER = ( OB_IWDG | OB_STOP |OB_STDBY) | (u16)0xF8; 
 8005552:	805f      	strh	r7, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005554:	f7ff ffca 	bl	80054ec <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005558:	2801      	cmp	r0, #1
 800555a:	d004      	beq.n	8005566 <FLASH_UserOptionByteConfig+0x46>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 800555c:	6921      	ldr	r1, [r4, #16]
 800555e:	f641 72ef 	movw	r2, #8175	; 0x1fef
 8005562:	400a      	ands	r2, r1
 8005564:	6122      	str	r2, [r4, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8005566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005568:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 800556c:	40022000 	andmi	r2, r2, r0
 8005570:	1ffff800 	svcne	0x00fff800

08005574 <FLASH_ReadOutProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  status = FLASH_WaitForLastOperation(EraseTimeout);
 8005578:	f640 70ff 	movw	r0, #4095	; 0xfff
 800557c:	f7ff ffb6 	bl	80054ec <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8005580:	2804      	cmp	r0, #4
 8005582:	d138      	bne.n	80055f6 <FLASH_ReadOutProtection+0x82>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005584:	4b1c      	ldr	r3, [pc, #112]	; (80055f8 <FLASH_ReadOutProtection+0x84>)
 8005586:	4c1d      	ldr	r4, [pc, #116]	; (80055fc <FLASH_ReadOutProtection+0x88>)
    FLASH->OPTKEYR = FLASH_KEY2;
 8005588:	f103 3088 	add.w	r0, r3, #2290649224	; 0x88888888
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800558c:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800558e:	60a0      	str	r0, [r4, #8]

    FLASH->CR |= CR_OPTER_Set;
 8005590:	6921      	ldr	r1, [r4, #16]
 8005592:	f041 0220 	orr.w	r2, r1, #32
 8005596:	6122      	str	r2, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8005598:	6923      	ldr	r3, [r4, #16]
 800559a:	f043 0040 	orr.w	r0, r3, #64	; 0x40
 800559e:	6120      	str	r0, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80055a0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80055a4:	f7ff ffa2 	bl	80054ec <FLASH_WaitForLastOperation>

    if(status == FLASH_COMPLETE)
 80055a8:	2804      	cmp	r0, #4
 80055aa:	d11d      	bne.n	80055e8 <FLASH_ReadOutProtection+0x74>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80055ac:	6920      	ldr	r0, [r4, #16]
 80055ae:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80055b2:	4003      	ands	r3, r0
 80055b4:	6123      	str	r3, [r4, #16]

      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 80055b6:	6921      	ldr	r1, [r4, #16]
 80055b8:	4811      	ldr	r0, [pc, #68]	; (8005600 <FLASH_ReadOutProtection+0x8c>)
 80055ba:	f041 0210 	orr.w	r2, r1, #16
 80055be:	6122      	str	r2, [r4, #16]

      if(NewState != DISABLE)
 80055c0:	b10d      	cbz	r5, 80055c6 <FLASH_ReadOutProtection+0x52>
      {
        OB->RDP = 0x00;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e000      	b.n	80055c8 <FLASH_ReadOutProtection+0x54>
      }
      else
      {
        OB->RDP = RDP_Key;  
 80055c6:	23a5      	movs	r3, #165	; 0xa5
 80055c8:	8003      	strh	r3, [r0, #0]
      }

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 80055ca:	f640 70ff 	movw	r0, #4095	; 0xfff
 80055ce:	f7ff ff8d 	bl	80054ec <FLASH_WaitForLastOperation>
    
      if(status != FLASH_BUSY)
 80055d2:	2801      	cmp	r0, #1
 80055d4:	d101      	bne.n	80055da <FLASH_ReadOutProtection+0x66>
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 80055d6:	2001      	movs	r0, #1
 80055d8:	bd38      	pop	{r3, r4, r5, pc}
      status = FLASH_WaitForLastOperation(EraseTimeout); 
    
      if(status != FLASH_BUSY)
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80055da:	4a08      	ldr	r2, [pc, #32]	; (80055fc <FLASH_ReadOutProtection+0x88>)
 80055dc:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80055e0:	6911      	ldr	r1, [r2, #16]
 80055e2:	400b      	ands	r3, r1
 80055e4:	6113      	str	r3, [r2, #16]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else 
    {
      if(status != FLASH_BUSY)
 80055e8:	2801      	cmp	r0, #1
 80055ea:	d0f4      	beq.n	80055d6 <FLASH_ReadOutProtection+0x62>
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 80055ec:	6921      	ldr	r1, [r4, #16]
 80055ee:	f641 72df 	movw	r2, #8159	; 0x1fdf
 80055f2:	400a      	ands	r2, r1
 80055f4:	6122      	str	r2, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;      
}
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 80055fc:	40022000 	andmi	r2, r2, r0
 8005600:	1ffff800 	svcne	0x00fff800

08005604 <FLASH_EnableWriteProtection>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EnableWriteProtection(u32 FLASH_Pages)
{
 8005604:	b510      	push	{r4, lr}
 8005606:	4604      	mov	r4, r0
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005608:	200f      	movs	r0, #15
 800560a:	f7ff ff6f 	bl	80054ec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800560e:	2804      	cmp	r0, #4
 8005610:	d13e      	bne.n	8005690 <FLASH_EnableWriteProtection+0x8c>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005612:	4920      	ldr	r1, [pc, #128]	; (8005694 <FLASH_EnableWriteProtection+0x90>)
 8005614:	4b20      	ldr	r3, [pc, #128]	; (8005698 <FLASH_EnableWriteProtection+0x94>)
    FLASH->OPTKEYR = FLASH_KEY2;
 8005616:	f101 3088 	add.w	r0, r1, #2290649224	; 0x88888888
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800561a:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 800561c:	6098      	str	r0, [r3, #8]
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
 800561e:	43e4      	mvns	r4, r4
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8005620:	6919      	ldr	r1, [r3, #16]
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
 8005622:	b2e2      	uxtb	r2, r4
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8005624:	f041 0010 	orr.w	r0, r1, #16

    if(WRP0_Data != 0xFF)
 8005628:	2aff      	cmp	r2, #255	; 0xff
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 800562a:	6118      	str	r0, [r3, #16]

    if(WRP0_Data != 0xFF)
 800562c:	d104      	bne.n	8005638 <FLASH_EnableWriteProtection+0x34>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
 800562e:	f3c4 2107 	ubfx	r1, r4, #8, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8005632:	29ff      	cmp	r1, #255	; 0xff
 8005634:	d108      	bne.n	8005648 <FLASH_EnableWriteProtection+0x44>
 8005636:	e00e      	b.n	8005656 <FLASH_EnableWriteProtection+0x52>
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8005638:	4b18      	ldr	r3, [pc, #96]	; (800569c <FLASH_EnableWriteProtection+0x98>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800563a:	200f      	movs	r0, #15
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;

    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 800563c:	811a      	strh	r2, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800563e:	f7ff ff55 	bl	80054ec <FLASH_WaitForLastOperation>
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8005642:	2804      	cmp	r0, #4
 8005644:	d11c      	bne.n	8005680 <FLASH_EnableWriteProtection+0x7c>
 8005646:	e7f2      	b.n	800562e <FLASH_EnableWriteProtection+0x2a>
    {
      OB->WRP1 = WRP1_Data;
 8005648:	4a14      	ldr	r2, [pc, #80]	; (800569c <FLASH_EnableWriteProtection+0x98>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800564a:	200f      	movs	r0, #15
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 800564c:	8151      	strh	r1, [r2, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800564e:	f7ff ff4d 	bl	80054ec <FLASH_WaitForLastOperation>
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8005652:	2804      	cmp	r0, #4
 8005654:	d114      	bne.n	8005680 <FLASH_EnableWriteProtection+0x7c>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
 8005656:	f3c4 4007 	ubfx	r0, r4, #16, #8
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }

    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 800565a:	28ff      	cmp	r0, #255	; 0xff
 800565c:	d006      	beq.n	800566c <FLASH_EnableWriteProtection+0x68>
    {
      OB->WRP2 = WRP2_Data;
 800565e:	4b0f      	ldr	r3, [pc, #60]	; (800569c <FLASH_EnableWriteProtection+0x98>)
 8005660:	8198      	strh	r0, [r3, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005662:	200f      	movs	r0, #15
 8005664:	f7ff ff42 	bl	80054ec <FLASH_WaitForLastOperation>
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8005668:	2804      	cmp	r0, #4
 800566a:	d109      	bne.n	8005680 <FLASH_EnableWriteProtection+0x7c>
  
  FLASH_Pages = (u32)(~FLASH_Pages);
  WRP0_Data = (vu16)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (vu16)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (vu16)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (vu16)((FLASH_Pages & WRP3_Mask) >> 24);
 800566c:	0e24      	lsrs	r4, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 800566e:	2cff      	cmp	r4, #255	; 0xff
 8005670:	d101      	bne.n	8005676 <FLASH_EnableWriteProtection+0x72>
 8005672:	2004      	movs	r0, #4
 8005674:	e006      	b.n	8005684 <FLASH_EnableWriteProtection+0x80>
    {
      OB->WRP3 = WRP3_Data;
 8005676:	4909      	ldr	r1, [pc, #36]	; (800569c <FLASH_EnableWriteProtection+0x98>)
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005678:	200f      	movs	r0, #15
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 800567a:	81cc      	strh	r4, [r1, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800567c:	f7ff ff36 	bl	80054ec <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_BUSY)
 8005680:	2801      	cmp	r0, #1
 8005682:	d005      	beq.n	8005690 <FLASH_EnableWriteProtection+0x8c>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8005684:	4a04      	ldr	r2, [pc, #16]	; (8005698 <FLASH_EnableWriteProtection+0x94>)
 8005686:	f641 73ef 	movw	r3, #8175	; 0x1fef
 800568a:	6911      	ldr	r1, [r2, #16]
 800568c:	400b      	ands	r3, r1
 800568e:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 8005690:	bd10      	pop	{r4, pc}
 8005692:	bf00      	nop
 8005694:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 8005698:	40022000 	andmi	r2, r2, r0
 800569c:	1ffff800 	svcne	0x00fff800

080056a0 <FLASH_ProgramOptionByteData>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80056a4:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramOptionByteData(u32 Address, u8 Data)
{
 80056a6:	460e      	mov	r6, r1
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));

  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80056a8:	f7ff ff20 	bl	80054ec <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80056ac:	2804      	cmp	r0, #4
 80056ae:	d114      	bne.n	80056da <FLASH_ProgramOptionByteData+0x3a>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <FLASH_ProgramOptionByteData+0x3c>)
 80056b2:	4c0b      	ldr	r4, [pc, #44]	; (80056e0 <FLASH_ProgramOptionByteData+0x40>)
    FLASH->OPTKEYR = FLASH_KEY2;
 80056b4:	f103 3088 	add.w	r0, r3, #2290649224	; 0x88888888
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80056b8:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80056ba:	60a0      	str	r0, [r4, #8]

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80056bc:	6921      	ldr	r1, [r4, #16]
    *(vu16*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80056be:	200f      	movs	r0, #15
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;

    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80056c0:	f041 0210 	orr.w	r2, r1, #16
 80056c4:	6122      	str	r2, [r4, #16]
    *(vu16*)Address = Data;
 80056c6:	802e      	strh	r6, [r5, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80056c8:	f7ff ff10 	bl	80054ec <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 80056cc:	2801      	cmp	r0, #1
 80056ce:	d004      	beq.n	80056da <FLASH_ProgramOptionByteData+0x3a>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80056d0:	6921      	ldr	r1, [r4, #16]
 80056d2:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80056d6:	400b      	ands	r3, r1
 80056d8:	6123      	str	r3, [r4, #16]
    }
  }    
  /* Return the Option Byte Data Program Status */
  return status;      
}
 80056da:	bd70      	pop	{r4, r5, r6, pc}
 80056dc:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 80056e0:	40022000 	andmi	r2, r2, r0

080056e4 <FLASH_ProgramHalfWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80056e8:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramHalfWord(u32 Address, u16 Data)
{
 80056ea:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80056ec:	f7ff fefe 	bl	80054ec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80056f0:	2804      	cmp	r0, #4
 80056f2:	d10f      	bne.n	8005714 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 80056f4:	4c08      	ldr	r4, [pc, #32]	; (8005718 <FLASH_ProgramHalfWord+0x34>)
 80056f6:	6923      	ldr	r3, [r4, #16]
 80056f8:	f043 0001 	orr.w	r0, r3, #1
 80056fc:	6120      	str	r0, [r4, #16]
  
    *(vu16*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80056fe:	200f      	movs	r0, #15
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
  
    *(vu16*)Address = Data;
 8005700:	802e      	strh	r6, [r5, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005702:	f7ff fef3 	bl	80054ec <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005706:	2801      	cmp	r0, #1
 8005708:	d004      	beq.n	8005714 <FLASH_ProgramHalfWord+0x30>
    {
      /* if the program operation is completed, disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 800570a:	6922      	ldr	r2, [r4, #16]
 800570c:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8005710:	4011      	ands	r1, r2
 8005712:	6121      	str	r1, [r4, #16]
    }
  } 
  /* Return the Program Status */
  return status;
}
 8005714:	bd70      	pop	{r4, r5, r6, pc}
 8005716:	bf00      	nop
 8005718:	40022000 	andmi	r2, r2, r0

0800571c <FLASH_ProgramWord>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005720:	200f      	movs	r0, #15
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8005722:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005724:	f7ff fee2 	bl	80054ec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8005728:	2804      	cmp	r0, #4
 800572a:	d119      	bne.n	8005760 <FLASH_ProgramWord+0x44>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 800572c:	4c0d      	ldr	r4, [pc, #52]	; (8005764 <FLASH_ProgramWord+0x48>)
  
    *(vu16*)Address = (u16)Data;
 800572e:	b2b1      	uxth	r1, r6
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8005730:	6923      	ldr	r3, [r4, #16]
 8005732:	f043 0001 	orr.w	r0, r3, #1
 8005736:	6120      	str	r0, [r4, #16]
  
    *(vu16*)Address = (u16)Data;

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005738:	200f      	movs	r0, #15
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
  
    *(vu16*)Address = (u16)Data;
 800573a:	8029      	strh	r1, [r5, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800573c:	f7ff fed6 	bl	80054ec <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 8005740:	2804      	cmp	r0, #4
 8005742:	d104      	bne.n	800574e <FLASH_ProgramWord+0x32>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      *(vu16*)(Address + 2) = Data >> 16;
 8005744:	0c36      	lsrs	r6, r6, #16
 8005746:	806e      	strh	r6, [r5, #2]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8005748:	200f      	movs	r0, #15
 800574a:	f7ff fecf 	bl	80054ec <FLASH_WaitForLastOperation>
        
      if(status != FLASH_BUSY)
 800574e:	2801      	cmp	r0, #1
 8005750:	d101      	bne.n	8005756 <FLASH_ProgramWord+0x3a>
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT. 
*******************************************************************************/
FLASH_Status FLASH_ProgramWord(u32 Address, u32 Data)
{
 8005752:	2001      	movs	r0, #1
 8005754:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      if (status != FLASH_BUSY)
      {
        /* Disable the PG Bit */
        FLASH->CR &= CR_PG_Reset;
 8005756:	6922      	ldr	r2, [r4, #16]
 8005758:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 800575c:	4013      	ands	r3, r2
 800575e:	6123      	str	r3, [r4, #16]
      }
     }
  }
  /* Return the Program Status */
  return status;
}
 8005760:	bd70      	pop	{r4, r5, r6, pc}
 8005762:	bf00      	nop
 8005764:	40022000 	andmi	r2, r2, r0

08005768 <FLASH_EraseOptionBytes>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 8005768:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800576a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800576e:	f7ff febd 	bl	80054ec <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 8005772:	2804      	cmp	r0, #4
 8005774:	d12b      	bne.n	80057ce <FLASH_EraseOptionBytes+0x66>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8005776:	4b16      	ldr	r3, [pc, #88]	; (80057d0 <FLASH_EraseOptionBytes+0x68>)
 8005778:	4c16      	ldr	r4, [pc, #88]	; (80057d4 <FLASH_EraseOptionBytes+0x6c>)
    FLASH->OPTKEYR = FLASH_KEY2;
 800577a:	f103 3088 	add.w	r0, r3, #2290649224	; 0x88888888
  status = FLASH_WaitForLastOperation(EraseTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800577e:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8005780:	60a0      	str	r0, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 8005782:	6921      	ldr	r1, [r4, #16]
 8005784:	f041 0220 	orr.w	r2, r1, #32
 8005788:	6122      	str	r2, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 800578a:	6923      	ldr	r3, [r4, #16]
 800578c:	f043 0040 	orr.w	r0, r3, #64	; 0x40
 8005790:	6120      	str	r0, [r4, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005792:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005796:	f7ff fea9 	bl	80054ec <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 800579a:	2804      	cmp	r0, #4
 800579c:	d10e      	bne.n	80057bc <FLASH_EraseOptionBytes+0x54>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 800579e:	6921      	ldr	r1, [r4, #16]
 80057a0:	f641 72df 	movw	r2, #8159	; 0x1fdf
 80057a4:	400a      	ands	r2, r1
 80057a6:	6122      	str	r2, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80057a8:	6923      	ldr	r3, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80057aa:	4a0b      	ldr	r2, [pc, #44]	; (80057d8 <FLASH_EraseOptionBytes+0x70>)
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80057ac:	f043 0010 	orr.w	r0, r3, #16

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80057b0:	21a5      	movs	r1, #165	; 0xa5
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80057b2:	6120      	str	r0, [r4, #16]

      /* Enable the readout access */
      OB->RDP= RDP_Key; 
 80057b4:	8011      	strh	r1, [r2, #0]

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80057b6:	200f      	movs	r0, #15
 80057b8:	f7ff fe98 	bl	80054ec <FLASH_WaitForLastOperation>
 
      if(status != FLASH_BUSY)
 80057bc:	2801      	cmp	r0, #1
 80057be:	d101      	bne.n	80057c4 <FLASH_EraseOptionBytes+0x5c>
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseOptionBytes(void)
{
 80057c0:	2001      	movs	r0, #1
 80057c2:	bd10      	pop	{r4, pc}
    else
    {
      if (status != FLASH_BUSY)
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80057c4:	6921      	ldr	r1, [r4, #16]
 80057c6:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80057ca:	400b      	ands	r3, r1
 80057cc:	6123      	str	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 80057ce:	bd10      	pop	{r4, pc}
 80057d0:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123
 80057d4:	40022000 	andmi	r2, r2, r0
 80057d8:	1ffff800 	svcne	0x00fff800

080057dc <FLASH_EraseAllPages>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_EraseAllPages(void)
{
 80057dc:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80057de:	f640 70ff 	movw	r0, #4095	; 0xfff
 80057e2:	f7ff fe83 	bl	80054ec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80057e6:	2804      	cmp	r0, #4
 80057e8:	d113      	bne.n	8005812 <FLASH_EraseAllPages+0x36>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 80057ea:	4c0a      	ldr	r4, [pc, #40]	; (8005814 <FLASH_EraseAllPages+0x38>)
 80057ec:	6923      	ldr	r3, [r4, #16]
 80057ee:	f043 0004 	orr.w	r0, r3, #4
 80057f2:	6120      	str	r0, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 80057f4:	6921      	ldr	r1, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80057f6:	f640 70ff 	movw	r0, #4095	; 0xfff
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
     FLASH->CR |= CR_STRT_Set;
 80057fa:	f041 0240 	orr.w	r2, r1, #64	; 0x40
 80057fe:	6122      	str	r2, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005800:	f7ff fe74 	bl	80054ec <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005804:	2801      	cmp	r0, #1
 8005806:	d004      	beq.n	8005812 <FLASH_EraseAllPages+0x36>
    {
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= CR_MER_Reset;
 8005808:	6921      	ldr	r1, [r4, #16]
 800580a:	f641 73fb 	movw	r3, #8187	; 0x1ffb
 800580e:	400b      	ands	r3, r1
 8005810:	6123      	str	r3, [r4, #16]
    }
  }	   
  /* Return the Erase Status */
  return status;
}
 8005812:	bd10      	pop	{r4, pc}
 8005814:	40022000 	andmi	r2, r2, r0

08005818 <FLASH_ErasePage>:
* Return         : FLASH Status: The returned value can be: FLASH_BUSY, 
*                  FLASH_ERROR_PG, FLASH_ERROR_WRP, FLASH_COMPLETE or 
*                  FLASH_TIMEOUT.
*******************************************************************************/
FLASH_Status FLASH_ErasePage(u32 Page_Address)
{
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Page_Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800581c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005820:	f7ff fe64 	bl	80054ec <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8005824:	2804      	cmp	r0, #4
 8005826:	d114      	bne.n	8005852 <FLASH_ErasePage+0x3a>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8005828:	4c0a      	ldr	r4, [pc, #40]	; (8005854 <FLASH_ErasePage+0x3c>)
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	f043 0002 	orr.w	r0, r3, #2
 8005830:	6120      	str	r0, [r4, #16]
    FLASH->AR = Page_Address; 
 8005832:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8005834:	6921      	ldr	r1, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005836:	f640 70ff 	movw	r0, #4095	; 0xfff
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
 800583a:	f041 0240 	orr.w	r2, r1, #64	; 0x40
 800583e:	6122      	str	r2, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8005840:	f7ff fe54 	bl	80054ec <FLASH_WaitForLastOperation>

    if(status != FLASH_BUSY)
 8005844:	2801      	cmp	r0, #1
 8005846:	d004      	beq.n	8005852 <FLASH_ErasePage+0x3a>
    {
      /* if the erase operation is completed, disable the PER Bit */
      FLASH->CR &= CR_PER_Reset;
 8005848:	6921      	ldr	r1, [r4, #16]
 800584a:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 800584e:	400b      	ands	r3, r1
 8005850:	6123      	str	r3, [r4, #16]
    }
  }
  /* Return the Erase Status */
  return status;
}
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	40022000 	andmi	r2, r2, r0

08005858 <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8005858:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 800585a:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <GPIO_DeInit+0x9c>)
 800585c:	4298      	cmp	r0, r3
 800585e:	d02f      	beq.n	80058c0 <GPIO_DeInit+0x68>
 8005860:	d811      	bhi.n	8005886 <GPIO_DeInit+0x2e>
 8005862:	f5a3 6100 	sub.w	r1, r3, #2048	; 0x800
 8005866:	4288      	cmp	r0, r1
 8005868:	d01e      	beq.n	80058a8 <GPIO_DeInit+0x50>
 800586a:	f501 6280 	add.w	r2, r1, #1024	; 0x400
 800586e:	4290      	cmp	r0, r2
 8005870:	d020      	beq.n	80058b4 <GPIO_DeInit+0x5c>
 8005872:	f5a2 6300 	sub.w	r3, r2, #2048	; 0x800
 8005876:	4298      	cmp	r0, r3
 8005878:	d13a      	bne.n	80058f0 <GPIO_DeInit+0x98>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800587a:	2004      	movs	r0, #4
 800587c:	2101      	movs	r1, #1
 800587e:	f000 fc4b 	bl	8006118 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8005882:	2004      	movs	r0, #4
 8005884:	e02f      	b.n	80058e6 <GPIO_DeInit+0x8e>
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
 8005886:	491c      	ldr	r1, [pc, #112]	; (80058f8 <GPIO_DeInit+0xa0>)
 8005888:	4288      	cmp	r0, r1
 800588a:	d01f      	beq.n	80058cc <GPIO_DeInit+0x74>
 800588c:	f501 6280 	add.w	r2, r1, #1024	; 0x400
 8005890:	4290      	cmp	r0, r2
 8005892:	d021      	beq.n	80058d8 <GPIO_DeInit+0x80>
 8005894:	f5a2 6300 	sub.w	r3, r2, #2048	; 0x800
 8005898:	4298      	cmp	r0, r3
 800589a:	d129      	bne.n	80058f0 <GPIO_DeInit+0x98>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
      break;
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 800589c:	2040      	movs	r0, #64	; 0x40
 800589e:	2101      	movs	r1, #1
 80058a0:	f000 fc3a 	bl	8006118 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80058a4:	2040      	movs	r0, #64	; 0x40
 80058a6:	e01e      	b.n	80058e6 <GPIO_DeInit+0x8e>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
      break;

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80058a8:	2008      	movs	r0, #8
 80058aa:	2101      	movs	r1, #1
 80058ac:	f000 fc34 	bl	8006118 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80058b0:	2008      	movs	r0, #8
 80058b2:	e018      	b.n	80058e6 <GPIO_DeInit+0x8e>
      break;

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80058b4:	2010      	movs	r0, #16
 80058b6:	2101      	movs	r1, #1
 80058b8:	f000 fc2e 	bl	8006118 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 80058bc:	2010      	movs	r0, #16
 80058be:	e012      	b.n	80058e6 <GPIO_DeInit+0x8e>
      break;

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80058c0:	2020      	movs	r0, #32
 80058c2:	2101      	movs	r1, #1
 80058c4:	f000 fc28 	bl	8006118 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80058c8:	2020      	movs	r0, #32
 80058ca:	e00c      	b.n	80058e6 <GPIO_DeInit+0x8e>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
      break; 

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80058cc:	2080      	movs	r0, #128	; 0x80
 80058ce:	2101      	movs	r1, #1
 80058d0:	f000 fc22 	bl	8006118 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80058d4:	2080      	movs	r0, #128	; 0x80
 80058d6:	e006      	b.n	80058e6 <GPIO_DeInit+0x8e>
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80058d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80058dc:	2101      	movs	r1, #1
 80058de:	f000 fc1b 	bl	8006118 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80058e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80058e6:	2100      	movs	r1, #0
      break;                       

    default:
      break;
  }
}
 80058e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
      break;

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80058ec:	f000 bc14 	b.w	8006118 <RCC_APB2PeriphResetCmd>
 80058f0:	bd08      	pop	{r3, pc}
 80058f2:	bf00      	nop
 80058f4:	40011400 	andmi	r1, r1, r0, lsl #8
 80058f8:	40011c00 	andmi	r1, r1, r0, lsl #24

080058fc <GPIO_AFIODeInit>:
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 80058fc:	2001      	movs	r0, #1
 80058fe:	4601      	mov	r1, r0
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
 8005900:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8005902:	f000 fc09 	bl	8006118 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8005906:	2001      	movs	r0, #1
 8005908:	2100      	movs	r1, #0
}
 800590a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 800590e:	f000 bc03 	b.w	8006118 <RCC_APB2PeriphResetCmd>

08005912 <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 8005912:	78cb      	ldrb	r3, [r1, #3]
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8005914:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 8005916:	06da      	lsls	r2, r3, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8005918:	bf48      	it	mi
 800591a:	788a      	ldrbmi	r2, [r1, #2]
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 800591c:	8809      	ldrh	r1, [r1, #0]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 800591e:	f003 050f 	and.w	r5, r3, #15
  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 8005922:	bf48      	it	mi
 8005924:	4315      	orrmi	r5, r2
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 8005926:	f011 0fff 	tst.w	r1, #255	; 0xff
 800592a:	d01e      	beq.n	800596a <GPIO_Init+0x58>
  {
    tmpreg = GPIOx->CRL;
 800592c:	6804      	ldr	r4, [r0, #0]

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800592e:	2200      	movs	r2, #0
    {
      pos = ((u32)0x01) << pinpos;
 8005930:	2701      	movs	r7, #1
 8005932:	fa07 f702 	lsl.w	r7, r7, r2
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005936:	ea07 0601 	and.w	r6, r7, r1

      if (currentpin == pos)
 800593a:	42be      	cmp	r6, r7
 800593c:	d111      	bne.n	8005962 <GPIO_Init+0x50>
      {
        pos = pinpos << 2;
 800593e:	0097      	lsls	r7, r2, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 8005940:	f04f 0c0f 	mov.w	ip, #15
 8005944:	fa0c fc07 	lsl.w	ip, ip, r7
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005948:	fa05 f707 	lsl.w	r7, r5, r7
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 800594c:	ea24 040c 	bic.w	r4, r4, ip

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005950:	2b28      	cmp	r3, #40	; 0x28
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005952:	ea44 0407 	orr.w	r4, r4, r7

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005956:	d101      	bne.n	800595c <GPIO_Init+0x4a>
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 8005958:	6146      	str	r6, [r0, #20]
 800595a:	e002      	b.n	8005962 <GPIO_Init+0x50>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800595c:	2b48      	cmp	r3, #72	; 0x48
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 800595e:	bf08      	it	eq
 8005960:	6106      	streq	r6, [r0, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005962:	3201      	adds	r2, #1
 8005964:	2a08      	cmp	r2, #8
 8005966:	d1e3      	bne.n	8005930 <GPIO_Init+0x1e>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8005968:	6004      	str	r4, [r0, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800596a:	29ff      	cmp	r1, #255	; 0xff
 800596c:	d920      	bls.n	80059b0 <GPIO_Init+0x9e>
  {
    tmpreg = GPIOx->CRH;
 800596e:	6844      	ldr	r4, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8005970:	2200      	movs	r2, #0
*                    contains the configuration information for the specified GPIO
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 8005972:	f102 0608 	add.w	r6, r2, #8
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 8005976:	2701      	movs	r7, #1
 8005978:	fa07 f706 	lsl.w	r7, r7, r6
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800597c:	ea07 0601 	and.w	r6, r7, r1
      if (currentpin == pos)
 8005980:	42be      	cmp	r6, r7
 8005982:	d111      	bne.n	80059a8 <GPIO_Init+0x96>
      {
        pos = pinpos << 2;
 8005984:	0097      	lsls	r7, r2, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 8005986:	f04f 0c0f 	mov.w	ip, #15
 800598a:	fa0c fc07 	lsl.w	ip, ip, r7
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800598e:	fa05 f707 	lsl.w	r7, r5, r7
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;
 8005992:	ea24 040c 	bic.w	r4, r4, ip

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8005996:	2b28      	cmp	r3, #40	; 0x28
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
        tmpreg &= ~pinmask;

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8005998:	ea44 0407 	orr.w	r4, r4, r7

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800599c:	d101      	bne.n	80059a2 <GPIO_Init+0x90>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 800599e:	6146      	str	r6, [r0, #20]
 80059a0:	e002      	b.n	80059a8 <GPIO_Init+0x96>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80059a2:	2b48      	cmp	r3, #72	; 0x48
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 80059a4:	bf08      	it	eq
 80059a6:	6106      	streq	r6, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80059a8:	3201      	adds	r2, #1
 80059aa:	2a08      	cmp	r2, #8
 80059ac:	d1e1      	bne.n	8005972 <GPIO_Init+0x60>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80059ae:	6044      	str	r4, [r0, #4]
 80059b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059b2 <GPIO_StructInit>:
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80059b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80059b6:	2102      	movs	r1, #2
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80059b8:	2204      	movs	r2, #4
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80059ba:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80059bc:	7081      	strb	r1, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80059be:	70c2      	strb	r2, [r0, #3]
 80059c0:	4770      	bx	lr

080059c2 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
 80059c2:	6883      	ldr	r3, [r0, #8]
 80059c4:	4219      	tst	r1, r3
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 80059c6:	bf0c      	ite	eq
 80059c8:	2000      	moveq	r0, #0
 80059ca:	2001      	movne	r0, #1
 80059cc:	4770      	bx	lr

080059ce <GPIO_ReadInputData>:
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
 80059ce:	6880      	ldr	r0, [r0, #8]
}
 80059d0:	b280      	uxth	r0, r0
 80059d2:	4770      	bx	lr

080059d4 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
 80059d4:	68c3      	ldr	r3, [r0, #12]
 80059d6:	4219      	tst	r1, r3
  else
  {
    bitstatus = (u8)Bit_RESET;
  }
  return bitstatus;
}
 80059d8:	bf0c      	ite	eq
 80059da:	2000      	moveq	r0, #0
 80059dc:	2001      	movne	r0, #1
 80059de:	4770      	bx	lr

080059e0 <GPIO_ReadOutputData>:
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 80059e0:	68c0      	ldr	r0, [r0, #12]
}
 80059e2:	b280      	uxth	r0, r0
 80059e4:	4770      	bx	lr

080059e6 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80059e6:	6101      	str	r1, [r0, #16]
 80059e8:	4770      	bx	lr

080059ea <GPIO_ResetBits>:
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin) {
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80059ea:	6141      	str	r1, [r0, #20]
 80059ec:	4770      	bx	lr

080059ee <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80059ee:	b10a      	cbz	r2, 80059f4 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059f0:	6101      	str	r1, [r0, #16]
 80059f2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80059f4:	6141      	str	r1, [r0, #20]
 80059f6:	4770      	bx	lr

080059f8 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80059f8:	60c1      	str	r1, [r0, #12]
 80059fa:	4770      	bx	lr

080059fc <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80059fc:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8005a00:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8005a02:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8005a04:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8005a06:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8005a08:	6983      	ldr	r3, [r0, #24]
 8005a0a:	4770      	bx	lr

08005a0c <GPIO_EventOutputConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8005a0c:	4a05      	ldr	r2, [pc, #20]	; (8005a24 <GPIO_EventOutputConfig+0x18>)
*                    This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EventOutputConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8005a0e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 8005a10:	6814      	ldr	r4, [r2, #0]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 8005a12:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005a16:	4023      	ands	r3, r4
  tmpreg |= (u32)GPIO_PortSource << 0x04;
 8005a18:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  tmpreg |= GPIO_PinSource;
 8005a1c:	ea41 0003 	orr.w	r0, r1, r3

  AFIO->EVCR = tmpreg;
 8005a20:	6010      	str	r0, [r2, #0]
 8005a22:	bd10      	pop	{r4, pc}
 8005a24:	40010000 	andmi	r0, r1, r0

08005a28 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
 8005a28:	4b01      	ldr	r3, [pc, #4]	; (8005a30 <GPIO_EventOutputCmd+0x8>)
 8005a2a:	6018      	str	r0, [r3, #0]
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	4220001c 	eormi	r0, r0, #28

08005a34 <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 8005a34:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8005a36:	4a14      	ldr	r2, [pc, #80]	; (8005a88 <GPIO_PinRemapConfig+0x54>)

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8005a38:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8005a3c:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8005a40:	6853      	ldr	r3, [r2, #4]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8005a42:	b284      	uxth	r4, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8005a44:	d106      	bne.n	8005a54 <GPIO_PinRemapConfig+0x20>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8005a46:	6855      	ldr	r5, [r2, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8005a48:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8005a4c:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8005a50:	6055      	str	r5, [r2, #4]
 8005a52:	e00f      	b.n	8005a74 <GPIO_PinRemapConfig+0x40>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8005a54:	02c2      	lsls	r2, r0, #11
 8005a56:	d505      	bpl.n	8005a64 <GPIO_PinRemapConfig+0x30>
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8005a58:	f3c0 4203 	ubfx	r2, r0, #16, #4
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((u32)0x03) << tmpmask;
 8005a5c:	2503      	movs	r5, #3
 8005a5e:	fa05 f202 	lsl.w	r2, r5, r2
 8005a62:	e003      	b.n	8005a6c <GPIO_PinRemapConfig+0x38>
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8005a64:	0d42      	lsrs	r2, r0, #21
 8005a66:	0112      	lsls	r2, r2, #4
 8005a68:	fa04 f202 	lsl.w	r2, r4, r2
 8005a6c:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8005a70:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8005a74:	b121      	cbz	r1, 8005a80 <GPIO_PinRemapConfig+0x4c>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8005a76:	0d40      	lsrs	r0, r0, #21
 8005a78:	0101      	lsls	r1, r0, #4
 8005a7a:	fa04 f401 	lsl.w	r4, r4, r1
 8005a7e:	4323      	orrs	r3, r4
  }

  AFIO->MAPR = tmpreg;
 8005a80:	4a01      	ldr	r2, [pc, #4]	; (8005a88 <GPIO_PinRemapConfig+0x54>)
 8005a82:	6053      	str	r3, [r2, #4]
 8005a84:	bd30      	pop	{r4, r5, pc}
 8005a86:	bf00      	nop
 8005a88:	40010000 	andmi	r0, r1, r0

08005a8c <GPIO_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8005a8c:	f001 0203 	and.w	r2, r1, #3
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
 8005a90:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
 8005a92:	0092      	lsls	r2, r2, #2
 8005a94:	240f      	movs	r4, #15
 8005a96:	fa04 f402 	lsl.w	r4, r4, r2

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8005a9a:	fa00 f002 	lsl.w	r0, r0, r2
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8005a9e:	4b07      	ldr	r3, [pc, #28]	; (8005abc <GPIO_EXTILineConfig+0x30>)
 8005aa0:	0889      	lsrs	r1, r1, #2
 8005aa2:	3102      	adds	r1, #2
 8005aa4:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8005aa8:	ea25 0404 	bic.w	r4, r5, r4
 8005aac:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
 8005ab0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8005ab4:	4304      	orrs	r4, r0
 8005ab6:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
 8005aba:	bd30      	pop	{r4, r5, pc}
 8005abc:	40010000 	andmi	r0, r1, r0

08005ac0 <NVIC_DeInit>:
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <NVIC_DeInit+0x30>)
  NVIC->ICER[1] = 0x0FFFFFFF;
 8005ac2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
*******************************************************************************/
void NVIC_DeInit(void)
{
  u32 index = 0;
  
  NVIC->ICER[0] = 0xFFFFFFFF;
 8005ac6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005aca:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  NVIC->ICER[1] = 0x0FFFFFFF;
 8005ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  NVIC->ICPR[0] = 0xFFFFFFFF;
 8005ad2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ICPR[1] = 0x0FFFFFFF;
 8005ad6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  
  for(index = 0; index < 0x0F; index++)
 8005ada:	2200      	movs	r2, #0
  {
     NVIC->IPR[index] = 0x00000000;
 8005adc:	f102 01c0 	add.w	r1, r2, #192	; 0xc0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8005ae0:	3201      	adds	r2, #1
  {
     NVIC->IPR[index] = 0x00000000;
 8005ae2:	2000      	movs	r0, #0
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8005ae4:	2a0f      	cmp	r2, #15
  {
     NVIC->IPR[index] = 0x00000000;
 8005ae6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
 8005aea:	d1f7      	bne.n	8005adc <NVIC_DeInit+0x1c>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	e000e100 	and	lr, r0, r0, lsl #2

08005af4 <NVIC_SCBDeInit>:
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <NVIC_SCBDeInit+0x28>)
 8005af6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8005afa:	4909      	ldr	r1, [pc, #36]	; (8005b20 <NVIC_SCBDeInit+0x2c>)
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
 8005afc:	605a      	str	r2, [r3, #4]
  SCB->VTOR = 0x00000000;
 8005afe:	2000      	movs	r0, #0
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
  }
  SCB->SHCSR = 0x00000000;
  SCB->CFSR = 0xFFFFFFFF;
 8005b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
void NVIC_SCBDeInit(void)
{
  u32 index = 0x00;
  
  SCB->ICSR = 0x0A000000;
  SCB->VTOR = 0x00000000;
 8005b04:	6098      	str	r0, [r3, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
 8005b06:	60d9      	str	r1, [r3, #12]
  SCB->SCR = 0x00000000;
 8005b08:	6118      	str	r0, [r3, #16]
  SCB->CCR = 0x00000000;
 8005b0a:	6158      	str	r0, [r3, #20]
  for(index = 0; index < 0x03; index++)
  {
     SCB->SHPR[index] = 0;
 8005b0c:	6198      	str	r0, [r3, #24]
 8005b0e:	61d8      	str	r0, [r3, #28]
 8005b10:	6218      	str	r0, [r3, #32]
  }
  SCB->SHCSR = 0x00000000;
 8005b12:	6258      	str	r0, [r3, #36]	; 0x24
  SCB->CFSR = 0xFFFFFFFF;
 8005b14:	629a      	str	r2, [r3, #40]	; 0x28
  SCB->HFSR = 0xFFFFFFFF;
 8005b16:	62da      	str	r2, [r3, #44]	; 0x2c
  SCB->DFSR = 0xFFFFFFFF;
 8005b18:	631a      	str	r2, [r3, #48]	; 0x30
 8005b1a:	4770      	bx	lr
 8005b1c:	e000ed00 	and	lr, r0, r0, lsl #26
 8005b20:	05fa0000 	ldrbeq	r0, [sl, #0]!

08005b24 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005b24:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8005b28:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <NVIC_PriorityGroupConfig+0x10>)
 8005b2a:	f440 3100 	orr.w	r1, r0, #131072	; 0x20000
 8005b2e:	60d9      	str	r1, [r3, #12]
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	e000ed00 	and	lr, r0, r0, lsl #26

08005b38 <NVIC_Init>:
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005b38:	78c3      	ldrb	r3, [r0, #3]
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005b3a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005b3c:	b373      	cbz	r3, 8005b9c <NVIC_Init+0x64>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8005b3e:	4c1d      	ldr	r4, [pc, #116]	; (8005bb4 <NVIC_Init+0x7c>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005b40:	7843      	ldrb	r3, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8005b42:	68e5      	ldr	r5, [r4, #12]
 8005b44:	43ee      	mvns	r6, r5
 8005b46:	f3c6 2102 	ubfx	r1, r6, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8005b4a:	250f      	movs	r5, #15
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
 8005b4c:	f1c1 0204 	rsb	r2, r1, #4
    tmpsub = tmpsub >> tmppriority;
 8005b50:	fa25 f501 	lsr.w	r5, r5, r1
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005b54:	fa03 f402 	lsl.w	r4, r3, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005b58:	7886      	ldrb	r6, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005b5a:	7801      	ldrb	r1, [r0, #0]
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005b5c:	4035      	ands	r5, r6

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005b5e:	f001 0203 	and.w	r2, r1, #3
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8005b62:	4325      	orrs	r5, r4

    tmppriority = tmppriority << 0x04;
 8005b64:	012d      	lsls	r5, r5, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005b66:	00d4      	lsls	r4, r2, #3
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8005b68:	088a      	lsrs	r2, r1, #2
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005b6a:	21ff      	movs	r1, #255	; 0xff
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005b6c:	fa05 f504 	lsl.w	r5, r5, r4
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8005b70:	fa01 f104 	lsl.w	r1, r1, r4
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8005b74:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <NVIC_Init+0x80>)
 8005b76:	32c0      	adds	r2, #192	; 0xc0
 8005b78:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8005b7c:	ea26 0401 	bic.w	r4, r6, r1
    tmppriority &= tmpmask;  
 8005b80:	4029      	ands	r1, r5
    tmpreg |= tmppriority;
 8005b82:	4321      	orrs	r1, r4

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8005b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8005b88:	7800      	ldrb	r0, [r0, #0]
 8005b8a:	0941      	lsrs	r1, r0, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8005b8c:	f000 021f 	and.w	r2, r0, #31
 8005b90:	2001      	movs	r0, #1
 8005b92:	fa00 f202 	lsl.w	r2, r0, r2
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8005b96:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8005b9c:	7800      	ldrb	r0, [r0, #0]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f000 031f 	and.w	r3, r0, #31
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8005ba4:	0941      	lsrs	r1, r0, #5
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8005ba6:	fa02 f003 	lsl.w	r0, r2, r3
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8005baa:	4b03      	ldr	r3, [pc, #12]	; (8005bb8 <NVIC_Init+0x80>)
 8005bac:	3120      	adds	r1, #32
 8005bae:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	e000ed00 	and	lr, r0, r0, lsl #26
 8005bb8:	e000e100 	and	lr, r0, r0, lsl #2

08005bbc <NVIC_StructInit>:
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	7003      	strb	r3, [r0, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
 8005bc0:	7043      	strb	r3, [r0, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
 8005bc2:	7083      	strb	r3, [r0, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
 8005bc4:	70c3      	strb	r3, [r0, #3]
 8005bc6:	4770      	bx	lr

08005bc8 <NVIC_SETPRIMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
  __SETPRIMASK();
 8005bc8:	f000 bd21 	b.w	800660e <__SETPRIMASK>

08005bcc <NVIC_RESETPRIMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
  __RESETPRIMASK();
 8005bcc:	f000 bd21 	b.w	8006612 <__RESETPRIMASK>

08005bd0 <NVIC_SETFAULTMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
  __SETFAULTMASK();
 8005bd0:	f000 bd21 	b.w	8006616 <__SETFAULTMASK>

08005bd4 <NVIC_RESETFAULTMASK>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
  __RESETFAULTMASK();
 8005bd4:	f000 bd21 	b.w	800661a <__RESETFAULTMASK>

08005bd8 <NVIC_BASEPRICONFIG>:
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
 8005bd8:	0100      	lsls	r0, r0, #4
 8005bda:	f000 bd20 	b.w	800661e <__BASEPRICONFIG>

08005bde <NVIC_GetBASEPRI>:
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
  return (__GetBASEPRI());
 8005bde:	f000 bd21 	b.w	8006624 <__GetBASEPRI>

08005be2 <NVIC_GetCurrentPendingIRQChannel>:
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
 8005be2:	4b02      	ldr	r3, [pc, #8]	; (8005bec <NVIC_GetCurrentPendingIRQChannel+0xa>)
 8005be4:	6858      	ldr	r0, [r3, #4]
}
 8005be6:	f3c0 3009 	ubfx	r0, r0, #12, #10
 8005bea:	4770      	bx	lr
 8005bec:	e000ed00 	and	lr, r0, r0, lsl #26

08005bf0 <NVIC_GetIRQChannelPendingBitStatus>:
  u32 tmp = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8005bf0:	f000 031f 	and.w	r3, r0, #31
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	fa02 f103 	lsl.w	r1, r2, r3

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
 8005bfa:	0940      	lsrs	r0, r0, #5
 8005bfc:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <NVIC_GetIRQChannelPendingBitStatus+0x20>)
 8005bfe:	3040      	adds	r0, #64	; 0x40
 8005c00:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8005c04:	400a      	ands	r2, r1
  else
  {
    pendingirqstatus = RESET;
  }
  return pendingirqstatus;
}
 8005c06:	1a51      	subs	r1, r2, r1
 8005c08:	4248      	negs	r0, r1
 8005c0a:	4148      	adcs	r0, r1
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	e000e100 	and	lr, r0, r0, lsl #2

08005c14 <NVIC_SetIRQChannelPendingBit>:
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
 8005c14:	4b01      	ldr	r3, [pc, #4]	; (8005c1c <NVIC_SetIRQChannelPendingBit+0x8>)
 8005c16:	6018      	str	r0, [r3, #0]
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	e000ef00 	and	lr, r0, r0, lsl #30

08005c20 <NVIC_ClearIRQChannelPendingBit>:
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
 8005c20:	0942      	lsrs	r2, r0, #5
 8005c22:	2301      	movs	r3, #1
 8005c24:	f000 001f 	and.w	r0, r0, #31
 8005c28:	fa03 f100 	lsl.w	r1, r3, r0
 8005c2c:	4802      	ldr	r0, [pc, #8]	; (8005c38 <NVIC_ClearIRQChannelPendingBit+0x18>)
 8005c2e:	3260      	adds	r2, #96	; 0x60
 8005c30:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	e000e100 	and	lr, r0, r0, lsl #2

08005c3c <NVIC_GetCurrentActiveHandler>:
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
  return ((u16)(SCB->ICSR & (u32)0x3FF));
 8005c3c:	4b02      	ldr	r3, [pc, #8]	; (8005c48 <NVIC_GetCurrentActiveHandler+0xc>)
 8005c3e:	6858      	ldr	r0, [r3, #4]
 8005c40:	0581      	lsls	r1, r0, #22
}
 8005c42:	0d88      	lsrs	r0, r1, #22
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	e000ed00 	and	lr, r0, r0, lsl #26

08005c4c <NVIC_GetIRQChannelActiveBitStatus>:
  u32 tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
 8005c4c:	f000 031f 	and.w	r3, r0, #31
 8005c50:	2201      	movs	r2, #1
 8005c52:	fa02 f103 	lsl.w	r1, r2, r3

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
 8005c56:	0940      	lsrs	r0, r0, #5
 8005c58:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <NVIC_GetIRQChannelActiveBitStatus+0x20>)
 8005c5a:	3080      	adds	r0, #128	; 0x80
 8005c5c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8005c60:	400a      	ands	r2, r1
  else
  {
    activeirqstatus = RESET;
  }
  return activeirqstatus;
}
 8005c62:	1a51      	subs	r1, r2, r1
 8005c64:	4248      	negs	r0, r1
 8005c66:	4148      	adcs	r0, r1
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	e000e100 	and	lr, r0, r0, lsl #2

08005c70 <NVIC_GetCPUID>:
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
  return (SCB->CPUID);
 8005c70:	4b01      	ldr	r3, [pc, #4]	; (8005c78 <NVIC_GetCPUID+0x8>)
 8005c72:	6818      	ldr	r0, [r3, #0]
}
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	e000ed00 	and	lr, r0, r0, lsl #26

08005c7c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
 8005c7c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8005c80:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 8005c84:	4b01      	ldr	r3, [pc, #4]	; (8005c8c <NVIC_SetVectorTable+0x10>)
 8005c86:	4310      	orrs	r0, r2
 8005c88:	6098      	str	r0, [r3, #8]
 8005c8a:	4770      	bx	lr
 8005c8c:	e000ed00 	and	lr, r0, r0, lsl #26

08005c90 <NVIC_GenerateSystemReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
 8005c90:	4a01      	ldr	r2, [pc, #4]	; (8005c98 <NVIC_GenerateSystemReset+0x8>)
 8005c92:	4b02      	ldr	r3, [pc, #8]	; (8005c9c <NVIC_GenerateSystemReset+0xc>)
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	4770      	bx	lr
 8005c98:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8005c9c:	e000ed00 	and	lr, r0, r0, lsl #26

08005ca0 <NVIC_GenerateCoreReset>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
 8005ca0:	4a01      	ldr	r2, [pc, #4]	; (8005ca8 <NVIC_GenerateCoreReset+0x8>)
 8005ca2:	4b02      	ldr	r3, [pc, #8]	; (8005cac <NVIC_GenerateCoreReset+0xc>)
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	4770      	bx	lr
 8005ca8:	05fa0001 	ldrbeq	r0, [sl, #1]!
 8005cac:	e000ed00 	and	lr, r0, r0, lsl #26

08005cb0 <NVIC_SystemLPConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemLPConfig(u8 LowPowerMode, FunctionalState NewState)
{
 8005cb0:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8005cb2:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005cb4:	b109      	cbz	r1, 8005cba <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8005cb6:	4310      	orrs	r0, r2
 8005cb8:	e001      	b.n	8005cbe <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
 8005cba:	ea22 0000 	bic.w	r0, r2, r0
 8005cbe:	6118      	str	r0, [r3, #16]
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	e000ed00 	and	lr, r0, r0, lsl #26

08005cc8 <NVIC_SystemHandlerConfig>:

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f000 001f 	and.w	r0, r0, #31
 8005cce:	fa03 f000 	lsl.w	r0, r3, r0
 8005cd2:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <NVIC_SystemHandlerConfig+0x1c>)

  if (NewState != DISABLE)
  {
    SCB->SHCSR |= tmpreg;
 8005cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);

  if (NewState != DISABLE)
 8005cd6:	b109      	cbz	r1, 8005cdc <NVIC_SystemHandlerConfig+0x14>
  {
    SCB->SHCSR |= tmpreg;
 8005cd8:	4310      	orrs	r0, r2
 8005cda:	e001      	b.n	8005ce0 <NVIC_SystemHandlerConfig+0x18>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
 8005cdc:	ea22 0000 	bic.w	r0, r2, r0
 8005ce0:	6258      	str	r0, [r3, #36]	; 0x24
 8005ce2:	4770      	bx	lr
 8005ce4:	e000ed00 	and	lr, r0, r0, lsl #26

08005ce8 <NVIC_SystemHandlerPriorityConfig>:
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8005ce8:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <NVIC_SystemHandlerPriorityConfig+0x4c>)
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
 8005cea:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8005cec:	68dc      	ldr	r4, [r3, #12]
 8005cee:	43e5      	mvns	r5, r4
 8005cf0:	f3c5 2602 	ubfx	r6, r5, #8, #3
  tmp1 = (0x4 - tmppriority);
  tmp2 = tmp2 >> tmppriority;
 8005cf4:	25ff      	movs	r5, #255	; 0xff
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
  tmp1 = (0x4 - tmppriority);
 8005cf6:	f1c6 0404 	rsb	r4, r6, #4
  tmp2 = tmp2 >> tmppriority;
 8005cfa:	fa25 f606 	lsr.w	r6, r5, r6
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
 8005cfe:	fa01 f104 	lsl.w	r1, r1, r4
  tmppriority |=  SystemHandlerSubPriority & tmp2;
 8005d02:	4032      	ands	r2, r6
 8005d04:	4311      	orrs	r1, r2

  tmppriority = tmppriority << 0x04;
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
 8005d06:	f3c0 1281 	ubfx	r2, r0, #6, #2
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
 8005d0a:	f3c0 2001 	ubfx	r0, r0, #8, #2
  tmppriority = tmppriority << (tmp2 * 0x08);
 8005d0e:	00c0      	lsls	r0, r0, #3
  handlermask = (u32)0xFF << (tmp2 * 0x08);
 8005d10:	fa05 f500 	lsl.w	r5, r5, r0
  tmp2 = tmp2 >> tmppriority;
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
  tmppriority |=  SystemHandlerSubPriority & tmp2;

  tmppriority = tmppriority << 0x04;
 8005d14:	0109      	lsls	r1, r1, #4
  tmp1 = SystemHandler & (u32)0xC0;
  tmp1 = tmp1 >> 0x06; 
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
  tmppriority = tmppriority << (tmp2 * 0x08);
 8005d16:	fa01 f100 	lsl.w	r1, r1, r0
  handlermask = (u32)0xFF << (tmp2 * 0x08);
  
  SCB->SHPR[tmp1] &= ~handlermask;
 8005d1a:	3206      	adds	r2, #6
 8005d1c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8005d20:	ea24 0505 	bic.w	r5, r4, r5
 8005d24:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  SCB->SHPR[tmp1] |= tmppriority;
 8005d28:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8005d2c:	4331      	orrs	r1, r6
 8005d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	e000ed00 	and	lr, r0, r0, lsl #26

08005d38 <NVIC_GetSystemHandlerPendingBitStatus>:

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
  tmppos &= (u32)0x0F;
 8005d38:	f3c0 2083 	ubfx	r0, r0, #10, #4

  tmppos = (u32)0x01 << tmppos;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	fa03 f300 	lsl.w	r3, r3, r0

  tmp = SCB->SHCSR & tmppos;
 8005d42:	4a03      	ldr	r2, [pc, #12]	; (8005d50 <NVIC_GetSystemHandlerPendingBitStatus+0x18>)
 8005d44:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8005d46:	4019      	ands	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005d48:	1acb      	subs	r3, r1, r3
 8005d4a:	4258      	negs	r0, r3
 8005d4c:	4158      	adcs	r0, r3
 8005d4e:	4770      	bx	lr
 8005d50:	e000ed00 	and	lr, r0, r0, lsl #26

08005d54 <NVIC_SetSystemHandlerPendingBit>:

  /* Check the parameters */
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
 8005d54:	f000 001f 	and.w	r0, r0, #31
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
 8005d58:	2101      	movs	r1, #1
 8005d5a:	fa01 f000 	lsl.w	r0, r1, r0
 8005d5e:	4b02      	ldr	r3, [pc, #8]	; (8005d68 <NVIC_SetSystemHandlerPendingBit+0x14>)
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	4302      	orrs	r2, r0
 8005d64:	605a      	str	r2, [r3, #4]
 8005d66:	4770      	bx	lr
 8005d68:	e000ed00 	and	lr, r0, r0, lsl #26

08005d6c <NVIC_ClearSystemHandlerPendingBit>:

  /* Check the parameters */
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
 8005d6c:	f000 001f 	and.w	r0, r0, #31
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
 8005d70:	1e41      	subs	r1, r0, #1
 8005d72:	2001      	movs	r0, #1
 8005d74:	fa00 f101 	lsl.w	r1, r0, r1
 8005d78:	4b02      	ldr	r3, [pc, #8]	; (8005d84 <NVIC_ClearSystemHandlerPendingBit+0x18>)
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	e000ed00 	and	lr, r0, r0, lsl #26

08005d88 <NVIC_GetSystemHandlerActiveBitStatus>:
  u32 tmp = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;
 8005d88:	f3c0 3083 	ubfx	r0, r0, #14, #4

  tmppos = (u32)0x01 << tmppos;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	fa03 f300 	lsl.w	r3, r3, r0

  tmp = SCB->SHCSR & tmppos;
 8005d92:	4a05      	ldr	r2, [pc, #20]	; (8005da8 <NVIC_GetSystemHandlerActiveBitStatus+0x20>)
 8005d94:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8005d96:	4019      	ands	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005d98:	ebb1 0c03 	subs.w	ip, r1, r3
 8005d9c:	f1dc 0000 	rsbs	r0, ip, #0
 8005da0:	eb50 000c 	adcs.w	r0, r0, ip
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	e000ed00 	and	lr, r0, r0, lsl #26

08005dac <NVIC_GetFaultHandlerSources>:
  u32 tmpreg = 0x00, tmppos = 0x00;

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
 8005dac:	f3c0 4281 	ubfx	r2, r0, #18, #2
 8005db0:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <NVIC_GetFaultHandlerSources+0x2c>)
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;

  if (tmpreg == 0x00)
 8005db2:	b90a      	cbnz	r2, 8005db8 <NVIC_GetFaultHandlerSources+0xc>
  {
    faultsources = SCB->HFSR;
 8005db4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005db6:	4770      	bx	lr
  }
  else if (tmpreg == 0x01)
 8005db8:	2a01      	cmp	r2, #1
 8005dba:	d10b      	bne.n	8005dd4 <NVIC_GetFaultHandlerSources+0x28>

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
 8005dbc:	f3c0 5101 	ubfx	r1, r0, #20, #2
  {
    faultsources = SCB->HFSR;
  }
  else if (tmpreg == 0x01)
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
 8005dc0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005dc2:	00ca      	lsls	r2, r1, #3
 8005dc4:	fa20 f002 	lsr.w	r0, r0, r2
    if (tmppos != 0x02)
 8005dc8:	2902      	cmp	r1, #2
    {
      faultsources &= (u32)0x0F;
 8005dca:	bf14      	ite	ne
 8005dcc:	f000 000f 	andne.w	r0, r0, #15
    }
    else
    {
      faultsources &= (u32)0xFF;
 8005dd0:	b2c0      	uxtbeq	r0, r0
 8005dd2:	4770      	bx	lr
    }
  }
  else
  {
    faultsources = SCB->DFSR;
 8005dd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
  }
  return faultsources;
}
 8005dd6:	4770      	bx	lr
 8005dd8:	e000ed00 	and	lr, r0, r0, lsl #26

08005ddc <NVIC_GetFaultAddress>:
*                       - SystemHandler_BusFault
* Output         : None
* Return         : Fault address.
*******************************************************************************/
u32 NVIC_GetFaultAddress(u32 SystemHandler)
{
 8005ddc:	4b03      	ldr	r3, [pc, #12]	; (8005dec <NVIC_GetFaultAddress+0x10>)
  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;

  if (tmp == 0x00)
 8005dde:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
  {
    faultaddress = SCB->MMFAR;
 8005de2:	bf0c      	ite	eq
 8005de4:	6b58      	ldreq	r0, [r3, #52]	; 0x34
  }
  else
  {
    faultaddress = SCB->BFAR;
 8005de6:	6b98      	ldrne	r0, [r3, #56]	; 0x38
  }
  return faultaddress;
}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	e000ed00 	and	lr, r0, r0, lsl #26

08005df0 <PWR_DeInit>:
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8005df0:	2101      	movs	r1, #1
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
 8005df2:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8005df4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005df8:	f000 f99a 	bl	8006130 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8005dfc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005e00:	2100      	movs	r1, #0
}
 8005e02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
* Return         : None
*******************************************************************************/
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8005e06:	f000 b993 	b.w	8006130 <RCC_APB1PeriphResetCmd>

08005e0a <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_DBP_BB = (u32)NewState;
 8005e0a:	4b01      	ldr	r3, [pc, #4]	; (8005e10 <PWR_BackupAccessCmd+0x6>)
 8005e0c:	6018      	str	r0, [r3, #0]
 8005e0e:	4770      	bx	lr
 8005e10:	420e0020 	andmi	r0, lr, #32

08005e14 <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PVDE_BB = (u32)NewState;
 8005e14:	4b01      	ldr	r3, [pc, #4]	; (8005e1c <PWR_PVDCmd+0x8>)
 8005e16:	6018      	str	r0, [r3, #0]
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	420e0010 	andmi	r0, lr, #16

08005e20 <PWR_PVDLevelConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));

  tmpreg = PWR->CR;
 8005e20:	4b03      	ldr	r3, [pc, #12]	; (8005e30 <PWR_PVDLevelConfig+0x10>)
 8005e22:	681a      	ldr	r2, [r3, #0]

  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_Mask;
 8005e24:	f022 01e0 	bic.w	r1, r2, #224	; 0xe0

  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8005e28:	4308      	orrs	r0, r1

  /* Store the new value */
  PWR->CR = tmpreg;
 8005e2a:	6018      	str	r0, [r3, #0]
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40007000 	andmi	r7, r0, r0

08005e34 <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_EWUP_BB = (u32)NewState;
 8005e34:	4b01      	ldr	r3, [pc, #4]	; (8005e3c <PWR_WakeUpPinCmd+0x8>)
 8005e36:	6018      	str	r0, [r3, #0]
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	420e00a0 	andmi	r0, lr, #160	; 0xa0

08005e40 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8005e40:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <PWR_EnterSTOPMode+0x24>)

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8005e42:	2901      	cmp	r1, #1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8005e44:	681a      	ldr	r2, [r3, #0]

  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_Mask;
 8005e46:	f022 0203 	bic.w	r2, r2, #3

  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8005e4a:	ea40 0002 	orr.w	r0, r0, r2

  /* Store the new value */
  PWR->CR = tmpreg;
 8005e4e:	6018      	str	r0, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8005e50:	4805      	ldr	r0, [pc, #20]	; (8005e68 <PWR_EnterSTOPMode+0x28>)
 8005e52:	6803      	ldr	r3, [r0, #0]
 8005e54:	f043 0204 	orr.w	r2, r3, #4
 8005e58:	6002      	str	r2, [r0, #0]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8005e5a:	d101      	bne.n	8005e60 <PWR_EnterSTOPMode+0x20>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8005e5c:	f000 bbb2 	b.w	80065c4 <__WFI>
  }
  else
  {
    /* Request Wait For Event */
    __WFE();
 8005e60:	f000 bbb2 	b.w	80065c8 <__WFE>
 8005e64:	40007000 	andmi	r7, r0, r0
 8005e68:	e000ed10 	and	lr, r0, r0, lsl sp

08005e6c <PWR_EnterSTANDBYMode>:
* Return         : None
*******************************************************************************/
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= CR_CWUF_Set;
 8005e6c:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <PWR_EnterSTANDBYMode+0x20>)
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	f042 0004 	orr.w	r0, r2, #4
 8005e74:	6018      	str	r0, [r3, #0]

  /* Select STANDBY mode */
  PWR->CR |= CR_PDDS_Set;
 8005e76:	6819      	ldr	r1, [r3, #0]
 8005e78:	f041 0202 	orr.w	r2, r1, #2
 8005e7c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
 8005e7e:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <PWR_EnterSTANDBYMode+0x24>)
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	f040 0104 	orr.w	r1, r0, #4
 8005e86:	6019      	str	r1, [r3, #0]

  /* Request Wait For Interrupt */
  __WFI();
 8005e88:	f000 bb9c 	b.w	80065c4 <__WFI>
 8005e8c:	40007000 	andmi	r7, r0, r0
 8005e90:	e000ed10 	and	lr, r0, r0, lsl sp

08005e94 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;

  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
 8005e94:	4b03      	ldr	r3, [pc, #12]	; (8005ea4 <PWR_GetFlagStatus+0x10>)
 8005e96:	6859      	ldr	r1, [r3, #4]
 8005e98:	4208      	tst	r0, r1
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8005e9a:	bf0c      	ite	eq
 8005e9c:	2000      	moveq	r0, #0
 8005e9e:	2001      	movne	r0, #1
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40007000 	andmi	r7, r0, r0

08005ea8 <PWR_ClearFlag>:
void PWR_ClearFlag(u32 PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8005ea8:	4b02      	ldr	r3, [pc, #8]	; (8005eb4 <PWR_ClearFlag+0xc>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
 8005eb0:	6018      	str	r0, [r3, #0]
 8005eb2:	4770      	bx	lr
 8005eb4:	40007000 	andmi	r7, r0, r0

08005eb8 <RCC_DeInit>:
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <RCC_DeInit+0x34>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	f042 0001 	orr.w	r0, r2, #1
 8005ec0:	6018      	str	r0, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	4a0a      	ldr	r2, [pc, #40]	; (8005ef0 <RCC_DeInit+0x38>)
 8005ec6:	400a      	ands	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000
 8005ed0:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005ed4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	f420 2180 	bic.w	r1, r0, #262144	; 0x40000
 8005edc:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 8005ede:	685a      	ldr	r2, [r3, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005ee0:	2100      	movs	r1, #0

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 8005ee2:	f422 00fe 	bic.w	r0, r2, #8323072	; 0x7f0000
 8005ee6:	6058      	str	r0, [r3, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005ee8:	6099      	str	r1, [r3, #8]
 8005eea:	4770      	bx	lr
 8005eec:	40021000 	andmi	r1, r2, r0
 8005ef0:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000

08005ef4 <RCC_HSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <RCC_HSEConfig+0x30>)

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8005ef6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005f00:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8005f08:	6019      	str	r1, [r3, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8005f0a:	d006      	beq.n	8005f1a <RCC_HSEConfig+0x26>
 8005f0c:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8005f10:	d107      	bne.n	8005f22 <RCC_HSEConfig+0x2e>
      RCC->CR |= CR_HSEON_Set;
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	f440 22a0 	orr.w	r2, r0, #327680	; 0x50000
 8005f18:	e002      	b.n	8005f20 <RCC_HSEConfig+0x2c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8005f1a:	6819      	ldr	r1, [r3, #0]
 8005f1c:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	4770      	bx	lr
 8005f24:	40021000 	andmi	r1, r2, r0

08005f28 <RCC_AdjustHSICalibrationValue>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8005f28:	4b03      	ldr	r3, [pc, #12]	; (8005f38 <RCC_AdjustHSICalibrationValue+0x10>)
 8005f2a:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8005f2c:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
 8005f30:	ea41 00c0 	orr.w	r0, r1, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8005f34:	6018      	str	r0, [r3, #0]
 8005f36:	4770      	bx	lr
 8005f38:	40021000 	andmi	r1, r2, r0

08005f3c <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
 8005f3c:	4b01      	ldr	r3, [pc, #4]	; (8005f44 <RCC_HSICmd+0x8>)
 8005f3e:	6018      	str	r0, [r3, #0]
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	42420000 	submi	r0, r2, #0

08005f48 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8005f48:	4b03      	ldr	r3, [pc, #12]	; (8005f58 <RCC_PLLConfig+0x10>)
 8005f4a:	685a      	ldr	r2, [r3, #4]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8005f4c:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8005f50:	4310      	orrs	r0, r2
 8005f52:	4301      	orrs	r1, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005f54:	6059      	str	r1, [r3, #4]
 8005f56:	4770      	bx	lr
 8005f58:	40021000 	andmi	r1, r2, r0

08005f5c <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 8005f5c:	4b01      	ldr	r3, [pc, #4]	; (8005f64 <RCC_PLLCmd+0x8>)
 8005f5e:	6018      	str	r0, [r3, #0]
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	42420060 	submi	r0, r2, #96	; 0x60

08005f68 <RCC_SYSCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8005f68:	4b03      	ldr	r3, [pc, #12]	; (8005f78 <RCC_SYSCLKConfig+0x10>)
 8005f6a:	685a      	ldr	r2, [r3, #4]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8005f6c:	f022 0103 	bic.w	r1, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8005f70:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005f72:	6058      	str	r0, [r3, #4]
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40021000 	andmi	r1, r2, r0

08005f7c <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 8005f7c:	4b02      	ldr	r3, [pc, #8]	; (8005f88 <RCC_GetSYSCLKSource+0xc>)
 8005f7e:	6858      	ldr	r0, [r3, #4]
}
 8005f80:	f000 000c 	and.w	r0, r0, #12
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40021000 	andmi	r1, r2, r0

08005f8c <RCC_HCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8005f8c:	4b03      	ldr	r3, [pc, #12]	; (8005f9c <RCC_HCLKConfig+0x10>)
 8005f8e:	685a      	ldr	r2, [r3, #4]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8005f90:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8005f94:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005f96:	6058      	str	r0, [r3, #4]
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40021000 	andmi	r1, r2, r0

08005fa0 <RCC_PCLK1Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <RCC_PCLK1Config+0x10>)
 8005fa2:	685a      	ldr	r2, [r3, #4]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8005fa4:	f422 61e0 	bic.w	r1, r2, #1792	; 0x700

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8005fa8:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005faa:	6058      	str	r0, [r3, #4]
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40021000 	andmi	r1, r2, r0

08005fb4 <RCC_PCLK2Config>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8005fb4:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <RCC_PCLK2Config+0x10>)
 8005fb6:	685a      	ldr	r2, [r3, #4]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8005fb8:	f422 5160 	bic.w	r1, r2, #14336	; 0x3800

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8005fbc:	ea41 00c0 	orr.w	r0, r1, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005fc0:	6058      	str	r0, [r3, #4]
 8005fc2:	4770      	bx	lr
 8005fc4:	40021000 	andmi	r1, r2, r0

08005fc8 <RCC_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ITConfig(u8 RCC_IT, FunctionalState NewState)
{
 8005fc8:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <RCC_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8005fca:	781a      	ldrb	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005fcc:	b109      	cbz	r1, 8005fd2 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8005fce:	4310      	orrs	r0, r2
 8005fd0:	e001      	b.n	8005fd6 <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
 8005fd2:	ea22 0000 	bic.w	r0, r2, r0
 8005fd6:	7018      	strb	r0, [r3, #0]
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40021009 	andmi	r1, r2, r9

08005fe0 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8005fe0:	4b01      	ldr	r3, [pc, #4]	; (8005fe8 <RCC_USBCLKConfig+0x8>)
 8005fe2:	6018      	str	r0, [r3, #0]
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	424200d8 	submi	r0, r2, #216	; 0xd8

08005fec <RCC_ADCCLKConfig>:
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 8005fec:	4b03      	ldr	r3, [pc, #12]	; (8005ffc <RCC_ADCCLKConfig+0x10>)
 8005fee:	685a      	ldr	r2, [r3, #4]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8005ff0:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8005ff4:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005ff6:	6058      	str	r0, [r3, #4]
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40021000 	andmi	r1, r2, r0

08006000 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8006000:	4b06      	ldr	r3, [pc, #24]	; (800601c <RCC_LSEConfig+0x1c>)
 8006002:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8006004:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8006006:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
 8006008:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800600a:	d004      	beq.n	8006016 <RCC_LSEConfig+0x16>
 800600c:	2804      	cmp	r0, #4
 800600e:	d104      	bne.n	800601a <RCC_LSEConfig+0x1a>
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8006010:	2005      	movs	r0, #5
 8006012:	7018      	strb	r0, [r3, #0]
      break;            
 8006014:	e001      	b.n	800601a <RCC_LSEConfig+0x1a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
 8006016:	7018      	strb	r0, [r3, #0]
      break;
 8006018:	4770      	bx	lr
 800601a:	4770      	bx	lr
 800601c:	40021020 	andmi	r1, r2, r0, lsr #32

08006020 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
 8006020:	4b01      	ldr	r3, [pc, #4]	; (8006028 <RCC_LSICmd+0x8>)
 8006022:	6018      	str	r0, [r3, #0]
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	42420480 	submi	r0, r2, #-2147483648	; 0x80000000

0800602c <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 800602c:	4b02      	ldr	r3, [pc, #8]	; (8006038 <RCC_RTCCLKConfig+0xc>)
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	4310      	orrs	r0, r2
 8006032:	6218      	str	r0, [r3, #32]
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40021000 	andmi	r1, r2, r0

0800603c <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
 800603c:	4b01      	ldr	r3, [pc, #4]	; (8006044 <RCC_RTCCLKCmd+0x8>)
 800603e:	6018      	str	r0, [r3, #0]
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	4242043c 	submi	r0, r2, #1006632960	; 0x3c000000

08006048 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8006048:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <RCC_GetClocksFreq+0x78>)
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800604a:	b510      	push	{r4, lr}
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	f002 010c 	and.w	r1, r2, #12

  switch (tmp)
 8006052:	2904      	cmp	r1, #4
 8006054:	d001      	beq.n	800605a <RCC_GetClocksFreq+0x12>
 8006056:	2908      	cmp	r1, #8
 8006058:	d002      	beq.n	8006060 <RCC_GetClocksFreq+0x18>
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 800605a:	4c1a      	ldr	r4, [pc, #104]	; (80060c4 <RCC_GetClocksFreq+0x7c>)
 800605c:	6004      	str	r4, [r0, #0]
      break;
 800605e:	e00e      	b.n	800607e <RCC_GetClocksFreq+0x36>

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8006060:	685c      	ldr	r4, [r3, #4]
      pllmull = ( pllmull >> 18) + 2;

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8006062:	6859      	ldr	r1, [r3, #4]
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllmull = ( pllmull >> 18) + 2;
 8006064:	f3c4 4283 	ubfx	r2, r4, #18, #4
 8006068:	1c94      	adds	r4, r2, #2

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;

      if (pllsource == 0x00)
 800606a:	03c9      	lsls	r1, r1, #15
 800606c:	d502      	bpl.n	8006074 <RCC_GetClocksFreq+0x2c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	039b      	lsls	r3, r3, #14
 8006072:	d501      	bpl.n	8006078 <RCC_GetClocksFreq+0x30>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
 8006074:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <RCC_GetClocksFreq+0x80>)
 8006076:	e000      	b.n	800607a <RCC_GetClocksFreq+0x32>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
 8006078:	4a12      	ldr	r2, [pc, #72]	; (80060c4 <RCC_GetClocksFreq+0x7c>)
 800607a:	4354      	muls	r4, r2
 800607c:	6004      	str	r4, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800607e:	4a10      	ldr	r2, [pc, #64]	; (80060c0 <RCC_GetClocksFreq+0x78>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8006080:	4b12      	ldr	r3, [pc, #72]	; (80060cc <RCC_GetClocksFreq+0x84>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8006082:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 4;
 8006084:	f3c1 1403 	ubfx	r4, r1, #4, #4
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8006088:	5d1c      	ldrb	r4, [r3, r4]
 800608a:	6801      	ldr	r1, [r0, #0]
 800608c:	fa21 f104 	lsr.w	r1, r1, r4
 8006090:	6041      	str	r1, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8006092:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8006094:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006098:	5d1c      	ldrb	r4, [r3, r4]
 800609a:	fa21 f404 	lsr.w	r4, r1, r4
 800609e:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80060a0:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 80060a2:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80060a6:	5d1c      	ldrb	r4, [r3, r4]
 80060a8:	fa21 f104 	lsr.w	r1, r1, r4
 80060ac:	60c1      	str	r1, [r0, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80060ae:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 80060b0:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 80060b4:	189b      	adds	r3, r3, r2
 80060b6:	7c1a      	ldrb	r2, [r3, #16]

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80060b8:	fbb1 f1f2 	udiv	r1, r1, r2
 80060bc:	6101      	str	r1, [r0, #16]
 80060be:	bd10      	pop	{r4, pc}
 80060c0:	40021000 	andmi	r1, r2, r0
 80060c4:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 80060c8:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80060cc:	080067a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, sp, lr}

080060d0 <RCC_AHBPeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_AHBPeriphClockCmd(u32 RCC_AHBPeriph, FunctionalState NewState)
{
 80060d0:	4b04      	ldr	r3, [pc, #16]	; (80060e4 <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80060d2:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80060d4:	b109      	cbz	r1, 80060da <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80060d6:	4310      	orrs	r0, r2
 80060d8:	e001      	b.n	80060de <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80060da:	ea22 0000 	bic.w	r0, r2, r0
 80060de:	6158      	str	r0, [r3, #20]
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40021000 	andmi	r1, r2, r0

080060e8 <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 80060e8:	4b04      	ldr	r3, [pc, #16]	; (80060fc <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80060ea:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80060ec:	b109      	cbz	r1, 80060f2 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80060ee:	4310      	orrs	r0, r2
 80060f0:	e001      	b.n	80060f6 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80060f2:	ea22 0000 	bic.w	r0, r2, r0
 80060f6:	6198      	str	r0, [r3, #24]
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40021000 	andmi	r1, r2, r0

08006100 <RCC_APB1PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphClockCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8006100:	4b04      	ldr	r3, [pc, #16]	; (8006114 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8006102:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006104:	b109      	cbz	r1, 800610a <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8006106:	4310      	orrs	r0, r2
 8006108:	e001      	b.n	800610e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800610a:	ea22 0000 	bic.w	r0, r2, r0
 800610e:	61d8      	str	r0, [r3, #28]
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40021000 	andmi	r1, r2, r0

08006118 <RCC_APB2PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphResetCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8006118:	4b04      	ldr	r3, [pc, #16]	; (800612c <RCC_APB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800611a:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800611c:	b109      	cbz	r1, 8006122 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800611e:	4310      	orrs	r0, r2
 8006120:	e001      	b.n	8006126 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8006122:	ea22 0000 	bic.w	r0, r2, r0
 8006126:	60d8      	str	r0, [r3, #12]
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40021000 	andmi	r1, r2, r0

08006130 <RCC_APB1PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphResetCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
 8006130:	4b04      	ldr	r3, [pc, #16]	; (8006144 <RCC_APB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8006132:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006134:	b109      	cbz	r1, 800613a <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8006136:	4310      	orrs	r0, r2
 8006138:	e001      	b.n	800613e <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800613a:	ea22 0000 	bic.w	r0, r2, r0
 800613e:	6118      	str	r0, [r3, #16]
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40021000 	andmi	r1, r2, r0

08006148 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
 8006148:	4b01      	ldr	r3, [pc, #4]	; (8006150 <RCC_BackupResetCmd+0x8>)
 800614a:	6018      	str	r0, [r3, #0]
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	42420440 	submi	r0, r2, #1073741824	; 0x40000000

08006154 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
 8006154:	4b01      	ldr	r3, [pc, #4]	; (800615c <RCC_ClockSecuritySystemCmd+0x8>)
 8006156:	6018      	str	r0, [r3, #0]
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	4242004c 	submi	r0, r2, #76	; 0x4c

08006160 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8006160:	4b01      	ldr	r3, [pc, #4]	; (8006168 <RCC_MCOConfig+0x8>)
 8006162:	7018      	strb	r0, [r3, #0]
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40021007 	andmi	r1, r2, r7

0800616c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800616c:	0943      	lsrs	r3, r0, #5

  if (tmp == 1)               /* The flag to check is in CR register */
 800616e:	2b01      	cmp	r3, #1
 8006170:	4a07      	ldr	r2, [pc, #28]	; (8006190 <RCC_GetFlagStatus+0x24>)
 8006172:	d101      	bne.n	8006178 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8006174:	6813      	ldr	r3, [r2, #0]
 8006176:	e003      	b.n	8006180 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8006178:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 800617a:	bf0c      	ite	eq
 800617c:	6a13      	ldreq	r3, [r2, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800617e:	6a53      	ldrne	r3, [r2, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;

  if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
 8006180:	f000 001f 	and.w	r0, r0, #31
 8006184:	fa23 f100 	lsr.w	r1, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8006188:	f001 0001 	and.w	r0, r1, #1
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40021000 	andmi	r1, r2, r0

08006194 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8006194:	b507      	push	{r0, r1, r2, lr}
  vu32 StartUpCounter = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800619a:	2031      	movs	r0, #49	; 0x31
 800619c:	f7ff ffe6 	bl	800616c <RCC_GetFlagStatus>
    StartUpCounter++;  
 80061a0:	9901      	ldr	r1, [sp, #4]
 80061a2:	1c4a      	adds	r2, r1, #1
 80061a4:	9201      	str	r2, [sp, #4]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
 80061a6:	b918      	cbnz	r0, 80061b0 <RCC_WaitForHSEStartUp+0x1c>
 80061a8:	9801      	ldr	r0, [sp, #4]
 80061aa:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 80061ae:	d1f4      	bne.n	800619a <RCC_WaitForHSEStartUp+0x6>


  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80061b0:	2031      	movs	r0, #49	; 0x31
 80061b2:	f7ff ffdb 	bl	800616c <RCC_GetFlagStatus>
  {
    status = ERROR;
  }  

  return (status);
}
 80061b6:	3000      	adds	r0, #0
 80061b8:	bf18      	it	ne
 80061ba:	2001      	movne	r0, #1
 80061bc:	bd0e      	pop	{r1, r2, r3, pc}

080061be <RCC_ClearFlag>:
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 80061be:	4b03      	ldr	r3, [pc, #12]	; (80061cc <RCC_ClearFlag+0xe>)
 80061c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061c2:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
 80061c6:	6258      	str	r0, [r3, #36]	; 0x24
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40021000 	andmi	r1, r2, r0

080061d0 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
 80061d0:	4b03      	ldr	r3, [pc, #12]	; (80061e0 <RCC_GetITStatus+0x10>)
 80061d2:	6899      	ldr	r1, [r3, #8]
 80061d4:	4208      	tst	r0, r1
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 80061d6:	bf0c      	ite	eq
 80061d8:	2000      	moveq	r0, #0
 80061da:	2001      	movne	r0, #1
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40021000 	andmi	r1, r2, r0

080061e4 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
 80061e4:	4b01      	ldr	r3, [pc, #4]	; (80061ec <RCC_ClearITPendingBit+0x8>)
 80061e6:	7018      	strb	r0, [r3, #0]
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	4002100a 	andmi	r1, r2, sl

080061f0 <SysTick_CLKSourceConfig>:
*                         SysTick clock source.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
 80061f0:	4b04      	ldr	r3, [pc, #16]	; (8006204 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80061f2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	bf0c      	ite	eq
 80061f8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80061fc:	f022 0204 	bicne.w	r2, r2, #4
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	4770      	bx	lr
 8006204:	e000e010 	and	lr, r0, r0, lsl r0

08006208 <SysTick_SetReload>:
void SysTick_SetReload(u32 Reload)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
 8006208:	4b01      	ldr	r3, [pc, #4]	; (8006210 <SysTick_SetReload+0x8>)
 800620a:	6058      	str	r0, [r3, #4]
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000e010 	and	lr, r0, r0, lsl r0

08006214 <SysTick_CounterCmd>:
void SysTick_CounterCmd(u32 SysTick_Counter)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
 8006214:	2801      	cmp	r0, #1
 8006216:	4b08      	ldr	r3, [pc, #32]	; (8006238 <SysTick_CounterCmd+0x24>)
 8006218:	d103      	bne.n	8006222 <SysTick_CounterCmd+0xe>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	f042 0101 	orr.w	r1, r2, #1
 8006220:	e004      	b.n	800622c <SysTick_CounterCmd+0x18>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
 8006222:	3002      	adds	r0, #2
 8006224:	d104      	bne.n	8006230 <SysTick_CounterCmd+0x1c>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	f020 0101 	bic.w	r1, r0, #1
 800622c:	6019      	str	r1, [r3, #0]
 800622e:	4770      	bx	lr
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
 8006230:	2200      	movs	r2, #0
 8006232:	609a      	str	r2, [r3, #8]
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	e000e010 	and	lr, r0, r0, lsl r0

0800623c <SysTick_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_ITConfig(FunctionalState NewState)
{
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <SysTick_ITConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 800623e:	681a      	ldr	r2, [r3, #0]
void SysTick_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006240:	b110      	cbz	r0, 8006248 <SysTick_ITConfig+0xc>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
 8006242:	f042 0002 	orr.w	r0, r2, #2
 8006246:	e001      	b.n	800624c <SysTick_ITConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
 8006248:	f022 0002 	bic.w	r0, r2, #2
 800624c:	6018      	str	r0, [r3, #0]
 800624e:	4770      	bx	lr
 8006250:	e000e010 	and	lr, r0, r0, lsl r0

08006254 <SysTick_GetCounter>:
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
  return(SysTick->VAL);
 8006254:	4b01      	ldr	r3, [pc, #4]	; (800625c <SysTick_GetCounter+0x8>)
 8006256:	6898      	ldr	r0, [r3, #8]
}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	e000e010 	and	lr, r0, r0, lsl r0

08006260 <SysTick_GetFlagStatus>:
*                       - SysTick_FLAG_NOREF
* Output         : None
* Return         : None
*******************************************************************************/
FlagStatus SysTick_GetFlagStatus(u8 SysTick_FLAG)
{
 8006260:	4905      	ldr	r1, [pc, #20]	; (8006278 <SysTick_GetFlagStatus+0x18>)
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;

  if (tmp == 2) /* The flag to check is in CTRL register */
 8006262:	08c3      	lsrs	r3, r0, #3
 8006264:	2b02      	cmp	r3, #2
  {
    statusreg = SysTick->CTRL;
 8006266:	bf0c      	ite	eq
 8006268:	6809      	ldreq	r1, [r1, #0]
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
 800626a:	68c9      	ldrne	r1, [r1, #12]
  }

  if ((statusreg & ((u32)1 << SysTick_FLAG)) != (u32)RESET)
 800626c:	fa21 f000 	lsr.w	r0, r1, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006270:	f000 0001 	and.w	r0, r0, #1
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	e000e010 	and	lr, r0, r0, lsl r0

0800627c <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
 800627c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 800627e:	4b22      	ldr	r3, [pc, #136]	; (8006308 <USART_DeInit+0x8c>)
 8006280:	4298      	cmp	r0, r3
 8006282:	d02b      	beq.n	80062dc <USART_DeInit+0x60>
 8006284:	d80f      	bhi.n	80062a6 <USART_DeInit+0x2a>
 8006286:	f5a3 6100 	sub.w	r1, r3, #2048	; 0x800
 800628a:	4288      	cmp	r0, r1
 800628c:	d01e      	beq.n	80062cc <USART_DeInit+0x50>
 800628e:	f501 6280 	add.w	r2, r1, #1024	; 0x400
 8006292:	4290      	cmp	r0, r2
 8006294:	d136      	bne.n	8006304 <USART_DeInit+0x88>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
      break;

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8006296:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800629a:	2101      	movs	r1, #1
 800629c:	f7ff ff48 	bl	8006130 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80062a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80062a4:	e029      	b.n	80062fa <USART_DeInit+0x7e>
void USART_DeInit(USART_TypeDef* USARTx)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
 80062a6:	4b19      	ldr	r3, [pc, #100]	; (800630c <USART_DeInit+0x90>)
 80062a8:	4298      	cmp	r0, r3
 80062aa:	d01f      	beq.n	80062ec <USART_DeInit+0x70>
 80062ac:	f503 4168 	add.w	r1, r3, #59392	; 0xe800
 80062b0:	4288      	cmp	r0, r1
 80062b2:	d127      	bne.n	8006304 <USART_DeInit+0x88>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80062b4:	2101      	movs	r1, #1
 80062b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80062ba:	f7ff ff2d 	bl	8006118 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80062be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80062c2:	2100      	movs	r1, #0
      break;            

    default:
      break;
  }
}
 80062c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  switch (*(u32*)&USARTx)
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80062c8:	f7ff bf26 	b.w	8006118 <RCC_APB2PeriphResetCmd>
      break;

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80062cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80062d0:	2101      	movs	r1, #1
 80062d2:	f7ff ff2d 	bl	8006130 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80062d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80062da:	e00e      	b.n	80062fa <USART_DeInit+0x7e>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
      break;
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80062dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80062e0:	2101      	movs	r1, #1
 80062e2:	f7ff ff25 	bl	8006130 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80062e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80062ea:	e006      	b.n	80062fa <USART_DeInit+0x7e>
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80062ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80062f0:	2101      	movs	r1, #1
 80062f2:	f7ff ff1d 	bl	8006130 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80062f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80062fa:	2100      	movs	r1, #0
      break;            

    default:
      break;
  }
}
 80062fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
      break;
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8006300:	f7ff bf16 	b.w	8006130 <RCC_APB1PeriphResetCmd>
 8006304:	bd08      	pop	{r3, pc}
 8006306:	bf00      	nop
 8006308:	40004c00 	andmi	r4, r0, r0, lsl #24
 800630c:	40005000 	andmi	r5, r0, r0

08006310 <USART_Init>:
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8006310:	8a03      	ldrh	r3, [r0, #16]
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006312:	b530      	push	{r4, r5, lr}
 8006314:	460d      	mov	r5, r1
 8006316:	4604      	mov	r4, r0
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
 8006318:	88ea      	ldrh	r2, [r5, #6]
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800631a:	b298      	uxth	r0, r3
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 800631c:	f420 5140 	bic.w	r1, r0, #12288	; 0x3000

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
 8006320:	4311      	orrs	r1, r2
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8006322:	8221      	strh	r1, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8006324:	89a3      	ldrh	r3, [r4, #12]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006326:	8928      	ldrh	r0, [r5, #8]
 8006328:	88a9      	ldrh	r1, [r5, #4]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800632a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800632e:	ea40 0201 	orr.w	r2, r0, r1
 8006332:	8968      	ldrh	r0, [r5, #10]
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8006334:	f023 010c 	bic.w	r1, r3, #12

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006338:	4302      	orrs	r2, r0
  USARTx->CR2 = (u16)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 800633a:	0408      	lsls	r0, r1, #16
 800633c:	0c03      	lsrs	r3, r0, #16

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800633e:	431a      	orrs	r2, r3
 8006340:	b291      	uxth	r1, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 8006342:	81a1      	strh	r1, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8006344:	8aa0      	ldrh	r0, [r4, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8006346:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8006348:	b283      	uxth	r3, r0
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800634a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800634e:	b087      	sub	sp, #28
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8006350:	4311      	orrs	r1, r2

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 8006352:	82a1      	strh	r1, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8006354:	a801      	add	r0, sp, #4
 8006356:	f7ff fe77 	bl	8006048 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800635a:	480e      	ldr	r0, [pc, #56]	; (8006394 <USART_Init+0x84>)
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 800635c:	6829      	ldr	r1, [r5, #0]
  USARTx->CR3 = (u16)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
 800635e:	4284      	cmp	r4, r0
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8006360:	bf0c      	ite	eq
 8006362:	9804      	ldreq	r0, [sp, #16]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8006364:	9803      	ldrne	r0, [sp, #12]
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 8006366:	2319      	movs	r3, #25
 8006368:	4358      	muls	r0, r3
 800636a:	008a      	lsls	r2, r1, #2
 800636c:	fbb0 f1f2 	udiv	r1, r0, r2
  tmpreg = (integerdivider / 0x64) << 0x04;
 8006370:	2364      	movs	r3, #100	; 0x64
 8006372:	fbb1 f0f3 	udiv	r0, r1, r3
 8006376:	0102      	lsls	r2, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
 8006378:	0910      	lsrs	r0, r2, #4
 800637a:	fb03 1110 	mls	r1, r3, r0, r1
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 800637e:	0108      	lsls	r0, r1, #4
 8006380:	3032      	adds	r0, #50	; 0x32
 8006382:	fbb0 f3f3 	udiv	r3, r0, r3
 8006386:	f003 010f 	and.w	r1, r3, #15
 800638a:	430a      	orrs	r2, r1

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 800638c:	b290      	uxth	r0, r2
 800638e:	8120      	strh	r0, [r4, #8]
}
 8006390:	b007      	add	sp, #28
 8006392:	bd30      	pop	{r4, r5, pc}
 8006394:	40013800 	andmi	r3, r1, r0, lsl #16

08006398 <USART_StructInit>:
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8006398:	2100      	movs	r1, #0
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800639a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800639e:	220c      	movs	r2, #12
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80063a0:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80063a2:	8081      	strh	r1, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80063a4:	80c1      	strh	r1, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80063a6:	8101      	strh	r1, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80063a8:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80063aa:	8181      	strh	r1, [r0, #12]
 80063ac:	4770      	bx	lr

080063ae <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80063ae:	880b      	ldrh	r3, [r1, #0]
*                    the specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80063b0:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80063b2:	884c      	ldrh	r4, [r1, #2]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80063b4:	8a02      	ldrh	r2, [r0, #16]
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80063b6:	4323      	orrs	r3, r4
 80063b8:	888c      	ldrh	r4, [r1, #4]
 80063ba:	88c9      	ldrh	r1, [r1, #6]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80063bc:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80063be:	4323      	orrs	r3, r4
 80063c0:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 80063c2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80063c6:	4313      	orrs	r3, r2
 80063c8:	b29b      	uxth	r3, r3
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 80063ca:	8203      	strh	r3, [r0, #16]
 80063cc:	bd10      	pop	{r4, pc}

080063ce <USART_ClockStructInit>:
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct) {
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80063ce:	2300      	movs	r3, #0
 80063d0:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80063d2:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80063d4:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80063d6:	80c3      	strh	r3, [r0, #6]
 80063d8:	4770      	bx	lr

080063da <USART_Cmd>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE) {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80063da:	8983      	ldrh	r3, [r0, #12]
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState) {
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE) {
 80063dc:	b119      	cbz	r1, 80063e6 <USART_Cmd+0xc>
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80063de:	b299      	uxth	r1, r3
 80063e0:	f441 5300 	orr.w	r3, r1, #8192	; 0x2000
 80063e4:	e003      	b.n	80063ee <USART_Cmd+0x14>
  } else {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 80063e6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063ea:	040a      	lsls	r2, r1, #16
 80063ec:	0c13      	lsrs	r3, r2, #16
 80063ee:	8183      	strh	r3, [r0, #12]
 80063f0:	4770      	bx	lr

080063f2 <USART_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 80063f2:	f3c1 1342 	ubfx	r3, r1, #5, #3
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 80063f6:	b510      	push	{r4, lr}
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 80063f8:	2401      	movs	r4, #1
 80063fa:	f001 011f 	and.w	r1, r1, #31
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80063fe:	42a3      	cmp	r3, r4
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;

  itmask = (((u32)0x01) << itpos);
 8006400:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8006404:	d101      	bne.n	800640a <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8006406:	300c      	adds	r0, #12
 8006408:	e004      	b.n	8006414 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800640a:	2b02      	cmp	r3, #2
 800640c:	d101      	bne.n	8006412 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 800640e:	3010      	adds	r0, #16
 8006410:	e000      	b.n	8006414 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8006412:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(vu32*)usartxbase  |= itmask;
 8006414:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8006416:	b112      	cbz	r2, 800641e <USART_ITConfig+0x2c>
  {
    *(vu32*)usartxbase  |= itmask;
 8006418:	ea43 0201 	orr.w	r2, r3, r1
 800641c:	e001      	b.n	8006422 <USART_ITConfig+0x30>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 800641e:	ea23 0201 	bic.w	r2, r3, r1
 8006422:	6002      	str	r2, [r0, #0]
 8006424:	bd10      	pop	{r4, pc}

08006426 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8006426:	8a83      	ldrh	r3, [r0, #20]
 8006428:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800642a:	b10a      	cbz	r2, 8006430 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800642c:	4319      	orrs	r1, r3
 800642e:	e001      	b.n	8006434 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (u16)~USART_DMAReq;
 8006430:	ea23 0101 	bic.w	r1, r3, r1
 8006434:	8281      	strh	r1, [r0, #20]
 8006436:	4770      	bx	lr

08006438 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8006438:	8a03      	ldrh	r3, [r0, #16]
 800643a:	f023 020f 	bic.w	r2, r3, #15
 800643e:	0413      	lsls	r3, r2, #16
 8006440:	0c1a      	lsrs	r2, r3, #16
 8006442:	8202      	strh	r2, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8006444:	8a03      	ldrh	r3, [r0, #16]
 8006446:	b29a      	uxth	r2, r3
 8006448:	4311      	orrs	r1, r2
 800644a:	8201      	strh	r1, [r0, #16]
 800644c:	4770      	bx	lr

0800644e <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 800644e:	8983      	ldrh	r3, [r0, #12]
 8006450:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006454:	0413      	lsls	r3, r2, #16
 8006456:	0c1a      	lsrs	r2, r3, #16
 8006458:	8182      	strh	r2, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 800645a:	8983      	ldrh	r3, [r0, #12]
 800645c:	b29a      	uxth	r2, r3
 800645e:	4311      	orrs	r1, r2
 8006460:	8181      	strh	r1, [r0, #12]
 8006462:	4770      	bx	lr

08006464 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8006464:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8006466:	b119      	cbz	r1, 8006470 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8006468:	b299      	uxth	r1, r3
 800646a:	f041 0302 	orr.w	r3, r1, #2
 800646e:	e003      	b.n	8006478 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8006470:	f023 0102 	bic.w	r1, r3, #2
 8006474:	040a      	lsls	r2, r1, #16
 8006476:	0c13      	lsrs	r3, r2, #16
 8006478:	8183      	strh	r3, [r0, #12]
 800647a:	4770      	bx	lr

0800647c <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 800647c:	8a03      	ldrh	r3, [r0, #16]
 800647e:	f023 0220 	bic.w	r2, r3, #32
 8006482:	0413      	lsls	r3, r2, #16
 8006484:	0c1a      	lsrs	r2, r3, #16
 8006486:	8202      	strh	r2, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8006488:	8a03      	ldrh	r3, [r0, #16]
 800648a:	b29a      	uxth	r2, r3
 800648c:	4311      	orrs	r1, r2
 800648e:	8201      	strh	r1, [r0, #16]
 8006490:	4770      	bx	lr

08006492 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8006492:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006494:	b119      	cbz	r1, 800649e <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8006496:	b299      	uxth	r1, r3
 8006498:	f441 4380 	orr.w	r3, r1, #16384	; 0x4000
 800649c:	e003      	b.n	80064a6 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 800649e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80064a2:	040a      	lsls	r2, r1, #16
 80064a4:	0c13      	lsrs	r3, r2, #16
 80064a6:	8203      	strh	r3, [r0, #16]
 80064a8:	4770      	bx	lr

080064aa <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 80064aa:	05c9      	lsls	r1, r1, #23
 80064ac:	0dca      	lsrs	r2, r1, #23
 80064ae:	8082      	strh	r2, [r0, #4]
 80064b0:	4770      	bx	lr

080064b2 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 80064b2:	8880      	ldrh	r0, [r0, #4]
 80064b4:	05c1      	lsls	r1, r0, #23
}
 80064b6:	0dc8      	lsrs	r0, r1, #23
 80064b8:	4770      	bx	lr

080064ba <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 80064ba:	8983      	ldrh	r3, [r0, #12]
 80064bc:	b299      	uxth	r1, r3
 80064be:	f041 0201 	orr.w	r2, r1, #1
 80064c2:	8182      	strh	r2, [r0, #12]
 80064c4:	4770      	bx	lr

080064c6 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 80064c6:	8b03      	ldrh	r3, [r0, #24]
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	8302      	strh	r2, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
 80064cc:	8b03      	ldrh	r3, [r0, #24]
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 80064d4:	8301      	strh	r1, [r0, #24]
 80064d6:	4770      	bx	lr

080064d8 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 80064d8:	8b03      	ldrh	r3, [r0, #24]
 80064da:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80064de:	8302      	strh	r2, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80064e0:	8b03      	ldrh	r3, [r0, #24]
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	4311      	orrs	r1, r2
 80064e6:	8301      	strh	r1, [r0, #24]
 80064e8:	4770      	bx	lr

080064ea <USART_SmartCardCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 80064ea:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80064ec:	b119      	cbz	r1, 80064f6 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 80064ee:	b299      	uxth	r1, r3
 80064f0:	f041 0320 	orr.w	r3, r1, #32
 80064f4:	e003      	b.n	80064fe <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 80064f6:	f023 0120 	bic.w	r1, r3, #32
 80064fa:	040a      	lsls	r2, r1, #16
 80064fc:	0c13      	lsrs	r3, r2, #16
 80064fe:	8283      	strh	r3, [r0, #20]
 8006500:	4770      	bx	lr

08006502 <USART_SmartCardNACKCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8006502:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006504:	b119      	cbz	r1, 800650e <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8006506:	b299      	uxth	r1, r3
 8006508:	f041 0310 	orr.w	r3, r1, #16
 800650c:	e003      	b.n	8006516 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 800650e:	f023 0110 	bic.w	r1, r3, #16
 8006512:	040a      	lsls	r2, r1, #16
 8006514:	0c13      	lsrs	r3, r2, #16
 8006516:	8283      	strh	r3, [r0, #20]
 8006518:	4770      	bx	lr

0800651a <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 800651a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800651c:	b119      	cbz	r1, 8006526 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 800651e:	b299      	uxth	r1, r3
 8006520:	f041 0308 	orr.w	r3, r1, #8
 8006524:	e003      	b.n	800652e <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8006526:	f023 0108 	bic.w	r1, r3, #8
 800652a:	040a      	lsls	r2, r1, #16
 800652c:	0c13      	lsrs	r3, r2, #16
 800652e:	8283      	strh	r3, [r0, #20]
 8006530:	4770      	bx	lr

08006532 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8006532:	8a83      	ldrh	r3, [r0, #20]
 8006534:	f023 0204 	bic.w	r2, r3, #4
 8006538:	0413      	lsls	r3, r2, #16
 800653a:	0c1a      	lsrs	r2, r3, #16
 800653c:	8282      	strh	r2, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800653e:	8a83      	ldrh	r3, [r0, #20]
 8006540:	b29a      	uxth	r2, r3
 8006542:	4311      	orrs	r1, r2
 8006544:	8281      	strh	r1, [r0, #20]
 8006546:	4770      	bx	lr

08006548 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8006548:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800654a:	b119      	cbz	r1, 8006554 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 800654c:	b299      	uxth	r1, r3
 800654e:	f041 0302 	orr.w	r3, r1, #2
 8006552:	e003      	b.n	800655c <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8006554:	f023 0102 	bic.w	r1, r3, #2
 8006558:	040a      	lsls	r2, r1, #16
 800655a:	0c13      	lsrs	r3, r2, #16
 800655c:	8283      	strh	r3, [r0, #20]
 800655e:	4770      	bx	lr

08006560 <USART_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 8006560:	8803      	ldrh	r3, [r0, #0]
 8006562:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006564:	bf0c      	ite	eq
 8006566:	2000      	moveq	r0, #0
 8006568:	2001      	movne	r0, #1
 800656a:	4770      	bx	lr

0800656c <USART_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 800656c:	43c9      	mvns	r1, r1
 800656e:	b28a      	uxth	r2, r1
 8006570:	8002      	strh	r2, [r0, #0]
 8006572:	4770      	bx	lr

08006574 <USART_GetITStatus>:
*                       - USART_IT_PE:   Parity Error interrupt
* Output         : None
* Return         : The new state of USART_IT (SET or RESET).
*******************************************************************************/
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, u16 USART_IT)
{
 8006574:	b510      	push	{r4, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8006576:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 800657a:	2201      	movs	r2, #1
 800657c:	f001 031f 	and.w	r3, r1, #31
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8006580:	2c01      	cmp	r4, #1
  usartreg = (((u8)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;

  itmask = (u32)0x01 << itmask;
 8006582:	fa02 f203 	lsl.w	r2, r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8006586:	d101      	bne.n	800658c <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8006588:	8983      	ldrh	r3, [r0, #12]
 800658a:	e003      	b.n	8006594 <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800658c:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 800658e:	bf0c      	ite	eq
 8006590:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8006592:	8a83      	ldrhne	r3, [r0, #20]
 8006594:	b29b      	uxth	r3, r3
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8006596:	8800      	ldrh	r0, [r0, #0]
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8006598:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
  bitpos &= USARTx->SR;
 800659a:	b282      	uxth	r2, r0

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 800659c:	b143      	cbz	r3, 80065b0 <USART_GetITStatus+0x3c>
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
 800659e:	0a09      	lsrs	r1, r1, #8
 80065a0:	2301      	movs	r3, #1
 80065a2:	fa03 f001 	lsl.w	r0, r3, r1
  bitpos &= USARTx->SR;

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
 80065a6:	4210      	tst	r0, r2
  {
    bitstatus = SET;
 80065a8:	bf0c      	ite	eq
 80065aa:	2000      	moveq	r0, #0
 80065ac:	2001      	movne	r0, #1
 80065ae:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 80065b0:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 80065b2:	bd10      	pop	{r4, pc}

080065b4 <USART_ClearITPendingBit>:
  assert_param(IS_USART_CLEAR_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;

  itmask = (u16)((u16)0x01 << bitpos);
 80065b4:	0a09      	lsrs	r1, r1, #8
 80065b6:	2301      	movs	r3, #1
 80065b8:	fa03 f301 	lsl.w	r3, r3, r1
  USARTx->SR = (u16)~itmask;
 80065bc:	43da      	mvns	r2, r3
 80065be:	b291      	uxth	r1, r2
 80065c0:	8001      	strh	r1, [r0, #0]
 80065c2:	4770      	bx	lr

080065c4 <__WFI>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFI: 
 
    WFI
 80065c4:	bf30      	wfi
    BX r14
 80065c6:	4770      	bx	lr

080065c8 <__WFE>:
; Return         : None
;******************************************************************************/
.thumb_func
__WFE:

    WFE
 80065c8:	bf20      	wfe
    BX r14
 80065ca:	4770      	bx	lr

080065cc <__SEV>:
; Return         : None
;******************************************************************************/
.thumb_func
__SEV:

    SEV
 80065cc:	bf40      	sev
    BX r14
 80065ce:	4770      	bx	lr

080065d0 <__ISB>:
; Return         : None
;******************************************************************************/
.thumb_func
__ISB:

    ISB
 80065d0:	f3bf 8f6f 	isb	sy
    BX r14
 80065d4:	4770      	bx	lr

080065d6 <__DSB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DSB:

    DSB
 80065d6:	f3bf 8f4f 	dsb	sy
    BX r14
 80065da:	4770      	bx	lr

080065dc <__DMB>:
; Return         : None
;******************************************************************************/
.thumb_func
__DMB:

    DMB
 80065dc:	f3bf 8f5f 	dmb	sy
    BX r14
 80065e0:	4770      	bx	lr

080065e2 <__SVC>:
; Return         : None
;******************************************************************************/
.thumb_func
__SVC:

    SVC 0x01
 80065e2:	df01      	svc	1
    BX r14
 80065e4:	4770      	bx	lr

080065e6 <__MRS_CONTROL>:
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/
.thumb_func
__MRS_CONTROL:

  MRS  r0,control
 80065e6:	f3ef 8014 	mrs	r0, CONTROL
  BX r14
 80065ea:	4770      	bx	lr

080065ec <__MSR_CONTROL>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_CONTROL:

  MSR control, r0
 80065ec:	f380 8814 	msr	CONTROL, r0
  ISB
 80065f0:	f3bf 8f6f 	isb	sy
  BX r14
 80065f4:	4770      	bx	lr

080065f6 <__MRS_PSP>:
; Return         : - r0 : Process Stack value.
;******************************************************************************/
.thumb_func
__MRS_PSP:

  MRS r0, psp
 80065f6:	f3ef 8009 	mrs	r0, PSP
  BX r14
 80065fa:	4770      	bx	lr

080065fc <__MSR_PSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_PSP:
 
    MSR psp,  r0      /* set Process Stack value*/
 80065fc:	f380 8809 	msr	PSP, r0
    BX r14
 8006600:	4770      	bx	lr

08006602 <__MRS_MSP>:
; Return         : - r0 : Main Stack value.
;******************************************************************************/
.thumb_func
__MRS_MSP:

  MRS r0, msp
 8006602:	f3ef 8008 	mrs	r0, MSP
  BX r14
 8006606:	4770      	bx	lr

08006608 <__MSR_MSP>:
; Return         : None
;******************************************************************************/
.thumb_func
__MSR_MSP: 
 
    MSR msp, r0  /*; set Main Stack value*/
 8006608:	f380 8808 	msr	MSP, r0
    BX r14
 800660c:	4770      	bx	lr

0800660e <__SETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETPRIMASK:

  CPSID i
 800660e:	b672      	cpsid	i
  BX r14
 8006610:	4770      	bx	lr

08006612 <__RESETPRIMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETPRIMASK:

  CPSIE i
 8006612:	b662      	cpsie	i
  BX r14
 8006614:	4770      	bx	lr

08006616 <__SETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__SETFAULTMASK:

  CPSID f
 8006616:	b671      	cpsid	f
  BX r14
 8006618:	4770      	bx	lr

0800661a <__RESETFAULTMASK>:
; Return         : None
;******************************************************************************/
.thumb_func
__RESETFAULTMASK:

  CPSIE f
 800661a:	b661      	cpsie	f
  BX r14
 800661c:	4770      	bx	lr

0800661e <__BASEPRICONFIG>:
; Return         : None
;******************************************************************************/
.thumb_func
__BASEPRICONFIG:

  MSR basepri, r0
 800661e:	f380 8811 	msr	BASEPRI, r0
  BX r14
 8006622:	4770      	bx	lr

08006624 <__GetBASEPRI>:
; Return         : - r0 : Base Priority value 
;******************************************************************************/
.thumb_func
__GetBASEPRI:

  MRS r0, basepri_max
 8006624:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  BX r14
 8006628:	4770      	bx	lr

0800662a <__REV_HalfWord>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_HalfWord: 
 
  REV16 r0, r0
 800662a:	ba40      	rev16	r0, r0
  BX r14
 800662c:	4770      	bx	lr

0800662e <__REV_Word>:
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/
.thumb_func
__REV_Word: 
 
  REV r0, r0
 800662e:	ba00      	rev	r0, r0
  BX r14
 8006630:	4770      	bx	lr
	...

08006634 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 8006634:	4668      	mov	r0, sp
 8006636:	f020 0107 	bic.w	r1, r0, #7
 800663a:	468d      	mov	sp, r1
 800663c:	b501      	push	{r0, lr}

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 800663e:	2300      	movs	r3, #0
*                  supplied main() routine is called. 
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
 8006640:	4a0b      	ldr	r2, [pc, #44]	; (8006670 <Reset_Handler+0x3c>)

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8006642:	490c      	ldr	r1, [pc, #48]	; (8006674 <Reset_Handler+0x40>)
*                  supplied main() routine is called. 
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
 8006644:	1898      	adds	r0, r3, r2

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8006646:	4288      	cmp	r0, r1
 8006648:	d204      	bcs.n	8006654 <Reset_Handler+0x20>
    {
        *(pulDest++) = *(pulSrc++);
 800664a:	490b      	ldr	r1, [pc, #44]	; (8006678 <Reset_Handler+0x44>)
 800664c:	5858      	ldr	r0, [r3, r1]
 800664e:	5098      	str	r0, [r3, r2]
 8006650:	3304      	adds	r3, #4
 8006652:	e7f5      	b.n	8006640 <Reset_Handler+0xc>

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
    for(pulDest = &_sdata; pulDest < &_edata; )
 8006654:	4b09      	ldr	r3, [pc, #36]	; (800667c <Reset_Handler+0x48>)
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8006656:	4a0a      	ldr	r2, [pc, #40]	; (8006680 <Reset_Handler+0x4c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d203      	bcs.n	8006664 <Reset_Handler+0x30>
    {
        *(pulDest++) = 0;
 800665c:	2000      	movs	r0, #0
 800665e:	f843 0b04 	str.w	r0, [r3], #4
 8006662:	e7f8      	b.n	8006656 <Reset_Handler+0x22>
    }

    //
    // Call the application's entry point.
    //
    main();
 8006664:	f000 f80e 	bl	8006684 <main>
}
 8006668:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 800666c:	4685      	mov	sp, r0
 800666e:	4770      	bx	lr
 8006670:	20000000 	andcs	r0, r0, r0
 8006674:	200000d4 	ldrdcs	r0, [r0], -r4
 8006678:	08006e78 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, fp, sp, lr}
 800667c:	200000d4 	ldrdcs	r0, [r0], -r4
 8006680:	2000038c 	andcs	r0, r0, ip, lsl #7

08006684 <main>:

#include "API.h"

void blinky(uint8 level);

int main(void) {
 8006684:	b510      	push	{r4, lr}
	SysInit();
 8006686:	f7fe fcb1 	bl	8004fec <SysInit>
	int i = 0;
	led_init();
 800668a:	f7fc fe1f 	bl	80032cc <led_init>
	dxl_init();
 800668e:	f7fe f913 	bl	80048b8 <dxl_init>
	mDelay(500);
 8006692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006696:	f7fc feb7 	bl	8003408 <mDelay>
	for (i = 0; i < 18; i++)
 800669a:	2400      	movs	r4, #0
		ping_dxl(i);
 800669c:	b2e0      	uxtb	r0, r4
	SysInit();
	int i = 0;
	led_init();
	dxl_init();
	mDelay(500);
	for (i = 0; i < 18; i++)
 800669e:	3401      	adds	r4, #1
		ping_dxl(i);
 80066a0:	f7fe f862 	bl	8004768 <ping_dxl>
	SysInit();
	int i = 0;
	led_init();
	dxl_init();
	mDelay(500);
	for (i = 0; i < 18; i++)
 80066a4:	2c12      	cmp	r4, #18
 80066a6:	d1f9      	bne.n	800669c <main+0x18>
		ping_dxl(i);
	mDelay(1000);
 80066a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066ac:	f7fc feac 	bl	8003408 <mDelay>
	PrintLine("\nManipulating DXL-03:\nCurrent Position:");
 80066b0:	4816      	ldr	r0, [pc, #88]	; (800670c <main+0x88>)
 80066b2:	f7fd feb5 	bl	8004420 <PrintLine>
	Printu16h(dxl_read_word(3, DXL_CURR_POS_L));
 80066b6:	2124      	movs	r1, #36	; 0x24
 80066b8:	2003      	movs	r0, #3
 80066ba:	f7fd fba8 	bl	8003e0e <dxl_read_word>
 80066be:	f7fe f9bd 	bl	8004a3c <Printu16h>
	PrintLine("Turning off torque... ");
 80066c2:	4813      	ldr	r0, [pc, #76]	; (8006710 <main+0x8c>)
 80066c4:	f7fd feac 	bl	8004420 <PrintLine>
	setDXLTorqueState(11, Off);
 80066c8:	2100      	movs	r1, #0
 80066ca:	200b      	movs	r0, #11
 80066cc:	f7fd fb99 	bl	8003e02 <setDXLTorqueState>
	PrintString("Done");
 80066d0:	4810      	ldr	r0, [pc, #64]	; (8006714 <main+0x90>)
 80066d2:	f7fd fedf 	bl	8004494 <PrintString>
	PrintLine("Setting DXL-03's Position to 640 (3/4 full)...\n");
 80066d6:	4810      	ldr	r0, [pc, #64]	; (8006718 <main+0x94>)
 80066d8:	f7fd fea2 	bl	8004420 <PrintLine>
	setDXLPosition(3, 640);
 80066dc:	2003      	movs	r0, #3
 80066de:	f44f 7120 	mov.w	r1, #640	; 0x280
 80066e2:	f7fd ff45 	bl	8004570 <setDXLPosition>
	printStatus();
 80066e6:	f7fd ffc3 	bl	8004670 <printStatus>
	PrintLine("Position Set. Turning torque on... ");
 80066ea:	480c      	ldr	r0, [pc, #48]	; (800671c <main+0x98>)
 80066ec:	f7fd fe98 	bl	8004420 <PrintLine>
	setDXLTorqueState(3, On);
 80066f0:	2101      	movs	r1, #1
 80066f2:	2003      	movs	r0, #3
 80066f4:	f7fd fb85 	bl	8003e02 <setDXLTorqueState>
	PrintString("Done.\n");
 80066f8:	4809      	ldr	r0, [pc, #36]	; (8006720 <main+0x9c>)
 80066fa:	f7fd fecb 	bl	8004494 <PrintString>
			//dxl_get_result() == DXL_TXSUCCESS?PrintString("Success"):PrintString("Failed");
	mDelay(50);
 80066fe:	2032      	movs	r0, #50	; 0x32
 8006700:	f7fc fe82 	bl	8003408 <mDelay>
	end();
 8006704:	f7fd fea2 	bl	800444c <end>
	return 0;
}
 8006708:	2000      	movs	r0, #0
 800670a:	bd10      	pop	{r4, pc}
 800670c:	080067b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, sp, lr}
 8006710:	080067de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, sp, lr}
 8006714:	080067f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 8006718:	080067fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 800671c:	0800682a 	stmdaeq	r0, {r1, r3, r5, fp, sp, lr}
 8006720:	0800684e 	stmdaeq	r0, {r1, r2, r3, r6, fp, sp, lr}
 8006724:	0c0b1211 	sfmeq	f1, 4, [fp], {17}
 8006728:	24181b1a 	ldrcs	r1, [r8], #-2842	; 0xb1a
 800672c:	02464624 	subeq	r4, r6, #37748736	; 0x2400000
 8006730:	31300102 	teqcc	r0, r2, lsl #2
 8006734:	33303230 	teqcc	r0, #3
 8006738:	35303430 	ldrcc	r3, [r0, #-1072]!	; 0x430
 800673c:	37303630 			; <UNDEFINED> instruction: 0x37303630
 8006740:	39303830 	ldmdbcc	r0!, {r4, r5, fp, ip, sp}
 8006744:	31313031 	teqcc	r1, r1, lsr r0
 8006748:	33313231 	teqcc	r1, #268435459	; 0x10000003
 800674c:	35313431 	ldrcc	r3, [r1, #-1073]!	; 0x431
 8006750:	37313631 			; <UNDEFINED> instruction: 0x37313631
 8006754:	39313831 	ldmdbcc	r1!, {r0, r4, r5, fp, ip, sp}
 8006758:	31323032 	teqcc	r2, r2, lsr r0
 800675c:	33323232 	teqcc	r2, #536870915	; 0x20000003
 8006760:	35323432 	ldrcc	r3, [r2, #-1074]!	; 0x432
 8006764:	37323632 			; <UNDEFINED> instruction: 0x37323632
 8006768:	39323832 	ldmdbcc	r2!, {r1, r4, r5, fp, ip, sp}
 800676c:	02013033 	andeq	r3, r1, #51	; 0x33
 8006770:	20100804 	andscs	r0, r0, r4, lsl #16
 8006774:	02011240 	andeq	r1, r1, #4

08006775 <NUM_AX12_SERVOS>:
 8006775:	03020112 	movweq	r0, #8466	; 0x2112

08006776 <AX12_IDS>:
 8006776:	04030201 	streq	r0, [r3], #-513	; 0x201
 800677a:	08070605 	stmdaeq	r7, {r0, r2, r9, sl}
 800677e:	0c0b0a09 	stceq	10, cr0, [fp], {9}
 8006782:	100f0e0d 	andne	r0, pc, sp, lsl #28
 8006786:	01001211 	tsteq	r0, r1, lsl r2

08006788 <AX12Servos>:
 8006788:	01010100 	mrseq	r0, (UNDEF: 17)
 800678c:	01010101 	tsteq	r1, r1, lsl #2
 8006790:	01010101 	tsteq	r1, r1, lsl #2
 8006794:	01010101 	tsteq	r1, r1, lsl #2
 8006798:	00010101 	andeq	r0, r1, r1, lsl #2
 800679c:	00000000 	andeq	r0, r0, r0
	...

080067a2 <APBAHBPrescTable>:
 80067a2:	00000000 	andeq	r0, r0, r0
 80067a6:	04030201 	streq	r0, [r3], #-513	; 0x201
 80067aa:	04030201 	streq	r0, [r3], #-513	; 0x201
 80067ae:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

080067b2 <ADCPrescTable>:
 80067b2:	08060402 	stmdaeq	r6, {r1, sl}
 80067b6:	6e614d0a 	cdpvs	13, 6, cr4, cr1, cr10, {0}
 80067ba:	6c757069 	ldclvs	0, cr7, [r5], #-420	; 0xfffffe5c
 80067be:	6e697461 	cdpvs	4, 6, cr7, cr9, cr1, {3}
 80067c2:	58442067 	stmdapl	r4, {r0, r1, r2, r5, r6, sp}^
 80067c6:	33302d4c 	teqcc	r0, #4864	; 0x1300
 80067ca:	75430a3a 	strbvc	r0, [r3, #-2618]	; 0xa3a
 80067ce:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
 80067d2:	6f502074 	svcvs	0x00502074
 80067d6:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
 80067da:	003a6e6f 	eorseq	r6, sl, pc, ror #28
 80067de:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
 80067e2:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80067e6:	2066666f 	rsbcs	r6, r6, pc, ror #12
 80067ea:	71726f74 	cmnvc	r2, r4, ror pc
 80067ee:	2e2e6575 	mcrcs	5, 1, r6, cr14, cr5, {3}
 80067f2:	4400202e 	strmi	r2, [r0], #-46	; 0x2e
 80067f6:	00656e6f 	rsbeq	r6, r5, pc, ror #28
 80067fa:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
 80067fe:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8006802:	2d4c5844 	stclcs	8, cr5, [ip, #-272]	; 0xfffffef0
 8006806:	73273330 	teqvc	r7, #-1073741824	; 0xc0000000
 800680a:	736f5020 	cmnvc	pc, #32
 800680e:	6f697469 	svcvs	0x00697469
 8006812:	6f74206e 	svcvs	0x0074206e
 8006816:	30343620 	eorscc	r3, r4, r0, lsr #12
 800681a:	2f332820 	svccs	0x00332820
 800681e:	75662034 	strbvc	r2, [r6, #-52]!	; 0x34
 8006822:	2e296c6c 	cdpcs	12, 2, cr6, cr9, cr12, {3}
 8006826:	000a2e2e 	andeq	r2, sl, lr, lsr #28
 800682a:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
 800682e:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
 8006832:	74655320 	strbtvc	r5, [r5], #-800	; 0x320
 8006836:	7554202e 	ldrbvc	r2, [r4, #-46]	; 0x2e
 800683a:	6e696e72 	mcrvs	14, 3, r6, cr9, cr2, {3}
 800683e:	6f742067 	svcvs	0x00742067
 8006842:	65757172 	ldrbvs	r7, [r5, #-370]!	; 0x172
 8006846:	2e6e6f20 	cdpcs	15, 6, cr6, cr14, cr0, {1}
 800684a:	00202e2e 	eoreq	r2, r0, lr, lsr #28
 800684e:	656e6f44 	strbvs	r6, [lr, #-3908]!	; 0xf44
 8006852:	43000a2e 	movwmi	r0, #2606	; 0xa2e
 8006856:	5f4d4d4f 	svcpl	0x004d4d4f
 800685a:	41465854 	cmpmi	r6, r4, asr r8
 800685e:	203a4c49 	eorscs	r4, sl, r9, asr #24
 8006862:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
 8006866:	74206465 	strtvc	r6, [r0], #-1125	; 0x465
 800686a:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
 800686e:	2074696d 	rsbscs	r6, r4, sp, ror #18
 8006872:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xe69
 8006876:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
 800687a:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 800687e:	6b636170 	blvs	98dee46 <_etext+0x18d7fce>
 8006882:	0a217465 	beq	8863a1e <_etext+0x85cba6>
 8006886:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 800688c <ADCPrescTable+0xda>
 800688a:	58525f4d 	ldmdapl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 800688e:	4c494146 	stfmie	f4, [r9], {70}	; 0x46
 8006892:	6146203a 	cmpvs	r6, sl, lsr r0
 8006896:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xc69
 800689a:	74656720 	strbtvc	r6, [r5], #-1824	; 0x720
 800689e:	61747320 	cmnvs	r4, r0, lsr #6
 80068a2:	20737574 	rsbscs	r7, r3, r4, ror r5
 80068a6:	6b636170 	blvs	98dee6e <_etext+0x18d7ff6>
 80068aa:	66207465 	strtvs	r7, [r0], -r5, ror #8
 80068ae:	206d6f72 	rsbcs	r6, sp, r2, ror pc
 80068b2:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 80068b6:	0a216563 	beq	885fe4a <_etext+0x858fd2>
 80068ba:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 80068c0 <ADCPrescTable+0x10e>
 80068be:	58545f4d 	ldmdapl	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 80068c2:	4f525245 	svcmi	0x00525245
 80068c6:	49203a52 	stmdbmi	r0!, {r1, r4, r6, r9, fp, ip, sp}
 80068ca:	726f636e 	rsbvc	r6, pc, #-1207959551	; 0xb8000001
 80068ce:	74636572 	strbtvc	r6, [r3], #-1394	; 0x572
 80068d2:	736e6920 	cmnvc	lr, #524288	; 0x80000
 80068d6:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
 80068da:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
 80068de:	63617020 	cmnvs	r1, #32
 80068e2:	2174656b 	cmncs	r4, fp, ror #10
 80068e6:	4f43000a 	svcmi	0x0043000a
 80068ea:	425f4d4d 	subsmi	r4, pc, #4928	; 0x1340
 80068ee:	495f4441 	ldmdbmi	pc, {r0, r6, sl, lr}^	; <UNPREDICTABLE>
 80068f2:	3a54534e 	bcc	951b632 <_etext+0x15147ba>
 80068f6:	766e4920 	strbtvc	r4, [lr], -r0, lsr #18
 80068fa:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xc61
 80068fe:	736e4920 	cmnvc	lr, #524288	; 0x80000
 8006902:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
 8006906:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
 800690a:	74796220 	ldrbtvc	r6, [r9], #-544	; 0x220
 800690e:	43000a65 	movwmi	r0, #2661	; 0xa65
 8006912:	5f4d4d4f 	svcpl	0x004d4d4f
 8006916:	5f444142 	svcpl	0x00444142
 800691a:	203a4449 	eorscs	r4, sl, r9, asr #8
 800691e:	73274449 	teqvc	r7, #1224736768	; 0x49000000
 8006922:	746f6e20 	strbtvc	r6, [pc], #-3616	; 800692a <ADCPrescTable+0x178>
 8006926:	6d617320 	stclvs	3, cr7, [r1, #-128]!	; 0xffffff80
 800692a:	6f662065 	svcvs	0x00662065
 800692e:	6e692072 	mcrvs	0, 3, r2, cr9, cr2, {3}
 8006932:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0x473
 8006936:	6f697463 	svcvs	0x00697463
 800693a:	6e61206e 	cdpvs	0, 6, cr2, cr1, cr14, {3}
 800693e:	74732064 	ldrbtvc	r2, [r3], #-100	; 0x64
 8006942:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 8006946:	63617020 	cmnvs	r1, #32
 800694a:	7374656b 	cmnvc	r4, #448790528	; 0x1ac00000
 800694e:	4f43000a 	svcmi	0x0043000a
 8006952:	525f4d4d 	subspl	r4, pc, #4928	; 0x1340
 8006956:	49415758 	stmdbmi	r1, {r3, r4, r6, r8, r9, sl, ip, lr}^
 800695a:	474e4954 	smlsldmi	r4, lr, r4, r9
 800695e:	6f4e203a 	svcvs	0x004e203a
 8006962:	65722077 	ldrbvs	r2, [r2, #-119]!	; 0x77
 8006966:	76696563 	strbtvc	r6, [r9], -r3, ror #10
 800696a:	20676e69 	rsbcs	r6, r7, r9, ror #28
 800696e:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
 8006972:	70207375 	eorvc	r7, r0, r5, ror r3
 8006976:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
 800697a:	000a2174 	andeq	r2, sl, r4, ror r1
 800697e:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
 8006982:	5458525f 	ldrbpl	r5, [r8], #-607	; 0x25f
 8006986:	4f454d49 	svcmi	0x00454d49
 800698a:	203a5455 	eorscs	r5, sl, r5, asr r4
 800698e:	72656854 	rsbvc	r6, r5, #5505024	; 0x540000
 8006992:	73692065 	cmnvc	r9, #101	; 0x65
 8006996:	206f6e20 	rsbcs	r6, pc, r0, lsr #28
 800699a:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
 800699e:	70207375 	eorvc	r7, r0, r5, ror r3
 80069a2:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
 80069a6:	000a2174 	andeq	r2, sl, r4, ror r1
 80069aa:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
 80069ae:	4358525f 	cmpmi	r8, #-268435451	; 0xf0000005
 80069b2:	4b434548 	blmi	90d7eda <_etext+0x10d1062>
 80069b6:	3a4d5553 	bcc	935bf0a <_etext+0x1355092>
 80069ba:	636e4920 	cmnvs	lr, #524288	; 0x80000
 80069be:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0x26f
 80069c2:	73207463 	teqvc	r0, #1660944384	; 0x63000000
 80069c6:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 80069ca:	61702073 	cmnvs	r0, r3, ror r0
 80069ce:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 80069d2:	65686320 	strbvs	r6, [r8, #-800]!	; 0x320
 80069d6:	75736b63 	ldrbvc	r6, [r3, #-2915]!	; 0xb63
 80069da:	000a216d 	andeq	r2, sl, sp, ror #2
 80069de:	20646e45 	rsbcs	r6, r4, r5, asr #28
 80069e2:	5020666f 	eorpl	r6, r0, pc, ror #12
 80069e6:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 80069ea:	0a2e6d61 	beq	8ba1f76 <_etext+0xb9b0fe>
 80069ee:	706e4900 	rsbvc	r4, lr, r0, lsl #18
 80069f2:	76207475 			; <UNDEFINED> instruction: 0x76207475
 80069f6:	61746c6f 	cmnvs	r4, pc, ror #24
 80069fa:	65206567 	strvs	r6, [r0, #-1383]!	; 0x567
 80069fe:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8006a02:	41000a21 	tstmi	r0, r1, lsr #20
 8006a06:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
 8006a0a:	6d696c20 	stclvs	12, cr6, [r9, #-128]!	; 0xffffff80
 8006a0e:	65207469 	strvs	r7, [r0, #-1129]!	; 0x469
 8006a12:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8006a16:	4f000a21 	svcmi	0x00000a21
 8006a1a:	68726576 	ldmdavs	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 8006a1e:	20746165 	rsbscs	r6, r4, r5, ror #2
 8006a22:	6f727265 	svcvs	0x00727265
 8006a26:	000a2172 	andeq	r2, sl, r2, ror r1
 8006a2a:	65747441 	ldrbvs	r7, [r4, #-1089]!	; 0x441
 8006a2e:	6974706d 	ldmdbvs	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
 8006a32:	7420676e 	strtvc	r6, [r0], #-1902	; 0x76e
 8006a36:	7277206f 	rsbsvc	r2, r7, #111	; 0x6f
 8006a3a:	5f657469 	svcpl	0x00657469
 8006a3e:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xf77
 8006a42:	7562202c 	strbvc	r2, [r2, #-44]!	; 0x2c
 8006a46:	75622074 	strbvc	r2, [r2, #-116]!	; 0x74
 8006a4a:	6e692073 	mcrvs	0, 3, r2, cr9, cr3, {3}
 8006a4e:	65737520 	ldrbvs	r7, [r3, #-1312]!	; 0x520
 8006a52:	6f44002e 	svcvs	0x0044002e
 8006a56:	7720656e 	strvc	r6, [r0, -lr, ror #10]!
 8006a5a:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
 8006a5e:	4400676e 	strmi	r6, [r0], #-1902	; 0x76e
 8006a62:	49204c58 	stmdbmi	r0!, {r3, r4, r6, sl, fp, lr}
 8006a66:	20203a44 	eorcs	r3, r0, r4, asr #20
 8006a6a:	20202020 	eorcs	r2, r0, r0, lsr #32
 8006a6e:	20202020 	eorcs	r2, r0, r0, lsr #32
 8006a72:	44002020 	strmi	r2, [r0], #-32
 8006a76:	4d204c58 	stcmi	12, cr4, [r0, #-352]!	; 0xfffffea0
 8006a7a:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 8006a7e:	2020203a 	eorcs	r2, r0, sl, lsr r0
 8006a82:	20202020 	eorcs	r2, r0, r0, lsr #32
 8006a86:	44002020 	strmi	r2, [r0], #-32
 8006a8a:	46204c58 			; <UNDEFINED> instruction: 0x46204c58
 8006a8e:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 8006a92:	3a657261 	bcc	996341e <_etext+0x195c5a6>
 8006a96:	20202020 	eorcs	r2, r0, r0, lsr #32
 8006a9a:	44002020 	strmi	r2, [r0], #-32
 8006a9e:	42204c58 	eormi	r4, r0, #22528	; 0x5800
 8006aa2:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
 8006aa6:	3a657461 	bcc	9963c32 <_etext+0x195cdba>
 8006aaa:	20202020 	eorcs	r2, r0, r0, lsr #32
 8006aae:	44002020 	strmi	r2, [r0], #-32
 8006ab2:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 8006ab6:	2020203a 	eorcs	r2, r0, sl, lsr r0
 8006aba:	20202020 	eorcs	r2, r0, r0, lsr #32
 8006abe:	20202020 	eorcs	r2, r0, r0, lsr #32
 8006ac2:	53002020 	movwpl	r2, #32
 8006ac6:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 8006aca:	654c2073 	strbvs	r2, [ip, #-115]	; 0x73
 8006ace:	3a6c6576 	bcc	9b200ae <_etext+0x1b19236>
 8006ad2:	20202020 	eorcs	r2, r0, r0, lsr #32
 8006ad6:	43002020 	movwmi	r2, #32
 8006ada:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
 8006ade:	5020746e 	eorpl	r7, r0, lr, ror #8
 8006ae2:	7469736f 	strbtvc	r7, [r9], #-879	; 0x36f
 8006ae6:	3a6e6f69 	bcc	9ba2892 <_etext+0x1b9ba1a>
 8006aea:	53002020 	movwpl	r2, #32
 8006aee:	65636375 	strbvs	r6, [r3, #-885]!	; 0x375
 8006af2:	000a7373 	andeq	r7, sl, r3, ror r3
 8006af6:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
 8006afa:	4658545f 			; <UNDEFINED> instruction: 0x4658545f
 8006afe:	3a4c4941 	bcc	931900a <_etext+0x1312192>
 8006b02:	69614620 	stmdbvs	r1!, {r5, r9, sl, lr}^
 8006b06:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8006b0a:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
 8006b0e:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xd73
 8006b12:	736e6920 	cmnvc	lr, #524288	; 0x80000
 8006b16:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
 8006b1a:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
 8006b1e:	63617020 	cmnvs	r1, #32
 8006b22:	2174656b 	cmncs	r4, fp, ror #10
 8006b26:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 8006b2c <ADCPrescTable+0x37a>
 8006b2a:	58525f4d 	ldmdapl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
 8006b2e:	4c494146 	stfmie	f4, [r9], {70}	; 0x46
 8006b32:	6146203a 	cmpvs	r6, sl, lsr r0
 8006b36:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xc69
 8006b3a:	74656720 	strbtvc	r6, [r5], #-1824	; 0x720
 8006b3e:	61747320 	cmnvs	r4, r0, lsr #6
 8006b42:	20737574 	rsbscs	r7, r3, r4, ror r5
 8006b46:	6b636170 	blvs	98df10e <_etext+0x18d8296>
 8006b4a:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8006b4e:	206d6f72 	rsbcs	r6, sp, r2, ror pc
 8006b52:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8006b56:	00216563 	eoreq	r6, r1, r3, ror #10
 8006b5a:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
 8006b5e:	4558545f 	ldrbmi	r5, [r8, #-1119]	; 0x45f
 8006b62:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 8006b66:	6e49203a 	mcrvs	0, 2, r2, cr9, cr10, {1}
 8006b6a:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
 8006b6e:	20746365 	rsbscs	r6, r4, r5, ror #6
 8006b72:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xe69
 8006b76:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
 8006b7a:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8006b7e:	6b636170 	blvs	98df146 <_etext+0x18d82ce>
 8006b82:	00217465 	eoreq	r7, r1, r5, ror #8
 8006b86:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
 8006b8a:	4441425f 	strbmi	r4, [r1], #-607	; 0x25f
 8006b8e:	534e495f 	movtpl	r4, #59743	; 0xe95f
 8006b92:	49203a54 	stmdbmi	r0!, {r2, r4, r6, r9, fp, ip, sp}
 8006b96:	6c61766e 	stclvs	6, cr7, [r1], #-440	; 0xfffffe48
 8006b9a:	49206469 	stmdbmi	r0!, {r0, r3, r5, r6, sl, sp, lr}
 8006b9e:	7274736e 	rsbsvc	r7, r4, #-1207959551	; 0xb8000001
 8006ba2:	69746375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
 8006ba6:	62206e6f 	eorvs	r6, r0, #1776	; 0x6f0
 8006baa:	00657479 	rsbeq	r7, r5, r9, ror r4
 8006bae:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
 8006bb2:	4441425f 	strbmi	r4, [r1], #-607	; 0x25f
 8006bb6:	3a44495f 	bcc	911913a <_etext+0x11122c2>
 8006bba:	27444920 	strbcs	r4, [r4, -r0, lsr #18]
 8006bbe:	6f6e2073 	svcvs	0x006e2073
 8006bc2:	61732074 	cmnvs	r3, r4, ror r0
 8006bc6:	6620656d 	strtvs	r6, [r0], -sp, ror #10
 8006bca:	6920726f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
 8006bce:	7274736e 	rsbsvc	r7, r4, #-1207959551	; 0xb8000001
 8006bd2:	69746375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
 8006bd6:	61206e6f 	teqvs	r0, pc, ror #28
 8006bda:	7320646e 	teqvc	r0, #1845493760	; 0x6e000000
 8006bde:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 8006be2:	61702073 	cmnvs	r0, r3, ror r0
 8006be6:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 8006bea:	4f430073 	svcmi	0x00430073
 8006bee:	525f4d4d 	subspl	r4, pc, #4928	; 0x1340
 8006bf2:	49415758 	stmdbmi	r1, {r3, r4, r6, r8, r9, sl, ip, lr}^
 8006bf6:	474e4954 	smlsldmi	r4, lr, r4, r9
 8006bfa:	6f4e203a 	svcvs	0x004e203a
 8006bfe:	65722077 	ldrbvs	r2, [r2, #-119]!	; 0x77
 8006c02:	76696563 	strbtvc	r6, [r9], -r3, ror #10
 8006c06:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8006c0a:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
 8006c0e:	70207375 	eorvc	r7, r0, r5, ror r3
 8006c12:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
 8006c16:	43002174 	movwmi	r2, #372	; 0x174
 8006c1a:	5f4d4d4f 	svcpl	0x004d4d4f
 8006c1e:	49545852 	ldmdbmi	r4, {r1, r4, r6, fp, ip, lr}^
 8006c22:	554f454d 	strbpl	r4, [pc, #-1357]	; 80066dd <main+0x59>
 8006c26:	54203a54 	strtpl	r3, [r0], #-2644	; 0xa54
 8006c2a:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0x568
 8006c2e:	20736920 	rsbscs	r6, r3, r0, lsr #18
 8006c32:	73206f6e 	teqvc	r0, #440	; 0x1b8
 8006c36:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
 8006c3a:	61702073 	cmnvs	r0, r3, ror r0
 8006c3e:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
 8006c42:	4f430021 	svcmi	0x00430021
 8006c46:	525f4d4d 	subspl	r4, pc, #4928	; 0x1340
 8006c4a:	45484358 	strbmi	r4, [r8, #-856]	; 0x358
 8006c4e:	55534b43 	ldrbpl	r4, [r3, #-2883]	; 0xb43
 8006c52:	49203a4d 	stmdbmi	r0!, {r0, r2, r3, r6, r9, fp, ip, sp}
 8006c56:	726f636e 	rsbvc	r6, pc, #-1207959551	; 0xb8000001
 8006c5a:	74636572 	strbtvc	r6, [r3], #-1394	; 0x572
 8006c5e:	61747320 	cmnvs	r4, r0, lsr #6
 8006c62:	20737574 	rsbscs	r7, r3, r4, ror r5
 8006c66:	6b636170 	blvs	98df22e <_etext+0x18d83b6>
 8006c6a:	63207465 	teqvs	r0, #1694498816	; 0x65000000
 8006c6e:	6b636568 	blvs	98e0216 <_etext+0x18d939e>
 8006c72:	216d7573 	smccs	55123	; 0xd753
 8006c76:	74754f00 	ldrbtvc	r4, [r5], #-3840	; 0xf00
 8006c7a:	20666f20 	rsbcs	r6, r6, r0, lsr #30
 8006c7e:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 8006c82:	72652065 	rsbvc	r2, r5, #101	; 0x65
 8006c86:	21726f72 	cmncs	r2, r2, ror pc
 8006c8a:	6843000a 	stmdavs	r3, {r1, r3}^
 8006c8e:	736b6365 	cmnvc	fp, #-1811939327	; 0x94000001
 8006c92:	65206d75 	strvs	r6, [r0, #-3445]!	; 0xd75
 8006c96:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8006c9a:	4f000a21 	svcmi	0x00000a21
 8006c9e:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
 8006ca2:	2064616f 	rsbcs	r6, r4, pc, ror #2
 8006ca6:	6f727265 	svcvs	0x00727265
 8006caa:	000a2172 	andeq	r2, sl, r2, ror r1
 8006cae:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 8006cb2:	206e776f 	rsbcs	r7, lr, pc, ror #14
 8006cb6:	6f727265 	svcvs	0x00727265
 8006cba:	6f632072 	svcvs	0x00632072
 8006cbe:	20216564 	eorcs	r6, r1, r4, ror #10
 8006cc2:	54414857 	strbpl	r4, [r1], #-2135	; 0x857
 8006cc6:	44494420 	strbmi	r4, [r9], #-1056	; 0x420
 8006cca:	554f5920 	strbpl	r5, [pc, #-2336]	; 80063b2 <USART_ClockInit+0x4>
 8006cce:	214f4420 	cmpcs	pc, r0, lsr #8
 8006cd2:	5844003f 	stmdapl	r4, {r0, r1, r2, r3, r4, r5}^
 8006cd6:	20002d4c 	andcs	r2, r0, ip, asr #26
 8006cda:	676e6950 			; <UNDEFINED> instruction: 0x676e6950
 8006cde:	61745320 	cmnvs	r4, r0, lsr #6
 8006ce2:	3a737574 	bcc	9ce42ba <_etext+0x1cdd442>
 8006ce6:	75530020 	ldrbvc	r0, [r3, #-32]
 8006cea:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
 8006cee:	54002e73 	strpl	r2, [r0], #-3699	; 0xe73
 8006cf2:	6f656d69 	svcvs	0x00656d69
 8006cf6:	002e7475 	eoreq	r7, lr, r5, ror r4
 8006cfa:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
 8006cfe:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8006d02:	62206e6f 	eorvs	r6, r0, #1776	; 0x6f0
 8006d06:	74207375 	strtvc	r7, [r0], #-885	; 0x375
 8006d0a:	6c63206f 	stclvs	0, cr2, [r3], #-444	; 0xfffffe44
 8006d0e:	2e726165 	rpwcssz	f6, f2, f5
 8006d12:	00202e2e 	eoreq	r2, r0, lr, lsr #28
 8006d16:	20737542 	rsbscs	r7, r3, r2, asr #10
 8006d1a:	61656c63 	cmnvs	r5, r3, ror #24
 8006d1e:	0a646572 	beq	99202ee <_etext+0x1919476>
 8006d22:	61656c43 	cmnvs	r5, r3, asr #24
 8006d26:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 8006d2a:	63617020 	cmnvs	r1, #32
 8006d2e:	2e74656b 	cdpcs	5, 7, cr6, cr4, cr11, {3}
 8006d32:	00202e2e 	eoreq	r2, r0, lr, lsr #28
 8006d36:	61656c43 	cmnvs	r5, r3, asr #24
 8006d3a:	0a646572 	beq	992030a <_etext+0x1919492>
 8006d3e:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
 8006d42:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8006d46:	2077656e 	rsbscs	r6, r7, lr, ror #10
 8006d4a:	6b636170 	blvs	98df312 <_etext+0x18d849a>
 8006d4e:	49207465 	stmdbmi	r0!, {r0, r2, r5, r6, sl, ip, sp, lr}
 8006d52:	4c202c44 	stcmi	12, cr2, [r0], #-272	; 0xfffffef0
 8006d56:	202c6e65 	eorcs	r6, ip, r5, ror #28
 8006d5a:	6e492026 	cdpvs	0, 4, cr2, cr9, cr6, {1}
 8006d5e:	2e2e7473 	mcrcs	4, 1, r7, cr14, cr3, {3}
 8006d62:	4400202e 	strmi	r2, [r0], #-46	; 0x2e
 8006d66:	0a656e6f 	beq	996272a <_etext+0x195b8b2>
 8006d6a:	676e6950 			; <UNDEFINED> instruction: 0x676e6950
 8006d6e:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
 8006d72:	00202e2e 	eoreq	r2, r0, lr, lsr #28
 8006d76:	61656c43 	cmnvs	r5, r3, asr #24
 8006d7a:	2e646572 	mcrcs	5, 3, r6, cr4, cr2, {3}
 8006d7e:	0a000a0a 	beq	80095ae <_etext+0x2736>
 8006d82:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
 8006d86:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 8006d8a:	676e697a 			; <UNDEFINED> instruction: 0x676e697a
 8006d8e:	6e794420 	cdpvs	4, 7, cr4, cr9, cr0, {1}
 8006d92:	78696d61 	stmdavc	r9!, {r0, r5, r6, r8, sl, fp, sp, lr}^
 8006d96:	2e736c65 	cdpcs	12, 7, cr6, cr3, cr5, {3}
 8006d9a:	00202e2e 	eoreq	r2, r0, lr, lsr #28
 8006d9e:	62616e55 	rsbvs	r6, r1, #1360	; 0x550
 8006da2:	7420656c 	strtvc	r6, [r0], #-1388	; 0x56c
 8006da6:	6e49206f 	cdpvs	0, 4, cr2, cr9, cr15, {3}
 8006daa:	61697469 	cmnvs	r9, r9, ror #8
 8006dae:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0x96c
 8006db2:	4c584420 	cfldrdmi	mvd4, [r8], {32}
 8006db6:	420a0073 	andmi	r0, sl, #115	; 0x73
 8006dba:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0x461
 8006dbe:	56207972 			; <UNDEFINED> instruction: 0x56207972
 8006dc2:	61746c6f 	cmnvs	r4, pc, ror #24
 8006dc6:	203a6567 	eorscs	r6, sl, r7, ror #10
 8006dca:	312d6500 	teqcc	sp, r0, lsl #10
 8006dce:	6f565b20 	svcvs	0x00565b20
 8006dd2:	5d73746c 	cfldrdpl	mvd7, [r3, #-432]!	; 0xfffffe50
 8006dd6:	7e0a000a 	cdpvc	0, 0, cr0, cr10, cr10, {0}
 8006dda:	7e7e7e7e 	mrcvc	14, 3, r7, cr14, cr14, {3}
 8006dde:	7e7e7e7e 	mrcvc	14, 3, r7, cr14, cr14, {3}
 8006de2:	7e7e7e7e 	mrcvc	14, 3, r7, cr14, cr14, {3}
 8006de6:	7e7e7e7e 	mrcvc	14, 3, r7, cr14, cr14, {3}
 8006dea:	7e7e7e7e 	mrcvc	14, 3, r7, cr14, cr14, {3}
 8006dee:	7e7e7e7e 	mrcvc	14, 3, r7, cr14, cr14, {3}
 8006df2:	7e7e7e7e 	mrcvc	14, 3, r7, cr14, cr14, {3}
 8006df6:	7e7e7e7e 	mrcvc	14, 3, r7, cr14, cr14, {3}
 8006dfa:	7e7e7e7e 	mrcvc	14, 3, r7, cr14, cr14, {3}
 8006dfe:	0a7e7e7e 	beq	9fa67fe <_etext+0x1f9f986>
 8006e02:	74614200 	strbtvc	r4, [r1], #-512	; 0x200
 8006e06:	79726574 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
 8006e0a:	6c6f5620 	stclvs	6, cr5, [pc], #-128	; 8006d90 <ADCPrescTable+0x5de>
 8006e0e:	65676174 	strbvs	r6, [r7, #-372]!	; 0x174
 8006e12:	69724320 	ldmdbvs	r2!, {r5, r8, r9, lr}^
 8006e16:	61636974 	smcvs	13972	; 0x3694
 8006e1a:	6843006c 	stmdavs	r3, {r2, r3, r5, r6}^
 8006e1e:	696b6365 	stmdbvs	fp!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8006e22:	4420676e 	strtmi	r6, [r0], #-1902	; 0x76e
 8006e26:	6d616e79 	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
 8006e2a:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8006e2e:	2e2e2e73 	mcrcs	14, 1, r2, cr14, cr3, {3}
 8006e32:	5844000a 	stmdapl	r4, {r1, r3}^
 8006e36:	5000204c 	andpl	r2, r0, ip, asr #32
 8006e3a:	0a535341 	beq	94dbb46 <_etext+0x14d4cce>
 8006e3e:	49414600 	stmdbmi	r1, {r9, sl, lr}^
 8006e42:	45000a4c 	strmi	r0, [r0, #-2636]	; 0xa4c
 8006e46:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 8006e4a:	6f44000a 	svcvs	0x0044000a
 8006e4e:	6320656e 	teqvs	r0, #461373440	; 0x1b800000
 8006e52:	6b636568 	blvs	98e03fa <_etext+0x18d9582>
 8006e56:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8006e5a:	616e7944 	cmnvs	lr, r4, asr #18
 8006e5e:	6578696d 	ldrbvs	r6, [r8, #-2413]!	; 0x96d
 8006e62:	0a2e736c 	beq	8ba3c1a <_etext+0xb9cda2>
 8006e66:	6e490a00 	vmlavs.f32	s1, s18, s0
 8006e6a:	61697469 	cmnvs	r9, r9, ror #8
 8006e6e:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0x96c
 8006e72:	000a2e64 	andeq	r2, sl, r4, ror #28
	...

Disassembly of section .data:

20000000 <EasyLED>:
20000000:	40011000 	andmi	r1, r1, r0
20000004:	00002000 	andeq	r2, r0, r0
20000008:	40010c00 	andmi	r0, r1, r0, lsl #24
2000000c:	00002000 	andeq	r2, r0, r0
20000010:	40010c00 	andmi	r0, r1, r0, lsl #24
20000014:	00004000 	andeq	r4, r0, r0
20000018:	40010c00 	andmi	r0, r1, r0, lsl #24
2000001c:	00008000 	andeq	r8, r0, r0
20000020:	40011000 	andmi	r1, r1, r0
20000024:	00004000 	andeq	r4, r0, r0
20000028:	40011000 	andmi	r1, r1, r0
2000002c:	00008000 	andeq	r8, r0, r0
20000030:	40010c00 	andmi	r0, r1, r0, lsl #24
20000034:	00001000 	andeq	r1, r0, r0

20000038 <EasyButton>:
20000038:	40011000 	andmi	r1, r1, r0
2000003c:	00000800 	andeq	r0, r0, r0, lsl #16
20000040:	40011000 	andmi	r1, r1, r0
20000044:	00000400 	andeq	r0, r0, r0, lsl #8
20000048:	40010800 	andmi	r0, r1, r0, lsl #16
2000004c:	00008000 	andeq	r8, r0, r0
20000050:	40010800 	andmi	r0, r1, r0, lsl #16
20000054:	00004000 	andeq	r4, r0, r0
20000058:	40010c00 	andmi	r0, r1, r0, lsl #24
2000005c:	00000008 	andeq	r0, r0, r8
20000060:	40011000 	andmi	r1, r1, r0
20000064:	00000010 	andeq	r0, r0, r0, lsl r0

20000068 <EasyEPort>:
20000068:	40010800 	andmi	r0, r1, r0, lsl #16
2000006c:	00000001 	andeq	r0, r0, r1
20000070:	40010800 	andmi	r0, r1, r0, lsl #16
20000074:	00000002 	andeq	r0, r0, r2
20000078:	40010800 	andmi	r0, r1, r0, lsl #16
2000007c:	00000004 	andeq	r0, r0, r4
20000080:	40010800 	andmi	r0, r1, r0, lsl #16
20000084:	00000008 	andeq	r0, r0, r8
20000088:	40011000 	andmi	r1, r1, r0
2000008c:	00000040 	andeq	r0, r0, r0, asr #32
20000090:	40011000 	andmi	r1, r1, r0
20000094:	00000080 	andeq	r0, r0, r0, lsl #1
20000098:	40011000 	andmi	r1, r1, r0
2000009c:	00000100 	andeq	r0, r0, r0, lsl #2
200000a0:	40011000 	andmi	r1, r1, r0
200000a4:	00000200 	andeq	r0, r0, r0, lsl #4
200000a8:	40010800 	andmi	r0, r1, r0, lsl #16
200000ac:	00000100 	andeq	r0, r0, r0, lsl #2
200000b0:	40010800 	andmi	r0, r1, r0, lsl #16
200000b4:	00000800 	andeq	r0, r0, r0, lsl #16
200000b8:	40010c00 	andmi	r0, r1, r0, lsl #24
200000bc:	00000100 	andeq	r0, r0, r0, lsl #2
200000c0:	40010c00 	andmi	r0, r1, r0, lsl #24
200000c4:	00000200 	andeq	r0, r0, r0, lsl #4

200000c8 <gbCommStatus>:
200000c8:	00000002 	andeq	r0, r0, r2

200000cc <Baudrate_PCU>:
200000cc:	0000e100 	andeq	lr, r0, r0, lsl #2

200000d0 <Baudrate_DXL>:
200000d0:	000f4240 	andeq	r4, pc, r0, asr #4

Disassembly of section .bss:

200000d4 <Gizmo>:
	...

200000e0 <glDelayCounter>:
200000e0:	00000000 	andeq	r0, r0, r0

200000e4 <gbCounterCount>:
	...

200000e5 <gbPacketReadPointer>:
	...

200000e6 <gbPacketWritePointer>:
	...

200000e7 <gbpPacketDataBuffer>:
	...

20000108 <glCountdownCounter>:
20000108:	00000000 	andeq	r0, r0, r0

2000010c <glBuzzerCounter>:
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <glDxlTimeoutCounter>:
20000110:	00000000 	andeq	r0, r0, r0

20000114 <glPcuTimeoutCounter>:
20000114:	00000000 	andeq	r0, r0, r0

20000118 <gbpDxlBuffer>:
	...

20000218 <gbDxlRead>:
	...

2000021a <gbDxlWrite>:
	...

2000021c <giBusUsing>:
	...

2000021d <gbInstructionPacket>:
	...

200002bd <gbRxGetLength>:
	...

200002be <gbRxPacketLength>:
	...

200002bf <gbStatusPacket>:
	...

20000305 <TorqueState>:
	...

20000306 <gbPcuWrite>:
	...

20000308 <gbPcuRead>:
	...

2000030a <gbpPcuBuffer>:
	...

2000038a <ReBootToBootLoader>:
	...

2000038b <DXL_STATUS>:
	...

Disassembly of section ._usrstack:

2000038c <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:

void blinky(uint8 level) {
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
	// Turn them all off first.
	SetLED(MANAGE, 0);
   8:	6f542055 	svcvs	0x00542055
	SetLED(TXD, 0);
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
	SetLED(PROGRAM, 0);
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
	SetLED(RXD, 0);
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
  20:	6f725020 	svcvs	0x00725020
	SetLED(PLAY, 0);
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
	SetLED(AUX, 0);
  2c:	372e3420 	strcc	r3, [lr, -r0, lsr #8]!
  30:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
	switch (level) {	// Turn them on.
  34:	31323130 	teqcc	r2, r0, lsr r1
  38:	20373032 	eorscs	r3, r7, r2, lsr r0
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <SCS_BASE+0x1fff12fe>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
	SetLED(PROGRAM, 0);
	SetLED(RXD, 0);
	SetLED(PLAY, 0);
	SetLED(AUX, 0);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d375f34 	ldccs	15, cr5, [r7, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
  68:	33343931 	teqcc	r4, #802816	; 0xc4000
		default: return;
	}
	mDelay(100);
  6c:	005d3530 	subseq	r3, sp, r0, lsr r5

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
	mDelay(50);
	end();
	return 0;
}

void blinky(uint8 level) {
   0:	00003041 	andeq	r3, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
	// Turn them all off first.
	SetLED(MANAGE, 0);
   8:	01006962 	tsteq	r0, r2, ror #18
	SetLED(TXD, 0);
   c:	00000026 	andeq	r0, r0, r6, lsr #32
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
	SetLED(PROGRAM, 0);
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
	SetLED(RXD, 0);
  1c:	084d070a 	stmdaeq	sp, {r1, r3, r8, r9, sl}^
  20:	12020901 	andne	r0, r2, #16384	; 0x4000
	SetLED(PLAY, 0);
  24:	15011404 	strne	r1, [r1, #-1028]	; 0x404
  28:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
	SetLED(AUX, 0);
  2c:	22011a01 	andcs	r1, r1, #4096	; 0x1000
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
	mDelay(50);
	end();
	return 0;
}

void blinky(uint8 level) {
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
	// Turn them all off first.
	SetLED(MANAGE, 0);
   8:	00040000 	andeq	r0, r4, r0
	...
	SetLED(TXD, 0);
	SetLED(PROGRAM, 0);
  14:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  18:	08006684 	stmdaeq	r0, {r2, r7, r9, sl, sp, lr}
	SetLED(RXD, 0);
  1c:	000000a0 	andeq	r0, r0, r0, lsr #1
	...
	SetLED(PLAY, 0);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
	SetLED(AUX, 0);
  2c:	05fd0002 	ldrbeq	r0, [sp, #2]!
  30:	00040000 	andeq	r0, r4, r0
	switch (level) {	// Turn them on.
  34:	00000000 	andeq	r0, r0, r0
  38:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
  3c:	00000090 	muleq	r0, r0, r0
	...
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0d8e0002 	stceq	0, cr0, [lr, #8]
	SetLED(PROGRAM, 0);
	SetLED(RXD, 0);
	SetLED(PLAY, 0);
	SetLED(AUX, 0);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	080031c4 	stmdaeq	r0, {r2, r6, r7, r8, ip, sp}
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
  5c:	00001ecc 	andeq	r1, r0, ip, asr #29
	...
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
		default: return;
	}
	mDelay(100);
  6c:	5ef30002 	cdppl	0, 15, cr0, cr3, cr2, {0}
	switch (level) {	// Turn them on.
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	08005090 	stmdaeq	r0, {r4, r7, ip, lr}
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
  7c:	00000348 	andeq	r0, r0, r8, asr #6
	...
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
		default: return;
	}
	mDelay(100);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	6b500002 	blvs	140009c <__Stack_Size+0x13ffc9c>
  90:	00040000 	andeq	r0, r4, r0
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
  94:	00000000 	andeq	r0, r0, r0
  98:	080053d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, lr}
  9c:	00000480 	andeq	r0, r0, r0, lsl #9
	...
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
		default: return;
	}
	mDelay(100);
}
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
		default: return;
	}
	mDelay(100);
  ac:	74c90002 	strbvc	r0, [r9], #2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	08005858 	stmdaeq	r0, {r3, r4, r6, fp, ip, lr}
  bc:	00000268 	andeq	r0, r0, r8, ror #4
	...
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	7c9e0002 	ldcvc	0, cr0, [lr], {2}
  d0:	00040000 	andeq	r0, r4, r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
  dc:	00000330 	andeq	r0, r0, r0, lsr r3
	...
  e8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ec:	86f70002 	ldrbthi	r0, [r7], r2
  f0:	00040000 	andeq	r0, r4, r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	08005df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip, lr}
  fc:	000000c8 	andeq	r0, r0, r8, asr #1
	...
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	8a160002 	bhi	58011c <__Stack_Size+0x57fd1c>
 110:	00040000 	andeq	r0, r4, r0
 114:	00000000 	andeq	r0, r0, r0
 118:	08005eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip, lr}
 11c:	00000338 	andeq	r0, r0, r8, lsr r3
	...
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	934f0002 	movtls	r0, #61442	; 0xf002
 130:	00040000 	andeq	r0, r4, r0
 134:	00000000 	andeq	r0, r0, r0
 138:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
 13c:	0000008c 	andeq	r0, r0, ip, lsl #1
	...
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	959f0002 	ldrls	r0, [pc, #2]	; 156 <_Minimum_Stack_Size+0x56>
 150:	00040000 	andeq	r0, r4, r0
 154:	00000000 	andeq	r0, r0, r0
 158:	0800627c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, lr}
 15c:	00000348 	andeq	r0, r0, r8, asr #6
	...
 168:	0000001c 	andeq	r0, r0, ip, lsl r0
 16c:	a0ab0002 	adcge	r0, fp, r2
 170:	00040000 	andeq	r0, r4, r0
 174:	00000000 	andeq	r0, r0, r0
 178:	080065c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp, lr}
 17c:	0000006e 	andeq	r0, r0, lr, rrx
	...
 188:	0000001c 	andeq	r0, r0, ip, lsl r0
 18c:	a1200002 	teqge	r0, r2
 190:	00040000 	andeq	r0, r4, r0
 194:	00000000 	andeq	r0, r0, r0
 198:	08006634 	stmdaeq	r0, {r2, r4, r5, r9, sl, sp, lr}
 19c:	00000050 	andeq	r0, r0, r0, asr r0
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
	mDelay(50);
	end();
	return 0;
}

void blinky(uint8 level) {
       0:	000005f9 	strdeq	r0, [r0], -r9
       4:	00000002 	andeq	r0, r0, r2
	// Turn them all off first.
	SetLED(MANAGE, 0);
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	SetLED(TXD, 0);
       c:	00000211 	andeq	r0, r0, r1, lsl r2
      10:	00029101 	andeq	r9, r2, r1, lsl #2
	SetLED(PROGRAM, 0);
      14:	00018b00 	andeq	r8, r1, r0, lsl #22
	...
	SetLED(RXD, 0);
	SetLED(PLAY, 0);
      28:	07040200 	streq	r0, [r4, -r0, lsl #4]
	SetLED(AUX, 0);
      2c:	000000d3 	ldrdeq	r0, [r0], -r3
      30:	5b060102 	blpl	180440 <__Stack_Size+0x180040>
	switch (level) {	// Turn them on.
      34:	02000001 	andeq	r0, r0, #1
      38:	01590801 	cmpeq	r9, r1, lsl #16
      3c:	02020000 	andeq	r0, r2, #0
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      40:	00002505 	andeq	r2, r0, r5, lsl #10
      44:	07020200 	streq	r0, [r2, -r0, lsl #4]
      48:	000001c4 	andeq	r0, r0, r4, asr #3
      4c:	69050403 	stmdbvs	r5, {r0, r1, sl}
	SetLED(PROGRAM, 0);
	SetLED(RXD, 0);
	SetLED(PLAY, 0);
	SetLED(AUX, 0);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
      50:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
      54:	00bb0508 	adcseq	r0, fp, r8, lsl #10
      58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
      5c:	0000c907 	andeq	ip, r0, r7, lsl #18
      60:	05040200 	streq	r0, [r4, #-512]	; 0x200
      64:	000000c0 	andeq	r0, r0, r0, asr #1
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      68:	2f070402 	svccs	0x00070402
		default: return;
	}
	mDelay(100);
      6c:	02000000 	andeq	r0, r0, #0
	switch (level) {	// Turn them on.
      70:	00ce0704 	sbceq	r0, lr, r4, lsl #14
      74:	01020000 	mrseq	r0, (UNDEF: 2)
      78:	00016208 	andeq	r6, r1, r8, lsl #4
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      7c:	83040400 	movwhi	r0, #17408	; 0x4400
      80:	05000000 	streq	r0, [r0, #-0]
      84:	00000076 	andeq	r0, r0, r6, ror r0
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
		default: return;
	}
	mDelay(100);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
      88:	00014606 	andeq	r4, r1, r6, lsl #12
      8c:	370c0200 	strcc	r0, [ip, -r0, lsl #4]
      90:	06000000 	streq	r0, [r0], -r0
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
      94:	00000072 	andeq	r0, r0, r2, ror r0
      98:	00450d02 	subeq	r0, r5, r2, lsl #26
      9c:	05060000 	streq	r0, [r6, #-0]
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      a0:	02000002 	andeq	r0, r0, #2
		default: return;
	}
	mDelay(100);
      a4:	00006f0e 	andeq	r6, r0, lr, lsl #30
}
      a8:	02020700 	andeq	r0, r2, #0
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
		default: return;
	}
	mDelay(100);
      ac:	0001074d 	andeq	r0, r1, sp, asr #14
      b0:	00e00800 	rsceq	r0, r0, r0, lsl #16
      b4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
      b8:	00000090 	muleq	r0, r0, r0
      bc:	026f0802 	rsbeq	r0, pc, #131072	; 0x20000
      c0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
      c4:	000000fc 	strdeq	r0, [r0], -ip
      c8:	003f0808 	eorseq	r0, pc, r8, lsl #16
      cc:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
      d0:	000000ad 	andeq	r0, r0, sp, lsr #1
      d4:	02850820 	addeq	r0, r5, #2097152	; 0x200000
      d8:	00c00000 	sbceq	r0, r0, r0
      dc:	0001b508 	andeq	fp, r1, r8, lsl #10
      e0:	08018000 	stmdaeq	r1, {pc}
      e4:	00000051 	andeq	r0, r0, r1, asr r0
      e8:	81080280 	smlabbhi	r8, r0, r2, r0
      ec:	80000000 	andhi	r0, r0, r0
      f0:	01180804 	tsteq	r8, r4, lsl #16
      f4:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
      f8:	00013808 	andeq	r3, r1, r8, lsl #16
      fc:	08108000 	ldmdaeq	r0, {pc}
     100:	00000108 	andeq	r0, r0, r8, lsl #2
     104:	09002080 	stmdbeq	r0, {r7, sp}
     108:	0000014c 	andeq	r0, r0, ip, asr #2
     10c:	01100201 	tsteq	r0, r1, lsl #4
     110:	0000013f 	andeq	r0, r0, pc, lsr r1
     114:	0001f108 	andeq	pc, r1, r8, lsl #2
     118:	b2080000 	andlt	r0, r8, #0
     11c:	01000015 	tsteq	r0, r5, lsl r0
     120:	0001fd08 	andeq	pc, r1, r8, lsl #26
     124:	0c080200 	sfmeq	f0, 4, [r8], {-0}
     128:	03000002 	movweq	r0, #2
     12c:	4458540a 	ldrbmi	r5, [r8], #-1034	; 0x40a
     130:	520a0400 	andpl	r0, sl, #0
     134:	05004458 	streq	r4, [r0, #-1112]	; 0x458
     138:	5855410a 	ldmdapl	r5, {r1, r3, r8, lr}^
     13c:	0b000600 	bleq	1944 <__Stack_Size+0x1544>
     140:	00000173 	andeq	r0, r0, r3, ror r1
     144:	07011802 	streq	r1, [r1, -r2, lsl #16]
     148:	0c000001 	stceq	0, cr0, [r0], {1}
     14c:	00004c01 	andeq	r4, r0, r1, lsl #24
     150:	01060100 	mrseq	r0, (UNDEF: 22)
     154:	0000004c 	andeq	r0, r0, ip, asr #32
     158:	08006684 	stmdaeq	r0, {r2, r7, r9, sl, sp, lr}
     15c:	08006724 	stmdaeq	r0, {r2, r5, r8, r9, sl, sp, lr}
     160:	00000000 	andeq	r0, r0, r0
     164:	0002e101 	andeq	lr, r2, r1, lsl #2
     168:	00690d00 	rsbeq	r0, r9, r0, lsl #26
     16c:	004c0801 	subeq	r0, ip, r1, lsl #16
     170:	00200000 	eoreq	r0, r0, r0
     174:	8a0e0000 	bhi	38017c <__Stack_Size+0x37fd7c>
     178:	ed080066 	stc	0, cr0, [r8, #-408]	; 0xfffffe68
     17c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     180:	0800668e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, sp, lr}
     184:	000004f8 	strdeq	r0, [r0], -r8
     188:	0066920e 	rsbeq	r9, r6, lr, lsl #4
     18c:	00050208 	andeq	r0, r5, r8, lsl #4
     190:	669a0f00 	ldrvs	r0, [sl], r0, lsl #30
     194:	050c0800 	streq	r0, [ip, #-2048]	; 0x800
     198:	01a60000 			; <UNDEFINED> instruction: 0x01a60000
     19c:	01100000 	tsteq	r0, r0
     1a0:	f40a0350 	vst2.16	{d0-d3}, [sl :64], r0
     1a4:	a40e0001 	strge	r0, [lr], #-1
     1a8:	21080066 	tstcs	r8, r6, rrx
     1ac:	0f000005 	svceq	0x00000005
     1b0:	080066b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, sp, lr}
     1b4:	0000050c 	andeq	r0, r0, ip, lsl #10
     1b8:	000001c4 	andeq	r0, r0, r4, asr #3
     1bc:	03500110 	cmpeq	r0, #4
     1c0:	0003e80a 	andeq	lr, r3, sl, lsl #16
     1c4:	0066b60f 	rsbeq	fp, r6, pc, lsl #12
     1c8:	00053508 	andeq	r3, r5, r8, lsl #10
     1cc:	0001db00 	andeq	sp, r1, r0, lsl #22
     1d0:	50011000 	andpl	r1, r1, r0
     1d4:	67b60305 	ldrvs	r0, [r6, r5, lsl #6]!
     1d8:	0f000800 	svceq	0x00000800
     1dc:	080066be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, sp, lr}
     1e0:	0000054e 	andeq	r0, r0, lr, asr #10
     1e4:	000001f4 	strdeq	r0, [r0], -r4
     1e8:	02510110 	subseq	r0, r1, #4
     1ec:	01102408 	tsteq	r0, r8, lsl #8
     1f0:	00330150 	eorseq	r0, r3, r0, asr r1
     1f4:	0066c20e 	rsbeq	ip, r6, lr, lsl #4
     1f8:	00056c08 	andeq	r6, r5, r8, lsl #24
     1fc:	66c80f00 	strbvs	r0, [r8], r0, lsl #30
     200:	05350800 	ldreq	r0, [r5, #-2048]!	; 0x800
     204:	02140000 	andseq	r0, r4, #0
     208:	01100000 	tsteq	r0, r0
     20c:	de030550 	cfrshl32le	mvfx3, mvfx0, r0
     210:	00080067 	andeq	r0, r8, r7, rrx
     214:	0066d00f 	rsbeq	sp, r6, pc
     218:	00058108 	andeq	r8, r5, r8, lsl #2
     21c:	00022c00 	andeq	r2, r2, r0, lsl #24
     220:	51011000 	mrspl	r1, (UNDEF: 1)
     224:	01103001 	tsteq	r0, r1
     228:	003b0150 	eorseq	r0, fp, r0, asr r1
     22c:	0066d60f 	rsbeq	sp, r6, pc, lsl #12
     230:	0005a108 	andeq	sl, r5, r8, lsl #2
     234:	00024300 	andeq	r4, r2, r0, lsl #6
     238:	50011000 	andpl	r1, r1, r0
     23c:	67f50305 	ldrbvs	r0, [r5, r5, lsl #6]!
     240:	0f000800 	svceq	0x00000800
     244:	080066dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, sp, lr}
     248:	00000535 	andeq	r0, r0, r5, lsr r5
     24c:	0000025a 	andeq	r0, r0, sl, asr r2
     250:	05500110 	ldrbeq	r0, [r0, #-272]	; 0x110
     254:	0067fa03 	rsbeq	pc, r7, r3, lsl #20
     258:	e60f0008 	str	r0, [pc], -r8
     25c:	ba080066 	blt	2003fc <__Stack_Size+0x1ffffc>
     260:	74000005 	strvc	r0, [r0], #-5
     264:	10000002 	andne	r0, r0, r2
     268:	0a035101 	beq	d4674 <__Stack_Size+0xd4274>
     26c:	01100280 	tsteq	r0, r0, lsl #5
     270:	00330150 	eorseq	r0, r3, r0, asr r1
     274:	0066ea0e 	rsbeq	lr, r6, lr, lsl #20
     278:	0005d308 	andeq	sp, r5, r8, lsl #6
     27c:	66f00f00 	ldrbtvs	r0, [r0], r0, lsl #30
     280:	05350800 	ldreq	r0, [r5, #-2048]!	; 0x800
     284:	02940000 	addseq	r0, r4, #0
     288:	01100000 	tsteq	r0, r0
     28c:	2a030550 	bcs	c17d4 <__Stack_Size+0xc13d4>
     290:	00080068 	andeq	r0, r8, r8, rrx
     294:	0066f80f 	rsbeq	pc, r6, pc, lsl #16
     298:	00058108 	andeq	r8, r5, r8, lsl #2
     29c:	0002ac00 	andeq	sl, r2, r0, lsl #24
     2a0:	51011000 	mrspl	r1, (UNDEF: 1)
     2a4:	01103101 	tsteq	r0, r1, lsl #2
     2a8:	00330150 	eorseq	r0, r3, r0, asr r1
     2ac:	0066fe0f 	rsbeq	pc, r6, pc, lsl #28
     2b0:	0005a108 	andeq	sl, r5, r8, lsl #2
     2b4:	0002c300 	andeq	ip, r2, r0, lsl #6
     2b8:	50011000 	andpl	r1, r1, r0
     2bc:	684e0305 	stmdavs	lr, {r0, r2, r8, r9}^
     2c0:	0f000800 	svceq	0x00000800
     2c4:	08006704 	stmdaeq	r0, {r2, r8, r9, sl, sp, lr}
     2c8:	0000050c 	andeq	r0, r0, ip, lsl #10
     2cc:	000002d7 	ldrdeq	r0, [r0], -r7
     2d0:	02500110 	subseq	r0, r0, #4
     2d4:	0e003208 	cdpeq	2, 0, cr3, cr0, cr8, {0}
     2d8:	08006708 	stmdaeq	r0, {r3, r8, r9, sl, sp, lr}
     2dc:	000005dd 	ldrdeq	r0, [r0], -sp
     2e0:	1e011100 	adfnes	f1, f1, f0
     2e4:	01000000 	mrseq	r0, (UNDEF: 0)
     2e8:	00000120 	andeq	r0, r0, r0, lsr #2
     2ec:	00000000 	andeq	r0, r0, r0
     2f0:	003f0000 	eorseq	r0, pc, r0
     2f4:	6f010000 	svcvs	0x00010000
     2f8:	12000004 	andne	r0, r0, #4
     2fc:	00000269 	andeq	r0, r0, r9, ror #4
     300:	00882001 	addeq	r2, r8, r1
     304:	005f0000 	subseq	r0, pc, r0
     308:	000f0000 	andeq	r0, pc, r0
     30c:	e7000000 	str	r0, [r0, -r0]
     310:	22000005 	andcs	r0, r0, #5
     314:	10000003 	andne	r0, r0, r3
     318:	30015101 	andcc	r5, r1, r1, lsl #2
     31c:	01500110 	cmpeq	r0, r0, lsl r1
     320:	000f0031 	andeq	r0, pc, r1, lsr r0	; <UNPREDICTABLE>
     324:	e7000000 	str	r0, [r0, -r0]
     328:	3a000005 	bcc	344 <_Minimum_Stack_Size+0x244>
     32c:	10000003 	andne	r0, r0, r3
     330:	30015101 	andcc	r5, r1, r1, lsl #2
     334:	01500110 	cmpeq	r0, r0, lsl r1
     338:	000f0034 	andeq	r0, pc, r4, lsr r0	; <UNPREDICTABLE>
     33c:	e7000000 	str	r0, [r0, -r0]
     340:	52000005 	andpl	r0, r0, #5
     344:	10000003 	andne	r0, r0, r3
     348:	30015101 	andcc	r5, r1, r1, lsl #2
     34c:	01500110 	cmpeq	r0, r0, lsl r1
     350:	000f0032 	andeq	r0, pc, r2, lsr r0	; <UNPREDICTABLE>
     354:	e7000000 	str	r0, [r0, -r0]
     358:	6a000005 	bvs	374 <_Minimum_Stack_Size+0x274>
     35c:	10000003 	andne	r0, r0, r3
     360:	30015101 	andcc	r5, r1, r1, lsl #2
     364:	01500110 	cmpeq	r0, r0, lsl r1
     368:	000f0035 	andeq	r0, pc, r5, lsr r0	; <UNPREDICTABLE>
     36c:	e7000000 	str	r0, [r0, -r0]
     370:	82000005 	andhi	r0, r0, #5
     374:	10000003 	andne	r0, r0, r3
     378:	30015101 	andcc	r5, r1, r1, lsl #2
     37c:	01500110 	cmpeq	r0, r0, lsl r1
     380:	000f0033 	andeq	r0, pc, r3, lsr r0	; <UNPREDICTABLE>
     384:	e7000000 	str	r0, [r0, -r0]
     388:	9a000005 	bls	3a4 <_Minimum_Stack_Size+0x2a4>
     38c:	10000003 	andne	r0, r0, r3
     390:	30015101 	andcc	r5, r1, r1, lsl #2
     394:	01500110 	cmpeq	r0, r0, lsl r1
     398:	000f0036 	andeq	r0, pc, r6, lsr r0	; <UNPREDICTABLE>
     39c:	e7000000 	str	r0, [r0, -r0]
     3a0:	b3000005 	movwlt	r0, #5
     3a4:	10000003 	andne	r0, r0, r3
     3a8:	74025101 	strvc	r5, [r2], #-257	; 0x101
     3ac:	50011000 	andpl	r1, r1, r0
     3b0:	0f003301 	svceq	0x00003301
     3b4:	00000000 	andeq	r0, r0, r0
     3b8:	000005e7 	andeq	r0, r0, r7, ror #11
     3bc:	000003cb 	andeq	r0, r0, fp, asr #7
     3c0:	01510110 	cmpeq	r1, r0, lsl r1
     3c4:	50011031 	andpl	r1, r1, r1, lsr r0
     3c8:	0f003101 	svceq	0x00003101
     3cc:	00000000 	andeq	r0, r0, r0
     3d0:	000005e7 	andeq	r0, r0, r7, ror #11
     3d4:	000003e4 	andeq	r0, r0, r4, ror #7
     3d8:	01510110 	cmpeq	r1, r0, lsl r1
     3dc:	50011031 	andpl	r1, r1, r1, lsr r0
     3e0:	00007402 	andeq	r7, r0, r2, lsl #8
     3e4:	0000000e 	andeq	r0, r0, lr
     3e8:	0005e700 	andeq	lr, r5, r0, lsl #14
     3ec:	00000f00 	andeq	r0, r0, r0, lsl #30
     3f0:	050c0000 	streq	r0, [ip, #-0]
     3f4:	04010000 	streq	r0, [r1], #-0
     3f8:	01100000 	tsteq	r0, r0
     3fc:	64080250 	strvs	r0, [r8], #-592	; 0x250
     400:	00000f00 	andeq	r0, r0, r0, lsl #30
     404:	05e70000 	strbeq	r0, [r7, #0]!
     408:	04190000 	ldreq	r0, [r9], #-0
     40c:	01100000 	tsteq	r0, r0
     410:	10300151 	eorsne	r0, r0, r1, asr r1
     414:	33015001 	movwcc	r5, #4097	; 0x1001
     418:	00000f00 	andeq	r0, r0, r0, lsl #30
     41c:	05e70000 	strbeq	r0, [r7, #0]!
     420:	04310000 	ldrteq	r0, [r1], #-0
     424:	01100000 	tsteq	r0, r0
     428:	10300151 	eorsne	r0, r0, r1, asr r1
     42c:	31015001 	tstcc	r1, r1
     430:	00000f00 	andeq	r0, r0, r0, lsl #30
     434:	05e70000 	strbeq	r0, [r7, #0]!
     438:	044a0000 	strbeq	r0, [sl], #-0
     43c:	01100000 	tsteq	r0, r0
     440:	10300151 	eorsne	r0, r0, r1, asr r1
     444:	74025001 	strvc	r5, [r2], #-1
     448:	000f0000 	andeq	r0, pc, r0
     44c:	e7000000 	str	r0, [r0, -r0]
     450:	5d000005 	stcpl	0, cr0, [r0, #-20]	; 0xffffffec
     454:	10000004 	andne	r0, r0, r4
     458:	30015101 	andcc	r5, r1, r1, lsl #2
     45c:	00001300 	andeq	r1, r0, r0, lsl #6
     460:	0c010000 	stceq	0, cr0, [r1], {-0}
     464:	10000005 	andne	r0, r0, r5
     468:	08025001 	stmdaeq	r2, {r0, ip, lr}
     46c:	14000064 	strne	r0, [r0], #-100	; 0x64
     470:	00000088 	andeq	r0, r0, r8, lsl #1
     474:	0000047f 	andeq	r0, r0, pc, ror r4
     478:	00006815 	andeq	r6, r0, r5, lsl r8
     47c:	16009f00 	strne	r9, [r0], -r0, lsl #30
     480:	0000000a 	andeq	r0, r0, sl
     484:	6f017102 	svcvs	0x00017102
     488:	14000004 	strne	r0, [r0], #-4
     48c:	00000088 	andeq	r0, r0, r8, lsl #1
     490:	0000049b 	muleq	r0, fp, r4
     494:	00006815 	andeq	r6, r0, r5, lsl r8
     498:	16004500 	strne	r4, [r0], -r0, lsl #10
     49c:	0000025a 	andeq	r0, r0, sl, asr r2
     4a0:	8b017202 	blhi	5ccb0 <__Stack_Size+0x5c8b0>
     4a4:	16000004 	strne	r0, [r0], -r4
     4a8:	00000127 	andeq	r0, r0, r7, lsr #2
     4ac:	88017302 	stmdahi	r1, {r1, r8, r9, ip, sp, lr}
     4b0:	16000000 	strne	r0, [r0], -r0
     4b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     4b8:	88017402 	stmdahi	r1, {r1, sl, ip, sp, lr}
     4bc:	17000000 	strne	r0, [r0, -r0]
     4c0:	000000ef 	andeq	r0, r0, pc, ror #1
     4c4:	d1017602 	tstle	r1, r2, lsl #12
     4c8:	05000004 	streq	r0, [r0, #-4]
     4cc:	00000003 	andeq	r0, r0, r3
     4d0:	00931800 	addseq	r1, r3, r0, lsl #16
     4d4:	a0170000 	andsge	r0, r7, r0
     4d8:	02000002 	andeq	r0, r0, #2
     4dc:	04e80177 	strbteq	r0, [r8], #375	; 0x177
     4e0:	03050000 	movweq	r0, #20480	; 0x5000
     4e4:	00000000 	andeq	r0, r0, r0
     4e8:	00008818 	andeq	r8, r0, r8, lsl r8
     4ec:	79011900 	stmdbvc	r1, {r8, fp, ip}
     4f0:	03000000 	movweq	r0, #0
     4f4:	0101014e 	tsteq	r1, lr, asr #2
     4f8:	0060011a 	rsbeq	r0, r0, sl, lsl r1
     4fc:	5f030000 	svcpl	0x00030000
     500:	011a0101 	tsteq	sl, r1, lsl #2
     504:	00000069 	andeq	r0, r0, r9, rrx
     508:	01016803 	tsteq	r1, r3, lsl #16
     50c:	0152011b 	cmpeq	r2, fp, lsl r1
     510:	54030000 	strpl	r0, [r3], #-0
     514:	21010101 	tstcs	r1, r1, lsl #2
     518:	1c000005 	stcne	0, cr0, [r0], {5}
     51c:	0000009e 	muleq	r0, lr, r0
     520:	1b011d00 	blne	47928 <__Stack_Size+0x47528>
     524:	03000016 	movweq	r0, #22
     528:	3501016b 	strcc	r0, [r1, #-363]	; 0x16b
     52c:	1c000005 	stcne	0, cr0, [r0], {5}
     530:	00000088 	andeq	r0, r0, r8, lsl #1
     534:	7b011e00 	blvc	47d3c <__Stack_Size+0x4793c>
     538:	03000002 	movweq	r0, #2
     53c:	4c010121 	stfmis	f0, [r1], {33}	; 0x21
     540:	01000000 	mrseq	r0, (UNDEF: 0)
     544:	0000054e 	andeq	r0, r0, lr, asr #10
     548:	00007d1c 	andeq	r7, r0, ip, lsl sp
     54c:	011e0000 	tsteq	lr, r0
     550:	000001e3 	andeq	r0, r0, r3, ror #3
     554:	01010d03 	tsteq	r1, r3, lsl #26
     558:	00000093 	muleq	r0, r3, r0
     55c:	00056c01 	andeq	r6, r5, r1, lsl #24
     560:	00881c00 	addeq	r1, r8, r0, lsl #24
     564:	881c0000 	ldmdahi	ip, {}	; <UNPREDICTABLE>
     568:	00000000 	andeq	r0, r0, r0
     56c:	0000011b 	andeq	r0, r0, fp, lsl r1
     570:	27030000 	strcs	r0, [r3, -r0]
     574:	81010101 	tsthi	r1, r1, lsl #2
     578:	1c000005 	stcne	0, cr0, [r0], {5}
     57c:	00000093 	muleq	r0, r3, r0
     580:	79011d00 	stmdbvc	r1, {r8, sl, fp, ip}
     584:	03000001 	movweq	r0, #1
     588:	9a0101ca 	bls	40cb8 <__Stack_Size+0x408b8>
     58c:	1c000005 	stcne	0, cr0, [r0], {5}
     590:	00000088 	andeq	r0, r0, r8, lsl #1
     594:	00059a1c 	andeq	r9, r5, ip, lsl sl
     598:	01020000 	mrseq	r0, (UNDEF: 2)
     59c:	0001f702 	andeq	pc, r1, r2, lsl #14
     5a0:	67011e00 	strvs	r1, [r1, -r0, lsl #28]
     5a4:	03000001 	movweq	r0, #1
     5a8:	4c010122 	stfmis	f0, [r1], {34}	; 0x22
     5ac:	01000000 	mrseq	r0, (UNDEF: 0)
     5b0:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
     5b4:	00007d1c 	andeq	r7, r0, ip, lsl sp
     5b8:	011d0000 	tsteq	sp, r0
     5bc:	000002ab 	andeq	r0, r0, fp, lsr #5
     5c0:	0101c703 	tsteq	r1, r3, lsl #14
     5c4:	000005d3 	ldrdeq	r0, [r0], -r3
     5c8:	0000881c 	andeq	r8, r0, ip, lsl r8
     5cc:	004c1c00 	subeq	r1, ip, r0, lsl #24
     5d0:	1a000000 	bne	5d8 <__Stack_Size+0x1d8>
     5d4:	0001d701 	andeq	sp, r1, r1, lsl #14
     5d8:	016d0300 	cmneq	sp, r0, lsl #6
     5dc:	65011f01 	strvs	r1, [r1, #-3841]	; 0xf01
     5e0:	0300646e 	movweq	r6, #1134	; 0x46e
     5e4:	20010153 	andcs	r0, r1, r3, asr r1
     5e8:	00003801 	andeq	r3, r0, r1, lsl #16
     5ec:	01e30300 	mvneq	r0, r0, lsl #6
     5f0:	013f1c01 	teqeq	pc, r1, lsl #24
     5f4:	881c0000 	ldmdahi	ip, {}	; <UNPREDICTABLE>
     5f8:	00000000 	andeq	r0, r0, r0
     5fc:	00078d00 	andeq	r8, r7, r0, lsl #26
     600:	c5000200 	strgt	r0, [r0, #-512]	; 0x200
     604:	04000001 	streq	r0, [r0], #-1
     608:	00021101 	andeq	r1, r2, r1, lsl #2
     60c:	05f30100 	ldrbeq	r0, [r3, #256]!	; 0x100
     610:	018b0000 	orreq	r0, fp, r0
     614:	31340000 	teqcc	r4, r0
     618:	31c40800 	biccc	r0, r4, r0, lsl #16
     61c:	00ab0800 	adceq	r0, fp, r0, lsl #16
     620:	04020000 	streq	r0, [r2], #-0
     624:	0000d307 	andeq	sp, r0, r7, lsl #6
     628:	06010200 	streq	r0, [r1], -r0, lsl #4
     62c:	0000015b 	andeq	r0, r0, fp, asr r1
     630:	59080102 	stmdbpl	r8, {r1, r8}
     634:	02000001 	andeq	r0, r0, #1
     638:	00250502 	eoreq	r0, r5, r2, lsl #10
     63c:	02020000 	andeq	r0, r2, #0
     640:	0001c407 	andeq	ip, r1, r7, lsl #8
     644:	05040300 	streq	r0, [r4, #-768]	; 0x300
     648:	00746e69 	rsbseq	r6, r4, r9, ror #28
     64c:	bb050802 	bllt	14265c <__Stack_Size+0x14225c>
     650:	02000000 	andeq	r0, r0, #0
     654:	00c90708 	sbceq	r0, r9, r8, lsl #14
     658:	04020000 	streq	r0, [r2], #-0
     65c:	0000c005 	andeq	ip, r0, r5
     660:	07040200 	streq	r0, [r4, -r0, lsl #4]
     664:	0000002f 	andeq	r0, r0, pc, lsr #32
     668:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
     66c:	02000000 	andeq	r0, r0, #0
     670:	01620801 	cmneq	r2, r1, lsl #16
     674:	46040000 	strmi	r0, [r4], -r0
     678:	02000001 	andeq	r0, r0, #1
     67c:	0000330c 	andeq	r3, r0, ip, lsl #6
     680:	00720400 	rsbseq	r0, r2, r0, lsl #8
     684:	0d020000 	stceq	0, cr0, [r2, #-0]
     688:	00000041 	andeq	r0, r0, r1, asr #32
     68c:	4d020205 	sfmmi	f0, 4, [r2, #-20]	; 0xffffffec
     690:	000000ed 	andeq	r0, r0, sp, ror #1
     694:	0000e006 	andeq	lr, r0, r6
     698:	90060100 	andls	r0, r6, r0, lsl #2
     69c:	02000000 	andeq	r0, r0, #0
     6a0:	00026f06 	andeq	r6, r2, r6, lsl #30
     6a4:	fc060400 	stc2	4, cr0, [r6], {-0}
     6a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     6ac:	00003f06 	andeq	r3, r0, r6, lsl #30
     6b0:	ad061000 	stcge	0, cr1, [r6, #-0]
     6b4:	20000000 	andcs	r0, r0, r0
     6b8:	00028506 	andeq	r8, r2, r6, lsl #10
     6bc:	0600c000 	streq	ip, [r0], -r0
     6c0:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     6c4:	51060180 	smlabbpl	r6, r0, r1, r0
     6c8:	80000000 	andhi	r0, r0, r0
     6cc:	00810602 	addeq	r0, r1, r2, lsl #12
     6d0:	04800000 	streq	r0, [r0], #0
     6d4:	00011806 	andeq	r1, r1, r6, lsl #16
     6d8:	06088000 	streq	r8, [r8], -r0
     6dc:	00000138 	andeq	r0, r0, r8, lsr r1
     6e0:	08061080 	stmdaeq	r6, {r7, ip}
     6e4:	80000001 	andhi	r0, r0, r1
     6e8:	01070020 	tsteq	r7, r0, lsr #32
     6ec:	0000071c 	andeq	r0, r0, ip, lsl r7
     6f0:	34012e01 	strcc	r2, [r1], #-3585	; 0xe01
     6f4:	36080031 			; <UNDEFINED> instruction: 0x36080031
     6f8:	02080031 	andeq	r0, r8, #49	; 0x31
     6fc:	0701007d 	smlsdxeq	r1, sp, r0, r0
     700:	0005a501 	andeq	sl, r5, r1, lsl #10
     704:	01380100 	teqeq	r8, r0, lsl #2
     708:	08003136 	stmdaeq	r0, {r1, r2, r4, r5, r8, ip, sp}
     70c:	08003138 	stmdaeq	r0, {r3, r4, r5, r8, ip, sp}
     710:	01007d02 	tsteq	r0, r2, lsl #26
     714:	08070107 	stmdaeq	r7, {r0, r1, r2, r8}
     718:	45010000 	strmi	r0, [r1, #-0]
     71c:	00313801 	eorseq	r3, r1, r1, lsl #16
     720:	00313a08 	eorseq	r3, r1, r8, lsl #20
     724:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     728:	ce010701 	cdpgt	7, 0, cr0, cr1, cr1, {0}
     72c:	01000003 	tsteq	r0, r3
     730:	313a0152 	teqcc	sl, r2, asr r1
     734:	313c0800 	teqcc	ip, r0, lsl #16
     738:	7d020800 	stcvc	8, cr0, [r2, #-0]
     73c:	01070100 	mrseq	r0, (UNDEF: 23)
     740:	000002f8 	strdeq	r0, [r0], -r8
     744:	3c015e01 	stccc	14, cr5, [r1], {1}
     748:	3e080031 	mcrcc	0, 0, r0, cr8, cr1, {1}
     74c:	02080031 	andeq	r0, r8, #49	; 0x31
     750:	0701007d 	smlsdxeq	r1, sp, r0, r0
     754:	0006c801 	andeq	ip, r6, r1, lsl #16
     758:	016b0100 	cmneq	fp, r0, lsl #2
     75c:	0800313e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, ip, sp}
     760:	08003140 	stmdaeq	r0, {r6, r8, ip, sp}
     764:	01007d02 	tsteq	r0, r2, lsl #26
     768:	05160107 	ldreq	r0, [r6, #-263]	; 0x107
     76c:	75010000 	strvc	r0, [r1, #-0]
     770:	00314001 	eorseq	r4, r1, r1
     774:	00314208 	eorseq	r4, r1, r8, lsl #4
     778:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     77c:	02010701 	andeq	r0, r1, #262144	; 0x40000
     780:	01000007 	tsteq	r0, r7
     784:	3142017f 	hvccc	8223	; 0x201f
     788:	31440800 	cmpcc	r4, r0, lsl #16
     78c:	7d020800 	stcvc	8, cr0, [r2, #-0]
     790:	01080100 	mrseq	r0, (UNDEF: 24)
     794:	00000760 	andeq	r0, r0, r0, ror #14
     798:	44018901 	strmi	r8, [r1], #-2305	; 0x901
     79c:	48080031 	stmdami	r8, {r0, r4, r5}
     7a0:	02080031 	andeq	r0, r8, #49	; 0x31
     7a4:	b901007d 	stmdblt	r1, {r0, r2, r3, r4, r5, r6}
     7a8:	09000001 	stmdbeq	r0, {r0}
     7ac:	08003148 	stmdaeq	r0, {r3, r6, r8, ip, sp}
     7b0:	00077201 	andeq	r7, r7, r1, lsl #4
     7b4:	01070000 	mrseq	r0, (UNDEF: 7)
     7b8:	0000060a 	andeq	r0, r0, sl, lsl #12
     7bc:	48019401 	stmdami	r1, {r0, sl, ip, pc}
     7c0:	4a080031 	bmi	20088c <__Stack_Size+0x20048c>
     7c4:	02080031 	andeq	r0, r8, #49	; 0x31
     7c8:	0701007d 	smlsdxeq	r1, sp, r0, r0
     7cc:	0004dd01 	andeq	sp, r4, r1, lsl #26
     7d0:	019e0100 	orrseq	r0, lr, r0, lsl #2
     7d4:	0800314a 	stmdaeq	r0, {r1, r3, r6, r8, ip, sp}
     7d8:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
     7dc:	01007d02 	tsteq	r0, r2, lsl #26
     7e0:	070a0107 	streq	r0, [sl, -r7, lsl #2]
     7e4:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
     7e8:	00314c01 	eorseq	r4, r1, r1, lsl #24
     7ec:	00314e08 	eorseq	r4, r1, r8, lsl #28
     7f0:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     7f4:	35010701 	strcc	r0, [r1, #-1793]	; 0x701
     7f8:	01000003 	tsteq	r0, r3
     7fc:	314e01b2 	strhcc	r0, [lr, #-18]	; 0xffffffee
     800:	31500800 	cmpcc	r0, r0, lsl #16
     804:	7d020800 	stcvc	8, cr0, [r2, #-0]
     808:	01070100 	mrseq	r0, (UNDEF: 23)
     80c:	00000647 	andeq	r0, r0, r7, asr #12
     810:	5001bc01 	andpl	fp, r1, r1, lsl #24
     814:	52080031 	andpl	r0, r8, #49	; 0x31
     818:	02080031 	andeq	r0, r8, #49	; 0x31
     81c:	0701007d 	smlsdxeq	r1, sp, r0, r0
     820:	0005b801 	andeq	fp, r5, r1, lsl #16
     824:	01c60100 	biceq	r0, r6, r0, lsl #2
     828:	08003152 	stmdaeq	r0, {r1, r4, r6, r8, ip, sp}
     82c:	08003154 	stmdaeq	r0, {r2, r4, r6, r8, ip, sp}
     830:	01007d02 	tsteq	r0, r2, lsl #26
     834:	05810107 	streq	r0, [r1, #263]	; 0x107
     838:	d0010000 	andle	r0, r1, r0
     83c:	00315401 	eorseq	r5, r1, r1, lsl #8
     840:	00315608 	eorseq	r5, r1, r8, lsl #12
     844:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     848:	b3010701 	movwlt	r0, #5889	; 0x1701
     84c:	01000004 	tsteq	r0, r4
     850:	315601da 	ldrsbcc	r0, [r6, #-26]	; 0xffffffe6
     854:	31580800 	cmpcc	r8, r0, lsl #16
     858:	7d020800 	stcvc	8, cr0, [r2, #-0]
     85c:	01070100 	mrseq	r0, (UNDEF: 23)
     860:	0000079d 	muleq	r0, sp, r7
     864:	5801e401 	stmdapl	r1, {r0, sl, sp, lr, pc}
     868:	5a080031 	bpl	200934 <__Stack_Size+0x200534>
     86c:	02080031 	andeq	r0, r8, #49	; 0x31
     870:	0701007d 	smlsdxeq	r1, sp, r0, r0
     874:	00052101 	andeq	r2, r5, r1, lsl #2
     878:	01ee0100 	mvneq	r0, r0, lsl #2
     87c:	0800315a 	stmdaeq	r0, {r1, r3, r4, r6, r8, ip, sp}
     880:	0800315c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp}
     884:	01007d02 	tsteq	r0, r2, lsl #26
     888:	05700107 	ldrbeq	r0, [r0, #-263]!	; 0x107
     88c:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
     890:	00315c01 	eorseq	r5, r1, r1, lsl #24
     894:	00315e08 	eorseq	r5, r1, r8, lsl #28
     898:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     89c:	84010a01 	strhi	r0, [r1], #-2561	; 0xa01
     8a0:	01000007 	tsteq	r0, r7
     8a4:	5e010102 	adfpls	f0, f1, f2
     8a8:	60080031 	andvs	r0, r8, r1, lsr r0
     8ac:	02080031 	andeq	r0, r8, #49	; 0x31
     8b0:	0a01007d 	beq	40aac <__Stack_Size+0x406ac>
     8b4:	0007ae01 	andeq	sl, r7, r1, lsl #28
     8b8:	010c0100 	mrseq	r0, (UNDEF: 28)
     8bc:	00316001 	eorseq	r6, r1, r1
     8c0:	00316208 	eorseq	r6, r1, r8, lsl #4
     8c4:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     8c8:	ee010a01 	vmla.f32	s0, s2, s2
     8cc:	01000007 	tsteq	r0, r7
     8d0:	62010116 	andvs	r0, r1, #-2147483643	; 0x80000005
     8d4:	64080031 	strvs	r0, [r8], #-49	; 0x31
     8d8:	02080031 	andeq	r0, r8, #49	; 0x31
     8dc:	0a01007d 	beq	40ad8 <__Stack_Size+0x406d8>
     8e0:	0002cd01 	andeq	ip, r2, r1, lsl #26
     8e4:	01200100 	teqeq	r0, r0, lsl #2
     8e8:	00316401 	eorseq	r6, r1, r1, lsl #8
     8ec:	00316608 	eorseq	r6, r1, r8, lsl #12
     8f0:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     8f4:	0c010a01 	stceq	10, cr0, [r1], {1}
     8f8:	01000003 	tsteq	r0, r3
     8fc:	6601012a 	strvs	r0, [r1], -sl, lsr #2
     900:	68080031 	stmdavs	r8, {r0, r4, r5}
     904:	02080031 	andeq	r0, r8, #49	; 0x31
     908:	0a01007d 	beq	40b04 <__Stack_Size+0x40704>
     90c:	0005c701 	andeq	ip, r5, r1, lsl #14
     910:	01340100 	teqeq	r4, r0, lsl #2
     914:	00316801 	eorseq	r6, r1, r1, lsl #16
     918:	00316a08 	eorseq	r6, r1, r8, lsl #20
     91c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     920:	1a010a01 	bne	4312c <__Stack_Size+0x42d2c>
     924:	01000006 	tsteq	r0, r6
     928:	6a01013e 	bvs	40e28 <__Stack_Size+0x40a28>
     92c:	6c080031 	stcvs	0, cr0, [r8], {49}	; 0x31
     930:	02080031 	andeq	r0, r8, #49	; 0x31
     934:	0a01007d 	beq	40b30 <__Stack_Size+0x40730>
     938:	00043c01 	andeq	r3, r4, r1, lsl #24
     93c:	01490100 	mrseq	r0, (UNDEF: 89)
     940:	00316c01 	eorseq	r6, r1, r1, lsl #24
     944:	00316e08 	eorseq	r6, r1, r8, lsl #28
     948:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     94c:	f0010a01 			; <UNDEFINED> instruction: 0xf0010a01
     950:	01000003 	tsteq	r0, r3
     954:	6e010154 	mcrvs	1, 0, r0, cr1, cr4, {2}
     958:	70080031 	andvc	r0, r8, r1, lsr r0
     95c:	02080031 	andeq	r0, r8, #49	; 0x31
     960:	0a01007d 	beq	40b5c <__Stack_Size+0x4075c>
     964:	0004fc01 	andeq	pc, r4, r1, lsl #24
     968:	015f0100 	cmpeq	pc, r0, lsl #2
     96c:	00317001 	eorseq	r7, r1, r1
     970:	00317208 	eorseq	r7, r1, r8, lsl #4
     974:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     978:	5d010a01 	vstrpl	s0, [r1, #-4]
     97c:	01000005 	tsteq	r0, r5
     980:	72010169 	andvc	r0, r1, #1073741850	; 0x4000001a
     984:	74080031 	strvc	r0, [r8], #-49	; 0x31
     988:	02080031 	andeq	r0, r8, #49	; 0x31
     98c:	0a01007d 	beq	40b88 <__Stack_Size+0x40788>
     990:	0007db01 	andeq	sp, r7, r1, lsl #22
     994:	01730100 	cmneq	r3, r0, lsl #2
     998:	00317401 	eorseq	r7, r1, r1, lsl #8
     99c:	00317608 	eorseq	r7, r1, r8, lsl #12
     9a0:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     9a4:	32010a01 	andcc	r0, r1, #4096	; 0x1000
     9a8:	01000005 	tsteq	r0, r5
     9ac:	7601017d 			; <UNDEFINED> instruction: 0x7601017d
     9b0:	78080031 	stmdavc	r8, {r0, r4, r5}
     9b4:	02080031 	andeq	r0, r8, #49	; 0x31
     9b8:	0a01007d 	beq	40bb4 <__Stack_Size+0x407b4>
     9bc:	00065801 	andeq	r5, r6, r1, lsl #16
     9c0:	01870100 	orreq	r0, r7, r0, lsl #2
     9c4:	00317801 	eorseq	r7, r1, r1, lsl #16
     9c8:	00317a08 	eorseq	r7, r1, r8, lsl #20
     9cc:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     9d0:	92010a01 	andls	r0, r1, #4096	; 0x1000
     9d4:	01000005 	tsteq	r0, r5
     9d8:	7a010192 	bvc	41028 <__Stack_Size+0x40c28>
     9dc:	7c080031 	stcvc	0, cr0, [r8], {49}	; 0x31
     9e0:	02080031 	andeq	r0, r8, #49	; 0x31
     9e4:	0a01007d 	beq	40be0 <__Stack_Size+0x407e0>
     9e8:	00068d01 	andeq	r8, r6, r1, lsl #26
     9ec:	019d0100 	orrseq	r0, sp, r0, lsl #2
     9f0:	00317c01 	eorseq	r7, r1, r1, lsl #24
     9f4:	00317e08 	eorseq	r7, r1, r8, lsl #28
     9f8:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     9fc:	19010a01 	stmdbne	r1, {r0, r9, fp}
     a00:	01000004 	tsteq	r0, r4
     a04:	7e0101a7 	adfvcdp	f0, f1, f7
     a08:	80080031 	andhi	r0, r8, r1, lsr r0
     a0c:	02080031 	andeq	r0, r8, #49	; 0x31
     a10:	0a01007d 	beq	40c0c <__Stack_Size+0x4080c>
     a14:	00032501 	andeq	r2, r3, r1, lsl #10
     a18:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
     a1c:	00318001 	eorseq	r8, r1, r1
     a20:	00318208 	eorseq	r8, r1, r8, lsl #4
     a24:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     a28:	44010a01 	strmi	r0, [r1], #-2561	; 0xa01
     a2c:	01000003 	tsteq	r0, r3
     a30:	820101bc 	andhi	r0, r1, #47	; 0x2f
     a34:	84080031 	strhi	r0, [r8], #-49	; 0x31
     a38:	02080031 	andeq	r0, r8, #49	; 0x31
     a3c:	0a01007d 	beq	40c38 <__Stack_Size+0x40838>
     a40:	00037701 	andeq	r7, r3, r1, lsl #14
     a44:	01c60100 	biceq	r0, r6, r0, lsl #2
     a48:	00318401 	eorseq	r8, r1, r1, lsl #8
     a4c:	00318608 	eorseq	r8, r1, r8, lsl #12
     a50:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     a54:	64010a01 	strvs	r0, [r1], #-2561	; 0xa01
     a58:	01000003 	tsteq	r0, r3
     a5c:	860101d0 			; <UNDEFINED> instruction: 0x860101d0
     a60:	88080031 	stmdahi	r8, {r0, r4, r5}
     a64:	02080031 	andeq	r0, r8, #49	; 0x31
     a68:	0a01007d 	beq	40c64 <__Stack_Size+0x40864>
     a6c:	0002ba01 	andeq	fp, r2, r1, lsl #20
     a70:	01da0100 	bicseq	r0, sl, r0, lsl #2
     a74:	00318801 	eorseq	r8, r1, r1, lsl #16
     a78:	00318a08 	eorseq	r8, r1, r8, lsl #20
     a7c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     a80:	78010a01 	stmdavc	r1, {r0, r9, fp}
     a84:	01000004 	tsteq	r0, r4
     a88:	8a0101e4 	bhi	41220 <__Stack_Size+0x40e20>
     a8c:	8c080031 	stchi	0, cr0, [r8], {49}	; 0x31
     a90:	02080031 	andeq	r0, r8, #49	; 0x31
     a94:	0a01007d 	beq	40c90 <__Stack_Size+0x40890>
     a98:	0006b501 	andeq	fp, r6, r1, lsl #10
     a9c:	01ee0100 	mvneq	r0, r0, lsl #2
     aa0:	00318c01 	eorseq	r8, r1, r1, lsl #24
     aa4:	00318e08 	eorseq	r8, r1, r8, lsl #28
     aa8:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     aac:	be010a01 	vmlalt.f32	s0, s2, s2
     ab0:	01000003 	tsteq	r0, r3
     ab4:	8e0101f8 	mcrhi	1, 0, r0, cr1, cr8, {7}
     ab8:	90080031 	andls	r0, r8, r1, lsr r0
     abc:	02080031 	andeq	r0, r8, #49	; 0x31
     ac0:	0a01007d 	beq	40cbc <__Stack_Size+0x408bc>
     ac4:	0003e001 	andeq	lr, r3, r1
     ac8:	02020100 	andeq	r0, r2, #0
     acc:	00319001 	eorseq	r9, r1, r1
     ad0:	00319208 	eorseq	r9, r1, r8, lsl #4
     ad4:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     ad8:	d5010b01 	strle	r0, [r1, #-2817]	; 0xb01
     adc:	01000006 	tsteq	r0, r6
     ae0:	9201020c 	andls	r0, r1, #-1073741824	; 0xc0000000
     ae4:	96080031 			; <UNDEFINED> instruction: 0x96080031
     ae8:	02080031 	andeq	r0, r8, #49	; 0x31
     aec:	0101007d 	tsteq	r1, sp, ror r0
     af0:	09000005 	stmdbeq	r0, {r0, r2}
     af4:	08003196 	stmdaeq	r0, {r1, r2, r4, r7, r8, ip, sp}
     af8:	00077c01 	andeq	r7, r7, r1, lsl #24
     afc:	010a0000 	mrseq	r0, (UNDEF: 10)
     b00:	0000073c 	andeq	r0, r0, ip, lsr r7
     b04:	01021901 	tsteq	r2, r1, lsl #18
     b08:	08003196 	stmdaeq	r0, {r1, r2, r4, r7, r8, ip, sp}
     b0c:	08003198 	stmdaeq	r0, {r3, r4, r7, r8, ip, sp}
     b10:	01007d02 	tsteq	r0, r2, lsl #26
     b14:	074e010b 	strbeq	r0, [lr, -fp, lsl #2]
     b18:	23010000 	movwcs	r0, #4096	; 0x1000
     b1c:	31980102 	orrscc	r0, r8, r2, lsl #2
     b20:	319c0800 	orrscc	r0, ip, r0, lsl #16
     b24:	7d020800 	stcvc	8, cr0, [r2, #-0]
     b28:	053c0100 	ldreq	r0, [ip, #-256]!	; 0x100
     b2c:	9c090000 	stcls	0, cr0, [r9], {-0}
     b30:	01080031 	tsteq	r8, r1, lsr r0
     b34:	00000786 	andeq	r0, r0, r6, lsl #15
     b38:	6f010a00 	svcvs	0x00010a00
     b3c:	01000007 	tsteq	r0, r7
     b40:	9c010230 	sfmls	f0, 4, [r1], {48}	; 0x30
     b44:	9e080031 	mcrls	0, 0, r0, cr8, cr1, {1}
     b48:	02080031 	andeq	r0, r8, #49	; 0x31
     b4c:	0a01007d 	beq	40d48 <__Stack_Size+0x40948>
     b50:	0007c701 	andeq	ip, r7, r1, lsl #14
     b54:	023a0100 	eorseq	r0, sl, #0
     b58:	00319e01 	eorseq	r9, r1, r1, lsl #28
     b5c:	0031a008 	eorseq	sl, r1, r8
     b60:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     b64:	99010a01 	stmdbls	r1, {r0, r9, fp}
     b68:	01000003 	tsteq	r0, r3
     b6c:	a0010244 	andge	r0, r1, r4, asr #4
     b70:	a2080031 	andge	r0, r8, #49	; 0x31
     b74:	02080031 	andeq	r0, r8, #49	; 0x31
     b78:	0a01007d 	beq	40d74 <__Stack_Size+0x40974>
     b7c:	00063301 	andeq	r3, r6, r1, lsl #6
     b80:	024e0100 	subeq	r0, lr, #0
     b84:	0031a201 	eorseq	sl, r1, r1, lsl #4
     b88:	0031a408 	eorseq	sl, r1, r8, lsl #8
     b8c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     b90:	29010a01 	stmdbcs	r1, {r0, r9, fp}
     b94:	01000007 	tsteq	r0, r7
     b98:	a4010259 	strge	r0, [r1], #-601	; 0x259
     b9c:	a6080031 			; <UNDEFINED> instruction: 0xa6080031
     ba0:	02080031 	andeq	r0, r8, #49	; 0x31
     ba4:	0a01007d 	beq	40da0 <__Stack_Size+0x409a0>
     ba8:	00054501 	andeq	r4, r5, r1, lsl #10
     bac:	02640100 	rsbeq	r0, r4, #0
     bb0:	0031a601 	eorseq	sl, r1, r1, lsl #12
     bb4:	0031a808 	eorseq	sl, r1, r8, lsl #16
     bb8:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     bbc:	e0010a01 	and	r0, r1, r1, lsl #20
     bc0:	01000005 	tsteq	r0, r5
     bc4:	a801026e 	stmdage	r1, {r1, r2, r3, r5, r6, r9}
     bc8:	aa080031 	bge	200c94 <__Stack_Size+0x200894>
     bcc:	02080031 	andeq	r0, r8, #49	; 0x31
     bd0:	0a01007d 	beq	40dcc <__Stack_Size+0x409cc>
     bd4:	00042c01 	andeq	r2, r4, r1, lsl #24
     bd8:	02780100 	rsbseq	r0, r8, #0
     bdc:	0031aa01 	eorseq	sl, r1, r1, lsl #20
     be0:	0031ac08 	eorseq	sl, r1, r8, lsl #24
     be4:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     be8:	54010a01 	strpl	r0, [r1], #-2561	; 0xa01
     bec:	01000003 	tsteq	r0, r3
     bf0:	ac010282 	sfmge	f0, 4, [r1], {130}	; 0x82
     bf4:	ae080031 	mcrge	0, 0, r0, cr8, cr1, {1}
     bf8:	02080031 	andeq	r0, r8, #49	; 0x31
     bfc:	0a01007d 	beq	40df8 <__Stack_Size+0x409f8>
     c00:	0004ec01 	andeq	lr, r4, r1, lsl #24
     c04:	028c0100 	addeq	r0, ip, #0
     c08:	0031ae01 	eorseq	sl, r1, r1, lsl #28
     c0c:	0031b008 	eorseq	fp, r1, r8
     c10:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     c14:	ae010a01 	vmlage.f32	s0, s2, s2
     c18:	01000003 	tsteq	r0, r3
     c1c:	b0010296 	mullt	r1, r6, r2
     c20:	b2080031 	andlt	r0, r8, #49	; 0x31
     c24:	02080031 	andeq	r0, r8, #49	; 0x31
     c28:	0a01007d 	beq	40e24 <__Stack_Size+0x40a24>
     c2c:	00040901 	andeq	r0, r4, r1, lsl #18
     c30:	02a00100 	adceq	r0, r0, #0
     c34:	0031b201 	eorseq	fp, r1, r1, lsl #4
     c38:	0031b408 	eorseq	fp, r1, r8, lsl #8
     c3c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     c40:	6c010a01 	stcvs	10, cr0, [r1], {1}
     c44:	01000006 	tsteq	r0, r6
     c48:	b40102aa 	strlt	r0, [r1], #-682	; 0x2aa
     c4c:	b6080031 			; <UNDEFINED> instruction: 0xb6080031
     c50:	02080031 	andeq	r0, r8, #49	; 0x31
     c54:	0a01007d 	beq	40e50 <__Stack_Size+0x40a50>
     c58:	00044e01 	andeq	r4, r4, r1, lsl #28
     c5c:	02b40100 	adcseq	r0, r4, #0
     c60:	0031b601 	eorseq	fp, r1, r1, lsl #12
     c64:	0031b808 	eorseq	fp, r1, r8, lsl #16
     c68:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     c6c:	7d010a01 	vstrvc	s0, [r1, #-4]
     c70:	01000006 	tsteq	r0, r6
     c74:	b80102c1 	stmdalt	r1, {r0, r6, r7, r9}
     c78:	ba080031 	blt	200d44 <__Stack_Size+0x200944>
     c7c:	02080031 	andeq	r0, r8, #49	; 0x31
     c80:	0a01007d 	beq	40e7c <__Stack_Size+0x40a7c>
     c84:	0006a501 	andeq	sl, r6, r1, lsl #10
     c88:	02cb0100 	sbceq	r0, fp, #0
     c8c:	0031ba01 	eorseq	fp, r1, r1, lsl #20
     c90:	0031bc08 	eorseq	fp, r1, r8, lsl #24
     c94:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     c98:	5f010a01 	svcpl	0x00010a01
     c9c:	01000004 	tsteq	r0, r4
     ca0:	bc0102d5 	sfmlt	f0, 4, [r1], {213}	; 0xd5
     ca4:	be080031 	mcrlt	0, 0, r0, cr8, cr1, {1}
     ca8:	02080031 	andeq	r0, r8, #49	; 0x31
     cac:	0a01007d 	beq	40ea8 <__Stack_Size+0x40aa8>
     cb0:	00049a01 	andeq	r9, r4, r1, lsl #20
     cb4:	02df0100 	sbcseq	r0, pc, #0
     cb8:	0031be01 	eorseq	fp, r1, r1, lsl #28
     cbc:	0031c008 	eorseq	ip, r1, r8
     cc0:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     cc4:	c4010a01 	strgt	r0, [r1], #-2561	; 0xa01
     cc8:	01000004 	tsteq	r0, r4
     ccc:	c00102e9 	andgt	r0, r1, r9, ror #5
     cd0:	c2080031 	andgt	r0, r8, #49	; 0x31
     cd4:	02080031 	andeq	r0, r8, #49	; 0x31
     cd8:	0a01007d 	beq	40ed4 <__Stack_Size+0x40ad4>
     cdc:	0006e701 	andeq	lr, r6, r1, lsl #14
     ce0:	02f40100 	rscseq	r0, r4, #0
     ce4:	0031c201 	eorseq	ip, r1, r1, lsl #4
     ce8:	0031c408 	eorseq	ip, r1, r8, lsl #8
     cec:	007d0208 	rsbseq	r0, sp, r8, lsl #4
     cf0:	00790c01 	rsbseq	r0, r9, r1, lsl #24
     cf4:	07040000 	streq	r0, [r4, -r0]
     cf8:	640d0000 	strvs	r0, [sp], #-0
     cfc:	9f000000 	svcls	0x00000000
     d00:	000a0e00 	andeq	r0, sl, r0, lsl #28
     d04:	71020000 	mrsvc	r0, (UNDEF: 2)
     d08:	0006f401 	andeq	pc, r6, r1, lsl #8
     d0c:	00790c00 	rsbseq	r0, r9, r0, lsl #24
     d10:	07200000 	streq	r0, [r0, -r0]!
     d14:	640d0000 	strvs	r0, [sp], #-0
     d18:	45000000 	strmi	r0, [r0, #-0]
     d1c:	025a0e00 	subseq	r0, sl, #0
     d20:	72020000 	andvc	r0, r2, #0
     d24:	00071001 	andeq	r1, r7, r1
     d28:	01270e00 	teqeq	r7, r0, lsl #28
     d2c:	73020000 	movwvc	r0, #8192	; 0x2000
     d30:	00007901 	andeq	r7, r0, r1, lsl #18
     d34:	009f0e00 	addseq	r0, pc, r0, lsl #28
     d38:	74020000 	strvc	r0, [r2], #-0
     d3c:	00007901 	andeq	r7, r0, r1, lsl #18
     d40:	00ef0f00 	rsceq	r0, pc, r0, lsl #30
     d44:	76020000 	strvc	r0, [r2], -r0
     d48:	00075601 	andeq	r5, r7, r1, lsl #12
     d4c:	00030500 	andeq	r0, r3, r0, lsl #10
     d50:	10000000 	andne	r0, r0, r0
     d54:	00000084 	andeq	r0, r0, r4, lsl #1
     d58:	0002a00f 	andeq	sl, r2, pc
     d5c:	01770200 	cmneq	r7, r0, lsl #4
     d60:	0000076d 	andeq	r0, r0, sp, ror #14
     d64:	00000305 	andeq	r0, r0, r5, lsl #6
     d68:	79100000 	ldmdbvc	r0, {}	; <UNPREDICTABLE>
     d6c:	11000000 	mrsne	r0, (UNDEF: 0)
     d70:	00048b01 	andeq	r8, r4, r1, lsl #22
     d74:	011a0100 	tsteq	sl, r0, lsl #2
     d78:	e6011101 	str	r1, [r1], -r1, lsl #2
     d7c:	01000002 	tsteq	r0, r2
     d80:	1101011c 	tstne	r1, ip, lsl r1
     d84:	00038701 	andeq	r8, r3, r1, lsl #14
     d88:	011f0100 	tsteq	pc, r0, lsl #2
     d8c:	51610001 	cmnpl	r1, r1
     d90:	00020000 	andeq	r0, r2, r0
     d94:	000002ca 	andeq	r0, r0, sl, asr #5
     d98:	02110104 	andseq	r0, r1, #1
     d9c:	4f010000 	svcmi	0x00010000
     da0:	8b000012 	blhi	df0 <__Stack_Size+0x9f0>
     da4:	c4000001 	strgt	r0, [r0], #-1
     da8:	90080031 	andls	r0, r8, r1, lsr r0
     dac:	dc080050 	stcle	0, cr0, [r8], {80}	; 0x50
     db0:	02000001 	andeq	r0, r0, #1
     db4:	00d30704 	sbcseq	r0, r3, r4, lsl #14
     db8:	01020000 	mrseq	r0, (UNDEF: 2)
     dbc:	00015b06 	andeq	r5, r1, r6, lsl #22
     dc0:	08010200 	stmdaeq	r1, {r9}
     dc4:	00000159 	andeq	r0, r0, r9, asr r1
     dc8:	25050202 	strcs	r0, [r5, #-514]	; 0x202
     dcc:	02000000 	andeq	r0, r0, #0
     dd0:	01c40702 	biceq	r0, r4, r2, lsl #14
     dd4:	04030000 	streq	r0, [r3], #-0
     dd8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
     ddc:	05080200 	streq	r0, [r8, #-512]	; 0x200
     de0:	000000bb 	strheq	r0, [r0], -fp
     de4:	c9070802 	stmdbgt	r7, {r1, fp}
     de8:	02000000 	andeq	r0, r0, #0
     dec:	00c00504 	sbceq	r0, r0, r4, lsl #10
     df0:	04020000 	streq	r0, [r2], #-0
     df4:	00002f07 	andeq	r2, r0, r7, lsl #30
     df8:	07040200 	streq	r0, [r4, -r0, lsl #4]
     dfc:	000000ce 	andeq	r0, r0, lr, asr #1
     e00:	00780404 	rsbseq	r0, r8, r4, lsl #8
     e04:	01020000 	mrseq	r0, (UNDEF: 2)
     e08:	00016208 	andeq	r6, r1, r8, lsl #4
     e0c:	85040400 	strhi	r0, [r4, #-1024]	; 0x400
     e10:	05000000 	streq	r0, [r0, #-0]
     e14:	00000078 	andeq	r0, r0, r8, ror r0
     e18:	32337506 	eorscc	r7, r3, #25165824	; 0x1800000
     e1c:	6b270200 	blvs	9c1624 <__Stack_Size+0x9c1224>
     e20:	06000000 	streq	r0, [r0], -r0
     e24:	00363175 	eorseq	r3, r6, r5, ror r1
     e28:	00412802 	subeq	r2, r1, r2, lsl #16
     e2c:	75060000 	strvc	r0, [r6, #-0]
     e30:	29020038 	stmdbcs	r2, {r3, r4, r5}
     e34:	00000033 	andeq	r0, r0, r3, lsr r0
     e38:	000d7d07 	andeq	r7, sp, r7, lsl #26
     e3c:	b52f0200 	strlt	r0, [pc, #-512]!	; c44 <__Stack_Size+0x844>
     e40:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     e44:	0000006b 	andeq	r0, r0, fp, rrx
     e48:	000bbc07 	andeq	fp, fp, r7, lsl #24
     e4c:	c5300200 	ldrgt	r0, [r0, #-512]!	; 0x200
     e50:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     e54:	00000041 	andeq	r0, r0, r1, asr #32
     e58:	37020109 	strcc	r0, [r2, -r9, lsl #2]
     e5c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     e60:	0014b10a 	andseq	fp, r4, sl, lsl #2
     e64:	150a0000 	strne	r0, [sl, #-0]
     e68:	01000019 	tsteq	r0, r9, lsl r0
     e6c:	02010900 	andeq	r0, r1, #0
     e70:	0000f439 	andeq	pc, r0, r9, lsr r4	; <UNPREDICTABLE>
     e74:	0b590a00 	bleq	164367c <__Stack_Size+0x164327c>
     e78:	0b000000 	bleq	e80 <__Stack_Size+0xa80>
     e7c:	00544553 	subseq	r4, r4, r3, asr r5
     e80:	7e070001 	cdpvc	0, 0, cr0, cr7, cr1, {0}
     e84:	02000012 	andeq	r0, r0, #18
     e88:	0000df39 	andeq	sp, r0, r9, lsr pc
     e8c:	2a990700 	bcs	fe642a94 <SCS_BASE+0x1e634a94>
     e90:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
     e94:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     e98:	3b020109 	blcc	812c4 <__Stack_Size+0x80ec4>
     e9c:	0000011f 	andeq	r0, r0, pc, lsl r1
     ea0:	0015170a 	andseq	r1, r5, sl, lsl #14
     ea4:	350a0000 	strcc	r0, [sl, #-0]
     ea8:	01000019 	tsteq	r0, r9, lsl r0
     eac:	15ee0700 	strbne	r0, [lr, #1792]!	; 0x700
     eb0:	3b020000 	blcc	80eb8 <__Stack_Size+0x80ab8>
     eb4:	0000010a 	andeq	r0, r0, sl, lsl #2
     eb8:	3e020109 	adfccs	f0, f2, #1.0
     ebc:	0000013f 	andeq	r0, r0, pc, lsr r1
     ec0:	0000460a 	andeq	r4, r0, sl, lsl #12
     ec4:	970a0000 	strls	r0, [sl, -r0]
     ec8:	01000000 	mrseq	r0, (UNDEF: 0)
     ecc:	15980700 	ldrne	r0, [r8, #1792]	; 0x700
     ed0:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
     ed4:	0000012a 	andeq	r0, r0, sl, lsr #2
     ed8:	2403500c 	strcs	r5, [r3], #-12
     edc:	00000269 	andeq	r0, r0, r9, ror #4
     ee0:	0052530d 	subseq	r5, r2, sp, lsl #6
     ee4:	00aa2603 	adceq	r2, sl, r3, lsl #12
     ee8:	23020000 	movwcs	r0, #8192	; 0x2000
     eec:	52430d00 	subpl	r0, r3, #0
     ef0:	27030031 	smladxcs	r3, r1, r0, r0
     ef4:	000000aa 	andeq	r0, r0, sl, lsr #1
     ef8:	0d042302 	stceq	3, cr2, [r4, #-8]
     efc:	00325243 	eorseq	r5, r2, r3, asr #4
     f00:	00aa2803 	adceq	r2, sl, r3, lsl #16
     f04:	23020000 	movwcs	r0, #8192	; 0x2000
     f08:	11740e08 	cmnne	r4, r8, lsl #28
     f0c:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
     f10:	000000aa 	andeq	r0, r0, sl, lsr #1
     f14:	0e0c2302 	cdpeq	3, 0, cr2, cr12, cr2, {0}
     f18:	0000117a 	andeq	r1, r0, sl, ror r1
     f1c:	00aa2a03 	adceq	r2, sl, r3, lsl #20
     f20:	23020000 	movwcs	r0, #8192	; 0x2000
     f24:	18f30e10 	ldmne	r3!, {r4, r9, sl, fp}^
     f28:	2b030000 	blcs	c0f30 <__Stack_Size+0xc0b30>
     f2c:	000000aa 	andeq	r0, r0, sl, lsr #1
     f30:	0e142302 	cdpeq	3, 1, cr2, cr4, cr2, {0}
     f34:	000018f9 	strdeq	r1, [r0], -r9
     f38:	00aa2c03 	adceq	r2, sl, r3, lsl #24
     f3c:	23020000 	movwcs	r0, #8192	; 0x2000
     f40:	18ff0e18 	ldmne	pc!, {r3, r4, r9, sl, fp}^	; <UNPREDICTABLE>
     f44:	2d030000 	stccs	0, cr0, [r3, #-0]
     f48:	000000aa 	andeq	r0, r0, sl, lsr #1
     f4c:	0e1c2302 	cdpeq	3, 1, cr2, cr12, cr2, {0}
     f50:	00001905 	andeq	r1, r0, r5, lsl #18
     f54:	00aa2e03 	adceq	r2, sl, r3, lsl #28
     f58:	23020000 	movwcs	r0, #8192	; 0x2000
     f5c:	54480d20 	strbpl	r0, [r8], #-3360	; 0xd20
     f60:	2f030052 	svccs	0x00030052
     f64:	000000aa 	andeq	r0, r0, sl, lsr #1
     f68:	0d242302 	stceq	3, cr2, [r4, #-8]!
     f6c:	0052544c 	subseq	r5, r2, ip, asr #8
     f70:	00aa3003 	adceq	r3, sl, r3
     f74:	23020000 	movwcs	r0, #8192	; 0x2000
     f78:	08a80e28 	stmiaeq	r8!, {r3, r5, r9, sl, fp}
     f7c:	31030000 	mrscc	r0, (UNDEF: 3)
     f80:	000000aa 	andeq	r0, r0, sl, lsr #1
     f84:	0e2c2302 	cdpeq	3, 2, cr2, cr12, cr2, {0}
     f88:	000008ad 	andeq	r0, r0, sp, lsr #17
     f8c:	00aa3203 	adceq	r3, sl, r3, lsl #4
     f90:	23020000 	movwcs	r0, #8192	; 0x2000
     f94:	08b20e30 	ldmeq	r2!, {r4, r5, r9, sl, fp}
     f98:	33030000 	movwcc	r0, #12288	; 0x3000
     f9c:	000000aa 	andeq	r0, r0, sl, lsr #1
     fa0:	0e342302 	cdpeq	3, 3, cr2, cr4, cr2, {0}
     fa4:	000019bf 			; <UNDEFINED> instruction: 0x000019bf
     fa8:	00aa3403 	adceq	r3, sl, r3, lsl #8
     fac:	23020000 	movwcs	r0, #8192	; 0x2000
     fb0:	197c0e38 	ldmdbne	ip!, {r3, r4, r5, r9, sl, fp}^
     fb4:	35030000 	strcc	r0, [r3, #-0]
     fb8:	000000aa 	andeq	r0, r0, sl, lsr #1
     fbc:	0e3c2302 	cdpeq	3, 3, cr2, cr12, cr2, {0}
     fc0:	00001981 	andeq	r1, r0, r1, lsl #19
     fc4:	00aa3603 	adceq	r3, sl, r3, lsl #12
     fc8:	23020000 	movwcs	r0, #8192	; 0x2000
     fcc:	19860e40 	stmibne	r6, {r6, r9, sl, fp}
     fd0:	37030000 	strcc	r0, [r3, -r0]
     fd4:	000000aa 	andeq	r0, r0, sl, lsr #1
     fd8:	0e442302 	cdpeq	3, 4, cr2, cr4, cr2, {0}
     fdc:	0000198b 	andeq	r1, r0, fp, lsl #19
     fe0:	00aa3803 	adceq	r3, sl, r3, lsl #16
     fe4:	23020000 	movwcs	r0, #8192	; 0x2000
     fe8:	52440d48 	subpl	r0, r4, #4608	; 0x1200
     fec:	aa390300 	bge	e41bf4 <__Stack_Size+0xe417f4>
     ff0:	02000000 	andeq	r0, r0, #0
     ff4:	07004c23 	streq	r4, [r0, -r3, lsr #24]
     ff8:	00000fa2 	andeq	r0, r0, r2, lsr #31
     ffc:	014a3a03 	cmpeq	sl, r3, lsl #20
    1000:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    1004:	e7014e03 	str	r4, [r1, -r3, lsl #28]
    1008:	10000002 	andne	r0, r0, r2
    100c:	004c5243 	subeq	r5, ip, r3, asr #4
    1010:	aa015003 	bge	55024 <__Stack_Size+0x54c24>
    1014:	02000000 	andeq	r0, r0, #0
    1018:	43100023 	tstmi	r0, #35	; 0x23
    101c:	03004852 	movweq	r4, #2130	; 0x852
    1020:	00aa0151 	adceq	r0, sl, r1, asr r1
    1024:	23020000 	movwcs	r0, #8192	; 0x2000
    1028:	44491004 	strbmi	r1, [r9], #-4
    102c:	52030052 	andpl	r0, r3, #82	; 0x52
    1030:	0000aa01 	andeq	sl, r0, r1, lsl #20
    1034:	08230200 	stmdaeq	r3!, {r9}
    1038:	52444f10 	subpl	r4, r4, #64	; 0x40
    103c:	01530300 	cmpeq	r3, r0, lsl #6
    1040:	000000aa 	andeq	r0, r0, sl, lsr #1
    1044:	110c2302 	tstne	ip, r2, lsl #6
    1048:	00001977 	andeq	r1, r0, r7, ror r9
    104c:	aa015403 	bge	56060 <__Stack_Size+0x55c60>
    1050:	02000000 	andeq	r0, r0, #0
    1054:	42101023 	andsmi	r1, r0, #35	; 0x23
    1058:	03005252 	movweq	r5, #594	; 0x252
    105c:	00aa0155 	adceq	r0, sl, r5, asr r1
    1060:	23020000 	movwcs	r0, #8192	; 0x2000
    1064:	11a41114 			; <UNDEFINED> instruction: 0x11a41114
    1068:	56030000 	strpl	r0, [r3], -r0
    106c:	0000aa01 	andeq	sl, r0, r1, lsl #20
    1070:	18230200 	stmdane	r3!, {r9}
    1074:	19dd1200 	ldmibne	sp, {r9, ip}^
    1078:	57030000 	strpl	r0, [r3, -r0]
    107c:	00027401 	andeq	r7, r2, r1, lsl #8
    1080:	031c0f00 	tsteq	ip, #0
    1084:	03cd0238 	biceq	r0, sp, #-2147483645	; 0x80000003
    1088:	53100000 	tstpl	r0, #0
    108c:	3a030052 	bcc	c11dc <__Stack_Size+0xc0ddc>
    1090:	0000ba02 	andeq	fp, r0, r2, lsl #20
    1094:	00230200 	eoreq	r0, r3, r0, lsl #4
    1098:	000c8d11 	andeq	r8, ip, r1, lsl sp
    109c:	023b0300 	eorseq	r0, fp, #0
    10a0:	00000095 	muleq	r0, r5, r0
    10a4:	10022302 	andne	r2, r2, r2, lsl #6
    10a8:	03005244 	movweq	r5, #580	; 0x244
    10ac:	00ba023c 	adcseq	r0, sl, ip, lsr r2
    10b0:	23020000 	movwcs	r0, #8192	; 0x2000
    10b4:	0c971104 	ldfeqs	f1, [r7], {4}
    10b8:	3d030000 	stccc	0, cr0, [r3, #-0]
    10bc:	00009502 	andeq	r9, r0, r2, lsl #10
    10c0:	06230200 	strteq	r0, [r3], -r0, lsl #4
    10c4:	52524210 	subspl	r4, r2, #1
    10c8:	023e0300 	eorseq	r0, lr, #0
    10cc:	000000ba 	strheq	r0, [r0], -sl
    10d0:	11082302 	tstne	r8, r2, lsl #6
    10d4:	00000d66 	andeq	r0, r0, r6, ror #26
    10d8:	95023f03 	strls	r3, [r2, #-3843]	; 0xf03
    10dc:	02000000 	andeq	r0, r0, #0
    10e0:	43100a23 	tstmi	r0, #143360	; 0x23000
    10e4:	03003152 	movweq	r3, #338	; 0x152
    10e8:	00ba0240 	adcseq	r0, sl, r0, asr #4
    10ec:	23020000 	movwcs	r0, #8192	; 0x2000
    10f0:	0ca1110c 	stfeqs	f1, [r1], #48	; 0x30
    10f4:	41030000 	mrsmi	r0, (UNDEF: 3)
    10f8:	00009502 	andeq	r9, r0, r2, lsl #10
    10fc:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
    1100:	32524310 	subscc	r4, r2, #1073741824	; 0x40000000
    1104:	02420300 	subeq	r0, r2, #0
    1108:	000000ba 	strheq	r0, [r0], -sl
    110c:	11102302 	tstne	r0, r2, lsl #6
    1110:	00000cab 	andeq	r0, r0, fp, lsr #25
    1114:	95024303 	strls	r4, [r2, #-771]	; 0x303
    1118:	02000000 	andeq	r0, r0, #0
    111c:	43101223 	tstmi	r0, #805306370	; 0x30000002
    1120:	03003352 	movweq	r3, #850	; 0x352
    1124:	00ba0244 	adcseq	r0, sl, r4, asr #4
    1128:	23020000 	movwcs	r0, #8192	; 0x2000
    112c:	0cb51114 	ldfeqs	f1, [r5], #80	; 0x50
    1130:	45030000 	strmi	r0, [r3, #-0]
    1134:	00009502 	andeq	r9, r0, r2, lsl #10
    1138:	16230200 	strtne	r0, [r3], -r0, lsl #4
    113c:	00127211 	andseq	r7, r2, r1, lsl r2
    1140:	02460300 	subeq	r0, r6, #0
    1144:	000000ba 	strheq	r0, [r0], -sl
    1148:	11182302 	tstne	r8, r2, lsl #6
    114c:	00000cbf 			; <UNDEFINED> instruction: 0x00000cbf
    1150:	95024703 	strls	r4, [r2, #-1795]	; 0x703
    1154:	02000000 	andeq	r0, r0, #0
    1158:	12001a23 	andne	r1, r0, #143360	; 0x23000
    115c:	00000e5a 	andeq	r0, r0, sl, asr lr
    1160:	f3024803 	vsub.i8	d4, d2, d3
    1164:	0c000002 	stceq	0, cr0, [r0], {2}
    1168:	361a0414 			; <UNDEFINED> instruction: 0x361a0414
    116c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    1170:	00001a36 	andeq	r1, r0, r6, lsr sl
    1174:	008a1c04 	addeq	r1, sl, r4, lsl #24
    1178:	23020000 	movwcs	r0, #8192	; 0x2000
    117c:	11b90e00 			; <UNDEFINED> instruction: 0x11b90e00
    1180:	1d040000 	stcne	0, cr0, [r4, #-0]
    1184:	0000011f 	andeq	r0, r0, pc, lsl r1
    1188:	0e042302 	cdpeq	3, 0, cr2, cr4, cr2, {0}
    118c:	000011e7 	andeq	r1, r0, r7, ror #3
    1190:	011f1e04 	tsteq	pc, r4, lsl #28
    1194:	23020000 	movwcs	r0, #8192	; 0x2000
    1198:	14680e05 	strbtne	r0, [r8], #-3589	; 0xe05
    119c:	1f040000 	svcne	0x00040000
    11a0:	0000008a 	andeq	r0, r0, sl, lsl #1
    11a4:	0e082302 	cdpeq	3, 0, cr2, cr8, cr2, {0}
    11a8:	00000f09 	andeq	r0, r0, r9, lsl #30
    11ac:	008a2004 	addeq	r2, sl, r4
    11b0:	23020000 	movwcs	r0, #8192	; 0x2000
    11b4:	1a710e0c 	bne	1c449ec <__Stack_Size+0x1c445ec>
    11b8:	21040000 	mrscs	r0, (UNDEF: 4)
    11bc:	000000a0 	andeq	r0, r0, r0, lsr #1
    11c0:	00102302 	andseq	r2, r0, r2, lsl #6
    11c4:	00118007 	andseq	r8, r1, r7
    11c8:	d9220400 	stmdble	r2!, {sl}
    11cc:	09000003 	stmdbeq	r0, {r0, r1}
    11d0:	5c230501 	cfstr32pl	mvfx0, [r3], #-4
    11d4:	0a000004 	beq	11ec <__Stack_Size+0xdec>
    11d8:	00001afe 	strdeq	r1, [r0], -lr
    11dc:	180c0a01 	stmdane	ip, {r0, r9, fp}
    11e0:	0a020000 	beq	811e8 <__Stack_Size+0x80de8>
    11e4:	00000e49 	andeq	r0, r0, r9, asr #28
    11e8:	1c070003 	stcne	0, cr0, [r7], {3}
    11ec:	05000018 	streq	r0, [r0, #-24]
    11f0:	00044127 	andeq	r4, r4, r7, lsr #2
    11f4:	05010900 	streq	r0, [r1, #-2304]	; 0x900
    11f8:	0004a12e 	andeq	sl, r4, lr, lsr #2
    11fc:	0ab60a00 	beq	fed83a04 <SCS_BASE+0x1ed75a04>
    1200:	0a000000 	beq	1208 <__Stack_Size+0xe08>
    1204:	000018d7 	ldrdeq	r1, [r0], -r7
    1208:	1bcf0a04 	blne	ff3c3a20 <SCS_BASE+0x1f3b5a20>
    120c:	0a280000 	beq	a01214 <__Stack_Size+0xa00e14>
    1210:	0000086c 	andeq	r0, r0, ip, ror #16
    1214:	ea0a00c8 	b	28153c <__Stack_Size+0x28113c>
    1218:	1400000d 	strne	r0, [r0], #-13
    121c:	000e8b0a 	andeq	r8, lr, sl, lsl #22
    1220:	5f0a1000 	svcpl	0x000a1000
    1224:	1c00000b 	stcne	0, cr0, [r0], {11}
    1228:	000ce20a 	andeq	lr, ip, sl, lsl #4
    122c:	07001800 	streq	r1, [r0, -r0, lsl #16]
    1230:	00001762 	andeq	r1, r0, r2, ror #14
    1234:	04673605 	strbteq	r3, [r7], #-1541	; 0x605
    1238:	040c0000 	streq	r0, [ip], #-0
    123c:	04df3e05 	ldrbeq	r3, [pc], #3589	; 1244 <__Stack_Size+0xe44>
    1240:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    1244:	05000018 	streq	r0, [r0, #-24]
    1248:	0000953f 	andeq	r9, r0, pc, lsr r5
    124c:	00230200 	eoreq	r0, r3, r0, lsl #4
    1250:	000a5a0e 	andeq	r5, sl, lr, lsl #20
    1254:	5c400500 	cfstr64pl	mvdx0, [r0], {-0}
    1258:	02000004 	andeq	r0, r0, #4
    125c:	fc0e0223 	stc2	2, cr0, [lr], {35}	; 0x23
    1260:	05000016 	streq	r0, [r0, #-22]
    1264:	0004a141 	andeq	sl, r4, r1, asr #2
    1268:	03230200 	teqeq	r3, #0
    126c:	0c330700 	ldceq	7, cr0, [r3], #-0
    1270:	42050000 	andmi	r0, r5, #0
    1274:	000004ac 	andeq	r0, r0, ip, lsr #9
    1278:	1a06040c 	bne	1822b0 <__Stack_Size+0x181eb0>
    127c:	0000052b 	andeq	r0, r0, fp, lsr #10
    1280:	00087a0e 	andeq	r7, r8, lr, lsl #20
    1284:	a01c0600 	andsge	r0, ip, r0, lsl #12
    1288:	02000000 	andeq	r0, r0, #0
    128c:	c80e0023 	stmdagt	lr, {r0, r1, r5}
    1290:	0600000d 	streq	r0, [r0], -sp
    1294:	0000a01d 	andeq	sl, r0, sp, lsl r0
    1298:	01230200 	teqeq	r3, r0, lsl #4
    129c:	0014df0e 	andseq	sp, r4, lr, lsl #30
    12a0:	a01e0600 	andsge	r0, lr, r0, lsl #12
    12a4:	02000000 	andeq	r0, r0, #0
    12a8:	650e0223 	strvs	r0, [lr, #-547]	; 0x223
    12ac:	0600000a 	streq	r0, [r0], -sl
    12b0:	00011f1f 	andeq	r1, r1, pc, lsl pc
    12b4:	03230200 	teqeq	r3, #0
    12b8:	1b0f0700 	blne	3c2ec0 <__Stack_Size+0x3c2ac0>
    12bc:	20060000 	andcs	r0, r6, r0
    12c0:	000004ea 	andeq	r0, r0, sl, ror #9
    12c4:	1a07100c 	bne	1c52fc <__Stack_Size+0x1c4efc>
    12c8:	00000593 	muleq	r0, r3, r5
    12cc:	00100a0e 	andseq	r0, r0, lr, lsl #20
    12d0:	8a1c0700 	bhi	702ed8 <__Stack_Size+0x702ad8>
    12d4:	02000000 	andeq	r0, r0, #0
    12d8:	130e0023 	movwne	r0, #57379	; 0xe023
    12dc:	0700000d 	streq	r0, [r0, -sp]
    12e0:	0000951d 	andeq	r9, r0, sp, lsl r5
    12e4:	04230200 	strteq	r0, [r3], #-512	; 0x200
    12e8:	0011950e 	andseq	r9, r1, lr, lsl #10
    12ec:	951e0700 	ldrls	r0, [lr, #-1792]	; 0x700
    12f0:	02000000 	andeq	r0, r0, #0
    12f4:	700e0623 	andvc	r0, lr, r3, lsr #12
    12f8:	0700000d 	streq	r0, [r0, -sp]
    12fc:	0000951f 	andeq	r9, r0, pc, lsl r5
    1300:	08230200 	stmdaeq	r3!, {r9}
    1304:	0010240e 	andseq	r2, r0, lr, lsl #8
    1308:	95200700 	strls	r0, [r0, #-1792]!	; 0x700
    130c:	02000000 	andeq	r0, r0, #0
    1310:	8c0e0a23 	stchi	10, cr0, [lr], {35}	; 0x23
    1314:	0700001a 	smladeq	r0, sl, r0, r0
    1318:	00009521 	andeq	r9, r0, r1, lsr #10
    131c:	0c230200 	sfmeq	f0, 4, [r3], #-0
    1320:	17830700 	strne	r0, [r3, r0, lsl #14]
    1324:	22070000 	andcs	r0, r7, #0
    1328:	00000536 	andeq	r0, r0, r6, lsr r5
    132c:	00014607 	andeq	r4, r1, r7, lsl #12
    1330:	330c0800 	movwcc	r0, #51200	; 0xc800
    1334:	07000000 	streq	r0, [r0, -r0]
    1338:	00000072 	andeq	r0, r0, r2, ror r0
    133c:	00410d08 	subeq	r0, r1, r8, lsl #26
    1340:	05070000 	streq	r0, [r7, #-0]
    1344:	08000002 	stmdaeq	r0, {r1}
    1348:	00006b0e 	andeq	r6, r0, lr, lsl #22
    134c:	01470700 	cmpeq	r7, r0, lsl #14
    1350:	10080000 	andne	r0, r8, r0
    1354:	0000002c 	andeq	r0, r0, ip, lsr #32
    1358:	00020607 	andeq	r0, r2, r7, lsl #12
    135c:	5d120800 	ldcpl	8, cr0, [r2, #-0]
    1360:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1364:	fc210801 	stc2	8, cr0, [r1], #-4
    1368:	0a000005 	beq	1384 <__Stack_Size+0xf84>
    136c:	000009f8 	strdeq	r0, [r0], -r8
    1370:	191a0a02 	ldmdbne	sl, {r1, r9, fp}
    1374:	0a030000 	beq	c137c <__Stack_Size+0xc0f7c>
    1378:	00001b72 	andeq	r1, r0, r2, ror fp
    137c:	0aaa0a04 	beq	fea83b94 <SCS_BASE+0x1ea75b94>
    1380:	0a040000 	beq	101388 <__Stack_Size+0x100f88>
    1384:	0000195c 	andeq	r1, r0, ip, asr r9
    1388:	01090005 	tsteq	r9, r5
    138c:	06932908 	ldreq	r2, [r3], r8, lsl #18
    1390:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    1394:	0100000d 	tsteq	r0, sp
    1398:	0011310a 	andseq	r3, r1, sl, lsl #2
    139c:	540a0200 	strpl	r0, [sl], #-512	; 0x200
    13a0:	03000015 	movweq	r0, #21
    13a4:	000b8a0a 	andeq	r8, fp, sl, lsl #20
    13a8:	8c0a0400 	cfstrshi	mvf0, [sl], {-0}
    13ac:	0500000a 	streq	r0, [r0, #-10]
    13b0:	000ec80a 	andeq	ip, lr, sl, lsl #16
    13b4:	4c0a0600 	stcmi	6, cr0, [sl], {-0}
    13b8:	0700000b 	streq	r0, [r0, -fp]
    13bc:	000e7a0a 	andeq	r7, lr, sl, lsl #20
    13c0:	900a0c00 	andls	r0, sl, r0, lsl #24
    13c4:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    13c8:	00138f0a 	andseq	r8, r3, sl, lsl #30
    13cc:	c70a0e00 	strgt	r0, [sl, -r0, lsl #28]
    13d0:	0f000009 	svceq	0x00000009
    13d4:	0015a90a 	andseq	sl, r5, sl, lsl #18
    13d8:	3e0a1000 	cdpcc	0, 0, cr1, cr10, cr0, {0}
    13dc:	11000010 	tstne	r0, r0, lsl r0
    13e0:	0017100a 	andseq	r1, r7, sl
    13e4:	3c0a1200 	sfmcc	f1, 4, [sl], {-0}
    13e8:	13000019 	movwne	r0, #25
    13ec:	00122f0a 	andseq	r2, r2, sl, lsl #30
    13f0:	2c0a1400 	cfstrscs	mvf1, [sl], {-0}
    13f4:	1500000f 	strne	r0, [r0, #-15]
    13f8:	00088f0a 	andeq	r8, r8, sl, lsl #30
    13fc:	030a1600 	movweq	r1, #42496	; 0xa600
    1400:	1700000a 	strne	r0, [r0, -sl]
    1404:	0017fc0a 	andseq	pc, r7, sl, lsl #24
    1408:	0a018300 	beq	62010 <__Stack_Size+0x61c10>
    140c:	00000f3a 	andeq	r0, r0, sl, lsr pc
    1410:	590a0184 	stmdbpl	sl, {r2, r7, r8}
    1414:	92000018 	andls	r0, r0, #24
    1418:	14fa0a01 	ldrbtne	r0, [sl], #2561	; 0xa01
    141c:	01d00000 	bicseq	r0, r0, r0
    1420:	08010900 	stmdaeq	r1, {r8, fp}
    1424:	0006c743 	andeq	ip, r6, r3, asr #14
    1428:	14850a00 	strne	r0, [r5], #2560	; 0xa00
    142c:	00c00000 	sbceq	r0, r0, r0
    1430:	000c0d0a 	andeq	r0, ip, sl, lsl #26
    1434:	6f0a2000 	svcvs	0x000a2000
    1438:	1000000b 	andne	r0, r0, fp
    143c:	000fe70a 	andeq	lr, pc, sl, lsl #14
    1440:	f80a0800 			; <UNDEFINED> instruction: 0xf80a0800
    1444:	0400000a 	streq	r0, [r0], #-10
    1448:	000e9c0a 	andeq	r9, lr, sl, lsl #24
    144c:	0a0a0200 	beq	281c54 <__Stack_Size+0x281854>
    1450:	01000014 	tsteq	r0, r4, lsl r0
    1454:	08020900 	stmdaeq	r2, {r8, fp}
    1458:	0007254d 	andeq	r2, r7, sp, asr #10
    145c:	00e00a00 	rsceq	r0, r0, r0, lsl #20
    1460:	0a010000 	beq	41468 <__Stack_Size+0x41068>
    1464:	00000090 	muleq	r0, r0, r0
    1468:	026f0a02 	rsbeq	r0, pc, #8192	; 0x2000
    146c:	0a040000 	beq	101474 <__Stack_Size+0x101074>
    1470:	000000fc 	strdeq	r0, [r0], -ip
    1474:	003f0a08 	eorseq	r0, pc, r8, lsl #20
    1478:	0a100000 	beq	401480 <__Stack_Size+0x401080>
    147c:	000000ad 	andeq	r0, r0, sp, lsr #1
    1480:	02850a20 	addeq	r0, r5, #131072	; 0x20000
    1484:	00c00000 	sbceq	r0, r0, r0
    1488:	0001b50a 	andeq	fp, r1, sl, lsl #10
    148c:	0a018000 	beq	61494 <__Stack_Size+0x61094>
    1490:	00000051 	andeq	r0, r0, r1, asr r0
    1494:	810a0280 	smlabbhi	sl, r0, r2, r0
    1498:	80000000 	andhi	r0, r0, r0
    149c:	01180a04 	tsteq	r8, r4, lsl #20
    14a0:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
    14a4:	0001380a 	andeq	r3, r1, sl, lsl #16
    14a8:	0a108000 	beq	4214b0 <__Stack_Size+0x4210b0>
    14ac:	00000108 	andeq	r0, r0, r8, lsl #2
    14b0:	13002080 	movwne	r2, #128	; 0x80
    14b4:	00001953 	andeq	r1, r0, r3, asr r9
    14b8:	01080801 	tsteq	r8, r1, lsl #16
    14bc:	00000756 	andeq	r0, r0, r6, asr r7
    14c0:	0050550b 	subseq	r5, r0, fp, lsl #10
    14c4:	0c790a00 	ldcleq	10, cr0, [r9], #-0
    14c8:	0a010000 	beq	414d0 <__Stack_Size+0x410d0>
    14cc:	0000163c 	andeq	r1, r0, ip, lsr r6
    14d0:	0fae0a02 	svceq	0x00ae0a02
    14d4:	0a030000 	beq	c14dc <__Stack_Size+0xc10dc>
    14d8:	00001b6c 	andeq	r1, r0, ip, ror #22
    14dc:	494d0b04 	stmdbmi	sp, {r2, r8, r9, fp}^
    14e0:	00050043 	andeq	r0, r5, r3, asr #32
    14e4:	00196e12 	andseq	r6, r9, r2, lsl lr
    14e8:	010f0800 	tsteq	pc, r0, lsl #16
    14ec:	00000725 	andeq	r0, r0, r5, lsr #14
    14f0:	00014c13 	andeq	r4, r1, r3, lsl ip
    14f4:	10080100 	andne	r0, r8, r0, lsl #2
    14f8:	00079a01 	andeq	r9, r7, r1, lsl #20
    14fc:	01f10a00 	mvnseq	r0, r0, lsl #20
    1500:	0a000000 	beq	1508 <__Stack_Size+0x1108>
    1504:	000015b2 			; <UNDEFINED> instruction: 0x000015b2
    1508:	01fd0a01 	mvnseq	r0, r1, lsl #20
    150c:	0a020000 	beq	81514 <__Stack_Size+0x81114>
    1510:	0000020c 	andeq	r0, r0, ip, lsl #4
    1514:	58540b03 	ldmdapl	r4, {r0, r1, r8, r9, fp}^
    1518:	0b040044 	bleq	101630 <__Stack_Size+0x101230>
    151c:	00445852 	subeq	r5, r4, r2, asr r8
    1520:	55410b05 	strbpl	r0, [r1, #-2821]	; 0xb05
    1524:	00060058 	andeq	r0, r6, r8, asr r0
    1528:	00017312 	andeq	r7, r1, r2, lsl r3
    152c:	01180800 	tsteq	r8, r0, lsl #16
    1530:	00000762 	andeq	r0, r0, r2, ror #14
    1534:	0011fe13 	andseq	pc, r1, r3, lsl lr	; <UNPREDICTABLE>
    1538:	27080100 	strcs	r0, [r8, -r0, lsl #2]
    153c:	0007fc01 	andeq	pc, r7, r1, lsl #24
    1540:	13f50a00 	mvnsne	r0, #0
    1544:	0a000000 	beq	154c <__Stack_Size+0x114c>
    1548:	00001402 	andeq	r1, r0, r2, lsl #8
    154c:	147d0a01 	ldrbtne	r0, [sp], #-2561	; 0xa01
    1550:	0a020000 	beq	81558 <__Stack_Size+0x81158>
    1554:	00001498 	muleq	r0, r8, r4
    1558:	15470a03 	strbne	r0, [r7, #-2563]	; 0xa03
    155c:	0a040000 	beq	101564 <__Stack_Size+0x101164>
    1560:	00001b3f 	andeq	r1, r0, pc, lsr fp
    1564:	15fe0a05 	ldrbne	r0, [lr, #2565]!	; 0xa05
    1568:	0a060000 	beq	181570 <__Stack_Size+0x181170>
    156c:	0000160b 	andeq	r1, r0, fp, lsl #12
    1570:	16d90a07 	ldrbne	r0, [r9], r7, lsl #20
    1574:	0a080000 	beq	20157c <__Stack_Size+0x20117c>
    1578:	000016e1 	andeq	r1, r0, r1, ror #13
    157c:	17730a09 	ldrbne	r0, [r3, -r9, lsl #20]!
    1580:	0a0a0000 	beq	281588 <__Stack_Size+0x281188>
    1584:	0000177b 	andeq	r1, r0, fp, ror r7
    1588:	0012000b 	andseq	r0, r2, fp
    158c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    1590:	07a60134 			; <UNDEFINED> instruction: 0x07a60134
    1594:	a0130000 	andsge	r0, r3, r0
    1598:	01000014 	tsteq	r0, r4, lsl r0
    159c:	40013508 	andmi	r3, r1, r8, lsl #10
    15a0:	0a000008 	beq	15c8 <__Stack_Size+0x11c8>
    15a4:	0000142f 	andeq	r1, r0, pc, lsr #8
    15a8:	14a90a00 	strtne	r0, [r9], #2560	; 0xa00
    15ac:	0a010000 	beq	415b4 <__Stack_Size+0x411b4>
    15b0:	0000157e 	andeq	r1, r0, lr, ror r5
    15b4:	16480a02 	strbne	r0, [r8], -r2, lsl #20
    15b8:	0a030000 	beq	c15c0 <__Stack_Size+0xc11c0>
    15bc:	000009bf 			; <UNDEFINED> instruction: 0x000009bf
    15c0:	17950a04 	ldrne	r0, [r5, r4, lsl #20]
    15c4:	0a050000 	beq	1415cc <__Stack_Size+0x1411cc>
    15c8:	000014b7 			; <UNDEFINED> instruction: 0x000014b7
    15cc:	bc120006 	ldclt	0, cr0, [r2], {6}
    15d0:	08000014 	stmdaeq	r0, {r2, r4}
    15d4:	0808013d 	stmdaeq	r8, {r0, r2, r3, r4, r5, r8}
    15d8:	d8130000 	ldmdale	r3, {}	; <UNPREDICTABLE>
    15dc:	0200000b 	andeq	r0, r0, #11
    15e0:	e2013e08 	and	r3, r1, #128	; 0x80
    15e4:	0a000008 	beq	160c <__Stack_Size+0x120c>
    15e8:	0000168f 	andeq	r1, r0, pc, lsl #13
    15ec:	0a01eef2 	beq	7d1bc <__Stack_Size+0x7cdbc>
    15f0:	00000d24 	andeq	r0, r0, r4, lsr #26
    15f4:	0a01e1be 	beq	79cf4 <__Stack_Size+0x798f4>
    15f8:	00000d82 	andeq	r0, r0, r2, lsl #27
    15fc:	0a01e1be 	beq	79cfc <__Stack_Size+0x798fc>
    1600:	00001696 	muleq	r0, r6, r6
    1604:	0a01d4ea 	beq	769b4 <__Stack_Size+0x765b4>
    1608:	00000d8a 	andeq	r0, r0, sl, lsl #27
    160c:	0a01c8f1 	beq	739d8 <__Stack_Size+0x735d8>
    1610:	00000e06 	andeq	r0, r0, r6, lsl #28
    1614:	0a01c8f1 	beq	739e0 <__Stack_Size+0x735e0>
    1618:	0000169d 	muleq	r0, sp, r6
    161c:	0a01bdce 	beq	70d5c <__Stack_Size+0x7095c>
    1620:	000016a4 	andeq	r1, r0, r4, lsr #13
    1624:	0a01b2fc 	beq	6e21c <__Stack_Size+0x6de1c>
    1628:	00000f17 	andeq	r0, r0, r7, lsl pc
    162c:	0a01a8f6 	beq	6ba0c <__Stack_Size+0x6b60c>
    1630:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
    1634:	0a01a8f6 	beq	6ba14 <__Stack_Size+0x6b614>
    1638:	000016ab 	andeq	r1, r0, fp, lsr #13
    163c:	0a019fb8 	beq	69524 <__Stack_Size+0x69124>
    1640:	00000fdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1644:	0a0196bf 	beq	67148 <__Stack_Size+0x66d48>
    1648:	00000ac4 	andeq	r0, r0, r4, asr #21
    164c:	0a0196bf 	beq	67150 <__Stack_Size+0x66d50>
    1650:	00001681 	andeq	r1, r0, r1, lsl #13
    1654:	0a018e86 	beq	65074 <__Stack_Size+0x64c74>
    1658:	00000adb 	ldrdeq	r0, [r0], -fp
    165c:	0a018689 	beq	63088 <__Stack_Size+0x62c88>
    1660:	00000bc1 	andeq	r0, r0, r1, asr #23
    1664:	0a018689 	beq	63090 <__Stack_Size+0x62c90>
    1668:	00001688 	andeq	r1, r0, r8, lsl #13
    166c:	0000fec6 	andeq	pc, r0, r6, asr #29
    1670:	000c1d12 	andeq	r1, ip, r2, lsl sp
    1674:	01580800 	cmpeq	r8, r0, lsl #16
    1678:	0000084c 	andeq	r0, r0, ip, asr #16
    167c:	00101914 	andseq	r1, r0, r4, lsl r9
    1680:	59080800 	stmdbpl	r8, {fp}
    1684:	00091a01 	andeq	r1, r9, r1, lsl #20
    1688:	14591100 	ldrbne	r1, [r9], #-256	; 0x100
    168c:	5a080000 	bpl	201694 <__Stack_Size+0x201294>
    1690:	00091a01 	andeq	r1, r9, r1, lsl #20
    1694:	00230200 	eoreq	r0, r3, r0, lsl #4
    1698:	6e697010 	mcrvs	0, 3, r7, cr9, cr0, {0}
    169c:	015b0800 	cmpeq	fp, r0, lsl #16
    16a0:	000005a9 	andeq	r0, r0, r9, lsr #11
    16a4:	00042302 	andeq	r2, r4, r2, lsl #6
    16a8:	02e70404 	rsceq	r0, r7, #67108864	; 0x4000000
    16ac:	c5120000 	ldrgt	r0, [r2, #-0]
    16b0:	08000014 	stmdaeq	r0, {r2, r4}
    16b4:	08ee015c 	stmiaeq	lr!, {r2, r3, r4, r6, r8}^
    16b8:	030c0000 	movweq	r0, #49152	; 0xc000
    16bc:	095f2709 	ldmdbeq	pc, {r0, r3, r8, r9, sl, sp}^	; <UNPREDICTABLE>
    16c0:	ef0e0000 	svc	0x000e0000
    16c4:	09000009 	stmdbeq	r0, {r0, r3}
    16c8:	00003328 	andeq	r3, r0, r8, lsr #6
    16cc:	00230200 	eoreq	r0, r3, r0, lsl #4
    16d0:	001aec0e 	andseq	lr, sl, lr, lsl #24
    16d4:	33290900 	teqcc	r9, #0
    16d8:	02000000 	andeq	r0, r0, #0
    16dc:	4f0e0123 	svcmi	0x000e0123
    16e0:	09000018 	stmdbeq	r0, {r3, r4}
    16e4:	0000332a 	andeq	r3, r0, sl, lsr #6
    16e8:	02230200 	eoreq	r0, r3, #0
    16ec:	09030c00 	stmdbeq	r3, {sl, fp}
    16f0:	0009922c 	andeq	r9, r9, ip, lsr #4
    16f4:	69680d00 	stmdbvs	r8!, {r8, sl, fp}^
    16f8:	2d090070 	stccs	0, cr0, [r9, #-448]	; 0xfffffe40
    16fc:	00000033 	andeq	r0, r0, r3, lsr r0
    1700:	0e002302 	cdpeq	3, 0, cr2, cr0, cr2, {0}
    1704:	0000151f 	andeq	r1, r0, pc, lsl r5
    1708:	00332e09 	eorseq	r2, r3, r9, lsl #28
    170c:	23020000 	movwcs	r0, #8192	; 0x2000
    1710:	154f0e01 	strbne	r0, [pc, #-3585]	; 917 <__Stack_Size+0x517>
    1714:	2f090000 	svccs	0x00090000
    1718:	00000033 	andeq	r0, r0, r3, lsr r0
    171c:	00022302 	andeq	r2, r2, r2, lsl #6
    1720:	2609060c 	strcs	r0, [r9], -ip, lsl #12
    1724:	000009b7 			; <UNDEFINED> instruction: 0x000009b7
    1728:	6d72610d 	ldfvse	f6, [r2, #-52]!	; 0xffffffcc
    172c:	2c2b0900 	stccs	9, cr0, [fp], #-0
    1730:	02000009 	andeq	r0, r0, #9
    1734:	6c0d0023 	stcvs	0, cr0, [sp], {35}	; 0x23
    1738:	09006765 	stmdbeq	r0, {r0, r2, r5, r6, r8, r9, sl, sp, lr}
    173c:	00095f30 	andeq	r5, r9, r0, lsr pc
    1740:	03230200 	teqeq	r3, #0
    1744:	09030c00 	stmdbeq	r3, {sl, fp}
    1748:	0009ea33 	andeq	lr, r9, r3, lsr sl
    174c:	09ef0e00 	stmibeq	pc!, {r9, sl, fp}^	; <UNPREDICTABLE>
    1750:	34090000 	strcc	r0, [r9], #-0
    1754:	00000033 	andeq	r0, r0, r3, lsr r0
    1758:	0e002302 	cdpeq	3, 0, cr2, cr0, cr2, {0}
    175c:	00001aec 	andeq	r1, r0, ip, ror #21
    1760:	00333509 	eorseq	r3, r3, r9, lsl #10
    1764:	23020000 	movwcs	r0, #8192	; 0x2000
    1768:	184f0e01 	stmdane	pc, {r0, r9, sl, fp}^	; <UNPREDICTABLE>
    176c:	36090000 	strcc	r0, [r9], -r0
    1770:	00000033 	andeq	r0, r0, r3, lsr r0
    1774:	00022302 	andeq	r2, r2, r2, lsl #6
    1778:	3809030c 	stmdacc	r9, {r2, r3, r8, r9}
    177c:	00000a1d 	andeq	r0, r0, sp, lsl sl
    1780:	7069680d 	rsbvc	r6, r9, sp, lsl #16
    1784:	33390900 	teqcc	r9, #0
    1788:	02000000 	andeq	r0, r0, #0
    178c:	1f0e0023 	svcne	0x000e0023
    1790:	09000015 	stmdbeq	r0, {r0, r2, r4}
    1794:	0000333a 	andeq	r3, r0, sl, lsr r3
    1798:	01230200 	teqeq	r3, r0, lsl #4
    179c:	00154f0e 	andseq	r4, r5, lr, lsl #30
    17a0:	333b0900 	teqcc	fp, #0
    17a4:	02000000 	andeq	r0, r0, #0
    17a8:	0c000223 	sfmeq	f0, 4, [r0], {35}	; 0x23
    17ac:	42320906 	eorsmi	r0, r2, #98304	; 0x18000
    17b0:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    17b4:	006d7261 	rsbeq	r7, sp, r1, ror #4
    17b8:	09b73709 	ldmibeq	r7!, {r0, r3, r8, r9, sl, ip, sp}
    17bc:	23020000 	movwcs	r0, #8192	; 0x2000
    17c0:	656c0d00 	strbvs	r0, [ip, #-3328]!	; 0xd00
    17c4:	3c090067 	stccc	0, cr0, [r9], {103}	; 0x67
    17c8:	000009ea 	andeq	r0, r0, sl, ror #19
    17cc:	00032302 	andeq	r2, r3, r2, lsl #6
    17d0:	25090c0c 	strcs	r0, [r9, #-3084]	; 0xc0c
    17d4:	00000a67 	andeq	r0, r0, r7, ror #20
    17d8:	000ff40e 	andeq	pc, pc, lr, lsl #8
    17dc:	92310900 	eorsls	r0, r1, #0
    17e0:	02000009 	andeq	r0, r0, #9
    17e4:	070e0023 	streq	r0, [lr, -r3, lsr #32]
    17e8:	09000012 	stmdbeq	r0, {r1, r4}
    17ec:	000a1d3d 	andeq	r1, sl, sp, lsr sp
    17f0:	06230200 	strteq	r0, [r3], -r0, lsl #4
    17f4:	1a190700 	bne	6433fc <__Stack_Size+0x642ffc>
    17f8:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    17fc:	00000a42 	andeq	r0, r0, r2, asr #20
    1800:	15dd0115 	ldrbne	r0, [sp, #277]	; 0x115
    1804:	fb010000 	blx	4180e <__Stack_Size+0x4140e>
    1808:	0a970101 	beq	fe5c1c14 <SCS_BASE+0x1e5b3c14>
    180c:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    1810:	01006465 	tsteq	r0, r5, ror #8
    1814:	00079afb 	strdeq	r9, [r7], -fp
    1818:	18d11700 	ldmne	r1, {r8, r9, sl, ip}^
    181c:	fb010000 	blx	41826 <__Stack_Size+0x41426>
    1820:	0000059e 	muleq	r0, lr, r5
    1824:	38011800 	stmdacc	r1, {fp, ip}
    1828:	01000000 	mrseq	r0, (UNDEF: 0)
    182c:	01010295 			; <UNDEFINED> instruction: 0x01010295
    1830:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    1834:	64656c19 	strbtvs	r6, [r5], #-3097	; 0xc19
    1838:	02950100 	addseq	r0, r5, #0
    183c:	0000079a 	muleq	r0, sl, r7
    1840:	0018d11a 	andseq	sp, r8, sl, lsl r1
    1844:	02950100 	addseq	r0, r5, #0
    1848:	0000059e 	muleq	r0, lr, r5
    184c:	24011800 	strcs	r1, [r1], #-2048	; 0x800
    1850:	01000015 	tsteq	r0, r5, lsl r0
    1854:	010102b9 			; <UNDEFINED> instruction: 0x010102b9
    1858:	00000ae7 	andeq	r0, r0, r7, ror #21
    185c:	6e697019 	mcrvs	0, 3, r7, cr9, cr9, {0}
    1860:	02b90100 	adcseq	r0, r9, #0
    1864:	000007fc 	strdeq	r0, [r0], -ip
    1868:	0018d11a 	andseq	sp, r8, sl, lsl r1
    186c:	02b90100 	adcseq	r0, r9, #0
    1870:	0000059e 	muleq	r0, lr, r5
    1874:	d2011b00 	andle	r1, r1, #0
    1878:	01000015 	tsteq	r0, r5, lsl r0
    187c:	a90102c2 	stmdbge	r1, {r1, r6, r7, r9}
    1880:	01000005 	tsteq	r0, r5
    1884:	00000b15 	andeq	r0, r0, r5, lsl fp
    1888:	0014591a 	andseq	r5, r4, sl, lsl r9
    188c:	02c20100 	sbceq	r0, r2, #0
    1890:	00000840 	andeq	r0, r0, r0, asr #16
    1894:	1b591d1c 	blne	1648d0c <__Stack_Size+0x164890c>
    1898:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    189c:	0005a902 	andeq	sl, r5, r2, lsl #18
    18a0:	1b000000 	blne	18a8 <__Stack_Size+0x14a8>
    18a4:	00082501 	andeq	r2, r8, r1, lsl #10
    18a8:	049b0100 	ldreq	r0, [fp], #256	; 0x100
    18ac:	00059e01 	andeq	r9, r5, r1, lsl #28
    18b0:	0b350100 	bleq	d41cb8 <__Stack_Size+0xd418b8>
    18b4:	411a0000 	tstmi	sl, r0
    18b8:	01000016 	tsteq	r0, r6, lsl r0
    18bc:	059e049b 	ldreq	r0, [lr, #1179]	; 0x49b
    18c0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    18c4:	00090001 	andeq	r0, r9, r1
    18c8:	05050100 	streq	r0, [r5, #-256]	; 0x100
    18cc:	0b5b0101 	bleq	16c1cd8 <__Stack_Size+0x16c18d8>
    18d0:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
    18d4:	05060100 	streq	r0, [r6, #-256]	; 0x100
    18d8:	0000059e 	muleq	r0, lr, r5
    18dc:	78616d1e 	stmdavc	r1!, {r1, r2, r3, r4, r8, sl, fp, sp, lr}^
    18e0:	05060100 	streq	r0, [r6, #-256]	; 0x100
    18e4:	0000059e 	muleq	r0, lr, r5
    18e8:	ec011f00 	stc	15, cr1, [r1], {-0}
    18ec:	01000017 	tsteq	r0, r7, lsl r0
    18f0:	0101047d 	tsteq	r1, sp, ror r4
    18f4:	08f10118 	ldmeq	r1!, {r3, r4, r8}^
    18f8:	2d010000 	stccs	0, cr0, [r1, #-0]
    18fc:	8d010102 	stfhis	f0, [r1, #-8]
    1900:	1900000b 	stmdbne	r0, {r0, r1, r3}
    1904:	01006469 	tsteq	r0, r9, ror #8
    1908:	059e022d 	ldreq	r0, [lr, #557]	; 0x22d
    190c:	d11a0000 	tstle	sl, r0
    1910:	01000018 	tsteq	r0, r8, lsl r0
    1914:	0b8d022d 	bleq	fe3421d0 <SCS_BASE+0x1e3341d0>
    1918:	02000000 	andeq	r0, r0, #0
    191c:	01f70201 	mvnseq	r0, r1, lsl #4
    1920:	011b0000 	tsteq	fp, r0
    1924:	00001b4c 	andeq	r1, r0, ip, asr #22
    1928:	0104ac01 	tsteq	r4, r1, lsl #24
    192c:	000005a9 	andeq	r0, r0, r9, lsr #11
    1930:	000bcc01 	andeq	ip, fp, r1, lsl #24
    1934:	18701a00 	ldmdane	r0!, {r9, fp, ip}^
    1938:	ac010000 	stcge	0, cr0, [r1], {-0}
    193c:	00059e04 	andeq	r9, r5, r4, lsl #28
    1940:	1ae31a00 	bne	ff8c8148 <SCS_BASE+0x1f8ba148>
    1944:	ac010000 	stcge	0, cr0, [r1], {-0}
    1948:	00059e04 	andeq	r9, r5, r4, lsl #28
    194c:	02051d00 	andeq	r1, r5, #0
    1950:	ad010000 	stcge	0, cr0, [r1, #-0]
    1954:	0005a904 	andeq	sl, r5, r4, lsl #18
    1958:	011b0000 	tsteq	fp, r0
    195c:	000001e3 	andeq	r0, r0, r3, ror #3
    1960:	0104e501 	tsteq	r4, r1, lsl #10
    1964:	000005a9 	andeq	r0, r0, r9, lsr #11
    1968:	000bf701 	andeq	pc, fp, r1, lsl #14
    196c:	64691900 	strbtvs	r1, [r9], #-2304	; 0x900
    1970:	04e50100 	strbteq	r0, [r5], #256	; 0x100
    1974:	0000059e 	muleq	r0, lr, r5
    1978:	0025781a 	eoreq	r7, r5, sl, lsl r8
    197c:	04e50100 	strbteq	r0, [r5], #256	; 0x100
    1980:	0000059e 	muleq	r0, lr, r5
    1984:	2f012000 	svccs	0x00012000
    1988:	01000010 	tsteq	r0, r0, lsl r0
    198c:	a901048a 	stmdbge	r1, {r1, r3, r7, sl}
    1990:	01000005 	tsteq	r0, r5
    1994:	1b9d011b 	blne	fe741e08 <SCS_BASE+0x1e733e08>
    1998:	57010000 	strpl	r0, [r1, -r0]
    199c:	059e0105 	ldreq	r0, [lr, #261]	; 0x105
    19a0:	26010000 	strcs	r0, [r1], -r0
    19a4:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    19a8:	00003107 	andeq	r3, r0, r7, lsl #2
    19ac:	9e055a01 	vmlals.f32	s10, s10, s2
    19b0:	00000005 	andeq	r0, r0, r5
    19b4:	18c80120 	stmiane	r8, {r5, r8}^
    19b8:	85010000 	strhi	r0, [r1, #-0]
    19bc:	059e0105 	ldreq	r0, [lr, #261]	; 0x105
    19c0:	1b010000 	blne	419c8 <__Stack_Size+0x415c8>
    19c4:	00186801 	andseq	r6, r8, r1, lsl #16
    19c8:	04b80100 	ldrteq	r0, [r8], #256	; 0x100
    19cc:	00059e01 	andeq	r9, r5, r1, lsl #28
    19d0:	0c610100 	stfeqe	f0, [r1], #-0
    19d4:	051a0000 	ldreq	r0, [sl, #-0]
    19d8:	01000002 	tsteq	r0, r2
    19dc:	05a904b8 	streq	r0, [r9, #1208]!	; 0x4b8
    19e0:	591d0000 	ldmdbpl	sp, {}	; <UNPREDICTABLE>
    19e4:	0100001b 	tsteq	r0, fp, lsl r0
    19e8:	05a904b9 	streq	r0, [r9, #1209]!	; 0x4b9
    19ec:	1b000000 	blne	19f4 <__Stack_Size+0x15f4>
    19f0:	001adb01 	andseq	sp, sl, r1, lsl #22
    19f4:	04bc0100 	ldrteq	r0, [ip], #256	; 0x100
    19f8:	00059e01 	andeq	r9, r5, r1, lsl #28
    19fc:	0c8d0100 	stfeqs	f0, [sp], {0}
    1a00:	051a0000 	ldreq	r0, [sl, #-0]
    1a04:	01000002 	tsteq	r0, r2
    1a08:	05a904bc 	streq	r0, [r9, #1212]!	; 0x4bc
    1a0c:	591d0000 	ldmdbpl	sp, {}	; <UNPREDICTABLE>
    1a10:	0100001b 	tsteq	r0, fp, lsl r0
    1a14:	05a904bd 	streq	r0, [r9, #1213]!	; 0x4bd
    1a18:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1a1c:	0009a601 	andeq	sl, r9, r1, lsl #12
    1a20:	048e0100 	streq	r0, [lr], #256	; 0x100
    1a24:	0ca80101 	stfeqs	f0, [r8], #4
    1a28:	69190000 	ldmdbvs	r9, {}	; <UNPREDICTABLE>
    1a2c:	8e010064 	cdphi	0, 0, cr0, cr1, cr4, {3}
    1a30:	00059e04 	andeq	r9, r5, r4, lsl #28
    1a34:	01180000 	tsteq	r8, r0
    1a38:	00000f5a 	andeq	r0, r0, sl, asr pc
    1a3c:	01049101 	tsteq	r4, r1, lsl #2
    1a40:	000cc401 	andeq	ip, ip, r1, lsl #8
    1a44:	0f6b1a00 	svceq	0x006b1a00
    1a48:	91010000 	mrsls	r0, (UNDEF: 1)
    1a4c:	00059e04 	andeq	r9, r5, r4, lsl #28
    1a50:	01180000 	tsteq	r8, r0
    1a54:	00001624 	andeq	r1, r0, r4, lsr #12
    1a58:	01049701 	tsteq	r4, r1, lsl #14
    1a5c:	000ce001 	andeq	lr, ip, r1
    1a60:	18481a00 	stmdane	r8, {r9, fp, ip}^
    1a64:	97010000 	strls	r0, [r1, -r0]
    1a68:	00059e04 	andeq	r9, r5, r4, lsl #28
    1a6c:	01180000 	tsteq	r8, r0
    1a70:	000013e1 	andeq	r1, r0, r1, ror #7
    1a74:	01025701 	tsteq	r2, r1, lsl #14
    1a78:	000d1401 	andeq	r1, sp, r1, lsl #8
    1a7c:	0a391a00 	beq	e48284 <__Stack_Size+0xe47e84>
    1a80:	57010000 	strpl	r0, [r1, -r0]
    1a84:	00059e02 	andeq	r9, r5, r2, lsl #28
    1a88:	19a21a00 	stmibne	r2!, {r9, fp, ip}
    1a8c:	57010000 	strpl	r0, [r1, -r0]
    1a90:	0005b402 	andeq	fp, r5, r2, lsl #8
    1a94:	0b251d00 	bleq	948e9c <__Stack_Size+0x948a9c>
    1a98:	5b010000 	blpl	41aa0 <__Stack_Size+0x416a0>
    1a9c:	00059302 	andeq	r9, r5, r2, lsl #6
    1aa0:	97210000 	strls	r0, [r1, -r0]!
    1aa4:	c400000a 	strgt	r0, [r0], #-10
    1aa8:	d8080031 	stmdale	r8, {r0, r4, r5}
    1aac:	02080031 	andeq	r0, r8, #49	; 0x31
    1ab0:	4201007d 	andmi	r0, r1, #125	; 0x7d
    1ab4:	2200000d 	andcs	r0, r0, #13
    1ab8:	00000aa6 	andeq	r0, r0, r6, lsr #21
    1abc:	00000080 	andeq	r0, r0, r0, lsl #1
    1ac0:	000ab223 	andeq	fp, sl, r3, lsr #4
    1ac4:	31d42400 	bicscc	r2, r4, r0, lsl #8
    1ac8:	0a010800 	beq	43ad0 <__Stack_Size+0x436d0>
    1acc:	0000004d 	andeq	r0, r0, sp, asr #32
    1ad0:	1af20125 	bne	ffc81f6c <SCS_BASE+0x1fc73f6c>
    1ad4:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    1ad8:	0031d801 	eorseq	sp, r1, r1, lsl #16
    1adc:	00322808 	eorseq	r2, r2, r8, lsl #16
    1ae0:	0000a108 	andeq	sl, r0, r8, lsl #2
    1ae4:	0e1a0100 	mufeqe	f0, f2, f0
    1ae8:	67260000 	strvs	r0, [r6, -r0]!
    1aec:	01000013 	tsteq	r0, r3, lsl r0
    1af0:	00007f69 	andeq	r7, r0, r9, ror #30
    1af4:	0000c100 	andeq	ip, r0, r0, lsl #2
    1af8:	006e2700 	rsbeq	r2, lr, r0, lsl #14
    1afc:	00486a01 	subeq	r6, r8, r1, lsl #20
    1b00:	00e20000 	rsceq	r0, r2, r0
    1b04:	63270000 	teqvs	r7, #0
    1b08:	786b0100 	stmdavc	fp!, {r8}^
    1b0c:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    1b10:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1b14:	080031ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, ip, sp}
    1b18:	00004d23 	andeq	r4, r0, r3, lsr #26
    1b1c:	00000da1 	andeq	r0, r0, r1, lsr #27
    1b20:	01510129 	cmpeq	r1, r9, lsr #2
    1b24:	5001293d 	andpl	r2, r1, sp, lsr r9
    1b28:	48000c05 	stmdami	r0, {r0, r2, sl, fp}
    1b2c:	28004000 	stmdacs	r0, {lr}
    1b30:	080031f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, ip, sp}
    1b34:	00004d42 	andeq	r4, r0, r2, asr #26
    1b38:	00000dbe 			; <UNDEFINED> instruction: 0x00000dbe
    1b3c:	02510129 	subseq	r0, r1, #1073741834	; 0x4000000a
    1b40:	01294008 	teqeq	r9, r8
    1b44:	000c0550 	andeq	r0, ip, r0, asr r5
    1b48:	00400048 	subeq	r0, r0, r8, asr #32
    1b4c:	00320228 	eorseq	r0, r2, r8, lsr #4
    1b50:	004d2308 	subeq	r2, sp, r8, lsl #6
    1b54:	000dda00 	andeq	sp, sp, r0, lsl #20
    1b58:	51012900 	tstpl	r1, r0, lsl #18
    1b5c:	01293a01 	teqeq	r9, r1, lsl #20
    1b60:	000c0550 	andeq	r0, ip, r0, asr r5
    1b64:	00400048 	subeq	r0, r0, r8, asr #32
    1b68:	00320a28 	eorseq	r0, r2, r8, lsr #20
    1b6c:	004d4208 	subeq	r4, sp, r8, lsl #4
    1b70:	000df700 	andeq	pc, sp, r0, lsl #14
    1b74:	51012900 	tstpl	r1, r0, lsl #18
    1b78:	29400802 	stmdbcs	r0, {r1, fp}^
    1b7c:	0c055001 	stceq	0, cr5, [r5], {1}
    1b80:	40004800 	andmi	r4, r0, r0, lsl #16
    1b84:	32142a00 	andscc	r2, r4, #0
    1b88:	4d230800 	stcmi	8, cr0, [r3, #-0]
    1b8c:	1c2b0000 	stcne	0, cr0, [fp], #-0
    1b90:	42080032 	andmi	r0, r8, #50	; 0x32
    1b94:	2900004d 	stmdbcs	r0, {r0, r2, r3, r6}
    1b98:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    1b9c:	50012940 	andpl	r2, r1, r0, asr #18
    1ba0:	48000c05 	stmdami	r0, {r0, r2, sl, fp}
    1ba4:	00004000 	andeq	r4, r0, r0
    1ba8:	153d012c 	ldrne	r0, [sp, #-300]!	; 0x12c
    1bac:	66010000 	strvs	r0, [r1], -r0
    1bb0:	00322801 	eorseq	r2, r2, r1, lsl #16
    1bb4:	00322e08 	eorseq	r2, r2, r8, lsl #28
    1bb8:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    1bbc:	000e5701 	andeq	r5, lr, r1, lsl #14
    1bc0:	13672600 	cmnne	r7, #0
    1bc4:	66010000 	strvs	r0, [r1], -r0
    1bc8:	0000007f 	andeq	r0, r0, pc, ror r0
    1bcc:	00000116 	andeq	r0, r0, r6, lsl r1
    1bd0:	00322e2d 	eorseq	r2, r2, sp, lsr #28
    1bd4:	0d420108 	stfeqe	f0, [r2, #-32]	; 0xffffffe0
    1bd8:	01290000 	teqeq	r9, r0
    1bdc:	01f30550 	mvnseq	r0, r0, asr r5
    1be0:	000a2350 	andeq	r2, sl, r0, asr r3
    1be4:	a4012e00 	strge	r2, [r1], #-3584	; 0xe00
    1be8:	01000015 	tsteq	r0, r5, lsl r0
    1bec:	0048017f 	subeq	r0, r8, pc, ror r1
    1bf0:	322e0000 	eorcc	r0, lr, #0
    1bf4:	32540800 	subscc	r0, r4, #0
    1bf8:	7d020800 	stcvc	8, cr0, [r2, #-0]
    1bfc:	0e840100 	rmfeqs	f0, f4, f0
    1c00:	f9260000 			; <UNDEFINED> instruction: 0xf9260000
    1c04:	0100000f 	tsteq	r0, pc
    1c08:	0000787f 	andeq	r7, r0, pc, ror r8
    1c0c:	00014400 	andeq	r4, r1, r0, lsl #8
    1c10:	012f0000 	teqeq	pc, r0
    1c14:	00000c44 	andeq	r0, r0, r4, asr #24
    1c18:	5401bd01 	strpl	fp, [r1], #-3329	; 0xd01
    1c1c:	8c080032 	stchi	0, cr0, [r8], {50}	; 0x32
    1c20:	02080032 	andeq	r0, r8, #50	; 0x32
    1c24:	2c01007d 	stccs	0, cr0, [r1], {125}	; 0x7d
    1c28:	001ab801 	andseq	fp, sl, r1, lsl #16
    1c2c:	01cb0100 	biceq	r0, fp, r0, lsl #2
    1c30:	0800328c 	stmdaeq	r0, {r2, r3, r7, r9, ip, sp}
    1c34:	0800329c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, sp}
    1c38:	01007d02 	tsteq	r0, r2, lsl #26
    1c3c:	00000eda 	ldrdeq	r0, [r0], -sl
    1c40:	0009ef30 	andeq	lr, r9, r0, lsr pc
    1c44:	9ecb0100 	pollse	f0, f3, f0
    1c48:	01000005 	tsteq	r0, r5
    1c4c:	1aec3050 	bne	ffb0dd94 <SCS_BASE+0x1faffd94>
    1c50:	cb010000 	blgt	41c58 <__Stack_Size+0x41858>
    1c54:	0000059e 	muleq	r0, lr, r5
    1c58:	4f305101 	svcmi	0x00305101
    1c5c:	01000018 	tsteq	r0, r8, lsl r0
    1c60:	00059ecb 	andeq	r9, r5, fp, asr #29
    1c64:	00520100 	subseq	r0, r2, r0, lsl #2
    1c68:	11a9012c 			; <UNDEFINED> instruction: 0x11a9012c
    1c6c:	d0010000 	andle	r0, r1, r0
    1c70:	00329c01 	eorseq	r9, r2, r1, lsl #24
    1c74:	0032ac08 	eorseq	sl, r2, r8, lsl #24
    1c78:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    1c7c:	000f1b01 	andeq	r1, pc, r1, lsl #22
    1c80:	69683100 	stmdbvs	r8!, {r8, ip, sp}^
    1c84:	d0010070 	andle	r0, r1, r0, ror r0
    1c88:	0000059e 	muleq	r0, lr, r5
    1c8c:	1f305001 	svcne	0x00305001
    1c90:	01000015 	tsteq	r0, r5, lsl r0
    1c94:	00059ed0 	ldrdeq	r9, [r5], -r0
    1c98:	30510100 	subscc	r0, r1, r0, lsl #2
    1c9c:	0000154f 	andeq	r1, r0, pc, asr #10
    1ca0:	059ed001 	ldreq	sp, [lr, #1]
    1ca4:	52010000 	andpl	r0, r1, #0
    1ca8:	3e012c00 	cdpcc	12, 0, cr2, cr1, cr0, {0}
    1cac:	01000012 	tsteq	r0, r2, lsl r0
    1cb0:	32ac01d5 	adccc	r0, ip, #1073741877	; 0x40000035
    1cb4:	32bc0800 	adcscc	r0, ip, #0
    1cb8:	7d020800 	stcvc	8, cr0, [r2, #-0]
    1cbc:	0f5c0100 	svceq	0x005c0100
    1cc0:	ef300000 	svc	0x00300000
    1cc4:	01000009 	tsteq	r0, r9
    1cc8:	00059ed5 	ldrdeq	r9, [r5], -r5
    1ccc:	30500100 	subscc	r0, r0, r0, lsl #2
    1cd0:	00001aec 	andeq	r1, r0, ip, ror #21
    1cd4:	059ed501 	ldreq	sp, [lr, #1281]	; 0x501
    1cd8:	51010000 	mrspl	r0, (UNDEF: 1)
    1cdc:	00184f30 	andseq	r4, r8, r0, lsr pc
    1ce0:	9ed50100 	cdpls	1, 13, cr0, cr5, cr0, {0}
    1ce4:	01000005 	tsteq	r0, r5
    1ce8:	012c0052 	qsubeq	r0, r2, ip
    1cec:	00000e0e 	andeq	r0, r0, lr, lsl #28
    1cf0:	bc01da01 	stclt	10, cr13, [r1], {1}
    1cf4:	cc080032 	stcgt	0, cr0, [r8], {50}	; 0x32
    1cf8:	02080032 	andeq	r0, r8, #50	; 0x32
    1cfc:	9d01007d 	stcls	0, cr0, [r1, #-500]	; 0xfffffe0c
    1d00:	3100000f 	tstcc	r0, pc
    1d04:	00706968 	rsbseq	r6, r0, r8, ror #18
    1d08:	059eda01 	ldreq	sp, [lr, #2561]	; 0xa01
    1d0c:	50010000 	andpl	r0, r1, r0
    1d10:	00151f30 	andseq	r1, r5, r0, lsr pc
    1d14:	9eda0100 	cdpls	1, 13, cr0, cr10, cr0, {0}
    1d18:	01000005 	tsteq	r0, r5
    1d1c:	154f3051 	strbne	r3, [pc, #-81]	; 1cd3 <__Stack_Size+0x18d3>
    1d20:	da010000 	ble	41d28 <__Stack_Size+0x41928>
    1d24:	0000059e 	muleq	r0, lr, r5
    1d28:	2f005201 	svccs	0x00005201
    1d2c:	00006001 	andeq	r6, r0, r1
    1d30:	01e10100 	mvneq	r0, r0, lsl #2
    1d34:	080032cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip, sp}
    1d38:	080032ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, ip, sp}
    1d3c:	01007d02 	tsteq	r0, r2, lsl #26
    1d40:	000a7221 	andeq	r7, sl, r1, lsr #4
    1d44:	0032ce00 	eorseq	ip, r2, r0, lsl #28
    1d48:	0032d008 	eorseq	sp, r2, r8
    1d4c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    1d50:	000fd601 	andeq	sp, pc, r1, lsl #12
    1d54:	0a803200 	beq	fe00e55c <SCS_BASE+0x1e00055c>
    1d58:	50010000 	andpl	r0, r1, r0
    1d5c:	000a8b32 	andeq	r8, sl, r2, lsr fp
    1d60:	00510100 	subseq	r0, r1, r0, lsl #2
    1d64:	0c6e0133 	stfeqe	f0, [lr], #-204	; 0xffffff34
    1d68:	03010000 	movweq	r0, #4096	; 0x1000
    1d6c:	32d00101 	sbcscc	r0, r0, #1073741824	; 0x40000000
    1d70:	33140800 	tstcc	r4, #0
    1d74:	01970800 	orrseq	r0, r7, r0, lsl #16
    1d78:	32010000 	andcc	r0, r1, #0
    1d7c:	2a000010 	bcs	1dc4 <__Stack_Size+0x19c4>
    1d80:	080032dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, sp}
    1d84:	00004d5f 	andeq	r4, r0, pc, asr sp
    1d88:	0032e42a 	eorseq	lr, r2, sl, lsr #8
    1d8c:	004d5f08 	subeq	r5, sp, r8, lsl #30
    1d90:	32ec2a00 	rsccc	r2, ip, #0
    1d94:	4d5f0800 	ldclmi	8, cr0, [pc, #-0]	; 1d9c <__Stack_Size+0x199c>
    1d98:	f42a0000 	vld4.8	{d0-d3}, [sl], r0
    1d9c:	5f080032 	svcpl	0x00080032
    1da0:	2a00004d 	bcs	1edc <__Stack_Size+0x1adc>
    1da4:	080032fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, ip, sp}
    1da8:	00004d5f 	andeq	r4, r0, pc, asr sp
    1dac:	0033042a 	eorseq	r0, r3, sl, lsr #8
    1db0:	004d5f08 	subeq	r5, sp, r8, lsl #30
    1db4:	33102400 	tstcc	r0, #0
    1db8:	5f010800 	svcpl	0x00010800
    1dbc:	0000004d 	andeq	r0, r0, sp, asr #32
    1dc0:	089e0133 	ldmeq	lr, {r0, r1, r4, r5, r8}
    1dc4:	0c010000 	stceq	0, cr0, [r1], {-0}
    1dc8:	33140101 	tstcc	r4, #1073741824	; 0x40000000
    1dcc:	33580800 	cmpcc	r8, #0
    1dd0:	01b70800 			; <UNDEFINED> instruction: 0x01b70800
    1dd4:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    1dd8:	2a000010 	bcs	1e20 <__Stack_Size+0x1a20>
    1ddc:	08003320 	stmdaeq	r0, {r5, r8, r9, ip, sp}
    1de0:	00004d0a 	andeq	r4, r0, sl, lsl #26
    1de4:	0033282a 	eorseq	r2, r3, sl, lsr #16
    1de8:	004d0a08 	subeq	r0, sp, r8, lsl #20
    1dec:	33302a00 	teqcc	r0, #0
    1df0:	4d0a0800 	stcmi	8, cr0, [sl, #-0]
    1df4:	382a0000 	stmdacc	sl!, {}	; <UNPREDICTABLE>
    1df8:	0a080033 	beq	201ecc <__Stack_Size+0x201acc>
    1dfc:	2a00004d 	bcs	1f38 <__Stack_Size+0x1b38>
    1e00:	08003340 	stmdaeq	r0, {r6, r8, r9, ip, sp}
    1e04:	00004d0a 	andeq	r4, r0, sl, lsl #26
    1e08:	0033482a 	eorseq	r4, r3, sl, lsr #16
    1e0c:	004d0a08 	subeq	r0, sp, r8, lsl #20
    1e10:	33542400 	cmpcc	r4, #0
    1e14:	0a010800 	beq	43e1c <__Stack_Size+0x43a1c>
    1e18:	0000004d 	andeq	r0, r0, sp, asr #32
    1e1c:	1aa60134 	bne	fe9822f4 <SCS_BASE+0x1e9742f4>
    1e20:	15010000 	strne	r0, [r1, #-0]
    1e24:	33580101 	cmpcc	r8, #1073741824	; 0x40000000
    1e28:	33620800 	cmncc	r2, #0
    1e2c:	7d020800 	stcvc	8, cr0, [r2, #-0]
    1e30:	10cd0100 	sbcne	r0, sp, r0, lsl #2
    1e34:	d1350000 	teqle	r5, r0
    1e38:	01000018 	tsteq	r0, r8, lsl r0
    1e3c:	0b8d0115 	bleq	fe342298 <SCS_BASE+0x1e334298>
    1e40:	01d70000 	bicseq	r0, r7, r0
    1e44:	5e240000 	cdppl	0, 2, cr0, cr4, cr0, {0}
    1e48:	01080033 	tsteq	r8, r3, lsr r0
    1e4c:	00001032 	andeq	r1, r0, r2, lsr r0
    1e50:	00336224 	eorseq	r6, r3, r4, lsr #4
    1e54:	0fd60108 	svceq	0x00d60108
    1e58:	21000000 	mrscs	r0, (UNDEF: 0)
    1e5c:	00000ce0 	andeq	r0, r0, r0, ror #25
    1e60:	08003362 	stmdaeq	r0, {r1, r5, r6, r8, r9, ip, sp}
    1e64:	08003364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, sp}
    1e68:	01007d02 	tsteq	r0, r2, lsl #26
    1e6c:	000010f6 	strdeq	r1, [r0], -r6
    1e70:	000cef32 	andeq	lr, ip, r2, lsr pc
    1e74:	32500100 	subscc	r0, r0, #0
    1e78:	00000cfb 	strdeq	r0, [r0], -fp
    1e7c:	07365101 	ldreq	r5, [r6, -r1, lsl #2]!
    1e80:	0000000d 	andeq	r0, r0, sp
    1e84:	1b5e0134 	blne	178235c <__Stack_Size+0x1781f5c>
    1e88:	76010000 	strvc	r0, [r1], -r0
    1e8c:	33640102 	cmncc	r4, #-2147483648	; 0x80000000
    1e90:	33700800 	cmncc	r0, #0
    1e94:	7d020800 	stcvc	8, cr0, [r2, #-0]
    1e98:	112a0100 	teqne	sl, r0, lsl #2
    1e9c:	6c2d0000 	stcvs	0, cr0, [sp], #-0
    1ea0:	01080033 	tsteq	r8, r3, lsr r0
    1ea4:	00004d78 	andeq	r4, r0, r8, ror sp
    1ea8:	01510129 	cmpeq	r1, r9, lsr #2
    1eac:	50012930 	andpl	r2, r1, r0, lsr r9
    1eb0:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    1eb4:	00004001 	andeq	r4, r0, r1
    1eb8:	000a9721 	andeq	r9, sl, r1, lsr #14
    1ebc:	00337000 	eorseq	r7, r3, r0
    1ec0:	00338c08 	eorseq	r8, r3, r8, lsl #24
    1ec4:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    1ec8:	00116601 	andseq	r6, r1, r1, lsl #12
    1ecc:	0aa62200 	beq	fe98a6d4 <SCS_BASE+0x1e97c6d4>
    1ed0:	02110000 	andseq	r0, r1, #0
    1ed4:	b2220000 	eorlt	r0, r2, #0
    1ed8:	4b00000a 	blmi	1f08 <__Stack_Size+0x1b08>
    1edc:	24000002 	strcs	r0, [r0], #-2
    1ee0:	08003376 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, ip, sp}
    1ee4:	000d1401 	andeq	r1, sp, r1, lsl #8
    1ee8:	33862400 	orrcc	r2, r6, #0
    1eec:	5f010800 	svcpl	0x00010800
    1ef0:	0000004d 	andeq	r0, r0, sp, asr #32
    1ef4:	17570137 	smmlarne	r7, r7, r1, r0
    1ef8:	9b010000 	blls	41f00 <__Stack_Size+0x41b00>
    1efc:	059e0102 	ldreq	r0, [lr, #258]	; 0x102
    1f00:	338c0000 	orrcc	r0, ip, #0
    1f04:	33ac0800 			; <UNDEFINED> instruction: 0x33ac0800
    1f08:	02850800 	addeq	r0, r5, #0
    1f0c:	9f010000 	svcls	0x00010000
    1f10:	35000011 	strcc	r0, [r0, #-17]
    1f14:	000013da 	ldrdeq	r1, [r0], -sl
    1f18:	56029b01 	strpl	r9, [r2], -r1, lsl #22
    1f1c:	a5000007 	strge	r0, [r0, #-7]
    1f20:	2a000002 	bcs	1f30 <__Stack_Size+0x1b30>
    1f24:	0800339c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip, sp}
    1f28:	00004d91 	muleq	r0, r1, sp
    1f2c:	0abf2100 	beq	fefca334 <SCS_BASE+0x1efbc334>
    1f30:	33ac0000 			; <UNDEFINED> instruction: 0x33ac0000
    1f34:	33cc0800 	biccc	r0, ip, #0
    1f38:	7d020800 	stcvc	8, cr0, [r2, #-0]
    1f3c:	12000100 	andne	r0, r0, #0
    1f40:	ce220000 	cdpgt	0, 2, cr0, cr2, cr0, {0}
    1f44:	c600000a 	strgt	r0, [r0], -sl
    1f48:	22000002 	andcs	r0, r0, #2
    1f4c:	00000ada 	ldrdeq	r0, [r0], -sl
    1f50:	000002e7 	andeq	r0, r0, r7, ror #5
    1f54:	000abf38 	andeq	fp, sl, r8, lsr pc
    1f58:	0033b000 	eorseq	fp, r3, r0
    1f5c:	00001808 	andeq	r1, r0, r8, lsl #16
    1f60:	02b90100 	adcseq	r0, r9, #0
    1f64:	000011f5 	strdeq	r1, [r0], -r5
    1f68:	000ace23 	andeq	ip, sl, r3, lsr #28
    1f6c:	00383900 	eorseq	r3, r8, r0, lsl #18
    1f70:	da230000 	ble	8c1f78 <__Stack_Size+0x8c1b78>
    1f74:	2400000a 	strcs	r0, [r0], #-10
    1f78:	080033be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, ip, sp}
    1f7c:	004d5f01 	subeq	r5, sp, r1, lsl #30
    1f80:	24000000 	strcs	r0, [r0], #-0
    1f84:	080033c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, ip, sp}
    1f88:	004d0a01 	subeq	r0, sp, r1, lsl #20
    1f8c:	01330000 	teqeq	r3, r0
    1f90:	00000acc 	andeq	r0, r0, ip, asr #21
    1f94:	01033601 	tsteq	r3, r1, lsl #12
    1f98:	080033cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp}
    1f9c:	08003408 	stmdaeq	r0, {r3, sl, ip, sp}
    1fa0:	00000321 	andeq	r0, r0, r1, lsr #6
    1fa4:	00123501 	andseq	r3, r2, r1, lsl #10
    1fa8:	17513500 	ldrbne	r3, [r1, -r0, lsl #10]
    1fac:	36010000 	strcc	r0, [r1], -r0
    1fb0:	0005b403 	andeq	fp, r5, r3, lsl #8
    1fb4:	00034100 	andeq	r4, r3, r0, lsl #2
    1fb8:	33fa2a00 	mvnscc	r2, #0
    1fbc:	4dae0800 	stcmi	8, cr0, [lr]
    1fc0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1fc4:	00015201 	andeq	r5, r1, r1, lsl #4
    1fc8:	03330100 	teqeq	r3, #0
    1fcc:	12510101 	subsne	r0, r1, #1073741824	; 0x40000000
    1fd0:	511a0000 	tstpl	sl, r0
    1fd4:	01000017 	tsteq	r0, r7, lsl r0
    1fd8:	05b40333 	ldreq	r0, [r4, #819]!	; 0x333
    1fdc:	21000000 	mrscs	r0, (UNDEF: 0)
    1fe0:	00001235 	andeq	r1, r0, r5, lsr r2
    1fe4:	08003408 	stmdaeq	r0, {r3, sl, ip, sp}
    1fe8:	08003412 	stmdaeq	r0, {r1, r4, sl, ip, sp}
    1fec:	01007d02 	tsteq	r0, r2, lsl #26
    1ff0:	00001286 	andeq	r1, r0, r6, lsl #5
    1ff4:	00124422 	andseq	r4, r2, r2, lsr #8
    1ff8:	00036200 	andeq	r6, r3, r0, lsl #4
    1ffc:	34122d00 	ldrcc	r2, [r2], #-3328	; 0xd00
    2000:	00010800 	andeq	r0, r1, r0, lsl #16
    2004:	29000012 	stmdbcs	r0, {r1, r4}
    2008:	f3075001 	vhadd.u8	d5, d7, d1
    200c:	e80a5001 	stmda	sl, {r0, ip, lr}
    2010:	00001e03 	andeq	r1, r0, r3, lsl #28
    2014:	1306012c 	movwne	r0, #24876	; 0x612c
    2018:	7c010000 	stcvc	0, cr0, [r1], {-0}
    201c:	00341201 	eorseq	r1, r4, r1, lsl #4
    2020:	00341608 	eorseq	r1, r4, r8, lsl #12
    2024:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    2028:	0012c101 	andseq	ip, r2, r1, lsl #2
    202c:	179d2600 	ldrne	r2, [sp, r0, lsl #12]
    2030:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2034:	00000048 	andeq	r0, r0, r8, asr #32
    2038:	00000383 	andeq	r0, r0, r3, lsl #7
    203c:	0034162d 	eorseq	r1, r4, sp, lsr #12
    2040:	12350108 	eorsne	r0, r5, #2
    2044:	01290000 	teqeq	r9, r0
    2048:	01f30350 	mvnseq	r0, r0, asr r3
    204c:	3a000050 	bcc	2194 <__Stack_Size+0x1d94>
    2050:	00000ae7 	andeq	r0, r0, r7, ror #21
    2054:	08003416 	stmdaeq	r0, {r1, r2, r4, sl, ip, sp}
    2058:	080034e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, sp}
    205c:	000003a4 	andeq	r0, r0, r4, lsr #7
    2060:	00149701 	andseq	r9, r4, r1, lsl #14
    2064:	0afa2200 	beq	ffe8a86c <SCS_BASE+0x1fe7c86c>
    2068:	03c40000 	biceq	r0, r4, #0
    206c:	983b0000 	ldmdals	fp!, {}	; <UNPREDICTABLE>
    2070:	d2080034 	andle	r0, r8, #52	; 0x34
    2074:	ab080034 	blge	20214c <__Stack_Size+0x201d4c>
    2078:	3c000013 	stccc	0, cr0, [r0], {19}
    207c:	00000b07 	andeq	r0, r0, r7, lsl #22
    2080:	00000417 	andeq	r0, r0, r7, lsl r4
    2084:	0034a428 	eorseq	sl, r4, r8, lsr #8
    2088:	004dc208 	subeq	ip, sp, r8, lsl #4
    208c:	00131c00 	andseq	r1, r3, r0, lsl #24
    2090:	53012900 	movwpl	r2, #6400	; 0x1900
    2094:	01293701 	teqeq	r9, r1, lsl #14
    2098:	29310152 	ldmdbcs	r1!, {r1, r4, r6, r8}
    209c:	3d015101 	stfccs	f5, [r1, #-4]
    20a0:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    20a4:	0124000c 	teqeq	r4, ip
    20a8:	aa280040 	bge	a021b0 <__Stack_Size+0xa01db0>
    20ac:	00080034 	andeq	r0, r8, r4, lsr r0
    20b0:	2f000012 	svccs	0x00000012
    20b4:	29000013 	stmdbcs	r0, {r0, r1, r4}
    20b8:	35015001 	strcc	r5, [r1, #-1]
    20bc:	34b22800 	ldrtcc	r2, [r2], #2048	; 0x800
    20c0:	4dec0800 	stclmi	8, cr0, [ip]
    20c4:	134b0000 	movtne	r0, #45056	; 0xb000
    20c8:	01290000 	teqeq	r9, r0
    20cc:	29310151 	ldmdbcs	r1!, {r0, r4, r6, r8}
    20d0:	0c055001 	stceq	0, cr5, [r5], {1}
    20d4:	40012400 	andmi	r2, r1, r0, lsl #8
    20d8:	34b82800 	ldrtcc	r2, [r8], #2048	; 0x800
    20dc:	12000800 	andne	r0, r0, #0
    20e0:	135e0000 	cmpne	lr, #0
    20e4:	01290000 	teqeq	r9, r0
    20e8:	00350150 	eorseq	r0, r5, r0, asr r1
    20ec:	0034be28 	eorseq	fp, r4, r8, lsr #28
    20f0:	004e0608 	subeq	r0, lr, r8, lsl #12
    20f4:	00137500 	andseq	r7, r3, r0, lsl #10
    20f8:	50012900 	andpl	r2, r1, r0, lsl #18
    20fc:	24000c05 	strcs	r0, [r0], #-3077	; 0xc05
    2100:	28004001 	stmdacs	r0, {r0, lr}
    2104:	080034cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip, sp}
    2108:	00004dc2 	andeq	r4, r0, r2, asr #27
    210c:	0000139b 	muleq	r0, fp, r3
    2110:	01530129 	cmpeq	r3, r9, lsr #2
    2114:	52012937 	andpl	r2, r1, #901120	; 0xdc000
    2118:	01293101 	teqeq	r9, r1, lsl #2
    211c:	293a0151 	ldmdbcs	sl!, {r0, r4, r6, r8}
    2120:	0c055001 	stceq	0, cr5, [r5], {1}
    2124:	40012400 	andmi	r2, r1, r0, lsl #8
    2128:	34d22b00 	ldrbcc	r2, [r2], #2816	; 0xb00
    212c:	12000800 	andne	r0, r0, #0
    2130:	01290000 	teqeq	r9, r0
    2134:	00350150 	eorseq	r0, r5, r0, asr r1
    2138:	342a2800 	strtcc	r2, [sl], #-2048	; 0x800
    213c:	4d5f0800 	ldclmi	8, cr0, [pc, #-0]	; 2144 <__Stack_Size+0x1d44>
    2140:	13c70000 	bicne	r0, r7, #0
    2144:	01290000 	teqeq	r9, r0
    2148:	29320151 	ldmdbcs	r2!, {r0, r4, r6, r8}
    214c:	0c055001 	stceq	0, cr5, [r5], {1}
    2150:	40011000 	andmi	r1, r1, r0
    2154:	34322800 	ldrtcc	r2, [r2], #-2048	; 0x800
    2158:	4d0a0800 	stcmi	8, cr0, [sl, #-0]
    215c:	13e30000 	mvnne	r0, #0
    2160:	01290000 	teqeq	r9, r0
    2164:	29340151 	ldmdbcs	r4!, {r0, r4, r6, r8}
    2168:	0c055001 	stceq	0, cr5, [r5], {1}
    216c:	40011000 	andmi	r1, r1, r0
    2170:	34382800 	ldrtcc	r2, [r8], #-2048	; 0x800
    2174:	12000800 	andne	r0, r0, #0
    2178:	13f60000 	mvnsne	r0, #0
    217c:	01290000 	teqeq	r9, r0
    2180:	00350150 	eorseq	r0, r5, r0, asr r1
    2184:	00345228 	eorseq	r5, r4, r8, lsr #4
    2188:	004d0a08 	subeq	r0, sp, r8, lsl #20
    218c:	00141200 	andseq	r1, r4, r0, lsl #4
    2190:	51012900 	tstpl	r1, r0, lsl #18
    2194:	01293201 	teqeq	r9, r1, lsl #4
    2198:	000c0550 	andeq	r0, ip, r0, asr r5
    219c:	00400110 	subeq	r0, r0, r0, lsl r1
    21a0:	00345a28 	eorseq	r5, r4, r8, lsr #20
    21a4:	004d5f08 	subeq	r5, sp, r8, lsl #30
    21a8:	00142e00 	andseq	r2, r4, r0, lsl #28
    21ac:	51012900 	tstpl	r1, r0, lsl #18
    21b0:	01293401 	teqeq	r9, r1, lsl #8
    21b4:	000c0550 	andeq	r0, ip, r0, asr r5
    21b8:	00400110 	subeq	r0, r0, r0, lsl r1
    21bc:	00346028 	eorseq	r6, r4, r8, lsr #32
    21c0:	00120008 	andseq	r0, r2, r8
    21c4:	00144100 	andseq	r4, r4, r0, lsl #2
    21c8:	50012900 	andpl	r2, r1, r0, lsl #18
    21cc:	2a003501 	bcs	f5d8 <__Stack_Size+0xf1d8>
    21d0:	0800346c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, sp}
    21d4:	00004dec 	andeq	r4, r0, ip, ror #27
    21d8:	00347228 	eorseq	r7, r4, r8, lsr #4
    21dc:	00120008 	andseq	r0, r2, r8
    21e0:	00145d00 	andseq	r5, r4, r0, lsl #26
    21e4:	50012900 	andpl	r2, r1, r0, lsl #18
    21e8:	28003501 	stmdacs	r0, {r0, r8, sl, ip, sp}
    21ec:	0800347e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, ip, sp}
    21f0:	00004dec 	andeq	r4, r0, ip, ror #27
    21f4:	00001479 	andeq	r1, r0, r9, ror r4
    21f8:	01510129 	cmpeq	r1, r9, lsr #2
    21fc:	50012931 	andpl	r2, r1, r1, lsr r9
    2200:	28000c05 	stmdacs	r0, {r0, r2, sl, fp}
    2204:	28004001 	stmdacs	r0, {r0, lr}
    2208:	08003484 	stmdaeq	r0, {r2, r7, sl, ip, sp}
    220c:	00001200 	andeq	r1, r0, r0, lsl #4
    2210:	0000148c 	andeq	r1, r0, ip, lsl #9
    2214:	01500129 	cmpeq	r0, r9, lsr #2
    2218:	8e240035 	mcrhi	0, 1, r0, cr4, cr5, {1}
    221c:	01080034 	tsteq	r8, r4, lsr r0
    2220:	00004e06 	andeq	r4, r0, r6, lsl #28
    2224:	0ae73a00 	beq	ff9d0a2c <SCS_BASE+0x1f9c2a2c>
    2228:	34e40000 	strbtcc	r0, [r4], #0
    222c:	35440800 	strbcc	r0, [r4, #-2048]	; 0x800
    2230:	04350800 	ldrteq	r0, [r5], #-2048	; 0x800
    2234:	74010000 	strvc	r0, [r1], #-0
    2238:	22000015 	andcs	r0, r0, #21
    223c:	00000afa 	strdeq	r0, [r0], -sl
    2240:	00000455 	andeq	r0, r0, r5, asr r4
    2244:	0034f628 	eorseq	pc, r4, r8, lsr #12
    2248:	004d0a08 	subeq	r0, sp, r8, lsl #20
    224c:	0014d200 	andseq	sp, r4, r0, lsl #4
    2250:	51012900 	tstpl	r1, r0, lsl #18
    2254:	01293201 	teqeq	r9, r1, lsl #4
    2258:	000c0550 	andeq	r0, ip, r0, asr r5
    225c:	00400110 	subeq	r0, r0, r0, lsl r1
    2260:	0034fe28 	eorseq	pc, r4, r8, lsr #28
    2264:	004d0a08 	subeq	r0, sp, r8, lsl #20
    2268:	0014ee00 	andseq	lr, r4, r0, lsl #28
    226c:	51012900 	tstpl	r1, r0, lsl #18
    2270:	01293401 	teqeq	r9, r1, lsl #8
    2274:	000c0550 	andeq	r0, ip, r0, asr r5
    2278:	00400110 	subeq	r0, r0, r0, lsl r1
    227c:	00350428 	eorseq	r0, r5, r8, lsr #8
    2280:	00120008 	andseq	r0, r2, r8
    2284:	00150100 	andseq	r0, r5, r0, lsl #2
    2288:	50012900 	andpl	r2, r1, r0, lsl #18
    228c:	28003501 	stmdacs	r0, {r0, r8, sl, ip, sp}
    2290:	0800350e 	stmdaeq	r0, {r1, r2, r3, r8, sl, ip, sp}
    2294:	00004dec 	andeq	r4, r0, ip, ror #27
    2298:	0000151d 	andeq	r1, r0, sp, lsl r5
    229c:	01510129 	cmpeq	r1, r9, lsr #2
    22a0:	50012931 	andpl	r2, r1, r1, lsr r9
    22a4:	24000c05 	strcs	r0, [r0], #-3077	; 0xc05
    22a8:	28004001 	stmdacs	r0, {r0, lr}
    22ac:	08003514 	stmdaeq	r0, {r2, r4, r8, sl, ip, sp}
    22b0:	00001200 	andeq	r1, r0, r0, lsl #4
    22b4:	00001530 	andeq	r1, r0, r0, lsr r5
    22b8:	01500129 	cmpeq	r0, r9, lsr #2
    22bc:	20280035 	eorcs	r0, r8, r5, lsr r0
    22c0:	ec080035 	stc	0, cr0, [r8], {53}	; 0x35
    22c4:	4c00004d 	stcmi	0, cr0, [r0], {77}	; 0x4d
    22c8:	29000015 	stmdbcs	r0, {r0, r2, r4}
    22cc:	31015101 	tstcc	r1, r1, lsl #2
    22d0:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    22d4:	0128000c 	teqeq	r8, ip
    22d8:	26280040 	strtcs	r0, [r8], -r0, asr #32
    22dc:	00080035 	andeq	r0, r8, r5, lsr r0
    22e0:	5f000012 	svcpl	0x00000012
    22e4:	29000015 	stmdbcs	r0, {r0, r2, r4}
    22e8:	35015001 	strcc	r5, [r1, #-1]
    22ec:	35302400 	ldrcc	r2, [r0, #-1024]!	; 0x400
    22f0:	06010800 	streq	r0, [r1], -r0, lsl #16
    22f4:	2400004e 	strcs	r0, [r0], #-78	; 0x4e
    22f8:	08003538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, sp}
    22fc:	0012c101 	andseq	ip, r2, r1, lsl #2
    2300:	01370000 	teqeq	r7, r0
    2304:	00001228 	andeq	r1, r0, r8, lsr #4
    2308:	01030201 	tsteq	r3, r1, lsl #4
    230c:	000005a9 	andeq	r0, r0, r9, lsr #11
    2310:	08003544 	stmdaeq	r0, {r2, r6, r8, sl, ip, sp}
    2314:	08003590 	stmdaeq	r0, {r4, r7, r8, sl, ip, sp}
    2318:	0000048f 	andeq	r0, r0, pc, lsl #9
    231c:	00167001 	andseq	r7, r6, r1
    2320:	14593500 	ldrbne	r3, [r9], #-1280	; 0x500
    2324:	02010000 	andeq	r0, r1, #0
    2328:	00084003 	andeq	r4, r8, r3
    232c:	0004af00 	andeq	sl, r4, r0, lsl #30
    2330:	1b593d00 	blne	1651738 <__Stack_Size+0x1651338>
    2334:	03010000 	movweq	r0, #4096	; 0x1000
    2338:	0005a903 	andeq	sl, r5, r3, lsl #18
    233c:	0004d000 	andeq	sp, r4, r0
    2340:	0abf3800 	beq	fefd0348 <SCS_BASE+0x1efc2348>
    2344:	35460000 	strbcc	r0, [r6, #-0]
    2348:	00580800 	subseq	r0, r8, r0, lsl #16
    234c:	04010000 	streq	r0, [r1], #-0
    2350:	00160103 	andseq	r0, r6, r3, lsl #2
    2354:	0ada3e00 	beq	ff691b5c <SCS_BASE+0x1f683b5c>
    2358:	32010000 	andcc	r0, r1, #0
    235c:	00000ace 	andeq	r0, r0, lr, asr #21
    2360:	bf3f5401 	svclt	0x003f5401
    2364:	4600000a 	strmi	r0, [r0], -sl
    2368:	78080035 	stmdavc	r8, {r0, r2, r4, r5}
    236c:	01000000 	mrseq	r0, (UNDEF: 0)
    2370:	ce320302 	cdpgt	3, 3, cr0, cr2, cr2, {0}
    2374:	0100000a 	tsteq	r0, sl
    2378:	00983954 	addseq	r3, r8, r4, asr r9
    237c:	da230000 	ble	8c2384 <__Stack_Size+0x8c1f84>
    2380:	2a00000a 	bcs	23b0 <__Stack_Size+0x1fb0>
    2384:	08003560 	stmdaeq	r0, {r5, r6, r8, sl, ip, sp}
    2388:	00004d5f 	andeq	r4, r0, pc, asr sp
    238c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2390:	08003568 	stmdaeq	r0, {r3, r5, r6, r8, sl, ip, sp}
    2394:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    2398:	0000161a 	andeq	r1, r0, sl, lsl r6
    239c:	01510129 	cmpeq	r1, r9, lsr #2
    23a0:	50012930 	andpl	r2, r1, r0, lsr r9
    23a4:	00007502 	andeq	r7, r0, r2, lsl #10
    23a8:	00356e28 	eorseq	r6, r5, r8, lsr #28
    23ac:	00120008 	andseq	r0, r2, r8
    23b0:	00162d00 	andseq	r2, r6, r0, lsl #26
    23b4:	50012900 	andpl	r2, r1, r0, lsl #18
    23b8:	28004901 	stmdacs	r0, {r0, r8, fp, lr}
    23bc:	08003574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, ip, sp}
    23c0:	00000ae7 	andeq	r0, r0, r7, ror #21
    23c4:	00001641 	andeq	r1, r0, r1, asr #12
    23c8:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    23cc:	28000076 	stmdacs	r0, {r1, r2, r4, r5, r6}
    23d0:	0800357e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip, sp}
    23d4:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    23d8:	0000165a 	andeq	r1, r0, sl, asr r6
    23dc:	01510129 	cmpeq	r1, r9, lsr #2
    23e0:	50012930 	andpl	r2, r1, r0, lsr r9
    23e4:	00007402 	andeq	r7, r0, r2, lsl #8
    23e8:	0035862b 	eorseq	r8, r5, fp, lsr #12
    23ec:	000abf08 	andeq	fp, sl, r8, lsl #30
    23f0:	51012900 	tstpl	r1, r0, lsl #18
    23f4:	01293001 	teqeq	r9, r1
    23f8:	00750250 	rsbseq	r0, r5, r0, asr r2
    23fc:	01400000 	mrseq	r0, (UNDEF: 64)
    2400:	000012e7 	andeq	r1, r0, r7, ror #5
    2404:	00784601 	rsbseq	r4, r8, r1, lsl #12
    2408:	35900000 	ldrcc	r0, [r0]
    240c:	35c40800 	strbcc	r0, [r4, #2048]	; 0x800
    2410:	04ee0800 	strbteq	r0, [lr], #2048	; 0x800
    2414:	d4010000 	strle	r0, [r1], #-0
    2418:	27000016 	smladcs	r0, r6, r0, r0
    241c:	48010063 	stmdami	r1, {r0, r1, r5, r6}
    2420:	00000078 	andeq	r0, r0, r8, ror r0
    2424:	0000050e 	andeq	r0, r0, lr, lsl #10
    2428:	0012fe41 	andseq	pc, r2, r1, asr #28
    242c:	a9490100 	stmdbge	r9, {r8}^
    2430:	21000005 	tstcs	r0, r5
    2434:	42000005 	andmi	r0, r0, #5
    2438:	00001235 	andeq	r1, r0, r5, lsr r2
    243c:	0800359c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, ip, sp}
    2440:	080035a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, sp}
    2444:	44224c01 	strtmi	r4, [r2], #-3073	; 0xc01
    2448:	53000012 	movwpl	r0, #18
    244c:	2b000005 	blcs	2468 <__Stack_Size+0x2068>
    2450:	080035a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip, sp}
    2454:	00001200 	andeq	r1, r0, r0, lsl #4
    2458:	03500129 	cmpeq	r0, #1073741834	; 0x4000000a
    245c:	0003e80a 	andeq	lr, r3, sl, lsl #16
    2460:	01400000 	mrseq	r0, (UNDEF: 64)
    2464:	00000c7e 	andeq	r0, r0, lr, ror ip
    2468:	00725601 	rsbseq	r5, r2, r1, lsl #12
    246c:	35c40000 	strbcc	r0, [r4]
    2470:	35e80800 	strbcc	r0, [r8, #2048]!	; 0x800
    2474:	05670800 	strbeq	r0, [r7, #-2048]!	; 0x800
    2478:	24010000 	strcs	r0, [r1], #-0
    247c:	27000017 	smladcs	r0, r7, r0, r0
    2480:	57010063 	strpl	r0, [r1, -r3, rrx]
    2484:	00000078 	andeq	r0, r0, r8, ror r0
    2488:	00000587 	andeq	r0, r0, r7, lsl #11
    248c:	01006927 	tsteq	r0, r7, lsr #18
    2490:	00007857 	andeq	r7, r0, r7, asr r8
    2494:	00059a00 	andeq	r9, r5, r0, lsl #20
    2498:	11404100 	mrsne	r4, (UNDEF: 80)
    249c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    24a0:	00000072 	andeq	r0, r0, r2, ror r0
    24a4:	000005ae 	andeq	r0, r0, lr, lsr #11
    24a8:	0035d22a 	eorseq	sp, r5, sl, lsr #4
    24ac:	00167008 	andseq	r7, r6, r8
    24b0:	01250000 	teqeq	r5, r0
    24b4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    24b8:	e801f001 	stmda	r1, {r0, ip, sp, lr, pc}
    24bc:	30080035 	andcc	r0, r8, r5, lsr r0
    24c0:	d1080036 	tstle	r8, r6, lsr r0
    24c4:	01000005 	tsteq	r0, r5
    24c8:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    24cc:	00088a26 	andeq	r8, r8, r6, lsr #20
    24d0:	b3f00100 	mvnslt	r0, #0
    24d4:	f1000017 	cps	#23
    24d8:	43000005 	movwmi	r0, #5
    24dc:	00001606 	andeq	r1, r0, r6, lsl #12
    24e0:	059ef101 	ldreq	pc, [lr, #257]	; 0x101
    24e4:	27040000 	strcs	r0, [r4, -r0]
    24e8:	f2010069 	vhadd.s8	q0, <illegal reg q0.5>, <illegal reg q12.5>
    24ec:	0000059e 	muleq	r0, lr, r5
    24f0:	0000061a 	andeq	r0, r0, sl, lsl r6
    24f4:	00123544 	andseq	r3, r2, r4, asr #10
    24f8:	00361800 	eorseq	r1, r6, r0, lsl #16
    24fc:	00361e08 	eorseq	r1, r6, r8, lsl #28
    2500:	96f80108 	ldrbtls	r0, [r8], r8, lsl #2
    2504:	22000017 	andcs	r0, r0, #23
    2508:	00001244 	andeq	r1, r0, r4, asr #4
    250c:	0000063a 	andeq	r0, r0, sl, lsr r6
    2510:	00361e2b 	eorseq	r1, r6, fp, lsr #28
    2514:	00120008 	andseq	r0, r2, r8
    2518:	50012900 	andpl	r2, r1, r0, lsl #18
    251c:	49f00c05 	ldmibmi	r0!, {r0, r2, sl, fp}^
    2520:	00000002 	andeq	r0, r0, r2
    2524:	0035fe2a 	eorseq	pc, r5, sl, lsr #28
    2528:	000fd608 	andeq	sp, pc, r8, lsl #12
    252c:	36142a00 	ldrcc	r2, [r4], -r0, lsl #20
    2530:	4d0a0800 	stcmi	8, cr0, [sl, #-0]
    2534:	26240000 	strtcs	r0, [r4], -r0
    2538:	01080036 	tsteq	r8, r6, lsr r0
    253c:	00000fd6 	ldrdeq	r0, [r0], -r6
    2540:	9e040400 	cfcpysls	mvf0, mvf4
    2544:	25000005 	strcs	r0, [r0, #-5]
    2548:	000ae301 	andeq	lr, sl, r1, lsl #6
    254c:	01e90100 	mvneq	r0, r0, lsl #2
    2550:	08003630 	stmdaeq	r0, {r4, r5, r9, sl, ip, sp}
    2554:	08003658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, sp}
    2558:	0000064f 	andeq	r0, r0, pc, asr #12
    255c:	00184c01 	andseq	r4, r8, r1, lsl #24
    2560:	12354400 	eorsne	r4, r5, #0
    2564:	363a0000 	ldrtcc	r0, [sl], -r0
    2568:	36400800 	strbcc	r0, [r0], -r0, lsl #16
    256c:	ec010800 	stc	8, cr0, [r1], {-0}
    2570:	00001801 	andeq	r1, r0, r1, lsl #16
    2574:	00124445 	andseq	r4, r2, r5, asr #8
    2578:	2b01f400 	blcs	7f580 <__Stack_Size+0x7f180>
    257c:	08003640 	stmdaeq	r0, {r6, r9, sl, ip, sp}
    2580:	00001200 	andeq	r1, r0, r0, lsl #4
    2584:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    2588:	07a1200c 	streq	r2, [r1, ip]!
    258c:	46000000 	strmi	r0, [r0], -r0
    2590:	00001235 	andeq	r1, r0, r5, lsr r2
    2594:	08003644 	stmdaeq	r0, {r2, r6, r9, sl, ip, sp}
    2598:	000000b8 	strheq	r0, [r0], -r8
    259c:	1830ee01 	ldmdane	r0!, {r0, r9, sl, fp, sp, lr, pc}
    25a0:	44450000 	strbmi	r0, [r5], #-0
    25a4:	e8000012 	stmda	r0, {r1, r4}
    25a8:	364e2d03 	strbcc	r2, [lr], -r3, lsl #26
    25ac:	00010800 	andeq	r0, r1, r0, lsl #16
    25b0:	29000012 	stmdbcs	r0, {r1, r4}
    25b4:	0c055001 	stceq	0, cr5, [r5], {1}
    25b8:	000f4240 	andeq	r4, pc, r0, asr #4
    25bc:	362a0000 	strtcc	r0, [sl], -r0
    25c0:	d6080036 			; <UNDEFINED> instruction: 0xd6080036
    25c4:	2a00000f 	bcs	2608 <__Stack_Size+0x2208>
    25c8:	0800363a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, ip, sp}
    25cc:	00001032 	andeq	r1, r0, r2, lsr r0
    25d0:	0036442a 	eorseq	r4, r6, sl, lsr #8
    25d4:	000fd608 	andeq	sp, pc, r8, lsl #12
    25d8:	01340000 	teqeq	r4, r0
    25dc:	00000bc9 	andeq	r0, r0, r9, asr #23
    25e0:	01034d01 	tsteq	r3, r1, lsl #26
    25e4:	08003658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, sp}
    25e8:	08003680 	stmdaeq	r0, {r7, r9, sl, ip, sp}
    25ec:	01007d02 	tsteq	r0, r2, lsl #26
    25f0:	00001881 	andeq	r1, r0, r1, lsl #17
    25f4:	001a8235 	andseq	r8, sl, r5, lsr r2
    25f8:	034d0100 	movteq	r0, #53504	; 0xd100
    25fc:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    2600:	0000066f 	andeq	r0, r0, pc, ror #12
    2604:	00367824 	eorseq	r7, r6, r4, lsr #16
    2608:	4dae0108 	stfmis	f0, [lr, #32]!
    260c:	34000000 	strcc	r0, [r0], #-0
    2610:	000f8b01 	andeq	r8, pc, r1, lsl #22
    2614:	035d0100 	cmpeq	sp, #0
    2618:	00368001 	eorseq	r8, r6, r1
    261c:	0036a808 	eorseq	sl, r6, r8, lsl #16
    2620:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    2624:	0018b601 	andseq	fp, r8, r1, lsl #12
    2628:	17513500 	ldrbne	r3, [r1, -r0, lsl #10]
    262c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    2630:	0005b403 	andeq	fp, r5, r3, lsl #8
    2634:	00069000 	andeq	r9, r6, r0
    2638:	36a02400 	strtcc	r2, [r0], r0, lsl #8
    263c:	ae010800 	cdpge	8, 0, cr0, cr1, cr0, {0}
    2640:	0000004d 	andeq	r0, r0, sp, asr #32
    2644:	133f0133 	teqne	pc, #-1073741812	; 0xc000000c
    2648:	a3010000 	movwge	r0, #4096	; 0x1000
    264c:	36a80102 	strtcc	r0, [r8], r2, lsl #2
    2650:	36e00800 	strbtcc	r0, [r0], r0, lsl #16
    2654:	06b10800 	ldrteq	r0, [r1], r0, lsl #16
    2658:	65010000 	strvs	r0, [r1, #-0]
    265c:	35000019 	strcc	r0, [r0, #-25]
    2660:	0000120d 	andeq	r1, r0, sp, lsl #4
    2664:	b402a301 	strlt	sl, [r2], #-769	; 0x301
    2668:	d1000005 	tstle	r0, r5
    266c:	35000006 	strcc	r0, [r0, #-6]
    2670:	00001190 	muleq	r0, r0, r1
    2674:	b402a301 	strlt	sl, [r2], #-769	; 0x301
    2678:	f2000005 	vhadd.s8	d0, d0, d5
    267c:	28000006 	stmdacs	r0, {r1, r2}
    2680:	080036b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip, sp}
    2684:	00001881 	andeq	r1, r0, r1, lsl #17
    2688:	00001906 	andeq	r1, r0, r6, lsl #18
    268c:	03500129 	cmpeq	r0, #1073741834	; 0x4000000a
    2690:	005001f3 	ldrsheq	r0, [r0], #-19	; 0xffffffed
    2694:	0036be28 	eorseq	fp, r6, r8, lsr #28
    2698:	004d0a08 	subeq	r0, sp, r8, lsl #20
    269c:	00192300 	andseq	r2, r9, r0, lsl #6
    26a0:	51012900 	tstpl	r1, r0, lsl #18
    26a4:	29400802 	stmdbcs	r0, {r1, fp}^
    26a8:	0c055001 	stceq	0, cr5, [r5], {1}
    26ac:	40010800 	andmi	r0, r1, r0, lsl #16
    26b0:	36c42800 	strbcc	r2, [r4], r0, lsl #16
    26b4:	12000800 	andne	r0, r0, #0
    26b8:	19370000 	ldmdbne	r7!, {}	; <UNPREDICTABLE>
    26bc:	01290000 	teqeq	r9, r0
    26c0:	00740250 	rsbseq	r0, r4, r0, asr r2
    26c4:	36cc2800 	strbcc	r2, [ip], r0, lsl #16
    26c8:	4d5f0800 	ldclmi	8, cr0, [pc, #-0]	; 26d0 <__Stack_Size+0x22d0>
    26cc:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
    26d0:	01290000 	teqeq	r9, r0
    26d4:	40080251 	andmi	r0, r8, r1, asr r2
    26d8:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    26dc:	0108000c 	tsteq	r8, ip
    26e0:	d22b0040 	eorle	r0, fp, #64	; 0x40
    26e4:	00080036 	andeq	r0, r8, r6, lsr r0
    26e8:	29000012 	stmdbcs	r0, {r1, r4}
    26ec:	74025001 	strvc	r5, [r2], #-1
    26f0:	34000000 	strcc	r0, [r0], #-0
    26f4:	000e7101 	andeq	r7, lr, r1, lsl #2
    26f8:	02b60100 	adcseq	r0, r6, #0
    26fc:	0036e001 	eorseq	lr, r6, r1
    2700:	0036e808 	eorseq	lr, r6, r8, lsl #16
    2704:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    2708:	0019c201 	andseq	ip, r9, r1, lsl #4
    270c:	120d3500 	andne	r3, sp, #0
    2710:	b6010000 	strlt	r0, [r1], -r0
    2714:	0005b402 	andeq	fp, r5, r2, lsl #8
    2718:	00071000 	andeq	r1, r7, r0
    271c:	19693500 	stmdbne	r9!, {r8, sl, ip, sp}^
    2720:	b6010000 	strlt	r0, [r1], -r0
    2724:	0008e202 	andeq	lr, r8, r2, lsl #4
    2728:	00073100 	andeq	r3, r7, r0, lsl #2
    272c:	09513500 	ldmdbeq	r1, {r8, sl, ip, sp}^
    2730:	b6010000 	strlt	r0, [r1], -r0
    2734:	00059e02 	andeq	r9, r5, r2, lsl #28
    2738:	00075200 	andeq	r5, r7, r0, lsl #4
    273c:	36e82d00 	strbtcc	r2, [r8], r0, lsl #26
    2740:	b6010800 	strlt	r0, [r1], -r0, lsl #16
    2744:	29000018 	stmdbcs	r0, {r3, r4}
    2748:	f3035001 	vhadd.u8	d5, d3, d1
    274c:	00005001 	andeq	r5, r0, r1
    2750:	083c0134 	ldmdaeq	ip!, {r2, r4, r5, r8}
    2754:	6d010000 	stcvs	0, cr0, [r1, #-0]
    2758:	36e80103 	strbtcc	r0, [r8], r3, lsl #2
    275c:	371c0800 	ldrcc	r0, [ip, -r0, lsl #16]
    2760:	7d020800 	stcvc	8, cr0, [r2, #-0]
    2764:	19f70100 	ldmibne	r7!, {r8}^
    2768:	51350000 	teqpl	r5, r0
    276c:	01000017 	tsteq	r0, r7, lsl r0
    2770:	05b4036d 	ldreq	r0, [r4, #877]!	; 0x36d
    2774:	07730000 	ldrbeq	r0, [r3, -r0]!
    2778:	14240000 	strtne	r0, [r4], #-0
    277c:	01080037 	tsteq	r8, r7, lsr r0
    2780:	00004dae 	andeq	r4, r0, lr, lsr #27
    2784:	2e013400 	cfcpyscs	mvf3, mvf1
    2788:	01000017 	tsteq	r0, r7, lsl r0
    278c:	1c010383 	stcne	3, cr0, [r1], {131}	; 0x83
    2790:	50080037 	andpl	r0, r8, r7, lsr r0
    2794:	02080037 	andeq	r0, r8, #55	; 0x37
    2798:	2c01007d 	stccs	0, cr0, [r1], {125}	; 0x7d
    279c:	3500001a 	strcc	r0, [r0, #-26]
    27a0:	00001751 	andeq	r1, r0, r1, asr r7
    27a4:	b4038301 	strlt	r8, [r3], #-769	; 0x301
    27a8:	94000005 	strls	r0, [r0], #-5
    27ac:	24000007 	strcs	r0, [r0], #-7
    27b0:	08003748 	stmdaeq	r0, {r3, r6, r8, r9, sl, ip, sp}
    27b4:	004dae01 	subeq	sl, sp, r1, lsl #28
    27b8:	01370000 	teqeq	r7, r0
    27bc:	00000999 	muleq	r0, r9, r9
    27c0:	0103ab01 	tsteq	r3, r1, lsl #22
    27c4:	0000059e 	muleq	r0, lr, r5
    27c8:	08003750 	stmdaeq	r0, {r4, r6, r8, r9, sl, ip, sp}
    27cc:	080037ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip, sp}
    27d0:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
    27d4:	001b0e01 	andseq	r0, fp, r1, lsl #28
    27d8:	19a23500 	stmibne	r2!, {r8, sl, ip, sp}
    27dc:	ab010000 	blge	427e4 <__Stack_Size+0x423e4>
    27e0:	0005b403 	andeq	fp, r5, r3, lsl #8
    27e4:	0007d500 	andeq	sp, r7, r0, lsl #10
    27e8:	0b254700 	bleq	9543f0 <__Stack_Size+0x953ff0>
    27ec:	ac010000 	stcge	0, cr0, [r1], {-0}
    27f0:	00059303 	andeq	r9, r5, r3, lsl #6
    27f4:	68910200 	ldmvs	r1, {r9}
    27f8:	00123548 	andseq	r3, r2, r8, asr #10
    27fc:	00377c00 	eorseq	r7, r7, r0, lsl #24
    2800:	00378408 	eorseq	r8, r7, r8, lsl #8
    2804:	03b50108 			; <UNDEFINED> instruction: 0x03b50108
    2808:	00001a96 	muleq	r0, r6, sl
    280c:	0012443e 	andseq	r4, r2, lr, lsr r4
    2810:	842b0a00 	strthi	r0, [fp], #-2560	; 0xa00
    2814:	00080037 	andeq	r0, r8, r7, lsr r0
    2818:	29000012 	stmdbcs	r0, {r1, r4}
    281c:	0a035001 	beq	d6828 <__Stack_Size+0xd6428>
    2820:	00002710 	andeq	r2, r0, r0, lsl r7
    2824:	00375a28 	eorseq	r5, r7, r8, lsr #20
    2828:	004e1f08 	subeq	r1, lr, r8, lsl #30
    282c:	001aaa00 	andseq	sl, sl, r0, lsl #20
    2830:	50012900 	andpl	r2, r1, r0, lsl #18
    2834:	00689102 	rsbeq	r9, r8, r2, lsl #2
    2838:	00377c28 	eorseq	r7, r7, r8, lsr #24
    283c:	004e3908 	subeq	r3, lr, r8, lsl #18
    2840:	001abe00 	andseq	fp, sl, r0, lsl #28
    2844:	50012900 	andpl	r2, r1, r0, lsl #18
    2848:	00007402 	andeq	r7, r0, r2, lsl #8
    284c:	00378c28 	eorseq	r8, r7, r8, lsr #24
    2850:	004e4d08 	subeq	r4, lr, r8, lsl #26
    2854:	001ad800 	andseq	sp, sl, r0, lsl #16
    2858:	51012900 	tstpl	r1, r0, lsl #18
    285c:	29689102 	stmdbcs	r8!, {r1, r8, ip, pc}^
    2860:	74025001 	strvc	r5, [r2], #-1
    2864:	98280000 	stmdals	r8!, {}	; <UNPREDICTABLE>
    2868:	66080037 			; <UNDEFINED> instruction: 0x66080037
    286c:	f800004e 			; <UNDEFINED> instruction: 0xf800004e
    2870:	2900001a 	stmdbcs	r0, {r1, r3, r4}
    2874:	31015201 	tstcc	r1, r1, lsl #4
    2878:	03510129 	cmpeq	r1, #1073741834	; 0x4000000a
    287c:	2905250a 	stmdbcs	r5, {r1, r3, r8, sl, sp}
    2880:	74025001 	strvc	r5, [r2], #-1
    2884:	a02b0000 	eorge	r0, fp, r0
    2888:	78080037 	stmdavc	r8, {r0, r1, r2, r4, r5}
    288c:	2900004d 	stmdbcs	r0, {r0, r2, r3, r6}
    2890:	31015101 	tstcc	r1, r1, lsl #2
    2894:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    2898:	00000074 	andeq	r0, r0, r4, ror r0
    289c:	0be60134 	bleq	ff982d74 <SCS_BASE+0x1f974d74>
    28a0:	bb010000 	bllt	428a8 <__Stack_Size+0x424a8>
    28a4:	37ac0103 	strcc	r0, [ip, r3, lsl #2]!
    28a8:	37b80800 	ldrcc	r0, [r8, r0, lsl #16]!
    28ac:	7d020800 	stcvc	8, cr0, [r2, #-0]
    28b0:	1b420100 	blne	1082cb8 <__Stack_Size+0x10828b8>
    28b4:	b42d0000 	strtlt	r0, [sp], #-0
    28b8:	01080037 	tsteq	r8, r7, lsr r0
    28bc:	00004d78 	andeq	r4, r0, r8, ror sp
    28c0:	01510129 	cmpeq	r1, r9, lsr #2
    28c4:	50012930 	andpl	r2, r1, r0, lsr r9
    28c8:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    28cc:	00004001 	andeq	r4, r0, r1
    28d0:	144b0134 	strbne	r0, [fp], #-308	; 0x134
    28d4:	bf010000 	svclt	0x00010000
    28d8:	37b80103 	ldrcc	r0, [r8, r3, lsl #2]!
    28dc:	37dc0800 	ldrbcc	r0, [ip, r0, lsl #16]
    28e0:	7d020800 	stcvc	8, cr0, [r2, #-0]
    28e4:	1b6b0100 	blne	1ac2cec <__Stack_Size+0x1ac28ec>
    28e8:	69490000 	stmdbvs	r9, {}^	; <UNPREDICTABLE>
    28ec:	03c10100 	biceq	r0, r1, #0
    28f0:	000005a9 	andeq	r0, r0, r9, lsr #11
    28f4:	0000080d 	andeq	r0, r0, sp, lsl #16
    28f8:	63013700 	movwvs	r3, #5888	; 0x1700
    28fc:	01000010 	tsteq	r0, r0, lsl r0
    2900:	9e0103c7 	cdpls	3, 0, cr0, cr1, cr7, {6}
    2904:	dc000005 	stcle	0, cr0, [r0], {5}
    2908:	30080037 	andcc	r0, r8, r7, lsr r0
    290c:	21080038 	tstcs	r8, r8, lsr r0
    2910:	01000008 	tsteq	r0, r8
    2914:	00001c5b 	andeq	r1, r0, fp, asr ip
    2918:	00194b35 	andseq	r4, r9, r5, lsr fp
    291c:	03c70100 	biceq	r0, r7, #0
    2920:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    2924:	00000841 	andeq	r0, r0, r1, asr #16
    2928:	00145e35 	andseq	r5, r4, r5, lsr lr
    292c:	03c70100 	biceq	r0, r7, #0
    2930:	0000059e 	muleq	r0, lr, r5
    2934:	0000085f 	andeq	r0, r0, pc, asr r8
    2938:	01006949 	tsteq	r0, r9, asr #18
    293c:	059e03c8 	ldreq	r0, [lr, #968]	; 0x3c8
    2940:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
    2944:	f2280000 	vhadd.s32	d0, d8, d0
    2948:	0a080037 	beq	202a2c <__Stack_Size+0x20262c>
    294c:	d500004d 	strle	r0, [r0, #-77]	; 0x4d
    2950:	2900001b 	stmdbcs	r0, {r0, r1, r3, r4}
    2954:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    2958:	50012920 	andpl	r2, r1, r0, lsr #18
    295c:	0c000c05 	stceq	12, cr0, [r0], {5}
    2960:	28004001 	stmdacs	r0, {r0, lr}
    2964:	080037fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
    2968:	00004d5f 	andeq	r4, r0, pc, asr sp
    296c:	00001bf1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2970:	01510129 	cmpeq	r1, r9, lsr #2
    2974:	50012940 	andpl	r2, r1, r0, asr #18
    2978:	0c000c05 	stceq	12, cr0, [r0], {5}
    297c:	28004001 	stmdacs	r0, {r0, lr}
    2980:	08003802 	stmdaeq	r0, {r1, fp, ip, sp}
    2984:	00004d23 	andeq	r4, r0, r3, lsr #26
    2988:	00001c08 	andeq	r1, r0, r8, lsl #24
    298c:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    2990:	0138000c 	teqeq	r8, ip
    2994:	0a280040 	beq	a02a9c <__Stack_Size+0xa0269c>
    2998:	42080038 	andmi	r0, r8, #56	; 0x38
    299c:	2500004d 	strcs	r0, [r0, #-77]	; 0x4d
    29a0:	2900001c 	stmdbcs	r0, {r2, r3, r4}
    29a4:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    29a8:	50012940 	andpl	r2, r1, r0, asr #18
    29ac:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    29b0:	28004001 	stmdacs	r0, {r0, lr}
    29b4:	08003816 	stmdaeq	r0, {r1, r2, r4, fp, ip, sp}
    29b8:	00004d0a 	andeq	r4, r0, sl, lsl #26
    29bc:	00001c41 	andeq	r1, r0, r1, asr #24
    29c0:	01510129 	cmpeq	r1, r9, lsr #2
    29c4:	50012940 	andpl	r2, r1, r0, asr #18
    29c8:	0c000c05 	stceq	12, cr0, [r0], {5}
    29cc:	2b004001 	blcs	129d8 <__Stack_Size+0x125d8>
    29d0:	0800381e 	stmdaeq	r0, {r1, r2, r3, r4, fp, ip, sp}
    29d4:	00004d5f 	andeq	r4, r0, pc, asr sp
    29d8:	02510129 	subseq	r0, r1, #1073741834	; 0x4000000a
    29dc:	01292008 	teqeq	r9, r8
    29e0:	000c0550 	andeq	r0, ip, r0, asr r5
    29e4:	0040010c 	subeq	r0, r0, ip, lsl #2
    29e8:	37013700 	strcc	r3, [r1, -r0, lsl #14]
    29ec:	01000014 	tsteq	r0, r4, lsl r0
    29f0:	9e0103d7 	mcrls	3, 0, r0, cr1, cr7, {6}
    29f4:	30000005 	andcc	r0, r0, r5
    29f8:	80080038 	andhi	r0, r8, r8, lsr r0
    29fc:	94080038 	strls	r0, [r8], #-56	; 0x38
    2a00:	01000008 	tsteq	r0, r8
    2a04:	00001ca7 	andeq	r1, r0, r7, lsr #25
    2a08:	00194b35 	andseq	r4, r9, r5, lsr fp
    2a0c:	03d70100 	bicseq	r0, r7, #0
    2a10:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    2a14:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
    2a18:	00145e4a 	andseq	r5, r4, sl, asr #28
    2a1c:	03d70100 	bicseq	r0, r7, #0
    2a20:	0000059e 	muleq	r0, lr, r5
    2a24:	69495101 	stmdbvs	r9, {r0, r8, ip, lr}^
    2a28:	03d80100 	bicseq	r0, r8, #0
    2a2c:	0000059e 	muleq	r0, lr, r5
    2a30:	000008d2 	ldrdeq	r0, [r0], -r2
    2a34:	45011800 	strmi	r1, [r1, #-2048]	; 0x800
    2a38:	01000011 	tsteq	r0, r1, lsl r0
    2a3c:	010103e3 	smlatteq	r1, r3, r3, r0
    2a40:	00001cc3 	andeq	r1, r0, r3, asr #25
    2a44:	000fff1a 	andeq	pc, pc, sl, lsl pc	; <UNPREDICTABLE>
    2a48:	03e30100 	mvneq	r0, #0
    2a4c:	0000059e 	muleq	r0, lr, r5
    2a50:	1ca72100 	stfnes	f2, [r7]
    2a54:	38800000 	stmcc	r0, {}	; <UNPREDICTABLE>
    2a58:	38880800 	stmcc	r8, {fp}
    2a5c:	7d020800 	stcvc	8, cr0, [r2, #-0]
    2a60:	1cec0100 	stfnee	f0, [ip]
    2a64:	b6220000 	strtlt	r0, [r2], -r0
    2a68:	fc00001c 	stc2	0, cr0, [r0], {28}
    2a6c:	24000008 	strcs	r0, [r0], #-8
    2a70:	08003888 	stmdaeq	r0, {r3, r7, fp, ip, sp}
    2a74:	0019c201 	andseq	ip, r9, r1, lsl #4
    2a78:	014b0000 	mrseq	r0, (UNDEF: 75)
    2a7c:	000012f6 	strdeq	r1, [r0], -r6
    2a80:	0103e601 	tsteq	r3, r1, lsl #12
    2a84:	0000059e 	muleq	r0, lr, r5
    2a88:	08003888 	stmdaeq	r0, {r3, r7, fp, ip, sp}
    2a8c:	0800389c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, sp}
    2a90:	01007d02 	tsteq	r0, r2, lsl #26
    2a94:	02e60133 	rsceq	r0, r6, #-1073741812	; 0xc000000c
    2a98:	ec010000 	stc	0, cr0, [r1], {-0}
    2a9c:	389c0103 	ldmcc	ip, {r0, r1, r8}
    2aa0:	39180800 	ldmdbcc	r8, {fp}
    2aa4:	091d0800 	ldmdbeq	sp, {fp}
    2aa8:	63010000 	movwvs	r0, #4096	; 0x1000
    2aac:	3d00001d 	stccc	0, cr0, [r0, #-116]	; 0xffffff8c
    2ab0:	00001b59 	andeq	r1, r0, r9, asr fp
    2ab4:	9e03ed01 	cdpls	13, 0, cr14, cr3, cr1, {0}
    2ab8:	3d000005 	stccc	0, cr0, [r0, #-20]	; 0xffffffec
    2abc:	28000009 	stmdacs	r0, {r0, r3}
    2ac0:	080038a8 	stmdaeq	r0, {r3, r5, r7, fp, ip, sp}
    2ac4:	00004e84 	andeq	r4, r0, r4, lsl #29
    2ac8:	00001d4f 	andeq	r1, r0, pc, asr #26
    2acc:	03510129 	cmpeq	r1, #1073741834	; 0x4000000a
    2ad0:	2905250a 	stmdbcs	r5, {r1, r3, r8, sl, sp}
    2ad4:	0c055001 	stceq	0, cr5, [r5], {1}
    2ad8:	40013800 	andmi	r3, r1, r0, lsl #16
    2adc:	38b02b00 	ldmcc	r0!, {r8, r9, fp, sp}
    2ae0:	4ea10800 	cdpmi	8, 10, cr0, cr1, cr0, {0}
    2ae4:	01290000 	teqeq	r9, r0
    2ae8:	000c0550 	andeq	r0, ip, r0, asr r5
    2aec:	00400138 	subeq	r0, r0, r8, lsr r1
    2af0:	b9013700 	stmdblt	r1, {r8, r9, sl, ip, sp}
    2af4:	01000015 	tsteq	r0, r5, lsl r0
    2af8:	9e010404 	cdpls	4, 0, cr0, cr1, cr4, {0}
    2afc:	18000005 	stmdane	r0, {r0, r2}
    2b00:	48080039 	stmdami	r8, {r0, r3, r4, r5}
    2b04:	5b080039 	blpl	202bf0 <__Stack_Size+0x2027f0>
    2b08:	01000009 	tsteq	r0, r9
    2b0c:	00001d9c 	muleq	r0, ip, sp
    2b10:	0019a235 	andseq	sl, r9, r5, lsr r2
    2b14:	04040100 	streq	r0, [r4], #-256	; 0x100
    2b18:	0000059e 	muleq	r0, lr, r5
    2b1c:	0000097b 	andeq	r0, r0, fp, ror r9
    2b20:	0039262a 	eorseq	r2, r9, sl, lsr #12
    2b24:	001a2c08 	andseq	r2, sl, r8, lsl #24
    2b28:	01340000 	teqeq	r4, r0
    2b2c:	00000cf2 	strdeq	r0, [r0], -r2
    2b30:	01040b01 	tsteq	r4, r1, lsl #22
    2b34:	08003948 	stmdaeq	r0, {r3, r6, r8, fp, ip, sp}
    2b38:	0800394c 	stmdaeq	r0, {r2, r3, r6, r8, fp, ip, sp}
    2b3c:	01007d02 	tsteq	r0, r2, lsl #26
    2b40:	00001dc1 	andeq	r1, r0, r1, asr #27
    2b44:	00394c24 	eorseq	r4, r9, r4, lsr #24
    2b48:	1b0e0108 	blne	382f70 <__Stack_Size+0x382b70>
    2b4c:	33000000 	movwcc	r0, #0
    2b50:	00098b01 	andeq	r8, r9, r1, lsl #22
    2b54:	040e0100 	streq	r0, [lr], #-256	; 0x100
    2b58:	00394c01 	eorseq	r4, r9, r1, lsl #24
    2b5c:	003a4808 	eorseq	r4, sl, r8, lsl #16
    2b60:	00099c08 	andeq	r9, r9, r8, lsl #24
    2b64:	1e780100 	rpwnee	f0, f0, f0
    2b68:	69490000 	stmdbvs	r9, {}^	; <UNPREDICTABLE>
    2b6c:	040f0100 	streq	r0, [pc], #-256	; 2b74 <__Stack_Size+0x2774>
    2b70:	0000059e 	muleq	r0, lr, r5
    2b74:	000009bc 			; <UNDEFINED> instruction: 0x000009bc
    2b78:	001a673d 	andseq	r6, sl, sp, lsr r7
    2b7c:	04100100 	ldreq	r0, [r0], #-256	; 0x100
    2b80:	0000059e 	muleq	r0, lr, r5
    2b84:	000009f3 	strdeq	r0, [r0], -r3
    2b88:	001a633d 	andseq	r6, sl, sp, lsr r3
    2b8c:	04100100 	ldreq	r0, [r0], #-256	; 0x100
    2b90:	0000059e 	muleq	r0, lr, r5
    2b94:	00000a06 	andeq	r0, r0, r6, lsl #20
    2b98:	0015863d 	andseq	r8, r5, sp, lsr r6
    2b9c:	04110100 	ldreq	r0, [r1], #-256	; 0x100
    2ba0:	0000059e 	muleq	r0, lr, r5
    2ba4:	00000a24 	andeq	r0, r0, r4, lsr #20
    2ba8:	001ca748 	andseq	sl, ip, r8, asr #14
    2bac:	003a2c00 	eorseq	r2, sl, r0, lsl #24
    2bb0:	003a3208 	eorseq	r3, sl, r8, lsl #4
    2bb4:	04390108 	ldrteq	r0, [r9], #-264	; 0x108
    2bb8:	00001e48 	andeq	r1, r0, r8, asr #28
    2bbc:	001cb622 	andseq	fp, ip, r2, lsr #12
    2bc0:	000a6700 	andeq	r6, sl, r0, lsl #14
    2bc4:	3a322b00 	bcc	c8d7cc <__Stack_Size+0xc8d3cc>
    2bc8:	19c20800 	stmibne	r2, {fp}^
    2bcc:	01290000 	teqeq	r9, r0
    2bd0:	b4080250 	strlt	r0, [r8], #-592	; 0x250
    2bd4:	e82a0000 	stmda	sl!, {}	; <UNPREDICTABLE>
    2bd8:	42080039 	andmi	r0, r8, #57	; 0x39
    2bdc:	2800001b 	stmdacs	r0, {r0, r1, r3, r4}
    2be0:	080039fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, fp, ip, sp}
    2be4:	00001b6b 	andeq	r1, r0, fp, ror #22
    2be8:	00001e6e 	andeq	r1, r0, lr, ror #28
    2bec:	02510129 	subseq	r0, r1, #1073741834	; 0x4000000a
    2bf0:	01290075 	teqeq	r9, r5, ror r0
    2bf4:	1d030550 	cfstr32ne	mvfx0, [r3, #-320]	; 0xfffffec0
    2bf8:	00200002 	eoreq	r0, r0, r2
    2bfc:	003a2a2a 	eorseq	r2, sl, sl, lsr #20
    2c00:	001ca708 	andseq	sl, ip, r8, lsl #14
    2c04:	01330000 	teqeq	r3, r0
    2c08:	00001509 	andeq	r1, r0, r9, lsl #10
    2c0c:	01043c01 	tsteq	r4, r1, lsl #24
    2c10:	08003a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, sp}
    2c14:	08003bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, sp}
    2c18:	00000a7b 	andeq	r0, r0, fp, ror sl
    2c1c:	001f1b01 	andseq	r1, pc, r1, lsl #22
    2c20:	00694900 	rsbeq	r4, r9, r0, lsl #18
    2c24:	9e043d01 	cdpls	13, 0, cr3, cr4, cr1, {0}
    2c28:	9b000005 	blls	2c44 <__Stack_Size+0x2844>
    2c2c:	4900000a 	stmdbmi	r0, {r1, r3}
    2c30:	3d01006a 	stccc	0, cr0, [r1, #-424]	; 0xfffffe58
    2c34:	00059e04 	andeq	r9, r5, r4, lsl #28
    2c38:	000b0100 	andeq	r0, fp, r0, lsl #2
    2c3c:	12d13d00 	sbcsne	r3, r1, #0
    2c40:	3d010000 	stccc	0, cr0, [r1, #-0]
    2c44:	00059e04 	andeq	r9, r5, r4, lsl #28
    2c48:	000b2c00 	andeq	r2, fp, r0, lsl #24
    2c4c:	15863d00 	strne	r3, [r6, #3328]	; 0xd00
    2c50:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    2c54:	00059e04 	andeq	r9, r5, r4, lsl #28
    2c58:	000b4a00 	andeq	r4, fp, r0, lsl #20
    2c5c:	3a9a2800 	bcc	fe68cc64 <SCS_BASE+0x1e67ec64>
    2c60:	1c5b0800 	mrrcne	8, 0, r0, fp, cr0
    2c64:	1ef20000 	cdpne	0, 15, cr0, cr2, cr0, {0}
    2c68:	01290000 	teqeq	r9, r0
    2c6c:	00760551 	rsbseq	r0, r6, r1, asr r5
    2c70:	291c0074 	ldmdbcs	ip, {r2, r4, r5, r6}
    2c74:	74085001 	strvc	r5, [r8], #-1
    2c78:	02bf0300 	adcseq	r0, pc, #0
    2c7c:	00222000 	eoreq	r2, r2, r0
    2c80:	003aaa2a 	eorseq	sl, sl, sl, lsr #20
    2c84:	001cec08 	andseq	lr, ip, r8, lsl #24
    2c88:	3b602b00 	blcc	180d890 <__Stack_Size+0x180d490>
    2c8c:	1c5b0800 	mrrcne	8, 0, r0, fp, cr0
    2c90:	01290000 	teqeq	r9, r0
    2c94:	00760551 	rsbseq	r0, r6, r1, asr r5
    2c98:	291c0075 	ldmdbcs	ip, {r0, r2, r4, r5, r6}
    2c9c:	75085001 	strvc	r5, [r8, #-1]
    2ca0:	02bf0300 	adcseq	r0, pc, #0
    2ca4:	00222000 	eoreq	r2, r2, r0
    2ca8:	0bf74c00 	bleq	ffdd5cb0 <SCS_BASE+0x1fdc7cb0>
    2cac:	3bc80000 	blcc	ff202cb4 <SCS_BASE+0x1f1f4cb4>
    2cb0:	3bd80800 	blcc	ff604cb8 <SCS_BASE+0x1f5f6cb8>
    2cb4:	7d020800 	stcvc	8, cr0, [r2, #-0]
    2cb8:	8d210100 	stfhis	f0, [r1, #-0]
    2cbc:	d800000c 	stmdale	r0, {r2, r3}
    2cc0:	e408003b 	str	r0, [r8], #-59	; 0x3b
    2cc4:	0208003b 	andeq	r0, r8, #59	; 0x3b
    2cc8:	4901007d 	stmdbmi	r1, {r0, r2, r3, r4, r5, r6}
    2ccc:	3200001f 	andcc	r0, r0, #31
    2cd0:	00000c9c 	muleq	r0, ip, ip
    2cd4:	21005001 	tstcs	r0, r1
    2cd8:	00000ca8 	andeq	r0, r0, r8, lsr #25
    2cdc:	08003be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, ip, sp}
    2ce0:	08003bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, ip, sp}
    2ce4:	01007d02 	tsteq	r0, r2, lsl #26
    2ce8:	00001f66 	andeq	r1, r0, r6, ror #30
    2cec:	000cb732 	andeq	fp, ip, r2, lsr r7
    2cf0:	00500100 	subseq	r0, r0, r0, lsl #2
    2cf4:	19ea0134 	stmibne	sl!, {r2, r4, r5, r8}^
    2cf8:	94010000 	strls	r0, [r1], #-0
    2cfc:	3bf00104 	blcc	ffc03114 <SCS_BASE+0x1fbf5114>
    2d00:	3c000800 	stccc	8, cr0, [r0], {-0}
    2d04:	7d020800 	stcvc	8, cr0, [r2, #-0]
    2d08:	1f9f0100 	svcne	0x009f0100
    2d0c:	53350000 	teqpl	r5, #0
    2d10:	01000010 	tsteq	r0, r0, lsl r0
    2d14:	059e0494 	ldreq	r0, [lr, #1172]	; 0x494
    2d18:	0b910000 	bleq	fe442d20 <SCS_BASE+0x1e434d20>
    2d1c:	bd4a0000 	stcllt	0, cr0, [sl, #-0]
    2d20:	01000016 	tsteq	r0, r6, lsl r0
    2d24:	059e0494 	ldreq	r0, [lr, #1172]	; 0x494
    2d28:	51010000 	mrspl	r0, (UNDEF: 1)
    2d2c:	0cc42100 	stfeqe	f2, [r4], {0}
    2d30:	3c000000 	stccc	0, cr0, [r0], {-0}
    2d34:	3c0c0800 	stccc	8, cr0, [ip], {-0}
    2d38:	7d020800 	stcvc	8, cr0, [r2, #-0]
    2d3c:	1fbc0100 	svcne	0x00bc0100
    2d40:	d3320000 	teqle	r2, #0
    2d44:	0100000c 	tsteq	r0, ip
    2d48:	15210050 	strne	r0, [r1, #-80]!	; 0x50
    2d4c:	0c00000b 	stceq	0, cr0, [r0], {11}
    2d50:	3808003c 	stmdacc	r8, {r2, r3, r4, r5}
    2d54:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2d58:	f501007d 			; <UNDEFINED> instruction: 0xf501007d
    2d5c:	2200001f 	andcs	r0, r0, #31
    2d60:	00000b28 	andeq	r0, r0, r8, lsr #22
    2d64:	00000bb2 			; <UNDEFINED> instruction: 0x00000bb2
    2d68:	000b154d 	andeq	r1, fp, sp, asr #10
    2d6c:	003c1a00 	eorseq	r1, ip, r0, lsl #20
    2d70:	003c2008 	eorseq	r2, ip, r8
    2d74:	049b0108 	ldreq	r0, [fp], #264	; 0x108
    2d78:	000b2822 	andeq	r2, fp, r2, lsr #16
    2d7c:	000bec00 	andeq	lr, fp, r0, lsl #24
    2d80:	4b000000 	blmi	2d88 <__Stack_Size+0x2988>
    2d84:	00183701 	andseq	r3, r8, r1, lsl #14
    2d88:	04a20100 	strteq	r0, [r2], #256	; 0x100
    2d8c:	00059e01 	andeq	r9, r5, r1, lsl #28
    2d90:	003c3800 	eorseq	r3, ip, r0, lsl #16
    2d94:	003c5c08 	eorseq	r5, ip, r8, lsl #24
    2d98:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    2d9c:	b1014e01 	tstlt	r1, r1, lsl #28
    2da0:	01000017 	tsteq	r0, r7, lsl r0
    2da4:	9e0104a7 	cdpls	4, 0, cr0, cr1, cr7, {5}
    2da8:	5c000005 	stcpl	0, cr0, [r0], {5}
    2dac:	8008003c 	andhi	r0, r8, ip, lsr r0
    2db0:	0208003c 	andeq	r0, r8, #60	; 0x3c
    2db4:	3e01007d 	mcrcc	0, 0, r0, cr1, cr13, {3}
    2db8:	35000020 	strcc	r0, [r0, #-32]
    2dbc:	00001053 	andeq	r1, r0, r3, asr r0
    2dc0:	9e04a701 	cdpls	7, 0, cr10, cr4, cr1, {0}
    2dc4:	ff000005 			; <UNDEFINED> instruction: 0xff000005
    2dc8:	0000000b 	andeq	r0, r0, fp
    2dcc:	000b9421 	andeq	r9, fp, r1, lsr #8
    2dd0:	003c8000 	eorseq	r8, ip, r0
    2dd4:	003c8808 	eorseq	r8, ip, r8, lsl #16
    2dd8:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    2ddc:	00206d01 	eoreq	r6, r0, r1, lsl #26
    2de0:	0ba72200 	bleq	fe9cb5e8 <SCS_BASE+0x1e9bd5e8>
    2de4:	0c390000 	ldceq	0, cr0, [r9], #-0
    2de8:	b3320000 	teqlt	r2, #0
    2dec:	0100000b 	tsteq	r0, fp
    2df0:	0bbf3c51 	bleq	fefd1f3c <SCS_BASE+0x1efc3f3c>
    2df4:	0c5a0000 	mraeq	r0, sl, acc0
    2df8:	21000000 	mrscs	r0, (UNDEF: 0)
    2dfc:	00000c35 	andeq	r0, r0, r5, lsr ip
    2e00:	08003c88 	stmdaeq	r0, {r3, r7, sl, fp, ip, sp}
    2e04:	08003c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, ip, sp}
    2e08:	01007d02 	tsteq	r0, r2, lsl #26
    2e0c:	00002095 	muleq	r0, r5, r0
    2e10:	000c4822 	andeq	r4, ip, r2, lsr #16
    2e14:	000c8d00 	andeq	r8, ip, r0, lsl #26
    2e18:	0c543c00 	mrrceq	12, 0, r3, r4, cr0
    2e1c:	0cae0000 	stceq	0, cr0, [lr]
    2e20:	21000000 	mrscs	r0, (UNDEF: 0)
    2e24:	00000c61 	andeq	r0, r0, r1, ror #24
    2e28:	08003c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, ip, sp}
    2e2c:	08003c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, sp}
    2e30:	01007d02 	tsteq	r0, r2, lsl #26
    2e34:	000020bd 	strheq	r2, [r0], -sp
    2e38:	000c7422 	andeq	r7, ip, r2, lsr #8
    2e3c:	000cd700 	andeq	sp, ip, r0, lsl #14
    2e40:	0c803c00 	stceq	12, cr3, [r0], {0}
    2e44:	0cf80000 	ldcleq	0, cr0, [r8]
    2e48:	21000000 	mrscs	r0, (UNDEF: 0)
    2e4c:	00000b35 	andeq	r0, r0, r5, lsr fp
    2e50:	08003c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, sp}
    2e54:	08003cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip, sp}
    2e58:	01007d02 	tsteq	r0, r2, lsl #26
    2e5c:	00002110 	andeq	r2, r0, r0, lsl r1
    2e60:	000b443c 	andeq	r4, fp, ip, lsr r4
    2e64:	000d1f00 	andeq	r1, sp, r0, lsl #30
    2e68:	0b4e4f00 	bleq	1396a70 <__Stack_Size+0x1396670>
    2e6c:	03050000 	movweq	r0, #20480	; 0x5000
    2e70:	200002c2 	andcs	r0, r0, r2, asr #5
    2e74:	000b354d 	andeq	r3, fp, sp, asr #10
    2e78:	003ca000 	eorseq	sl, ip, r0
    2e7c:	003cba08 	eorseq	fp, ip, r8, lsl #20
    2e80:	05050108 	streq	r0, [r5, #-264]	; 0x108
    2e84:	003ca050 	eorseq	sl, ip, r0, asr r0
    2e88:	003cba08 	eorseq	fp, ip, r8, lsl #20
    2e8c:	0b443c08 	bleq	1111eb4 <__Stack_Size+0x1111ab4>
    2e90:	0d4a0000 	stcleq	0, cr0, [sl, #-0]
    2e94:	4e360000 	cdpmi	0, 3, cr0, cr6, cr0, {0}
    2e98:	0000000b 	andeq	r0, r0, fp
    2e9c:	5b3a0000 	blpl	e82ea4 <__Stack_Size+0xe82aa4>
    2ea0:	d800000b 	stmdale	r0, {r0, r1, r3}
    2ea4:	0c08003c 	stceq	0, cr0, [r8], {60}	; 0x3c
    2ea8:	a608003d 			; <UNDEFINED> instruction: 0xa608003d
    2eac:	0100000d 	tsteq	r0, sp
    2eb0:	00002167 	andeq	r2, r0, r7, ror #2
    2eb4:	000b5b48 	andeq	r5, fp, r8, asr #22
    2eb8:	003ce800 	eorseq	lr, ip, r0, lsl #16
    2ebc:	003d0c08 	eorseq	r0, sp, r8, lsl #24
    2ec0:	047d0108 	ldrbteq	r0, [sp], #-264	; 0x108
    2ec4:	0000215d 	andeq	r2, r0, sp, asr r1
    2ec8:	003cec2a 	eorseq	lr, ip, sl, lsr #24
    2ecc:	000b3508 	andeq	r3, fp, r8, lsl #10
    2ed0:	3cf02a00 	vldmiacc	r0!, {s5-s4}
    2ed4:	1e780800 	cdpne	8, 7, cr0, cr8, cr0, {0}
    2ed8:	f62b0000 			; <UNDEFINED> instruction: 0xf62b0000
    2edc:	0008003c 	andeq	r0, r8, ip, lsr r0
    2ee0:	29000012 	stmdbcs	r0, {r1, r4}
    2ee4:	08025001 	stmdaeq	r2, {r0, ip, lr}
    2ee8:	2a000032 	bcs	2fb8 <__Stack_Size+0x2bb8>
    2eec:	08003cde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, fp, ip, sp}
    2ef0:	00001dc1 	andeq	r1, r0, r1, asr #27
    2ef4:	f4013700 	vst1.8	{d3}, [r1], r0
    2ef8:	0100000b 	tsteq	r0, fp
    2efc:	480104d9 	stmdami	r1, {r0, r3, r4, r6, r7, sl}
    2f00:	0c000000 	stceq	0, cr0, [r0], {-0}
    2f04:	5808003d 	stmdapl	r8, {r0, r2, r3, r4, r5}
    2f08:	c608003d 			; <UNDEFINED> instruction: 0xc608003d
    2f0c:	0100000d 	tsteq	r0, sp
    2f10:	000021e9 	andeq	r2, r0, r9, ror #3
    2f14:	00646951 	rsbeq	r6, r4, r1, asr r9
    2f18:	9e04d901 	cdpls	9, 0, cr13, cr4, cr1, {0}
    2f1c:	e6000005 	str	r0, [r0], -r5
    2f20:	3500000d 	strcc	r0, [r0, #-13]
    2f24:	00002578 	andeq	r2, r0, r8, ror r5
    2f28:	9e04d901 	cdpls	9, 0, cr13, cr4, cr1, {0}
    2f2c:	07000005 	streq	r0, [r0, -r5]
    2f30:	3500000e 	strcc	r0, [r0, #-14]
    2f34:	000016bd 			; <UNDEFINED> instruction: 0x000016bd
    2f38:	9e04d901 	cdpls	9, 0, cr13, cr4, cr1, {0}
    2f3c:	28000005 	stmdacs	r0, {r0, r2}
    2f40:	2800000e 	stmdacs	r0, {r1, r2, r3}
    2f44:	08003d18 	stmdaeq	r0, {r3, r4, r8, sl, fp, ip, sp}
    2f48:	000022d0 	ldrdeq	r2, [r0], -r0
    2f4c:	000021c9 	andeq	r2, r0, r9, asr #3
    2f50:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    2f54:	2a000074 	bcs	312c <__Stack_Size+0x2d2c>
    2f58:	08003d3e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    2f5c:	00000b5b 	andeq	r0, r0, fp, asr fp
    2f60:	003d462b 	eorseq	r4, sp, fp, lsr #12
    2f64:	000b6608 	andeq	r6, fp, r8, lsl #12
    2f68:	51012900 	tstpl	r1, r0, lsl #18
    2f6c:	29007502 	stmdbcs	r0, {r1, r8, sl, ip, sp, lr}
    2f70:	74025001 	strvc	r5, [r2], #-1
    2f74:	33000000 	movwcc	r0, #0
    2f78:	000f1f01 	andeq	r1, pc, r1, lsl #30
    2f7c:	024b0100 	subeq	r0, fp, #0
    2f80:	003d5801 	eorseq	r5, sp, r1, lsl #16
    2f84:	003d8408 	eorseq	r8, sp, r8, lsl #8
    2f88:	000e4908 	andeq	r4, lr, r8, lsl #18
    2f8c:	220e0100 	andcs	r0, lr, #0
    2f90:	702a0000 	eorvc	r0, sl, r0
    2f94:	6708003d 	smladxvs	r8, sp, r0, r0
    2f98:	00000021 	andeq	r0, r0, r1, lsr #32
    2f9c:	11ca0133 	bicne	r0, sl, r3, lsr r1
    2fa0:	44010000 	strmi	r0, [r1], #-0
    2fa4:	3d840102 	stfccs	f0, [r4, #8]
    2fa8:	3da40800 	stccc	8, cr0, [r4]
    2fac:	0e690800 	cdpeq	8, 6, cr0, cr9, cr0, {0}
    2fb0:	52010000 	andpl	r0, r1, #0
    2fb4:	35000022 	strcc	r0, [r0, #-34]	; 0x22
    2fb8:	000018d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2fbc:	8d024401 	cfstrshi	mvf4, [r2, #-4]
    2fc0:	8900000b 	stmdbhi	r0, {r0, r1, r3}
    2fc4:	4900000e 	stmdbmi	r0, {r1, r2, r3}
    2fc8:	01006469 	tsteq	r0, r9, ror #8
    2fcc:	059e0245 	ldreq	r0, [lr, #581]	; 0x245
    2fd0:	0eaa0000 	cdpeq	0, 10, cr0, cr10, cr0, {0}
    2fd4:	9e2a0000 	cdpls	0, 2, cr0, cr10, cr0, {0}
    2fd8:	6708003d 	smladxvs	r8, sp, r0, r0
    2fdc:	00000021 	andeq	r0, r0, r1, lsr #32
    2fe0:	0f4e0133 	svceq	0x004e0133
    2fe4:	3d010000 	stccc	0, cr0, [r1, #-0]
    2fe8:	3da40102 	stfccs	f0, [r4, #8]!
    2fec:	3dc80800 	stclcc	8, cr0, [r8]
    2ff0:	0ec90800 	cdpeq	8, 12, cr0, cr9, cr0, {0}
    2ff4:	91010000 	mrsls	r0, (UNDEF: 1)
    2ff8:	49000022 	stmdbmi	r0, {r1, r5}
    2ffc:	01006469 	tsteq	r0, r9, ror #8
    3000:	059e023e 	ldreq	r0, [lr, #574]	; 0x23e
    3004:	0ee90000 	cdpeq	0, 14, cr0, cr9, cr0, {0}
    3008:	b62b0000 	strtlt	r0, [fp], -r0
    300c:	6708003d 	smladxvs	r8, sp, r0, r0
    3010:	29000021 	stmdbcs	r0, {r0, r5}
    3014:	31015201 	tstcc	r1, r1, lsl #4
    3018:	01510129 	cmpeq	r1, r9, lsr #2
    301c:	33000048 	movwcc	r0, #72	; 0x48
    3020:	0010c201 	andseq	ip, r0, r1, lsl #4
    3024:	02360100 	eorseq	r0, r6, #0
    3028:	003dc801 	eorseq	ip, sp, r1, lsl #16
    302c:	003dec08 	eorseq	lr, sp, r8, lsl #24
    3030:	000f0808 	andeq	r0, pc, r8, lsl #16
    3034:	22d00100 	sbcscs	r0, r0, #0
    3038:	69490000 	stmdbvs	r9, {}^	; <UNPREDICTABLE>
    303c:	37010064 	strcc	r0, [r1, -r4, rrx]
    3040:	00059e02 	andeq	r9, r5, r2, lsl #28
    3044:	000f2800 	andeq	r2, pc, r0, lsl #16
    3048:	3dda2b00 	vldrcc	d18, [sl]
    304c:	21670800 	cmncs	r7, r0, lsl #16
    3050:	01290000 	teqeq	r9, r0
    3054:	29300152 	ldmdbcs	r0!, {r1, r4, r6, r8}
    3058:	48015101 	stmdami	r1, {r0, r8, ip, lr}
    305c:	66210000 	strtvs	r0, [r1], -r0
    3060:	ec00000b 	stc	0, cr0, [r0], {11}
    3064:	f408003d 	vst4.8	{d0-d3}, [r8 :256]!
    3068:	0208003d 	andeq	r0, r8, #61	; 0x3d
    306c:	0901007d 	stmdbeq	r1, {r0, r2, r3, r4, r5, r6}
    3070:	22000023 	andcs	r0, r0, #35	; 0x23
    3074:	00000b75 	andeq	r0, r0, r5, ror fp
    3078:	00000f47 	andeq	r0, r0, r7, asr #30
    307c:	000b8023 	andeq	r8, fp, r3, lsr #32
    3080:	3df42d00 	ldclcc	13, cr2, [r4]
    3084:	67010800 	strvs	r0, [r1, -r0, lsl #16]
    3088:	29000021 	stmdbcs	r0, {r0, r5}
    308c:	31015201 	tstcc	r1, r1, lsl #4
    3090:	01510129 	cmpeq	r1, r9, lsr #2
    3094:	21000049 	tstcs	r0, r9, asr #32
    3098:	00000b66 	andeq	r0, r0, r6, ror #22
    309c:	08003df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, ip, sp}
    30a0:	08003e02 	stmdaeq	r0, {r1, r9, sl, fp, ip, sp}
    30a4:	01007d02 	tsteq	r0, r2, lsl #26
    30a8:	0000234b 	andeq	r2, r0, fp, asr #6
    30ac:	000b7522 	andeq	r7, fp, r2, lsr #10
    30b0:	000f6800 	andeq	r6, pc, r0, lsl #16
    30b4:	0b802200 	bleq	fe00b8bc <SCS_BASE+0x1dffd8bc>
    30b8:	0fa20000 	svceq	0x00a20000
    30bc:	fc240000 	stc2	0, cr0, [r4], #-0
    30c0:	0108003d 	tsteq	r8, sp, lsr r0
    30c4:	000022d0 	ldrdeq	r2, [r0], -r0
    30c8:	003e022d 	eorseq	r0, lr, sp, lsr #4
    30cc:	21670108 	cmncs	r7, r8, lsl #2
    30d0:	01290000 	teqeq	r9, r0
    30d4:	00490151 	subeq	r0, r9, r1, asr r1
    30d8:	79013400 	stmdbvc	r1, {sl, ip, sp}
    30dc:	01000001 	tsteq	r0, r1
    30e0:	02010227 	andeq	r0, r1, #1879048194	; 0x70000002
    30e4:	0e08003e 	mcreq	0, 0, r0, cr8, cr14, {1}
    30e8:	0208003e 	andeq	r0, r8, #62	; 0x3e
    30ec:	8f01007d 	svchi	0x0001007d
    30f0:	51000023 	tstpl	r0, r3, lsr #32
    30f4:	01006469 	tsteq	r0, r9, ror #8
    30f8:	059e0227 	ldreq	r0, [lr, #551]	; 0x227
    30fc:	0fdc0000 	svceq	0x00dc0000
    3100:	d1350000 	teqle	r5, r0
    3104:	01000018 	tsteq	r0, r8, lsl r0
    3108:	0b8d0227 	bleq	fe3439ac <SCS_BASE+0x1e3359ac>
    310c:	0ffd0000 	svceq	0x00fd0000
    3110:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    3114:	0108003e 	tsteq	r8, lr, lsr r0
    3118:	00002167 	andeq	r2, r0, r7, ror #2
    311c:	0bcc3a00 	bleq	ff311924 <SCS_BASE+0x1f303924>
    3120:	3e0e0000 	cdpcc	0, 0, cr0, cr14, cr0, {0}
    3124:	3e700800 	cdpcc	8, 7, cr0, cr0, cr0, {0}
    3128:	101e0800 	andsne	r0, lr, r0, lsl #16
    312c:	4a010000 	bmi	43134 <__Stack_Size+0x42d34>
    3130:	22000024 	andcs	r0, r0, #36	; 0x24
    3134:	00000bdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3138:	0000103e 	andeq	r1, r0, lr, lsr r0
    313c:	000bea22 	andeq	lr, fp, r2, lsr #20
    3140:	00105f00 	andseq	r5, r0, r0, lsl #30
    3144:	0bcc4800 	bleq	ff31514c <SCS_BASE+0x1f30714c>
    3148:	3e540000 	cdpcc	0, 5, cr0, cr4, cr0, {0}
    314c:	3e640800 	cdpcc	8, 6, cr0, cr4, cr0, {0}
    3150:	e5010800 	str	r0, [r1, #-2048]	; 0x800
    3154:	00241604 	eoreq	r1, r4, r4, lsl #12
    3158:	3e545000 	cdpcc	0, 5, cr5, cr4, cr0, {0}
    315c:	3e640800 	cdpcc	8, 6, cr0, cr4, cr0, {0}
    3160:	ea230800 	b	8c5168 <__Stack_Size+0x8c4d68>
    3164:	2300000b 	movwcs	r0, #11
    3168:	00000bdf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    316c:	000b944d 	andeq	r9, fp, sp, asr #8
    3170:	003e5400 	eorseq	r5, lr, r0, lsl #8
    3174:	003e6408 	eorseq	r6, lr, r8, lsl #8
    3178:	04f10108 	ldrbteq	r0, [r1], #264	; 0x108
    317c:	000ba722 	andeq	sl, fp, r2, lsr #14
    3180:	00108000 	andseq	r8, r0, r0
    3184:	0bb32200 	bleq	feccb98c <SCS_BASE+0x1ecbd98c>
    3188:	10970000 	addsne	r0, r7, r0
    318c:	54500000 	ldrbpl	r0, [r0], #-0
    3190:	6408003e 	strvs	r0, [r8], #-62	; 0x3e
    3194:	3c08003e 	stccc	0, cr0, [r8], {62}	; 0x3e
    3198:	00000bbf 			; <UNDEFINED> instruction: 0x00000bbf
    319c:	000010ae 	andeq	r1, r0, lr, lsr #1
    31a0:	00000000 	andeq	r0, r0, r0
    31a4:	003e1828 	eorseq	r1, lr, r8, lsr #16
    31a8:	0022d008 	eoreq	sp, r2, r8
    31ac:	00242a00 	eoreq	r2, r4, r0, lsl #20
    31b0:	50012900 	andpl	r2, r1, r0, lsl #18
    31b4:	00007602 	andeq	r7, r0, r2, lsl #12
    31b8:	003e3e2a 	eorseq	r3, lr, sl, lsr #28
    31bc:	000b5b08 	andeq	r5, fp, r8, lsl #22
    31c0:	3e462b00 	vmlacc.f64	d18, d6, d0
    31c4:	0b660800 	bleq	19851cc <__Stack_Size+0x1984dcc>
    31c8:	01290000 	teqeq	r9, r0
    31cc:	00750251 	rsbseq	r0, r5, r1, asr r2
    31d0:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    31d4:	00000076 	andeq	r0, r0, r6, ror r0
    31d8:	11230137 	teqne	r3, r7, lsr r1
    31dc:	cb010000 	blgt	431e4 <__Stack_Size+0x42de4>
    31e0:	059e0104 	ldreq	r0, [lr, #260]	; 0x104
    31e4:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
    31e8:	3ecc0800 	cdpcc	8, 12, cr0, cr12, cr0, {0}
    31ec:	10d50800 	sbcsne	r0, r5, r0, lsl #16
    31f0:	bc010000 	stclt	0, cr0, [r1], {-0}
    31f4:	51000024 	tstpl	r0, r4, lsr #32
    31f8:	01006469 	tsteq	r0, r9, ror #8
    31fc:	059e04cb 	ldreq	r0, [lr, #1227]	; 0x4cb
    3200:	10f50000 	rscsne	r0, r5, r0
    3204:	78350000 	ldmdavc	r5!, {}	; <UNPREDICTABLE>
    3208:	01000025 	tsteq	r0, r5, lsr #32
    320c:	059e04cb 	ldreq	r0, [lr, #1227]	; 0x4cb
    3210:	11160000 	tstne	r6, r0
    3214:	7a280000 	bvc	a0321c <__Stack_Size+0xa02e1c>
    3218:	d008003e 	andle	r0, r8, lr, lsr r0
    321c:	9c000022 	stcls	0, cr0, [r0], {34}	; 0x22
    3220:	29000024 	stmdbcs	r0, {r2, r5}
    3224:	76025001 	strvc	r5, [r2], -r1
    3228:	a22a0000 	eorge	r0, sl, #0
    322c:	5b08003e 	blpl	20332c <__Stack_Size+0x202f2c>
    3230:	2b00000b 	blcs	3264 <__Stack_Size+0x2e64>
    3234:	08003eaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, fp, ip, sp}
    3238:	00000b66 	andeq	r0, r0, r6, ror #22
    323c:	02510129 	subseq	r0, r1, #1073741834	; 0x4000000a
    3240:	01290075 	teqeq	r9, r5, ror r0
    3244:	00760250 	rsbseq	r0, r6, r0, asr r2
    3248:	01370000 	teqeq	r7, r0
    324c:	00000a27 	andeq	r0, r0, r7, lsr #20
    3250:	0101ff01 	tsteq	r1, r1, lsl #30
    3254:	000005a9 	andeq	r0, r0, r9, lsr #11
    3258:	08003ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, sp}
    325c:	08003ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, ip, sp}
    3260:	00001137 	andeq	r1, r0, r7, lsr r1
    3264:	00255301 	eoreq	r5, r5, r1, lsl #6
    3268:	64695100 	strbtvs	r5, [r9], #-256	; 0x100
    326c:	01ff0100 	mvnseq	r0, r0, lsl #2
    3270:	0000059e 	muleq	r0, lr, r5
    3274:	00001157 	andeq	r1, r0, r7, asr r1
    3278:	000b9448 	andeq	r9, fp, r8, asr #8
    327c:	003ee000 	eorseq	lr, lr, r0
    3280:	003ee408 	eorseq	lr, lr, r8, lsl #8
    3284:	02000108 	andeq	r0, r0, #2
    3288:	00002522 	andeq	r2, r0, r2, lsr #10
    328c:	000bb322 	andeq	fp, fp, r2, lsr #6
    3290:	00117800 	andseq	r7, r1, r0, lsl #16
    3294:	0ba73200 	bleq	fe9cfa9c <SCS_BASE+0x1e9c1a9c>
    3298:	54010000 	strpl	r0, [r1], #-0
    329c:	003ee050 	eorseq	lr, lr, r0, asr r0
    32a0:	003ee408 	eorseq	lr, lr, r8, lsl #8
    32a4:	0bbf3c08 	bleq	fefd22cc <SCS_BASE+0x1efc42cc>
    32a8:	118b0000 	orrne	r0, fp, r0
    32ac:	00000000 	andeq	r0, r0, r0
    32b0:	003ed628 	eorseq	sp, lr, r8, lsr #12
    32b4:	00244a08 	eoreq	r4, r4, r8, lsl #20
    32b8:	00253c00 	eoreq	r3, r5, r0, lsl #24
    32bc:	51012900 	tstpl	r1, r0, lsl #18
    32c0:	29280802 	stmdbcs	r8!, {r1, fp}
    32c4:	75025001 	strvc	r5, [r2, #-1]
    32c8:	e02b0000 	eor	r0, fp, r0
    32cc:	4a08003e 	bmi	2033cc <__Stack_Size+0x202fcc>
    32d0:	29000024 	stmdbcs	r0, {r2, r5}
    32d4:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    32d8:	50012929 	andpl	r2, r1, r9, lsr #18
    32dc:	00007502 	andeq	r7, r0, r2, lsl #10
    32e0:	d4013700 	strle	r3, [r1], #-1792	; 0x700
    32e4:	01000011 	tsteq	r0, r1, lsl r0
    32e8:	a90101fc 	stmdbge	r1, {r2, r3, r4, r5, r6, r7, r8}
    32ec:	e8000005 	stmda	r0, {r0, r2}
    32f0:	0408003e 	streq	r0, [r8], #-62	; 0x3e
    32f4:	ac08003f 	stcge	0, cr0, [r8], {63}	; 0x3f
    32f8:	01000011 	tsteq	r0, r1, lsl r0
    32fc:	000025ea 	andeq	r2, r0, sl, ror #11
    3300:	00646951 	rsbeq	r6, r4, r1, asr r9
    3304:	9e01fc01 	cdpls	12, 0, cr15, cr1, cr1, {0}
    3308:	cc000005 	stcgt	0, cr0, [r0], {5}
    330c:	48000011 	stmdami	r0, {r0, r4}
    3310:	00000b94 	muleq	r0, r4, fp
    3314:	08003efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
    3318:	08003f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, sp}
    331c:	b901fd01 	stmdblt	r1, {r0, r8, sl, fp, ip, sp, lr, pc}
    3320:	22000025 	andcs	r0, r0, #37	; 0x25
    3324:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    3328:	000011ed 	andeq	r1, r0, sp, ror #3
    332c:	000ba732 	andeq	sl, fp, r2, lsr r7
    3330:	50540100 	subspl	r0, r4, r0, lsl #2
    3334:	08003efc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, sp}
    3338:	08003f00 	stmdaeq	r0, {r8, r9, sl, fp, ip, sp}
    333c:	000bbf3c 	andeq	fp, fp, ip, lsr pc
    3340:	00120000 	andseq	r0, r2, r0
    3344:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3348:	08003ef2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, fp, ip, sp}
    334c:	0000244a 	andeq	r2, r0, sl, asr #8
    3350:	000025d3 	ldrdeq	r2, [r0], -r3
    3354:	02510129 	subseq	r0, r1, #1073741834	; 0x4000000a
    3358:	01292608 	teqeq	r9, r8, lsl #12
    335c:	00750250 	rsbseq	r0, r5, r0, asr r2
    3360:	3efc2b00 	vmovcc.f64	d18, #192	; 0xc0
    3364:	244a0800 	strbcs	r0, [sl], #-2048	; 0x800
    3368:	01290000 	teqeq	r9, r0
    336c:	27080251 	smlsdcs	r8, r1, r2, r0
    3370:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    3374:	00000075 	andeq	r0, r0, r5, ror r0
    3378:	1bb90137 	blne	fee4385c <SCS_BASE+0x1ee3585c>
    337c:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    3380:	05a90101 	streq	r0, [r9, #257]!	; 0x101
    3384:	3f040000 	svccc	0x00040000
    3388:	3f200800 	svccc	0x00200800
    338c:	12210800 	eorne	r0, r1, #0
    3390:	81010000 	mrshi	r0, (UNDEF: 1)
    3394:	51000026 	tstpl	r0, r6, lsr #32
    3398:	01006469 	tsteq	r0, r9, ror #8
    339c:	059e01f9 	ldreq	r0, [lr, #505]	; 0x1f9
    33a0:	12410000 	subne	r0, r1, #0
    33a4:	94480000 	strbls	r0, [r8], #-0
    33a8:	1800000b 	stmdane	r0, {r0, r1, r3}
    33ac:	1c08003f 	stcne	0, cr0, [r8], {63}	; 0x3f
    33b0:	0108003f 	tsteq	r8, pc, lsr r0
    33b4:	265001fa 			; <UNDEFINED> instruction: 0x265001fa
    33b8:	b3220000 	teqlt	r2, #0
    33bc:	6200000b 	andvs	r0, r0, #11
    33c0:	32000012 	andcc	r0, r0, #18
    33c4:	00000ba7 	andeq	r0, r0, r7, lsr #23
    33c8:	18505401 	ldmdane	r0, {r0, sl, ip, lr}^
    33cc:	1c08003f 	stcne	0, cr0, [r8], {63}	; 0x3f
    33d0:	3c08003f 	stccc	0, cr0, [r8], {63}	; 0x3f
    33d4:	00000bbf 			; <UNDEFINED> instruction: 0x00000bbf
    33d8:	00001275 	andeq	r1, r0, r5, ror r2
    33dc:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
    33e0:	4a08003f 	bmi	2034e4 <__Stack_Size+0x2030e4>
    33e4:	6a000024 	bvs	347c <__Stack_Size+0x307c>
    33e8:	29000026 	stmdbcs	r0, {r1, r2, r5}
    33ec:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    33f0:	50012924 	andpl	r2, r1, r4, lsr #18
    33f4:	00007502 	andeq	r7, r0, r2, lsl #10
    33f8:	003f182b 	eorseq	r1, pc, fp, lsr #16
    33fc:	00244a08 	eoreq	r4, r4, r8, lsl #20
    3400:	51012900 	tstpl	r1, r0, lsl #18
    3404:	29250802 	stmdbcs	r5!, {r1, fp}
    3408:	75025001 	strvc	r5, [r2, #-1]
    340c:	37000000 	strcc	r0, [r0, -r0]
    3410:	000b3901 	andeq	r3, fp, r1, lsl #18
    3414:	01e20100 	mvneq	r0, r0, lsl #2
    3418:	00059e01 	andeq	r9, r5, r1, lsl #28
    341c:	003f2000 	eorseq	r2, pc, r0
    3420:	003f4008 	eorseq	r4, pc, r8
    3424:	00129608 	andseq	r9, r2, r8, lsl #12
    3428:	27100100 	ldrcs	r0, [r0, -r0, lsl #2]
    342c:	69510000 	ldmdbvs	r1, {}^	; <UNPREDICTABLE>
    3430:	e2010064 	and	r0, r1, #100	; 0x64
    3434:	00059e01 	andeq	r9, r5, r1, lsl #28
    3438:	0012b600 	andseq	fp, r2, r0, lsl #12
    343c:	6f704900 	svcvs	0x00704900
    3440:	e3010073 	movw	r0, #4211	; 0x1073
    3444:	00271001 	eoreq	r1, r7, r1
    3448:	0012d700 	andseq	sp, r2, r0, lsl #14
    344c:	12354800 	eorsne	r4, r5, #0
    3450:	3f2a0000 	svccc	0x002a0000
    3454:	3f320800 	svccc	0x00320800
    3458:	e5010800 	str	r0, [r1, #-2048]	; 0x800
    345c:	0026eb01 	eoreq	lr, r6, r1, lsl #22
    3460:	12443e00 	subne	r3, r4, #0
    3464:	2b0a0000 	blcs	28346c <__Stack_Size+0x28306c>
    3468:	08003f32 	stmdaeq	r0, {r1, r4, r5, r8, r9, sl, fp, ip, sp}
    346c:	00001200 	andeq	r1, r0, r0, lsl #4
    3470:	03500129 	cmpeq	r0, #1073741834	; 0x4000000a
    3474:	0027100a 	eoreq	r1, r7, sl
    3478:	3f282800 	svccc	0x00282800
    347c:	25ea0800 	strbcs	r0, [sl, #2048]!	; 0x800
    3480:	26ff0000 	ldrbtcs	r0, [pc], r0
    3484:	01290000 	teqeq	r9, r0
    3488:	00750250 	rsbseq	r0, r5, r0, asr r2
    348c:	3f382b00 	svccc	0x00382b00
    3490:	25ea0800 	strbcs	r0, [sl, #2048]!	; 0x800
    3494:	01290000 	teqeq	r9, r0
    3498:	00750250 	rsbseq	r0, r5, r0, asr r2
    349c:	a9520000 	ldmdbge	r2, {}^	; <UNPREDICTABLE>
    34a0:	20000005 	andcs	r0, r0, r5
    34a4:	53000027 	movwpl	r0, #39	; 0x27
    34a8:	00000064 	andeq	r0, r0, r4, rrx
    34ac:	01370001 	teqeq	r7, r1
    34b0:	00001ac8 	andeq	r1, r0, r8, asr #21
    34b4:	0101f601 	tsteq	r1, r1, lsl #12
    34b8:	000005a9 	andeq	r0, r0, r9, lsr #11
    34bc:	08003f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip, sp}
    34c0:	08003f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, sp}
    34c4:	0000131c 	andeq	r1, r0, ip, lsl r3
    34c8:	0027b501 	eoreq	fp, r7, r1, lsl #10
    34cc:	64695100 	strbtvs	r5, [r9], #-256	; 0x100
    34d0:	01f60100 	mvnseq	r0, r0, lsl #2
    34d4:	0000059e 	muleq	r0, lr, r5
    34d8:	0000133c 	andeq	r1, r0, ip, lsr r3
    34dc:	000b9448 	andeq	r9, fp, r8, asr #8
    34e0:	003f5400 	eorseq	r5, pc, r0, lsl #8
    34e4:	003f5808 	eorseq	r5, pc, r8, lsl #16
    34e8:	01f70108 	mvnseq	r0, r8, lsl #2
    34ec:	00002786 	andeq	r2, r0, r6, lsl #15
    34f0:	000bb322 	andeq	fp, fp, r2, lsr #6
    34f4:	00135d00 	andseq	r5, r3, r0, lsl #26
    34f8:	0ba73200 	bleq	fe9cfd00 <SCS_BASE+0x1e9c1d00>
    34fc:	54010000 	strpl	r0, [r1], #-0
    3500:	003f5450 	eorseq	r5, pc, r0, asr r4	; <UNPREDICTABLE>
    3504:	003f5808 	eorseq	r5, pc, r8, lsl #16
    3508:	0bbf3c08 	bleq	fefd2530 <SCS_BASE+0x1efc4530>
    350c:	13700000 	cmnne	r0, #0
    3510:	00000000 	andeq	r0, r0, r0
    3514:	003f4a28 	eorseq	r4, pc, r8, lsr #20
    3518:	00244a08 	eoreq	r4, r4, r8, lsl #20
    351c:	00279f00 	eoreq	r9, r7, r0, lsl #30
    3520:	51012900 	tstpl	r1, r0, lsl #18
    3524:	01294e01 	teqeq	r9, r1, lsl #28
    3528:	00750250 	rsbseq	r0, r5, r0, asr r2
    352c:	3f542b00 	svccc	0x00542b00
    3530:	244a0800 	strbcs	r0, [sl], #-2048	; 0x800
    3534:	01290000 	teqeq	r9, r0
    3538:	294f0151 	stmdbcs	pc, {r0, r4, r6, r8}^	; <UNPREDICTABLE>
    353c:	75025001 	strvc	r5, [r2, #-1]
    3540:	37000000 	strcc	r0, [r0, -r0]
    3544:	000a3e01 	andeq	r3, sl, r1, lsl #28
    3548:	01f30100 	mvnseq	r0, r0, lsl #2
    354c:	0005a901 	andeq	sl, r5, r1, lsl #18
    3550:	003f5c00 	eorseq	r5, pc, r0, lsl #24
    3554:	003f7808 	eorseq	r7, pc, r8, lsl #16
    3558:	00139108 	andseq	r9, r3, r8, lsl #2
    355c:	284a0100 	stmdacs	sl, {r8}^
    3560:	69510000 	ldmdbvs	r1, {}^	; <UNPREDICTABLE>
    3564:	f3010064 	vhadd.u8	q0, <illegal reg q0.5>, q10
    3568:	00059e01 	andeq	r9, r5, r1, lsl #28
    356c:	0013b100 	andseq	fp, r3, r0, lsl #2
    3570:	0b944800 	bleq	fe515578 <SCS_BASE+0x1e507578>
    3574:	3f700000 	svccc	0x00700000
    3578:	3f740800 	svccc	0x00740800
    357c:	f4010800 	vst2.8	{d0-d1}, [r1], r0
    3580:	00281b01 	eoreq	r1, r8, r1, lsl #22
    3584:	0bb32200 	bleq	feccbd8c <SCS_BASE+0x1ecbdd8c>
    3588:	13d20000 	bicsne	r0, r2, #0
    358c:	a7320000 	ldrge	r0, [r2, -r0]!
    3590:	0100000b 	tsteq	r0, fp
    3594:	3f705054 	svccc	0x00705054
    3598:	3f740800 	svccc	0x00740800
    359c:	bf3c0800 	svclt	0x003c0800
    35a0:	e500000b 	str	r0, [r0, #-11]
    35a4:	00000013 	andeq	r0, r0, r3, lsl r0
    35a8:	3f662800 	svccc	0x00662800
    35ac:	244a0800 	strbcs	r0, [sl], #-2048	; 0x800
    35b0:	28340000 	ldmdacs	r4!, {}	; <UNPREDICTABLE>
    35b4:	01290000 	teqeq	r9, r0
    35b8:	29300151 	ldmdbcs	r0!, {r0, r4, r6, r8}
    35bc:	75025001 	strvc	r5, [r2, #-1]
    35c0:	702b0000 	eorvc	r0, fp, r0
    35c4:	4a08003f 	bmi	2036c8 <__Stack_Size+0x2032c8>
    35c8:	29000024 	stmdbcs	r0, {r2, r5}
    35cc:	31015101 	tstcc	r1, r1, lsl #2
    35d0:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    35d4:	00000075 	andeq	r0, r0, r5, ror r0
    35d8:	19c4014e 	stmibne	r4, {r1, r2, r3, r6, r8}^
    35dc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    35e0:	059e0101 	ldreq	r0, [lr, #257]	; 0x101
    35e4:	3f780000 	svccc	0x00780000
    35e8:	3f7e0800 	svccc	0x007e0800
    35ec:	7d020800 	stcvc	8, cr0, [r2, #-0]
    35f0:	28890100 	stmcs	r9, {r8}
    35f4:	69510000 	ldmdbvs	r1, {}^	; <UNPREDICTABLE>
    35f8:	f0010064 			; <UNDEFINED> instruction: 0xf0010064
    35fc:	00059e01 	andeq	r9, r5, r1, lsl #28
    3600:	00140600 	andseq	r0, r4, r0, lsl #12
    3604:	3f7e2d00 	svccc	0x007e2d00
    3608:	4a010800 	bmi	45610 <__Stack_Size+0x45210>
    360c:	29000024 	stmdbcs	r0, {r2, r5}
    3610:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    3614:	4e00002b 	cdpmi	0, 0, cr0, cr0, cr11, {1}
    3618:	00128901 	andseq	r8, r2, r1, lsl #18
    361c:	01ed0100 	mvneq	r0, r0, lsl #2
    3620:	00059e01 	andeq	r9, r5, r1, lsl #28
    3624:	003f7e00 	eorseq	r7, pc, r0, lsl #28
    3628:	003f8408 	eorseq	r8, pc, r8, lsl #8
    362c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    3630:	0028c801 	eoreq	ip, r8, r1, lsl #16
    3634:	64695100 	strbtvs	r5, [r9], #-256	; 0x100
    3638:	01ed0100 	mvneq	r0, r0, lsl #2
    363c:	0000059e 	muleq	r0, lr, r5
    3640:	00001427 	andeq	r1, r0, r7, lsr #8
    3644:	003f842d 	eorseq	r8, pc, sp, lsr #8
    3648:	244a0108 	strbcs	r0, [sl], #-264	; 0x108
    364c:	01290000 	teqeq	r9, r0
    3650:	2a080251 	bcs	203f9c <__Stack_Size+0x203b9c>
    3654:	014e0000 	mrseq	r0, (UNDEF: 78)
    3658:	000013aa 	andeq	r1, r0, sl, lsr #7
    365c:	0101df01 	tsteq	r1, r1, lsl #30
    3660:	0000059e 	muleq	r0, lr, r5
    3664:	08003f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, ip, sp}
    3668:	08003f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, ip, sp}
    366c:	01007d02 	tsteq	r0, r2, lsl #26
    3670:	00002906 	andeq	r2, r0, r6, lsl #18
    3674:	00646951 	rsbeq	r6, r4, r1, asr r9
    3678:	9e01df01 	cdpls	15, 0, cr13, cr1, cr1, {0}
    367c:	48000005 	stmdami	r0, {r0, r2}
    3680:	2d000014 	stccs	0, cr0, [r0, #-80]	; 0xffffffb0
    3684:	08003f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, ip, sp}
    3688:	00244a01 	eoreq	r4, r4, r1, lsl #20
    368c:	51012900 	tstpl	r1, r0, lsl #18
    3690:	00004801 	andeq	r4, r0, r1, lsl #16
    3694:	1a3f014e 	bne	fc3bd4 <__Stack_Size+0xfc37d4>
    3698:	dc010000 	stcle	0, cr0, [r1], {-0}
    369c:	059e0101 	ldreq	r0, [lr, #257]	; 0x101
    36a0:	3f8a0000 	svccc	0x008a0000
    36a4:	3f900800 	svccc	0x00900800
    36a8:	7d020800 	stcvc	8, cr0, [r2, #-0]
    36ac:	29440100 	stmdbcs	r4, {r8}^
    36b0:	69510000 	ldmdbvs	r1, {}^	; <UNPREDICTABLE>
    36b4:	dc010064 	stcle	0, cr0, [r1], {100}	; 0x64
    36b8:	00059e01 	andeq	r9, r5, r1, lsl #28
    36bc:	00146900 	andseq	r6, r4, r0, lsl #18
    36c0:	3f902d00 	svccc	0x00902d00
    36c4:	4a010800 	bmi	456cc <__Stack_Size+0x452cc>
    36c8:	29000024 	stmdbcs	r0, {r2, r5}
    36cc:	40015101 	andmi	r5, r1, r1, lsl #2
    36d0:	014e0000 	mrseq	r0, (UNDEF: 78)
    36d4:	00000a7d 	andeq	r0, r0, sp, ror sl
    36d8:	0101d901 	tsteq	r1, r1, lsl #18
    36dc:	0000059e 	muleq	r0, lr, r5
    36e0:	08003f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp}
    36e4:	08003f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, ip, sp}
    36e8:	01007d02 	tsteq	r0, r2, lsl #26
    36ec:	00002982 	andeq	r2, r0, r2, lsl #19
    36f0:	00646951 	rsbeq	r6, r4, r1, asr r9
    36f4:	9e01d901 	cdpls	9, 0, cr13, cr1, cr1, {0}
    36f8:	8a000005 	bhi	3714 <__Stack_Size+0x3314>
    36fc:	2d000014 	stccs	0, cr0, [r0, #-80]	; 0xffffffb0
    3700:	08003f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, ip, sp}
    3704:	00244a01 	eoreq	r4, r4, r1, lsl #20
    3708:	51012900 	tstpl	r1, r0, lsl #18
    370c:	00003401 	andeq	r3, r0, r1, lsl #8
    3710:	14d0014e 	ldrbne	r0, [r0], #334	; 0x14e
    3714:	d6010000 	strle	r0, [r1], -r0
    3718:	059e0101 	ldreq	r0, [lr, #257]	; 0x101
    371c:	3f960000 	svccc	0x00960000
    3720:	3f9c0800 	svccc	0x009c0800
    3724:	7d020800 	stcvc	8, cr0, [r2, #-0]
    3728:	29c00100 	stmibcs	r0, {r8}^
    372c:	69510000 	ldmdbvs	r1, {}^	; <UNPREDICTABLE>
    3730:	d6010064 	strle	r0, [r1], -r4, rrx
    3734:	00059e01 	andeq	r9, r5, r1, lsl #28
    3738:	0014ab00 	andseq	sl, r4, r0, lsl #22
    373c:	3f9c2d00 	svccc	0x009c2d00
    3740:	4a010800 	bmi	45748 <__Stack_Size+0x45348>
    3744:	29000024 	stmdbcs	r0, {r2, r5}
    3748:	32015101 	andcc	r5, r1, #1073741824	; 0x40000000
    374c:	01370000 	teqeq	r7, r0
    3750:	00001442 	andeq	r1, r0, r2, asr #8
    3754:	0104c001 	tsteq	r4, r1
    3758:	000005a9 	andeq	r0, r0, r9, lsr #11
    375c:	08003f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, sp}
    3760:	08003fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    3764:	000014cc 	andeq	r1, r0, ip, asr #9
    3768:	002a5e01 	eoreq	r5, sl, r1, lsl #28
    376c:	64695100 	strbtvs	r5, [r9], #-256	; 0x100
    3770:	04c00100 	strbeq	r0, [r0], #256	; 0x100
    3774:	0000059e 	muleq	r0, lr, r5
    3778:	000014ec 	andeq	r1, r0, ip, ror #9
    377c:	00123548 	andseq	r3, r2, r8, asr #10
    3780:	003fc400 	eorseq	ip, pc, r0, lsl #8
    3784:	003fcc08 	eorseq	ip, pc, r8, lsl #24
    3788:	04c70108 	strbeq	r0, [r7], #264	; 0x108
    378c:	00002a1a 	andeq	r2, r0, sl, lsl sl
    3790:	0012443e 	andseq	r4, r2, lr, lsr r4
    3794:	cc2b1900 	stcgt	9, cr1, [fp], #-0
    3798:	0008003f 	andeq	r0, r8, pc, lsr r0
    379c:	29000012 	stmdbcs	r0, {r1, r4}
    37a0:	0a035001 	beq	d77ac <__Stack_Size+0xd73ac>
    37a4:	000061a8 	andeq	r6, r0, r8, lsr #3
    37a8:	000bf754 	andeq	pc, fp, r4, asr r7	; <UNPREDICTABLE>
    37ac:	003fd400 	eorseq	sp, pc, r0, lsl #8
    37b0:	003fda08 	eorseq	sp, pc, r8, lsl #20
    37b4:	04c90108 	strbeq	r0, [r9], #264	; 0x108
    37b8:	003fb028 	eorseq	fp, pc, r8, lsr #32
    37bc:	0022d008 	eoreq	sp, r2, r8
    37c0:	002a3e00 	eoreq	r3, sl, r0, lsl #28
    37c4:	50012900 	andpl	r2, r1, r0, lsl #18
    37c8:	00007502 	andeq	r7, r0, r2, lsl #10
    37cc:	003fc42a 	eorseq	ip, pc, sl, lsr #8
    37d0:	000b5b08 	andeq	r5, fp, r8, lsl #22
    37d4:	3fd42b00 	svccc	0x00d42b00
    37d8:	0b660800 	bleq	19857e0 <__Stack_Size+0x19853e0>
    37dc:	01290000 	teqeq	r9, r0
    37e0:	00760251 	rsbseq	r0, r6, r1, asr r2
    37e4:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    37e8:	00000075 	andeq	r0, r0, r5, ror r0
    37ec:	09120133 	ldmdbeq	r2, {r0, r1, r4, r5, r8}
    37f0:	0f010000 	svceq	0x00010000
    37f4:	3fe80105 	svccc	0x00e80105
    37f8:	40060800 	andmi	r0, r6, r0, lsl #16
    37fc:	150d0800 	strne	r0, [sp, #-2048]	; 0x800
    3800:	d1010000 	mrsle	r0, (UNDEF: 1)
    3804:	5100002a 	tstpl	r0, sl, lsr #32
    3808:	01006469 	tsteq	r0, r9, ror #8
    380c:	059e050f 	ldreq	r0, [lr, #1295]	; 0x50f
    3810:	152d0000 	strne	r0, [sp, #-0]!
    3814:	f0280000 			; <UNDEFINED> instruction: 0xf0280000
    3818:	d008003f 	andle	r0, r8, pc, lsr r0
    381c:	9c000022 	stcls	0, cr0, [r0], {34}	; 0x22
    3820:	2900002a 	stmdbcs	r0, {r1, r3, r5}
    3824:	74025001 	strvc	r5, [r2], #-1
    3828:	fa280000 	blx	a03830 <__Stack_Size+0xa03430>
    382c:	6708003f 	smladxvs	r8, pc, r0, r0	; <UNPREDICTABLE>
    3830:	ba000021 	blt	38bc <__Stack_Size+0x34bc>
    3834:	2900002a 	stmdbcs	r0, {r1, r3, r5}
    3838:	30015201 	andcc	r5, r1, r1, lsl #4
    383c:	01510129 	cmpeq	r1, r9, lsr #2
    3840:	50012930 	andpl	r2, r1, r0, lsr r9
    3844:	00007402 	andeq	r7, r0, r2, lsl #8
    3848:	0040062d 	subeq	r0, r0, sp, lsr #12
    384c:	0b660108 	bleq	1983c74 <__Stack_Size+0x1983874>
    3850:	01290000 	teqeq	r9, r0
    3854:	29300151 	ldmdbcs	r0!, {r0, r4, r6, r8}
    3858:	74025001 	strvc	r5, [r2], #-1
    385c:	37000000 	strcc	r0, [r0, -r0]
    3860:	0018b201 	andseq	fp, r8, r1, lsl #4
    3864:	052e0100 	streq	r0, [lr, #-256]!	; 0x100
    3868:	00059e01 	andeq	r9, r5, r1, lsl #28
    386c:	00400600 	subeq	r0, r0, r0, lsl #12
    3870:	00406008 	subeq	r6, r0, r8
    3874:	00154e08 	andseq	r4, r5, r8, lsl #28
    3878:	2bb30100 	blcs	fecc3c80 <SCS_BASE+0x1ecb5c80>
    387c:	a2350000 	eorsge	r0, r5, #0
    3880:	01000019 	tsteq	r0, r9, lsl r0
    3884:	05b4052e 	ldreq	r0, [r4, #1326]!	; 0x52e
    3888:	156e0000 	strbne	r0, [lr, #-0]!
    388c:	25470000 	strbcs	r0, [r7, #-0]
    3890:	0100000b 	tsteq	r0, fp
    3894:	0593052f 	ldreq	r0, [r3, #1327]	; 0x52f
    3898:	91020000 	mrsls	r0, (UNDEF: 2)
    389c:	12354868 	eorsne	r4, r5, #6815744	; 0x680000
    38a0:	40320000 	eorsmi	r0, r2, r0
    38a4:	403a0800 	eorsmi	r0, sl, r0, lsl #16
    38a8:	38010800 	stmdacc	r1, {fp}
    38ac:	002b3b05 	eoreq	r3, fp, r5, lsl #22
    38b0:	12443e00 	subne	r3, r4, #0
    38b4:	2b0a0000 	blcs	2838bc <__Stack_Size+0x2834bc>
    38b8:	0800403a 	stmdaeq	r0, {r1, r3, r4, r5, lr}
    38bc:	00001200 	andeq	r1, r0, r0, lsl #4
    38c0:	03500129 	cmpeq	r0, #1073741834	; 0x4000000a
    38c4:	0027100a 	eoreq	r1, r7, sl
    38c8:	40102800 	andsmi	r2, r0, r0, lsl #16
    38cc:	4e1f0800 	cdpmi	8, 1, cr0, cr15, cr0, {0}
    38d0:	2b4f0000 	blcs	13c38d8 <__Stack_Size+0x13c34d8>
    38d4:	01290000 	teqeq	r9, r0
    38d8:	68910250 	ldmvs	r1, {r4, r6, r9}
    38dc:	40322800 	eorsmi	r2, r2, r0, lsl #16
    38e0:	4e390800 	cdpmi	8, 3, cr0, cr9, cr0, {0}
    38e4:	2b630000 	blcs	18c38ec <__Stack_Size+0x18c34ec>
    38e8:	01290000 	teqeq	r9, r0
    38ec:	00740250 	rsbseq	r0, r4, r0, asr r2
    38f0:	40422800 	submi	r2, r2, r0, lsl #16
    38f4:	4e4d0800 	cdpmi	8, 4, cr0, cr13, cr0, {0}
    38f8:	2b7d0000 	blcs	1f43900 <__Stack_Size+0x1f43500>
    38fc:	01290000 	teqeq	r9, r0
    3900:	68910251 	ldmvs	r1, {r0, r4, r6, r9}
    3904:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    3908:	28000074 	stmdacs	r0, {r2, r4, r5, r6}
    390c:	0800404e 	stmdaeq	r0, {r1, r2, r3, r6, lr}
    3910:	00004e66 	andeq	r4, r0, r6, ror #28
    3914:	00002b9d 	muleq	r0, sp, fp
    3918:	01520129 	cmpeq	r2, r9, lsr #2
    391c:	51012931 	tstpl	r1, r1, lsr r9
    3920:	05250a03 	streq	r0, [r5, #-2563]!	; 0xa03
    3924:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    3928:	2b000074 	blcs	3b00 <__Stack_Size+0x3700>
    392c:	08004056 	stmdaeq	r0, {r1, r2, r4, r6, lr}
    3930:	00004d78 	andeq	r4, r0, r8, ror sp
    3934:	01510129 	cmpeq	r1, r9, lsr #2
    3938:	50012931 	andpl	r2, r1, r1, lsr r9
    393c:	00007402 	andeq	r7, r0, r2, lsl #8
    3940:	9e013400 	cfcpysls	mvf3, mvf1
    3944:	01000012 	tsteq	r0, r2, lsl r0
    3948:	60010543 	andvs	r0, r1, r3, asr #10
    394c:	6c080040 	stcvs	0, cr0, [r8], {64}	; 0x40
    3950:	02080040 	andeq	r0, r8, #64	; 0x40
    3954:	e701007d 	smlsdx	r1, sp, r0, r0
    3958:	2d00002b 	stccs	0, cr0, [r0, #-172]	; 0xffffff54
    395c:	08004068 	stmdaeq	r0, {r3, r5, r6, lr}
    3960:	004d7801 	subeq	r7, sp, r1, lsl #16
    3964:	51012900 	tstpl	r1, r0, lsl #18
    3968:	01293001 	teqeq	r9, r1
    396c:	000c0550 	andeq	r0, ip, r0, asr r5
    3970:	00400048 	subeq	r0, r0, r8, asr #32
    3974:	05011800 	streq	r1, [r1, #-2048]	; 0x800
    3978:	0100001a 	tsteq	r0, sl, lsl r0
    397c:	01010547 	tsteq	r1, r7, asr #10
    3980:	00002c03 	andeq	r2, r0, r3, lsl #24
    3984:	000fff1a 	andeq	pc, pc, sl, lsl pc	; <UNPREDICTABLE>
    3988:	05470100 	strbeq	r0, [r7, #-256]	; 0x100
    398c:	0000059e 	muleq	r0, lr, r5
    3990:	2be72100 	blcs	ff9cbd98 <SCS_BASE+0x1f9bdd98>
    3994:	406c0000 	rsbmi	r0, ip, r0
    3998:	40740800 	rsbsmi	r0, r4, r0, lsl #16
    399c:	7d020800 	stcvc	8, cr0, [r2, #-0]
    39a0:	2c2c0100 	stfcss	f0, [ip], #-0
    39a4:	f6220000 			; <UNDEFINED> instruction: 0xf6220000
    39a8:	a600002b 	strge	r0, [r0], -fp, lsr #32
    39ac:	24000015 	strcs	r0, [r0], #-21
    39b0:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
    39b4:	0019f701 	andseq	pc, r9, r1, lsl #14
    39b8:	014b0000 	mrseq	r0, (UNDEF: 75)
    39bc:	00000d2c 	andeq	r0, r0, ip, lsr #26
    39c0:	01054b01 	tsteq	r5, r1, lsl #22
    39c4:	0000059e 	muleq	r0, lr, r5
    39c8:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
    39cc:	08004088 	stmdaeq	r0, {r3, r7, lr}
    39d0:	01007d02 	tsteq	r0, r2, lsl #26
    39d4:	0b180133 	bleq	603ea8 <__Stack_Size+0x603aa8>
    39d8:	51010000 	mrspl	r0, (UNDEF: 1)
    39dc:	40880105 	addmi	r0, r8, r5, lsl #2
    39e0:	40b80800 	adcsmi	r0, r8, r0, lsl #16
    39e4:	15c70800 	strbne	r0, [r7, #2048]	; 0x800
    39e8:	d4010000 	strle	r0, [r1], #-0
    39ec:	3500002c 	strcc	r0, [r0, #-44]	; 0x2c
    39f0:	000018bf 			; <UNDEFINED> instruction: 0x000018bf
    39f4:	9e055101 	adflss	f5, f5, f1
    39f8:	e7000005 	str	r0, [r0, -r5]
    39fc:	28000015 	stmdacs	r0, {r0, r2, r4}
    3a00:	08004092 	stmdaeq	r0, {r1, r4, r7, lr}
    3a04:	00000d14 	andeq	r0, r0, r4, lsl sp
    3a08:	00002c84 	andeq	r2, r0, r4, lsl #25
    3a0c:	01500129 	cmpeq	r0, r9, lsr #2
    3a10:	9a280034 	bls	a03ae8 <__Stack_Size+0xa036e8>
    3a14:	23080040 	movwcs	r0, #32832	; 0x8040
    3a18:	a100004d 	tstge	r0, sp, asr #32
    3a1c:	2900002c 	stmdbcs	r0, {r2, r3, r5}
    3a20:	74025101 	strvc	r5, [r2], #-257	; 0x101
    3a24:	50012900 	andpl	r2, r1, r0, lsl #18
    3a28:	48000c05 	stmdami	r0, {r0, r2, sl, fp}
    3a2c:	28004000 	stmdacs	r0, {lr}
    3a30:	080040a2 	stmdaeq	r0, {r1, r5, r7, lr}
    3a34:	00004d42 	andeq	r4, r0, r2, asr #26
    3a38:	00002cbe 			; <UNDEFINED> instruction: 0x00002cbe
    3a3c:	02510129 	subseq	r0, r1, #1073741834	; 0x4000000a
    3a40:	01294008 	teqeq	r9, r8
    3a44:	000c0550 	andeq	r0, ip, r0, asr r5
    3a48:	00400048 	subeq	r0, r0, r8, asr #32
    3a4c:	0040b22d 	subeq	fp, r0, sp, lsr #4
    3a50:	0a970108 	beq	fe5c3e78 <SCS_BASE+0x1e5b5e78>
    3a54:	01290000 	teqeq	r9, r0
    3a58:	29300151 	ldmdbcs	r0!, {r0, r4, r6, r8}
    3a5c:	34015001 	strcc	r5, [r1], #-1
    3a60:	06210000 	strteq	r0, [r1], -r0
    3a64:	b800000c 	stmdalt	r0, {r2, r3}
    3a68:	f8080040 			; <UNDEFINED> instruction: 0xf8080040
    3a6c:	02080040 	andeq	r0, r8, #64	; 0x40
    3a70:	1501007d 	strne	r0, [r1, #-125]	; 0x7d
    3a74:	4f00002d 	svcmi	0x0000002d
    3a78:	00000c19 	andeq	r0, r0, r9, lsl ip
    3a7c:	064d5001 	strbeq	r5, [sp], -r1
    3a80:	ca00000c 	bgt	3ab8 <__Stack_Size+0x36b8>
    3a84:	f0080040 			; <UNDEFINED> instruction: 0xf0080040
    3a88:	01080040 	tsteq	r8, r0, asr #32
    3a8c:	ca500557 	bgt	1404ff0 <__Stack_Size+0x1404bf0>
    3a90:	f0080040 			; <UNDEFINED> instruction: 0xf0080040
    3a94:	3c080040 	stccc	0, cr0, [r8], {64}	; 0x40
    3a98:	00000c19 	andeq	r0, r0, r9, lsl ip
    3a9c:	00001608 	andeq	r1, r0, r8, lsl #12
    3aa0:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    3aa4:	00136e01 	andseq	r6, r3, r1, lsl #28
    3aa8:	055f0100 	ldrbeq	r0, [pc, #-256]	; 39b0 <__Stack_Size+0x35b0>
    3aac:	00059e01 	andeq	r9, r5, r1, lsl #28
    3ab0:	0040f800 	subeq	pc, r0, r0, lsl #16
    3ab4:	00412008 	subeq	r2, r1, r8
    3ab8:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    3abc:	002d4401 	eoreq	r4, sp, r1, lsl #8
    3ac0:	31073d00 	tstcc	r7, r0, lsl #26
    3ac4:	62010000 	andvs	r0, r1, #0
    3ac8:	00059e05 	andeq	r9, r5, r5, lsl #28
    3acc:	00161b00 	andseq	r1, r6, r0, lsl #22
    3ad0:	01330000 	teqeq	r3, r0
    3ad4:	00001891 	muleq	r0, r1, r8
    3ad8:	01056501 	tsteq	r5, r1, lsl #10
    3adc:	08004120 	stmdaeq	r0, {r5, r8, lr}
    3ae0:	080041c8 	stmdaeq	r0, {r3, r6, r7, r8, lr}
    3ae4:	0000162e 	andeq	r1, r0, lr, lsr #12
    3ae8:	002dcd01 	eoreq	ip, sp, r1, lsl #26
    3aec:	1b593d00 	blne	1652ef4 <__Stack_Size+0x1652af4>
    3af0:	66010000 	strvs	r0, [r1], -r0
    3af4:	00059e05 	andeq	r9, r5, r5, lsl #28
    3af8:	00164e00 	andseq	r4, r6, r0, lsl #28
    3afc:	412c2800 	teqmi	ip, r0, lsl #16
    3b00:	4e840800 	cdpmi	8, 8, cr0, cr4, cr0, {0}
    3b04:	2d8d0000 	stccs	0, cr0, [sp]
    3b08:	01290000 	teqeq	r9, r0
    3b0c:	250a0351 	strcs	r0, [sl, #-849]	; 0x351
    3b10:	50012905 	andpl	r2, r1, r5, lsl #18
    3b14:	48000c05 	stmdami	r0, {r0, r2, sl, fp}
    3b18:	28004000 	stmdacs	r0, {lr}
    3b1c:	08004136 	stmdaeq	r0, {r1, r2, r4, r5, r8, lr}
    3b20:	00004ea1 	andeq	r4, r0, r1, lsr #29
    3b24:	00002da4 	andeq	r2, r0, r4, lsr #27
    3b28:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    3b2c:	0048000c 	subeq	r0, r8, ip
    3b30:	5a280040 	bpl	a03c38 <__Stack_Size+0xa03838>
    3b34:	14080041 	strne	r0, [r8], #-65	; 0x41
    3b38:	b700000d 	strlt	r0, [r0, -sp]
    3b3c:	2900002d 	stmdbcs	r0, {r0, r2, r3, r5}
    3b40:	35015001 	strcc	r5, [r1, #-1]
    3b44:	41be2d00 			; <UNDEFINED> instruction: 0x41be2d00
    3b48:	97010800 	strls	r0, [r1, -r0, lsl #16]
    3b4c:	2900000a 	stmdbcs	r0, {r1, r3}
    3b50:	30015101 	andcc	r5, r1, r1, lsl #2
    3b54:	01500129 	cmpeq	r0, r9, lsr #2
    3b58:	55000035 	strpl	r0, [r0, #-53]	; 0x35
    3b5c:	00152d01 	andseq	r2, r5, r1, lsl #26
    3b60:	05810100 	streq	r0, [r1, #256]	; 0x100
    3b64:	0041c801 	subeq	ip, r1, r1, lsl #16
    3b68:	0041dc08 	subeq	sp, r1, r8, lsl #24
    3b6c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    3b70:	0c263a01 	stceq	10, cr3, [r6], #-4
    3b74:	41dc0000 	bicsmi	r0, ip, r0
    3b78:	42240800 	eormi	r0, r4, #0
    3b7c:	16820800 	strne	r0, [r2], r0, lsl #16
    3b80:	13010000 	movwne	r0, #4096	; 0x1000
    3b84:	5600002e 	strpl	r0, [r0], -lr, lsr #32
    3b88:	00000c26 	andeq	r0, r0, r6, lsr #24
    3b8c:	08004204 	stmdaeq	r0, {r2, r9, lr}
    3b90:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3b94:	2a058501 	bcs	164fa0 <__Stack_Size+0x164ba0>
    3b98:	080041f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, lr}
    3b9c:	00002dcd 	andeq	r2, r0, sp, asr #27
    3ba0:	87013400 	strhi	r3, [r1, -r0, lsl #8]
    3ba4:	01000003 	tsteq	r0, r3
    3ba8:	2401058e 	strcs	r0, [r1], #-1422	; 0x58e
    3bac:	28080042 	stmdacs	r8, {r1, r6}
    3bb0:	02080042 	andeq	r0, r8, #66	; 0x42
    3bb4:	3801007d 	stmdacc	r1, {r0, r2, r3, r4, r5, r6}
    3bb8:	2400002e 	strcs	r0, [r0], #-46	; 0x2e
    3bbc:	08004228 	stmdaeq	r0, {r3, r5, r9, lr}
    3bc0:	002d4401 	eoreq	r4, sp, r1, lsl #8
    3bc4:	01370000 	teqeq	r7, r0
    3bc8:	00000958 	andeq	r0, r0, r8, asr r9
    3bcc:	01059401 	tsteq	r5, r1, lsl #8
    3bd0:	0000059e 	muleq	r0, lr, r5
    3bd4:	08004228 	stmdaeq	r0, {r3, r5, r9, lr}
    3bd8:	08004236 	stmdaeq	r0, {r1, r2, r4, r5, r9, lr}
    3bdc:	000016a2 	andeq	r1, r0, r2, lsr #13
    3be0:	002e7901 	eoreq	r7, lr, r1, lsl #18
    3be4:	19a23500 	stmibne	r2!, {r8, sl, ip, sp}
    3be8:	94010000 	strls	r0, [r1], #-0
    3bec:	0005b405 	andeq	fp, r5, r5, lsl #8
    3bf0:	0016c200 	andseq	ip, r6, r0, lsl #4
    3bf4:	422e2b00 	eormi	r2, lr, #0
    3bf8:	2ad10800 	bcs	ff445c00 <SCS_BASE+0x1f437c00>
    3bfc:	01290000 	teqeq	r9, r0
    3c00:	01f30350 	mvnseq	r0, r0, asr r3
    3c04:	34000050 	strcc	r0, [r0], #-80	; 0x50
    3c08:	00135901 	andseq	r5, r3, r1, lsl #18
    3c0c:	05990100 	ldreq	r0, [r9, #256]	; 0x100
    3c10:	00423601 	subeq	r3, r2, r1, lsl #12
    3c14:	00423a08 	subeq	r3, r2, r8, lsl #20
    3c18:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    3c1c:	002e9e01 	eoreq	r9, lr, r1, lsl #28
    3c20:	423a2400 	eorsmi	r2, sl, #0
    3c24:	b3010800 	movwlt	r0, #6144	; 0x1800
    3c28:	0000002b 	andeq	r0, r0, fp, lsr #32
    3c2c:	0e2e0137 	mcreq	1, 1, r0, cr14, cr7, {1}
    3c30:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c34:	00480105 	subeq	r0, r8, r5, lsl #2
    3c38:	423a0000 	eorsmi	r0, sl, #0
    3c3c:	42520800 	subsmi	r0, r2, #0
    3c40:	16e30800 	strbtne	r0, [r3], r0, lsl #16
    3c44:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    3c48:	5100002e 	tstpl	r0, lr, lsr #32
    3c4c:	9c010063 	stcls	0, cr0, [r1], {99}	; 0x63
    3c50:	00007805 	andeq	r7, r0, r5, lsl #16
    3c54:	00170300 	andseq	r0, r7, r0, lsl #6
    3c58:	42482800 	submi	r2, r8, #0
    3c5c:	2c460800 	mcrrcs	8, 0, r0, r6, cr0
    3c60:	2ede0000 	cdpcs	0, 13, cr0, cr14, cr0, {0}
    3c64:	01290000 	teqeq	r9, r0
    3c68:	003d0150 	eorseq	r0, sp, r0, asr r1
    3c6c:	00424e2a 	subeq	r4, r2, sl, lsr #28
    3c70:	002c4608 	eoreq	r4, ip, r8, lsl #12
    3c74:	01370000 	teqeq	r7, r0
    3c78:	00000e68 	andeq	r0, r0, r8, ror #28
    3c7c:	0105a501 	tsteq	r5, r1, lsl #10
    3c80:	00000048 	andeq	r0, r0, r8, asr #32
    3c84:	08004252 	stmdaeq	r0, {r1, r4, r6, r9, lr}
    3c88:	08004268 	stmdaeq	r0, {r3, r5, r6, r9, lr}
    3c8c:	00001724 	andeq	r1, r0, r4, lsr #14
    3c90:	002f2f01 	eoreq	r2, pc, r1, lsl #30
    3c94:	74735100 	ldrbtvc	r5, [r3], #-256	; 0x100
    3c98:	a5010072 	strge	r0, [r1, #-114]	; 0x72
    3c9c:	00007f05 	andeq	r7, r0, r5, lsl #30
    3ca0:	00174400 	andseq	r4, r7, r0, lsl #8
    3ca4:	006e4900 	rsbeq	r4, lr, r0, lsl #18
    3ca8:	4805a601 	stmdami	r5, {r0, r9, sl, sp, pc}
    3cac:	62000000 	andvs	r0, r0, #0
    3cb0:	2a000017 	bcs	3d14 <__Stack_Size+0x3914>
    3cb4:	08004262 	stmdaeq	r0, {r1, r5, r6, r9, lr}
    3cb8:	00002e9e 	muleq	r0, lr, lr
    3cbc:	45013700 	strmi	r3, [r1, #-1792]	; 0x700
    3cc0:	01000009 	tsteq	r0, r9
    3cc4:	480105ab 	stmdami	r1, {r0, r1, r3, r5, r7, r8, sl}
    3cc8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    3ccc:	98080042 	stmdals	r8, {r1, r6}
    3cd0:	81080042 	tsthi	r8, r2, asr #32
    3cd4:	01000017 	tsteq	r0, r7, lsl r0
    3cd8:	00002fad 	andeq	r2, r0, sp, lsr #31
    3cdc:	01006349 	tsteq	r0, r9, asr #6
    3ce0:	007805ac 	rsbseq	r0, r8, ip, lsr #11
    3ce4:	17a10000 	strne	r0, [r1, r0]!
    3ce8:	e7480000 	strb	r0, [r8, -r0]
    3cec:	6a00002b 	bvs	3da0 <__Stack_Size+0x39a0>
    3cf0:	72080042 	andvc	r0, r8, #66	; 0x42
    3cf4:	01080042 	tsteq	r8, r2, asr #32
    3cf8:	2f8805ad 	svccs	0x008805ad
    3cfc:	f63e0000 			; <UNDEFINED> instruction: 0xf63e0000
    3d00:	0a00002b 	beq	3db4 <__Stack_Size+0x39b4>
    3d04:	0042722b 	subeq	r7, r2, fp, lsr #4
    3d08:	0019f708 	andseq	pc, r9, r8, lsl #14
    3d0c:	50012900 	andpl	r2, r1, r0, lsl #18
    3d10:	07d00a03 	ldrbeq	r0, [r0, r3, lsl #20]
    3d14:	762a0000 	strtvc	r0, [sl], -r0
    3d18:	2c080042 	stccs	0, cr0, [r8], {66}	; 0x42
    3d1c:	2a00002c 	bcs	3dd4 <__Stack_Size+0x39d4>
    3d20:	0800427c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, lr}
    3d24:	00000c26 	andeq	r0, r0, r6, lsr #24
    3d28:	0042822a 	subeq	r8, r2, sl, lsr #4
    3d2c:	000c0608 	andeq	r0, ip, r8, lsl #12
    3d30:	428e2a00 	addmi	r2, lr, #0
    3d34:	0c260800 	stceq	8, cr0, [r6], #-0
    3d38:	37000000 	strcc	r0, [r0, -r0]
    3d3c:	00132401 	andseq	r2, r3, r1, lsl #8
    3d40:	05b60100 	ldreq	r0, [r6, #256]!	; 0x100
    3d44:	00007201 	andeq	r7, r0, r1, lsl #4
    3d48:	00429800 	subeq	r9, r2, r0, lsl #16
    3d4c:	0042ec08 	subeq	lr, r2, r8, lsl #24
    3d50:	0017b408 	andseq	fp, r7, r8, lsl #8
    3d54:	304b0100 	subcc	r0, fp, r0, lsl #2
    3d58:	73510000 	cmpvc	r1, #0
    3d5c:	01007274 	tsteq	r0, r4, ror r2
    3d60:	007205b6 	ldrhteq	r0, [r2], #-86	; 0xffffffaa
    3d64:	17d40000 	ldrbne	r0, [r4, r0]
    3d68:	63490000 	movtvs	r0, #36864	; 0x9000
    3d6c:	05b70100 	ldreq	r0, [r7, #256]!	; 0x100
    3d70:	0000059e 	muleq	r0, lr, r5
    3d74:	00001819 	andeq	r1, r0, r9, lsl r8
    3d78:	6e656c49 	cdpvs	12, 6, cr6, cr5, cr9, {2}
    3d7c:	05b70100 	ldreq	r0, [r7, #256]!	; 0x100
    3d80:	0000059e 	muleq	r0, lr, r5
    3d84:	0000182c 	andeq	r1, r0, ip, lsr #16
    3d88:	002be748 	eoreq	lr, fp, r8, asr #14
    3d8c:	00429e00 	subeq	r9, r2, r0, lsl #28
    3d90:	0042a608 	subeq	sl, r2, r8, lsl #12
    3d94:	05b90108 	ldreq	r0, [r9, #264]!	; 0x108
    3d98:	00003026 	andeq	r3, r0, r6, lsr #32
    3d9c:	002bf63e 	eoreq	pc, fp, lr, lsr r6	; <UNPREDICTABLE>
    3da0:	a62b0a00 	strtge	r0, [fp], -r0, lsl #20
    3da4:	f7080042 			; <UNDEFINED> instruction: 0xf7080042
    3da8:	29000019 	stmdbcs	r0, {r0, r3, r4}
    3dac:	0a035001 	beq	d7db8 <__Stack_Size+0xd79b8>
    3db0:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3db4:	0042aa2a 	subeq	sl, r2, sl, lsr #20
    3db8:	002c2c08 	eoreq	r2, ip, r8, lsl #24
    3dbc:	42b02a00 	adcsmi	r2, r0, #0
    3dc0:	0c260800 	stceq	8, cr0, [r6], #-0
    3dc4:	b82a0000 	stmdalt	sl!, {}	; <UNPREDICTABLE>
    3dc8:	26080042 	strcs	r0, [r8], -r2, asr #32
    3dcc:	2a00000c 	bcs	3e04 <__Stack_Size+0x3a04>
    3dd0:	080042cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, lr}
    3dd4:	00000c06 	andeq	r0, r0, r6, lsl #24
    3dd8:	ac013300 	stcge	3, cr3, [r1], {-0}
    3ddc:	01000012 	tsteq	r0, r2, lsl r0
    3de0:	ec0105d0 	cfstr32	mvfx0, [r1], {208}	; 0xd0
    3de4:	88080042 	stmdahi	r8, {r1, r6}
    3de8:	4b080043 	blmi	203efc <__Stack_Size+0x203afc>
    3dec:	01000018 	tsteq	r0, r8, lsl r0
    3df0:	0000312c 	andeq	r3, r0, ip, lsr #2
    3df4:	002c1535 	eoreq	r1, ip, r5, lsr r5
    3df8:	05d00100 	ldrbeq	r0, [r0, #256]	; 0x100
    3dfc:	000005a9 	andeq	r0, r0, r9, lsr #11
    3e00:	0000186b 	andeq	r1, r0, fp, ror #16
    3e04:	0042fe28 	subeq	pc, r2, r8, lsr #28
    3e08:	002ee808 	eoreq	lr, lr, r8, lsl #16
    3e0c:	00308d00 	eorseq	r8, r0, r0, lsl #26
    3e10:	50012900 	andpl	r2, r1, r0, lsl #18
    3e14:	68550305 	ldmdavs	r5, {r0, r2, r8, r9}^
    3e18:	28000800 	stmdacs	r0, {fp}
    3e1c:	0800430c 	stmdaeq	r0, {r2, r3, r8, r9, lr}
    3e20:	00002ee8 	andeq	r2, r0, r8, ror #29
    3e24:	000030a4 	andeq	r3, r0, r4, lsr #1
    3e28:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    3e2c:	00688703 	rsbeq	r8, r8, r3, lsl #14
    3e30:	1a280008 	bne	a03e58 <__Stack_Size+0xa03a58>
    3e34:	e8080043 	stmda	r8, {r0, r1, r6}
    3e38:	bb00002e 	bllt	3ef8 <__Stack_Size+0x3af8>
    3e3c:	29000030 	stmdbcs	r0, {r4, r5}
    3e40:	03055001 	movweq	r5, #20481	; 0x5001
    3e44:	080068bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, fp, sp, lr}
    3e48:	43282800 	teqmi	r8, #0
    3e4c:	2ee80800 	cdpcs	8, 14, cr0, cr8, cr0, {0}
    3e50:	30d20000 	sbcscc	r0, r2, r0
    3e54:	01290000 	teqeq	r9, r0
    3e58:	e8030550 	stmda	r3, {r4, r6, r8, sl}
    3e5c:	00080068 	andeq	r0, r8, r8, rrx
    3e60:	00433628 	subeq	r3, r3, r8, lsr #12
    3e64:	002ee808 	eoreq	lr, lr, r8, lsl #16
    3e68:	0030e900 	eorseq	lr, r0, r0, lsl #18
    3e6c:	50012900 	andpl	r2, r1, r0, lsl #18
    3e70:	69110305 	ldmdbvs	r1, {r0, r2, r8, r9}
    3e74:	28000800 	stmdacs	r0, {fp}
    3e78:	08004344 	stmdaeq	r0, {r2, r6, r8, r9, lr}
    3e7c:	00002ee8 	andeq	r2, r0, r8, ror #29
    3e80:	00003100 	andeq	r3, r0, r0, lsl #2
    3e84:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    3e88:	00695003 	rsbeq	r5, r9, r3
    3e8c:	52280008 	eorpl	r0, r8, #8
    3e90:	e8080043 	stmda	r8, {r0, r1, r6}
    3e94:	1700002e 	strne	r0, [r0, -lr, lsr #32]
    3e98:	29000031 	stmdbcs	r0, {r0, r4, r5}
    3e9c:	03055001 	movweq	r5, #20481	; 0x5001
    3ea0:	0800697e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, fp, sp, lr}
    3ea4:	43642d00 	cmnmi	r4, #0
    3ea8:	e8010800 	stmda	r1, {fp}
    3eac:	2900002e 	stmdbcs	r0, {r1, r2, r3, r5}
    3eb0:	03055001 	movweq	r5, #20481	; 0x5001
    3eb4:	080069aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, fp, sp, lr}
    3eb8:	01330000 	teqeq	r3, r0
    3ebc:	0000085f 	andeq	r0, r0, pc, asr r8
    3ec0:	01020301 	tsteq	r2, r1, lsl #6
    3ec4:	08004388 	stmdaeq	r0, {r3, r7, r8, r9, lr}
    3ec8:	080043d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, lr}
    3ecc:	0000188c 	andeq	r1, r0, ip, lsl #17
    3ed0:	0031cd01 	eorseq	ip, r1, r1, lsl #26
    3ed4:	14463d00 	strbne	r3, [r6], #-3328	; 0xd00
    3ed8:	04010000 	streq	r0, [r1], #-0
    3edc:	00004802 	andeq	r4, r0, r2, lsl #16
    3ee0:	0018ac00 	andseq	sl, r8, r0, lsl #24
    3ee4:	00694900 	rsbeq	r4, r9, r0, lsl #18
    3ee8:	48020401 	stmdami	r2, {r0, sl}
    3eec:	bf000000 	svclt	0x00000000
    3ef0:	47000018 	smladmi	r0, r8, r0, r0
    3ef4:	0000166c 	andeq	r1, r0, ip, ror #12
    3ef8:	cd020501 	cfstr32gt	mvfx0, [r2, #-4]
    3efc:	02000031 	andeq	r0, r0, #49	; 0x31
    3f00:	4f476891 	svcmi	0x00476891
    3f04:	0100000c 	tsteq	r0, ip
    3f08:	31cd020e 	biccc	r0, sp, lr, lsl #4
    3f0c:	91020000 	mrsls	r0, (UNDEF: 2)
    3f10:	12354870 	eorsne	r4, r5, #7340032	; 0x700000
    3f14:	43c60000 	bicmi	r0, r6, #0
    3f18:	43ce0800 	bicmi	r0, lr, #0
    3f1c:	14010800 	strne	r0, [r1], #-2048	; 0x800
    3f20:	0031af02 	eorseq	sl, r1, r2, lsl #30
    3f24:	12443e00 	subne	r3, r4, #0
    3f28:	2b190000 	blcs	643f30 <__Stack_Size+0x643b30>
    3f2c:	080043ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, lr}
    3f30:	00001200 	andeq	r1, r0, r0, lsl #4
    3f34:	03500129 	cmpeq	r0, #1073741834	; 0x4000000a
    3f38:	0061a80a 	rsbeq	sl, r1, sl, lsl #16
    3f3c:	43be2800 			; <UNDEFINED> instruction: 0x43be2800
    3f40:	21670800 	cmncs	r7, r0, lsl #16
    3f44:	31c30000 	biccc	r0, r3, r0
    3f48:	01290000 	teqeq	r9, r0
    3f4c:	fe090250 	mcr2	2, 0, r0, cr9, cr0, {2}
    3f50:	43c42a00 	bicmi	r2, r4, #0
    3f54:	304b0800 	subcc	r0, fp, r0, lsl #16
    3f58:	52000000 	andpl	r0, r0, #0
    3f5c:	0000059e 	muleq	r0, lr, r5
    3f60:	000031dd 	ldrdeq	r3, [r0], -sp
    3f64:	00006453 	andeq	r6, r0, r3, asr r4
    3f68:	4e000600 	cfmadd32mi	mvax0, mvfx0, mvfx0, mvfx0
    3f6c:	00105901 	andseq	r5, r0, r1, lsl #18
    3f70:	06060100 	streq	r0, [r6], -r0, lsl #2
    3f74:	00004801 	andeq	r4, r0, r1, lsl #16
    3f78:	0043d800 	subeq	sp, r3, r0, lsl #16
    3f7c:	0043dc08 	subeq	sp, r3, r8, lsl #24
    3f80:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    3f84:	00321401 	eorseq	r1, r2, r1, lsl #8
    3f88:	00635100 	rsbeq	r5, r3, r0, lsl #2
    3f8c:	78060601 	stmdavc	r6, {r0, r9, sl}
    3f90:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    3f94:	24000018 	strcs	r0, [r0], #-24
    3f98:	080043dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, lr}
    3f9c:	002e9e01 	eoreq	r9, lr, r1, lsl #28
    3fa0:	01250000 	teqeq	r5, r0
    3fa4:	000008d8 	ldrdeq	r0, [r0], -r8
    3fa8:	dc018b01 	stcle	11, cr8, [r1], {1}
    3fac:	20080043 	andcs	r0, r8, r3, asr #32
    3fb0:	ff080044 			; <UNDEFINED> instruction: 0xff080044
    3fb4:	01000018 	tsteq	r0, r8, lsl r0
    3fb8:	00003275 	andeq	r3, r0, r5, ror r2
    3fbc:	00646957 	rsbeq	r6, r4, r7, asr r9
    3fc0:	059e8b01 	ldreq	r8, [lr, #2817]	; 0xb01
    3fc4:	192c0000 	stmdbne	ip!, {}	; <UNPREDICTABLE>
    3fc8:	78580000 	ldmdavc	r8, {}^	; <UNPREDICTABLE>
    3fcc:	0100000a 	tsteq	r0, sl
    3fd0:	0032758c 	eorseq	r7, r2, ip, lsl #11
    3fd4:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
    3fd8:	440c287f 	strmi	r2, [ip], #-2175	; 0x87f
    3fdc:	31dd0800 	bicscc	r0, sp, r0, lsl #16
    3fe0:	32610000 	rsbcc	r0, r1, #0
    3fe4:	01290000 	teqeq	r9, r0
    3fe8:	44740450 	ldrbtmi	r0, [r4], #-1104	; 0x450
    3fec:	2d000194 	stfcss	f0, [r0, #-592]	; 0xfffffdb0
    3ff0:	0800441a 	stmdaeq	r0, {r1, r3, r4, sl, lr}
    3ff4:	0031dd01 	eorseq	sp, r1, r1, lsl #26
    3ff8:	50012900 	andpl	r2, r1, r0, lsl #18
    3ffc:	94457404 	strbls	r7, [r5], #-1028	; 0x404
    4000:	52000001 	andpl	r0, r0, #1
    4004:	00000078 	andeq	r0, r0, r8, ror r0
    4008:	0000328b 	andeq	r3, r0, fp, lsl #5
    400c:	00006453 	andeq	r6, r0, r3, asr r4
    4010:	64531d00 	ldrbvs	r1, [r3], #-3328	; 0xd00
    4014:	01000000 	mrseq	r0, (UNDEF: 0)
    4018:	7b013700 	blvc	51c20 <__Stack_Size+0x51820>
    401c:	01000002 	tsteq	r0, r2
    4020:	48010609 	stmdami	r1, {r0, r3, r9, sl}
    4024:	20000000 	andcs	r0, r0, r0
    4028:	4c080044 	stcmi	0, cr0, [r8], {68}	; 0x44
    402c:	4d080044 	stcmi	0, cr0, [r8, #-272]	; 0xfffffef0
    4030:	01000019 	tsteq	r0, r9, lsl r0
    4034:	0000334a 	andeq	r3, r0, sl, asr #6
    4038:	00136735 	andseq	r6, r3, r5, lsr r7
    403c:	06090100 	streq	r0, [r9], -r0, lsl #2
    4040:	0000007f 	andeq	r0, r0, pc, ror r0
    4044:	0000196d 	andeq	r1, r0, sp, ror #18
    4048:	74657249 	strbtvc	r7, [r5], #-585	; 0x249
    404c:	060c0100 	streq	r0, [ip], -r0, lsl #2
    4050:	00000048 	andeq	r0, r0, r8, asr #32
    4054:	00001999 	muleq	r0, r9, r9
    4058:	00123548 	andseq	r3, r2, r8, asr #10
    405c:	00442a00 	subeq	r2, r4, r0, lsl #20
    4060:	00443208 	subeq	r3, r4, r8, lsl #4
    4064:	060b0108 	streq	r0, [fp], -r8, lsl #2
    4068:	000032f6 	strdeq	r3, [r0], -r6
    406c:	0012443e 	andseq	r4, r2, lr, lsr r4
    4070:	322b0a00 	eorcc	r0, fp, #0
    4074:	00080044 	andeq	r0, r8, r4, asr #32
    4078:	29000012 	stmdbcs	r0, {r1, r4}
    407c:	0a035001 	beq	d8088 <__Stack_Size+0xd7c88>
    4080:	00002710 	andeq	r2, r0, r0, lsl r7
    4084:	00123548 	andseq	r3, r2, r8, asr #10
    4088:	00443a00 	subeq	r3, r4, r0, lsl #20
    408c:	00444208 	subeq	r4, r4, r8, lsl #4
    4090:	060d0108 	streq	r0, [sp], -r8, lsl #2
    4094:	00003322 	andeq	r3, r0, r2, lsr #6
    4098:	0012443e 	andseq	r4, r2, lr, lsr r4
    409c:	422b1900 	eormi	r1, fp, #0
    40a0:	00080044 	andeq	r0, r8, r4, asr #32
    40a4:	29000012 	stmdbcs	r0, {r1, r4}
    40a8:	0a035001 	beq	d80b4 <__Stack_Size+0xd7cb4>
    40ac:	000061a8 	andeq	r6, r0, r8, lsr #3
    40b0:	00442a28 	subeq	r2, r4, r8, lsr #20
    40b4:	002ee808 	eoreq	lr, lr, r8, lsl #16
    40b8:	00333900 	eorseq	r3, r3, r0, lsl #18
    40bc:	50012900 	andpl	r2, r1, r0, lsl #18
    40c0:	6d7f0305 	ldclvs	3, cr0, [pc, #-20]!	; 40b4 <__Stack_Size+0x3cb4>
    40c4:	2b000800 	blcs	60cc <__Stack_Size+0x5ccc>
    40c8:	08004438 	stmdaeq	r0, {r3, r4, r5, sl, lr}
    40cc:	00002ee8 	andeq	r2, r0, r8, ror #29
    40d0:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    40d4:	00000074 	andeq	r0, r0, r4, ror r0
    40d8:	6e650159 	mcrvs	1, 3, r0, cr5, cr9, {2}
    40dc:	97010064 	strls	r0, [r1, -r4, rrx]
    40e0:	00444c01 	subeq	r4, r4, r1, lsl #24
    40e4:	00449408 	subeq	r9, r4, r8, lsl #8
    40e8:	0019b708 	andseq	fp, r9, r8, lsl #14
    40ec:	34190100 	ldrcc	r0, [r9], #-256	; 0x100
    40f0:	35440000 	strbcc	r0, [r4, #-0]
    40f4:	6c000012 	stcvs	0, cr0, [r0], {18}
    40f8:	72080044 	andvc	r0, r8, #68	; 0x44
    40fc:	01080044 	tsteq	r8, r4, asr #32
    4100:	003392b5 	ldrhteq	r9, [r3], -r5
    4104:	12444500 	subne	r4, r4, #0
    4108:	02ee0000 	rsceq	r0, lr, #0
    410c:	0044722b 	subeq	r7, r4, fp, lsr #4
    4110:	00120008 	andseq	r0, r2, r8
    4114:	50012900 	andpl	r2, r1, r0, lsl #18
    4118:	71b00c05 	lslsvc	r0, r5, #24
    411c:	0000000b 	andeq	r0, r0, fp
    4120:	00123544 	andseq	r3, r2, r4, asr #10
    4124:	00447c00 	subeq	r7, r4, r0, lsl #24
    4128:	00449408 	subeq	r9, r4, r8, lsl #8
    412c:	c0b70108 	adcsgt	r0, r7, r8, lsl #2
    4130:	45000033 	strmi	r0, [r0, #-51]	; 0x33
    4134:	00001244 	andeq	r1, r0, r4, asr #4
    4138:	822b02ee 	eorhi	r0, fp, #-536870898	; 0xe000000e
    413c:	00080044 	andeq	r0, r8, r4, asr #32
    4140:	29000012 	stmdbcs	r0, {r1, r4}
    4144:	0c055001 	stceq	0, cr5, [r5], {1}
    4148:	000b71b0 			; <UNDEFINED> instruction: 0x000b71b0
    414c:	5e280000 	cdppl	0, 2, cr0, cr8, cr0, {0}
    4150:	8b080044 	blhi	204268 <__Stack_Size+0x203e68>
    4154:	d7000032 	smladxle	r0, r2, r0, r0
    4158:	29000033 	stmdbcs	r0, {r0, r1, r4, r5}
    415c:	03055001 	movweq	r5, #20481	; 0x5001
    4160:	080069de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, fp, sp, lr}
    4164:	44622a00 	strbtmi	r2, [r2], #-2560	; 0xa00
    4168:	0fd60800 	svceq	0x00d60800
    416c:	6c280000 	stcvs	0, cr0, [r8], #-0
    4170:	0a080044 	beq	204288 <__Stack_Size+0x203e88>
    4174:	fe00004d 	cdp2	0, 0, cr0, cr0, cr13, {2}
    4178:	29000033 	stmdbcs	r0, {r0, r1, r4, r5}
    417c:	0a035101 	beq	d8588 <__Stack_Size+0xd8188>
    4180:	01292000 	teqeq	r9, r0
    4184:	000c0550 	andeq	r0, ip, r0, asr r5
    4188:	00400110 	subeq	r0, r0, r0, lsl r1
    418c:	00447c2b 	subeq	r7, r4, fp, lsr #24
    4190:	004d5f08 	subeq	r5, sp, r8, lsl #30
    4194:	51012900 	tstpl	r1, r0, lsl #18
    4198:	20000a03 	andcs	r0, r0, r3, lsl #20
    419c:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    41a0:	0110000c 	tsteq	r0, ip
    41a4:	37000040 	strcc	r0, [r0, -r0, asr #32]
    41a8:	00016701 	andeq	r6, r1, r1, lsl #14
    41ac:	06100100 	ldreq	r0, [r0], -r0, lsl #2
    41b0:	00004801 	andeq	r4, r0, r1, lsl #16
    41b4:	00449400 	subeq	r9, r4, r0, lsl #8
    41b8:	0044a808 	subeq	sl, r4, r8, lsl #16
    41bc:	0019d708 	andseq	sp, r9, r8, lsl #14
    41c0:	34940100 	ldrcc	r0, [r4], #256	; 0x100
    41c4:	73510000 	cmpvc	r1, #0
    41c8:	06100100 	ldreq	r0, [r0], -r0, lsl #2
    41cc:	0000007f 	andeq	r0, r0, pc, ror r0
    41d0:	000019f7 	strdeq	r1, [r0], -r7
    41d4:	74657249 	strbtvc	r7, [r5], #-585	; 0x249
    41d8:	06110100 	ldreq	r0, [r1], -r0, lsl #2
    41dc:	00000048 	andeq	r0, r0, r8, asr #32
    41e0:	00001a18 	andeq	r1, r0, r8, lsl sl
    41e4:	00123548 	andseq	r3, r2, r8, asr #10
    41e8:	00449c00 	subeq	r9, r4, r0, lsl #24
    41ec:	0044a408 	subeq	sl, r4, r8, lsl #8
    41f0:	06120108 	ldreq	r0, [r2], -r8, lsl #2
    41f4:	00003482 	andeq	r3, r0, r2, lsl #9
    41f8:	0012443e 	andseq	r4, r2, lr, lsr r4
    41fc:	a42b1900 	strtge	r1, [fp], #-2304	; 0x900
    4200:	00080044 	andeq	r0, r8, r4, asr #32
    4204:	29000012 	stmdbcs	r0, {r1, r4}
    4208:	0a035001 	beq	d8214 <__Stack_Size+0xd7e14>
    420c:	000061a8 	andeq	r6, r0, r8, lsr #3
    4210:	00449a2b 	subeq	r9, r4, fp, lsr #20
    4214:	002ee808 	eoreq	lr, lr, r8, lsl #16
    4218:	50012900 	andpl	r2, r1, r0, lsl #18
    421c:	5001f303 	andpl	pc, r1, r3, lsl #6
    4220:	01330000 	teqeq	r3, r0
    4224:	000017a2 	andeq	r1, r0, r2, lsr #15
    4228:	0105e401 	tsteq	r5, r1, lsl #8
    422c:	080044a8 	stmdaeq	r0, {r3, r5, r7, sl, lr}
    4230:	08004508 	stmdaeq	r0, {r3, r8, sl, lr}
    4234:	00001a36 	andeq	r1, r0, r6, lsr sl
    4238:	0034de01 	eorseq	sp, r4, r1, lsl #28
    423c:	13fd4700 	mvnsne	r4, #0
    4240:	e5010000 	str	r0, [r1, #-0]
    4244:	0031cd05 	eorseq	ip, r1, r5, lsl #26
    4248:	68910200 	ldmvs	r1, {r9}
    424c:	7469621e 	strbtvc	r6, [r9], #-542	; 0x21e
    4250:	05e80100 	strbeq	r0, [r8, #256]!	; 0x100
    4254:	0000059e 	muleq	r0, lr, r5
    4258:	0044c62a 	subeq	ip, r4, sl, lsr #12
    425c:	000b1508 	andeq	r1, fp, r8, lsl #10
    4260:	44ec2400 	strbtmi	r2, [ip], #1024	; 0x400
    4264:	19010800 	stmdbne	r1, {fp}
    4268:	00000034 	andeq	r0, r0, r4, lsr r0
    426c:	171f0133 			; <UNDEFINED> instruction: 0x171f0133
    4270:	f3010000 	vhadd.u8	d0, d1, d0
    4274:	45080104 	strmi	r0, [r8, #-260]	; 0x104
    4278:	45700800 	ldrbmi	r0, [r0, #-2048]!	; 0x800
    427c:	1a560800 	bne	1586284 <__Stack_Size+0x1585e84>
    4280:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    4284:	51000035 	tstpl	r0, r5, lsr r0
    4288:	01006469 	tsteq	r0, r9, ror #8
    428c:	059e04f3 	ldreq	r0, [lr, #1267]	; 0x4f3
    4290:	1a760000 	bne	1d84298 <__Stack_Size+0x1d83e98>
    4294:	78350000 	ldmdavc	r5!, {}	; <UNPREDICTABLE>
    4298:	01000025 	tsteq	r0, r5, lsr #32
    429c:	059e04f3 	ldreq	r0, [lr, #1267]	; 0x4f3
    42a0:	1a970000 	bne	fe5c42a8 <SCS_BASE+0x1e5b62a8>
    42a4:	bd350000 	ldclt	0, cr0, [r5, #-0]
    42a8:	01000016 	tsteq	r0, r6, lsl r0
    42ac:	05a904f3 	streq	r0, [r9, #1267]!	; 0x4f3
    42b0:	1ab80000 	bne	fee042b8 <SCS_BASE+0x1edf62b8>
    42b4:	35480000 	strbcc	r0, [r8, #-0]
    42b8:	3a00000c 	bcc	42f0 <__Stack_Size+0x3ef0>
    42bc:	3e080045 	cdpcc	0, 0, cr0, cr8, cr5, {2}
    42c0:	01080045 	tsteq	r8, r5, asr #32
    42c4:	355104ff 	ldrbcc	r0, [r1, #-1279]	; 0x4ff
    42c8:	48230000 	stmdami	r3!, {}	; <UNPREDICTABLE>
    42cc:	5000000c 	andpl	r0, r0, ip
    42d0:	0800453a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, lr}
    42d4:	0800453e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, lr}
    42d8:	000c5436 	andeq	r5, ip, r6, lsr r4
    42dc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    42e0:	00000c61 	andeq	r0, r0, r1, ror #24
    42e4:	0800453e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, sl, lr}
    42e8:	000000e8 	andeq	r0, r0, r8, ror #1
    42ec:	76050001 	strvc	r0, [r5], -r1
    42f0:	23000035 	movwcs	r0, #53	; 0x35
    42f4:	00000c74 	andeq	r0, r0, r4, ror ip
    42f8:	00010039 	andeq	r0, r1, r9, lsr r0
    42fc:	0c803600 	stceq	6, cr3, [r0], {0}
    4300:	00000000 	andeq	r0, r0, r0
    4304:	00451628 	subeq	r1, r5, r8, lsr #12
    4308:	0022d008 	eoreq	sp, r2, r8
    430c:	00358a00 	eorseq	r8, r5, r0, lsl #20
    4310:	50012900 	andpl	r2, r1, r0, lsl #18
    4314:	00007502 	andeq	r7, r0, r2, lsl #10
    4318:	00452628 	subeq	r2, r5, r8, lsr #12
    431c:	00341908 	eorseq	r1, r4, r8, lsl #18
    4320:	0035a100 	eorseq	sl, r5, r0, lsl #2
    4324:	50012900 	andpl	r2, r1, r0, lsl #18
    4328:	6a2a0305 	bvs	a84f44 <__Stack_Size+0xa84b44>
    432c:	28000800 	stmdacs	r0, {fp}
    4330:	08004536 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, lr}
    4334:	00003419 	andeq	r3, r0, r9, lsl r4
    4338:	000035b8 			; <UNDEFINED> instruction: 0x000035b8
    433c:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    4340:	006a5403 	rsbeq	r5, sl, r3, lsl #8
    4344:	582a0008 	stmdapl	sl!, {r3}
    4348:	5b080045 	blpl	204464 <__Stack_Size+0x204064>
    434c:	2d00000b 	stccs	0, cr0, [r0, #-44]	; 0xffffffd4
    4350:	08004564 	stmdaeq	r0, {r2, r5, r6, r8, sl, lr}
    4354:	000b6601 	andeq	r6, fp, r1, lsl #12
    4358:	51012900 	tstpl	r1, r0, lsl #18
    435c:	29007702 	stmdbcs	r0, {r1, r8, r9, sl, ip, sp, lr}
    4360:	75025001 	strvc	r5, [r2, #-1]
    4364:	34000000 	strcc	r0, [r0], #-0
    4368:	0002ab01 	andeq	sl, r2, r1, lsl #22
    436c:	02210100 	eoreq	r0, r1, #0
    4370:	00457001 	subeq	r7, r5, r1
    4374:	00458208 	subeq	r8, r5, r8, lsl #4
    4378:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    437c:	00362a01 	eorseq	r2, r6, r1, lsl #20
    4380:	64695100 	strbtvs	r5, [r9], #-256	; 0x100
    4384:	02210100 	eoreq	r0, r1, #0
    4388:	0000059e 	muleq	r0, lr, r5
    438c:	00001ad9 	ldrdeq	r1, [r0], -r9
    4390:	736f7051 	cmnvc	pc, #81	; 0x51
    4394:	02210100 	eoreq	r0, r1, #0
    4398:	00000048 	andeq	r0, r0, r8, asr #32
    439c:	00001b05 	andeq	r1, r0, r5, lsl #22
    43a0:	0045802d 	subeq	r8, r5, sp, lsr #32
    43a4:	34de0108 	ldrbcc	r0, [lr], #264	; 0x108
    43a8:	01290000 	teqeq	r9, r0
    43ac:	01f30352 	mvnseq	r0, r2, asr r3
    43b0:	51012951 	tstpl	r1, r1, asr r9
    43b4:	00004e01 	andeq	r4, r0, r1, lsl #28
    43b8:	08b70133 	ldmeq	r7!, {r0, r1, r4, r5, r8}
    43bc:	bd010000 	stclt	0, cr0, [r1, #-0]
    43c0:	45820101 	strmi	r0, [r2, #257]	; 0x101
    43c4:	46540800 	ldrbmi	r0, [r4], -r0, lsl #16
    43c8:	1b3c0800 	blne	f063d0 <__Stack_Size+0xf05fd0>
    43cc:	6b010000 	blvs	443d4 <__Stack_Size+0x43fd4>
    43d0:	51000038 	tstpl	r0, r8, lsr r0
    43d4:	01006469 	tsteq	r0, r9, ror #8
    43d8:	059e01bd 	ldreq	r0, [lr, #445]	; 0x1bd
    43dc:	1b5c0000 	blne	17043e4 <__Stack_Size+0x1703fe4>
    43e0:	8e280000 	cdphi	0, 2, cr0, cr8, cr0, {0}
    43e4:	67080045 	strvs	r0, [r8, -r5, asr #32]
    43e8:	72000021 	andvc	r0, r0, #33	; 0x21
    43ec:	29000036 	stmdbcs	r0, {r1, r2, r4, r5}
    43f0:	31015201 	tstcc	r1, r1, lsl #4
    43f4:	01510129 	cmpeq	r1, r9, lsr #2
    43f8:	50012949 	andpl	r2, r1, r9, asr #18
    43fc:	00007402 	andeq	r7, r0, r2, lsl #8
    4400:	00459428 	subeq	r9, r5, r8, lsr #8
    4404:	00341908 	eorseq	r1, r4, r8, lsl #18
    4408:	00368900 	eorseq	r8, r6, r0, lsl #18
    440c:	50012900 	andpl	r2, r1, r0, lsl #18
    4410:	6a610305 	bvs	184502c <__Stack_Size+0x1844c2c>
    4414:	28000800 	stmdacs	r0, {fp}
    4418:	0800459c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, lr}
    441c:	0000244a 	andeq	r2, r0, sl, asr #8
    4420:	000036a2 	andeq	r3, r0, r2, lsr #13
    4424:	01510129 	cmpeq	r1, r9, lsr #2
    4428:	50012933 	andpl	r2, r1, r3, lsr r9
    442c:	00007402 	andeq	r7, r0, r2, lsl #8
    4430:	0045a02a 	subeq	sl, r5, sl, lsr #32
    4434:	002c4608 	eoreq	r4, ip, r8, lsl #12
    4438:	45a62800 	strmi	r2, [r6, #2048]!	; 0x800
    443c:	34190800 	ldrcc	r0, [r9], #-2048	; 0x800
    4440:	36c20000 	strbcc	r0, [r2], r0
    4444:	01290000 	teqeq	r9, r0
    4448:	75030550 	strvc	r0, [r3, #-1360]	; 0x550
    444c:	0008006a 	andeq	r0, r8, sl, rrx
    4450:	0045ae28 	subeq	sl, r5, r8, lsr #28
    4454:	00244a08 	eoreq	r4, r4, r8, lsl #20
    4458:	0036db00 	eorseq	sp, r6, r0, lsl #22
    445c:	51012900 	tstpl	r1, r0, lsl #18
    4460:	01293001 	teqeq	r9, r1
    4464:	00740250 	rsbseq	r0, r4, r0, asr r2
    4468:	45b82800 	ldrmi	r2, [r8, #2048]!	; 0x800
    446c:	244a0800 	strbcs	r0, [sl], #-2048	; 0x800
    4470:	36f40000 	ldrbtcc	r0, [r4], r0
    4474:	01290000 	teqeq	r9, r0
    4478:	29310151 	ldmdbcs	r1!, {r0, r4, r6, r8}
    447c:	74025001 	strvc	r5, [r2], #-1
    4480:	c0280000 	eorgt	r0, r8, r0
    4484:	cc080045 	stcgt	0, cr0, [r8], {69}	; 0x45
    4488:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    448c:	29000037 	stmdbcs	r0, {r0, r1, r2, r4, r5}
    4490:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    4494:	50012900 	andpl	r2, r1, r0, lsl #18
    4498:	00007402 	andeq	r7, r0, r2, lsl #8
    449c:	0045c62a 	subeq	ip, r5, sl, lsr #12
    44a0:	002c4608 	eoreq	r4, ip, r8, lsl #12
    44a4:	45cc2800 	strbmi	r2, [ip, #2048]	; 0x800
    44a8:	34190800 	ldrcc	r0, [r9], #-2048	; 0x800
    44ac:	372e0000 	strcc	r0, [lr, -r0]!
    44b0:	01290000 	teqeq	r9, r0
    44b4:	89030550 	stmdbhi	r3, {r4, r6, r8, sl}
    44b8:	0008006a 	andeq	r0, r8, sl, rrx
    44bc:	0045d428 	subeq	sp, r5, r8, lsr #8
    44c0:	00244a08 	eoreq	r4, r4, r8, lsl #20
    44c4:	00374700 	eorseq	r4, r7, r0, lsl #14
    44c8:	51012900 	tstpl	r1, r0, lsl #18
    44cc:	01293201 	teqeq	r9, r1, lsl #4
    44d0:	00740250 	rsbseq	r0, r4, r0, asr r2
    44d4:	45d82a00 	ldrbmi	r2, [r8, #2560]	; 0xa00
    44d8:	2c460800 	mcrrcs	8, 0, r0, r6, cr0
    44dc:	de280000 	cdple	0, 2, cr0, cr8, cr0, {0}
    44e0:	19080045 	stmdbne	r8, {r0, r2, r6}
    44e4:	67000034 	smladxvs	r0, r4, r0, r0
    44e8:	29000037 	stmdbcs	r0, {r0, r1, r2, r4, r5}
    44ec:	03055001 	movweq	r5, #20481	; 0x5001
    44f0:	08006a9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, fp, sp, lr}
    44f4:	45e62800 	strbmi	r2, [r6, #2048]!	; 0x800
    44f8:	244a0800 	strbcs	r0, [sl], #-2048	; 0x800
    44fc:	37800000 	strcc	r0, [r0, r0]
    4500:	01290000 	teqeq	r9, r0
    4504:	29340151 	ldmdbcs	r4!, {r0, r4, r6, r8}
    4508:	74025001 	strvc	r5, [r2], #-1
    450c:	ea2a0000 	b	a84514 <__Stack_Size+0xa84114>
    4510:	46080045 	strmi	r0, [r8], -r5, asr #32
    4514:	2800002c 	stmdacs	r0, {r2, r3, r5}
    4518:	080045f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, lr}
    451c:	00003419 	andeq	r3, r0, r9, lsl r4
    4520:	000037a0 	andeq	r3, r0, r0, lsr #15
    4524:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    4528:	006ab103 	rsbeq	fp, sl, r3, lsl #2
    452c:	f8280008 			; <UNDEFINED> instruction: 0xf8280008
    4530:	4a080045 	bmi	20464c <__Stack_Size+0x20424c>
    4534:	b9000024 	stmdblt	r0, {r2, r5}
    4538:	29000037 	stmdbcs	r0, {r0, r1, r2, r4, r5}
    453c:	35015101 	strcc	r5, [r1, #-257]	; 0x101
    4540:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    4544:	2a000074 	bcs	471c <__Stack_Size+0x431c>
    4548:	080045fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, lr}
    454c:	00002c46 	andeq	r2, r0, r6, asr #24
    4550:	00460228 	subeq	r0, r6, r8, lsr #4
    4554:	00341908 	eorseq	r1, r4, r8, lsl #18
    4558:	0037d900 	eorseq	sp, r7, r0, lsl #18
    455c:	50012900 	andpl	r2, r1, r0, lsl #18
    4560:	6ac50305 	bvs	ff14517c <SCS_BASE+0x1f13717c>
    4564:	28000800 	stmdacs	r0, {fp}
    4568:	0800460a 	stmdaeq	r0, {r1, r3, r9, sl, lr}
    456c:	0000244a 	andeq	r2, r0, sl, asr #8
    4570:	000037f2 	strdeq	r3, [r0], -r2
    4574:	01510129 	cmpeq	r1, r9, lsr #2
    4578:	50012940 	andpl	r2, r1, r0, asr #18
    457c:	00007402 	andeq	r7, r0, r2, lsl #8
    4580:	00460e2a 	subeq	r0, r6, sl, lsr #28
    4584:	002c4608 	eoreq	r4, ip, r8, lsl #12
    4588:	46142800 	ldrmi	r2, [r4], -r0, lsl #16
    458c:	34190800 	ldrcc	r0, [r9], #-2048	; 0x800
    4590:	38120000 	ldmdacc	r2, {}	; <UNPREDICTABLE>
    4594:	01290000 	teqeq	r9, r0
    4598:	d9030550 	stmdble	r3, {r4, r6, r8, sl}
    459c:	0008006a 	andeq	r0, r8, sl, rrx
    45a0:	00461c28 	subeq	r1, r6, r8, lsr #24
    45a4:	00244a08 	eoreq	r4, r4, r8, lsl #20
    45a8:	00382c00 	eorseq	r2, r8, r0, lsl #24
    45ac:	51012900 	tstpl	r1, r0, lsl #18
    45b0:	29240802 	stmdbcs	r4!, {r1, fp}
    45b4:	74025001 	strvc	r5, [r2], #-1
    45b8:	26280000 	strtcs	r0, [r8], -r0
    45bc:	4a080046 	bmi	2046dc <__Stack_Size+0x2042dc>
    45c0:	46000024 	strmi	r0, [r0], -r4, lsr #32
    45c4:	29000038 	stmdbcs	r0, {r3, r4, r5}
    45c8:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    45cc:	50012925 	andpl	r2, r1, r5, lsr #18
    45d0:	00007402 	andeq	r7, r0, r2, lsl #8
    45d4:	00462e28 	subeq	r2, r6, r8, lsr #28
    45d8:	000bcc08 	andeq	ip, fp, r8, lsl #24
    45dc:	00386000 	eorseq	r6, r8, r0
    45e0:	51012900 	tstpl	r1, r0, lsl #18
    45e4:	29007502 	stmdbcs	r0, {r1, r8, sl, ip, sp, lr}
    45e8:	74025001 	strvc	r5, [r2], #-1
    45ec:	38240000 	stmdacc	r4!, {}	; <UNPREDICTABLE>
    45f0:	01080046 	tsteq	r8, r6, asr #32
    45f4:	00002c46 	andeq	r2, r0, r6, asr #24
    45f8:	9c013300 	stcls	3, cr3, [r1], {-0}
    45fc:	01000010 	tsteq	r0, r0, lsl r0
    4600:	540101b6 	strpl	r0, [r1], #-438	; 0x1b6
    4604:	70080046 	andvc	r0, r8, r6, asr #32
    4608:	7d080046 	stcvc	0, cr0, [r8, #-280]	; 0xfffffee8
    460c:	0100001b 	tsteq	r0, fp, lsl r0
    4610:	000038d2 	ldrdeq	r3, [r0], -r2
    4614:	00646949 	rsbeq	r6, r4, r9, asr #18
    4618:	9e01b701 	cdpls	7, 0, cr11, cr1, cr1, {0}
    461c:	9d000005 	stcls	0, cr0, [r0, #-20]	; 0xffffffec
    4620:	4800001b 	stmdami	r0, {r0, r1, r3, r4}
    4624:	00001235 	andeq	r1, r0, r5, lsr r2
    4628:	08004662 	stmdaeq	r0, {r1, r5, r6, r9, sl, lr}
    462c:	0800466a 	stmdaeq	r0, {r1, r3, r5, r6, r9, sl, lr}
    4630:	c101ba01 	tstgt	r1, r1, lsl #20
    4634:	3e000038 	mcrcc	0, 0, r0, cr0, cr8, {1}
    4638:	00001244 	andeq	r1, r0, r4, asr #4
    463c:	466a2b01 	strbtmi	r2, [sl], -r1, lsl #22
    4640:	12000800 	andne	r0, r0, #0
    4644:	01290000 	teqeq	r9, r0
    4648:	e80a0350 	stmda	sl, {r4, r6, r8, r9}
    464c:	2b000003 	blcs	4660 <__Stack_Size+0x4260>
    4650:	08004660 	stmdaeq	r0, {r5, r6, r9, sl, lr}
    4654:	0000362a 	andeq	r3, r0, sl, lsr #12
    4658:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    465c:	00007f74 	andeq	r7, r0, r4, ror pc
    4660:	01d70133 	bicseq	r0, r7, r3, lsr r1
    4664:	7f010000 	svcvc	0x00010000
    4668:	46700101 	ldrbtmi	r0, [r0], -r1, lsl #2
    466c:	47680800 	strbmi	r0, [r8, -r0, lsl #16]!
    4670:	1bbc0800 	blne	fef06678 <SCS_BASE+0x1eef8678>
    4674:	5c010000 	stcpl	0, cr0, [r1], {-0}
    4678:	3d000039 	stccc	0, cr0, [r0, #-228]	; 0xffffff1c
    467c:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    4680:	9e018001 	cdpls	0, 0, cr8, cr1, cr1, {0}
    4684:	dc000005 	stcle	0, cr0, [r0], {5}
    4688:	3d00001b 	stccc	0, cr0, [r0, #-108]	; 0xffffff94
    468c:	0000104d 	andeq	r1, r0, sp, asr #32
    4690:	9e018401 	cdpls	4, 0, cr8, cr1, cr1, {0}
    4694:	fa000005 	blx	46b0 <__Stack_Size+0x42b0>
    4698:	5400001b 	strpl	r0, [r0], #-27
    469c:	00000bf7 	strdeq	r0, [r0], -r7
    46a0:	08004672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, lr}
    46a4:	0800467a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, lr}
    46a8:	2a018001 	bcs	646b4 <__Stack_Size+0x642b4>
    46ac:	080046a2 	stmdaeq	r0, {r1, r5, r7, r9, sl, lr}
    46b0:	00003419 	andeq	r3, r0, r9, lsl r4
    46b4:	0046d228 	subeq	sp, r6, r8, lsr #4
    46b8:	000b1508 	andeq	r1, fp, r8, lsl #10
    46bc:	00393a00 	eorseq	r3, r9, r0, lsl #20
    46c0:	50012900 	andpl	r2, r1, r0, lsl #18
    46c4:	00007402 	andeq	r7, r0, r2, lsl #8
    46c8:	00471428 	subeq	r1, r7, r8, lsr #8
    46cc:	00341908 	eorseq	r1, r4, r8, lsl #18
    46d0:	00395100 	eorseq	r5, r9, r0, lsl #2
    46d4:	50012900 	andpl	r2, r1, r0, lsl #18
    46d8:	6a520305 	bvs	14852f4 <__Stack_Size+0x1484ef4>
    46dc:	24000800 	strcs	r0, [r0], #-2048	; 0x800
    46e0:	08004726 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, lr}
    46e4:	00341901 	eorseq	r1, r4, r1, lsl #18
    46e8:	01330000 	teqeq	r3, r0
    46ec:	0000161b 	andeq	r1, r0, fp, lsl r6
    46f0:	01014901 	tsteq	r1, r1, lsl #18
    46f4:	08004768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, lr}
    46f8:	08004824 	stmdaeq	r0, {r2, r5, fp, lr}
    46fc:	00001c19 	andeq	r1, r0, r9, lsl ip
    4700:	003ad801 	eorseq	sp, sl, r1, lsl #16
    4704:	64695100 	strbtvs	r5, [r9], #-256	; 0x100
    4708:	01490100 	mrseq	r0, (UNDEF: 89)
    470c:	0000059e 	muleq	r0, lr, r5
    4710:	00001c39 	andeq	r1, r0, r9, lsr ip
    4714:	00179d3d 	andseq	r9, r7, sp, lsr sp
    4718:	01550100 	cmpeq	r5, r0, lsl #2
    471c:	00000048 	andeq	r0, r0, r8, asr #32
    4720:	00001c57 	andeq	r1, r0, r7, asr ip
    4724:	000ca838 	andeq	sl, ip, r8, lsr r8
    4728:	00477e00 	subeq	r7, r7, r0, lsl #28
    472c:	00011808 	andeq	r1, r1, r8, lsl #16
    4730:	014e0100 	mrseq	r0, (UNDEF: 94)
    4734:	000039b1 			; <UNDEFINED> instruction: 0x000039b1
    4738:	000cb73e 	andeq	fp, ip, lr, lsr r7
    473c:	38000100 	stmdacc	r0, {r8}
    4740:	00000cc4 	andeq	r0, r0, r4, asr #25
    4744:	08004780 	stmdaeq	r0, {r7, r8, r9, sl, lr}
    4748:	00000130 	andeq	r0, r0, r0, lsr r1
    474c:	cc014f01 	stcgt	15, cr4, [r1], {1}
    4750:	3e000039 	mcrcc	0, 0, r0, cr0, cr9, {1}
    4754:	00000cd3 	ldrdeq	r0, [r0], -r3
    4758:	8d480002 	stclhi	0, cr0, [r8, #-8]
    475c:	8c00000c 	stchi	0, cr0, [r0], {12}
    4760:	90080047 	andls	r0, r8, r7, asr #32
    4764:	01080047 	tsteq	r8, r7, asr #32
    4768:	39e8014d 	stmibcc	r8!, {r0, r2, r3, r6, r8}^
    476c:	9c320000 	ldcls	0, cr0, [r2], #-0
    4770:	0100000c 	tsteq	r0, ip
    4774:	f7540056 			; <UNDEFINED> instruction: 0xf7540056
    4778:	a800000b 	stmdage	r0, {r0, r1, r3}
    477c:	b0080047 	andlt	r0, r8, r7, asr #32
    4780:	01080047 	tsteq	r8, r7, asr #32
    4784:	f7540156 			; <UNDEFINED> instruction: 0xf7540156
    4788:	b800000b 	stmdalt	r0, {r0, r1, r3}
    478c:	be080047 	cdplt	0, 0, cr0, cr8, cr7, {2}
    4790:	01080047 	tsteq	r8, r7, asr #32
    4794:	f7540157 			; <UNDEFINED> instruction: 0xf7540157
    4798:	c200000b 	andgt	r0, r0, #11
    479c:	c8080047 	stmdagt	r8, {r0, r1, r2, r6}
    47a0:	01080047 	tsteq	r8, r7, asr #32
    47a4:	35380158 	ldrcc	r0, [r8, #-344]!	; 0x158
    47a8:	cc000012 	stcgt	0, cr0, [r0], {18}
    47ac:	48080047 	stmdami	r8, {r0, r1, r2, r6}
    47b0:	01000001 	tsteq	r0, r1
    47b4:	3a470159 	bcc	11c4d20 <__Stack_Size+0x11c4920>
    47b8:	44220000 	strtmi	r0, [r2], #-0
    47bc:	78000012 	stmdavc	r0, {r1, r4}
    47c0:	2b00001c 	blcs	4838 <__Stack_Size+0x4438>
    47c4:	080047d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, lr}
    47c8:	00001200 	andeq	r1, r0, r0, lsl #4
    47cc:	03500129 	cmpeq	r0, #1073741834	; 0x4000000a
    47d0:	0003e80a 	andeq	lr, r3, sl, lsl #16
    47d4:	0bf75400 	bleq	ffdd97dc <SCS_BASE+0x1fdcb7dc>
    47d8:	47da0000 	ldrbmi	r0, [sl, r0]
    47dc:	47e00800 	strbmi	r0, [r0, r0, lsl #16]!
    47e0:	5c010800 	stcpl	8, cr0, [r1], {-0}
    47e4:	0bf75401 	bleq	ffdd97f0 <SCS_BASE+0x1fdcb7f0>
    47e8:	47e40000 	strbmi	r0, [r4, r0]!
    47ec:	47ec0800 	strbmi	r0, [ip, r0, lsl #16]!
    47f0:	5c010800 	stcpl	8, cr0, [r1], {-0}
    47f4:	477e2a01 	ldrbmi	r2, [lr, -r1, lsl #20]!
    47f8:	0b350800 	bleq	d46800 <__Stack_Size+0xd46400>
    47fc:	94280000 	strtls	r0, [r8], #-0
    4800:	8b080047 	blhi	204924 <__Stack_Size+0x204524>
    4804:	87000032 	smladxhi	r0, r2, r0, r0
    4808:	2900003a 	stmdbcs	r0, {r1, r3, r4, r5}
    480c:	03055001 	movweq	r5, #20481	; 0x5001
    4810:	08006cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, sp, lr}
    4814:	479a2800 	ldrmi	r2, [sl, r0, lsl #16]
    4818:	32140800 	andscc	r0, r4, #0
    481c:	3a9b0000 	bcc	fe6c4824 <SCS_BASE+0x1e6b6824>
    4820:	01290000 	teqeq	r9, r0
    4824:	00750250 	rsbseq	r0, r5, r0, asr r2
    4828:	47a02800 	strmi	r2, [r0, r0, lsl #16]!
    482c:	34190800 	ldrcc	r0, [r9], #-2048	; 0x800
    4830:	3ab20000 	bcc	fec84838 <SCS_BASE+0x1ec76838>
    4834:	01290000 	teqeq	r9, r0
    4838:	d9030550 	stmdble	r3, {r4, r6, r8, sl}
    483c:	0008006c 	andeq	r0, r8, ip, rrx
    4840:	0047a42a 	subeq	sl, r7, sl, lsr #8
    4844:	000b5b08 	andeq	r5, fp, r8, lsl #22
    4848:	47fe2a00 	ldrbmi	r2, [lr, r0, lsl #20]!
    484c:	34190800 	ldrcc	r0, [r9], #-2048	; 0x800
    4850:	042a0000 	strteq	r0, [sl], #-0
    4854:	d2080048 	andle	r0, r8, #72	; 0x48
    4858:	24000038 	strcs	r0, [r0], #-56	; 0x38
    485c:	0800480c 	stmdaeq	r0, {r2, r3, fp, lr}
    4860:	000b3501 	andeq	r3, fp, r1, lsl #10
    4864:	01330000 	teqeq	r3, r0
    4868:	00001613 	andeq	r1, r0, r3, lsl r6
    486c:	01013001 	tsteq	r1, r1
    4870:	08004824 	stmdaeq	r0, {r2, r5, fp, lr}
    4874:	08004898 	stmdaeq	r0, {r3, r4, r7, fp, lr}
    4878:	00001c8c 	andeq	r1, r0, ip, lsl #25
    487c:	003c0001 	eorseq	r0, ip, r1
    4880:	64695100 	strbtvs	r5, [r9], #-256	; 0x100
    4884:	01300100 	teqeq	r0, r0, lsl #2
    4888:	0000059e 	muleq	r0, lr, r5
    488c:	00001cac 	andeq	r1, r0, ip, lsr #25
    4890:	000ca838 	andeq	sl, ip, r8, lsr r8
    4894:	00484800 	subeq	r4, r8, r0, lsl #16
    4898:	00016008 	andeq	r6, r1, r8
    489c:	013a0100 	teqeq	sl, r0, lsl #2
    48a0:	00003b1d 	andeq	r3, r0, sp, lsl fp
    48a4:	000cb73e 	andeq	fp, ip, lr, lsr r7
    48a8:	38000100 	stmdacc	r0, {r8}
    48ac:	00000cc4 	andeq	r0, r0, r4, asr #25
    48b0:	0800484a 	stmdaeq	r0, {r1, r3, r6, fp, lr}
    48b4:	00000178 	andeq	r0, r0, r8, ror r1
    48b8:	38013b01 	stmdacc	r1, {r0, r8, r9, fp, ip, sp}
    48bc:	3e00003b 	mcrcc	0, 0, r0, cr0, cr11, {1}
    48c0:	00000cd3 	ldrdeq	r0, [r0], -r3
    48c4:	8d480002 	stclhi	0, cr0, [r8, #-8]
    48c8:	5600000c 	strpl	r0, [r0], -ip
    48cc:	5a080048 	bpl	2049f4 <__Stack_Size+0x2045f4>
    48d0:	01080048 	tsteq	r8, r8, asr #32
    48d4:	3b540139 	blcc	1504dc0 <__Stack_Size+0x15049c0>
    48d8:	9c320000 	ldcls	0, cr0, [r2], #-0
    48dc:	0100000c 	tsteq	r0, ip
    48e0:	2e280055 	mcrcs	0, 1, r0, cr8, cr5, {2}
    48e4:	19080048 	stmdbne	r8, {r3, r6}
    48e8:	6b000034 	blvs	49c0 <__Stack_Size+0x45c0>
    48ec:	2900003b 	stmdbcs	r0, {r0, r1, r3, r4, r5}
    48f0:	03055001 	movweq	r5, #20481	; 0x5001
    48f4:	08006cfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, fp, sp, lr}
    48f8:	483e2800 	ldmdami	lr!, {fp, sp}
    48fc:	34190800 	ldrcc	r0, [r9], #-2048	; 0x800
    4900:	3b820000 	blcc	fe084908 <SCS_BASE+0x1e076908>
    4904:	01290000 	teqeq	r9, r0
    4908:	16030550 			; <UNDEFINED> instruction: 0x16030550
    490c:	0008006d 	andeq	r0, r8, sp, rrx
    4910:	0048422a 	subeq	r4, r8, sl, lsr #4
    4914:	000b3508 	andeq	r3, fp, r8, lsl #10
    4918:	48482800 	stmdami	r8, {fp, sp}^
    491c:	34190800 	ldrcc	r0, [r9], #-2048	; 0x800
    4920:	3ba20000 	blcc	fe884928 <SCS_BASE+0x1e876928>
    4924:	01290000 	teqeq	r9, r0
    4928:	36030550 			; <UNDEFINED> instruction: 0x36030550
    492c:	0008006d 	andeq	r0, r8, sp, rrx
    4930:	00485e28 	subeq	r5, r8, r8, lsr #28
    4934:	00341908 	eorseq	r1, r4, r8, lsl #18
    4938:	003bb900 	eorseq	fp, fp, r0, lsl #18
    493c:	50012900 	andpl	r2, r1, r0, lsl #18
    4940:	6d650305 	stclvs	3, cr0, [r5, #-20]!	; 0xffffffec
    4944:	2a000800 	bcs	694c <__Stack_Size+0x654c>
    4948:	08004862 	stmdaeq	r0, {r1, r5, r6, fp, lr}
    494c:	00000b5b 	andeq	r0, r0, fp, asr fp
    4950:	0048662a 	subeq	r6, r8, sl, lsr #12
    4954:	0038d208 	eorseq	sp, r8, r8, lsl #4
    4958:	486c2800 	stmdami	ip!, {fp, sp}^
    495c:	34190800 	ldrcc	r0, [r9], #-2048	; 0x800
    4960:	3be20000 	blcc	ff884968 <SCS_BASE+0x1f876968>
    4964:	01290000 	teqeq	r9, r0
    4968:	22030550 	andcs	r0, r3, #335544320	; 0x14000000
    496c:	0008006d 	andeq	r0, r8, sp, rrx
    4970:	0048702a 	subeq	r7, r8, sl, lsr #32
    4974:	000b3508 	andeq	r3, fp, r8, lsl #10
    4978:	487a2d00 	ldmdami	sl!, {r8, sl, fp, sp}^
    497c:	19010800 	stmdbne	r1, {fp}
    4980:	29000034 	stmdbcs	r0, {r2, r4, r5}
    4984:	03055001 	movweq	r5, #20481	; 0x5001
    4988:	08006d76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}
    498c:	015a0000 	cmpeq	sl, r0
    4990:	000012bc 			; <UNDEFINED> instruction: 0x000012bc
    4994:	98012901 	stmdals	r1, {r0, r8, fp, sp}
    4998:	b8080048 	stmdalt	r8, {r3, r6}
    499c:	cd080048 	stcgt	0, cr0, [r8, #-288]	; 0xfffffee0
    49a0:	0100001c 	tsteq	r0, ip, lsl r0
    49a4:	00003c50 	andeq	r3, r0, r0, asr ip
    49a8:	01006949 	tsteq	r0, r9, asr #18
    49ac:	059e012a 	ldreq	r0, [lr, #298]	; 0x12a
    49b0:	1ced0000 	stclne	0, cr0, [sp]
    49b4:	a4280000 	strtge	r0, [r8], #-0
    49b8:	d8080048 	stmdale	r8, {r3, r6}
    49bc:	3c00003a 	stccc	0, cr0, [r0], {58}	; 0x3a
    49c0:	2900003c 	stmdbcs	r0, {r2, r3, r4, r5}
    49c4:	74025001 	strvc	r5, [r2], #-1
    49c8:	ac2b007f 	stcge	0, cr0, [fp], #-508	; 0xfffffe04
    49cc:	19080048 	stmdbne	r8, {r3, r6}
    49d0:	29000034 	stmdbcs	r0, {r2, r4, r5}
    49d4:	03055001 	movweq	r5, #20481	; 0x5001
    49d8:	08006d7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, sl, fp, sp, lr}
    49dc:	01330000 	teqeq	r3, r0
    49e0:	00000069 	andeq	r0, r0, r9, rrx
    49e4:	01011e01 	tsteq	r1, r1, lsl #28
    49e8:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
    49ec:	080048ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, lr}
    49f0:	00001d0c 	andeq	r1, r0, ip, lsl #26
    49f4:	003ccc01 	eorseq	ip, ip, r1, lsl #24
    49f8:	12353800 	eorsne	r3, r5, #0
    49fc:	48d20000 	ldmmi	r2, {}^	; <UNPREDICTABLE>
    4a00:	01900800 	orrseq	r0, r0, r0, lsl #16
    4a04:	27010000 	strcs	r0, [r1, -r0]
    4a08:	003c9801 	eorseq	r9, ip, r1, lsl #16
    4a0c:	12443e00 	subne	r3, r4, #0
    4a10:	2d320000 	ldccs	0, cr0, [r2, #-0]
    4a14:	080048de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp, lr}
    4a18:	00120001 	andseq	r0, r2, r1
    4a1c:	50012900 	andpl	r2, r1, r0, lsl #18
    4a20:	c3500a03 	cmpgt	r0, #12288	; 0x3000
    4a24:	c0280000 	eorgt	r0, r8, r0
    4a28:	19080048 	stmdbne	r8, {r3, r6}
    4a2c:	af000034 	svcge	0x00000034
    4a30:	2900003c 	stmdbcs	r0, {r2, r3, r4, r5}
    4a34:	03055001 	movweq	r5, #20481	; 0x5001
    4a38:	08006d81 	stmdaeq	r0, {r0, r7, r8, sl, fp, sp, lr}
    4a3c:	48c62800 	stmiami	r6, {fp, sp}^
    4a40:	1d630800 	stclne	8, cr0, [r3, #-0]
    4a44:	3cc20000 	stclcc	0, cr0, [r2], {0}
    4a48:	01290000 	teqeq	r9, r0
    4a4c:	00310150 	eorseq	r0, r1, r0, asr r1
    4a50:	0048d22a 	subeq	sp, r8, sl, lsr #4
    4a54:	00341908 	eorseq	r1, r4, r8, lsl #18
    4a58:	014e0000 	mrseq	r0, (UNDEF: 78)
    4a5c:	00000c2b 	andeq	r0, r0, fp, lsr #24
    4a60:	01061501 	tsteq	r6, r1, lsl #10
    4a64:	00000048 	andeq	r0, r0, r8, asr #32
    4a68:	080048ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, lr}
    4a6c:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
    4a70:	01007d02 	tsteq	r0, r2, lsl #26
    4a74:	00003cf5 	strdeq	r3, [r0], -r5
    4a78:	0048f024 	subeq	pc, r8, r4, lsr #32
    4a7c:	2f2f0108 	svccs	0x002f0108
    4a80:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    4a84:	001aae01 	andseq	sl, sl, r1, lsl #28
    4a88:	06180100 	ldreq	r0, [r8], -r0, lsl #2
    4a8c:	00007201 	andeq	r7, r0, r1, lsl #4
    4a90:	0048f000 	subeq	pc, r8, r0
    4a94:	0048f408 	subeq	pc, r8, r8, lsl #8
    4a98:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    4a9c:	003d3401 	eorseq	r3, sp, r1, lsl #8
    4aa0:	00735100 	rsbseq	r5, r3, r0, lsl #2
    4aa4:	72061801 	andvc	r1, r6, #65536	; 0x10000
    4aa8:	2c000000 	stccs	0, cr0, [r0], {-0}
    4aac:	2d00001d 	stccs	0, cr0, [r0, #-116]	; 0xffffff8c
    4ab0:	080048f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, lr}
    4ab4:	002fad01 	eoreq	sl, pc, r1, lsl #26
    4ab8:	50012900 	andpl	r2, r1, r0, lsl #18
    4abc:	5001f303 	andpl	pc, r1, r3, lsl #6
    4ac0:	01330000 	teqeq	r3, r0
    4ac4:	00001102 	andeq	r1, r0, r2, lsl #2
    4ac8:	01061b01 	tsteq	r6, r1, lsl #22
    4acc:	080048f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, lr}
    4ad0:	08004954 	stmdaeq	r0, {r2, r4, r6, r8, fp, lr}
    4ad4:	00001d4d 	andeq	r1, r0, sp, asr #26
    4ad8:	003db701 	eorseq	fp, sp, r1, lsl #14
    4adc:	18543500 	ldmdane	r4, {r8, sl, ip, sp}^
    4ae0:	1b010000 	blne	44ae8 <__Stack_Size+0x446e8>
    4ae4:	0005b406 	andeq	fp, r5, r6, lsl #8
    4ae8:	001d6d00 	andseq	r6, sp, r0, lsl #26
    4aec:	1b593d00 	blne	1653ef4 <__Stack_Size+0x1653af4>
    4af0:	1c010000 	stcne	0, cr0, [r1], {-0}
    4af4:	0005b406 	andeq	fp, r5, r6, lsl #8
    4af8:	001d8b00 	andseq	r8, sp, r0, lsl #22
    4afc:	69644900 	stmdbvs	r4!, {r8, fp, lr}^
    4b00:	1c010076 	stcne	0, cr0, [r1], {118}	; 0x76
    4b04:	0005b406 	andeq	fp, r5, r6, lsl #8
    4b08:	001da300 	andseq	sl, sp, r0, lsl #6
    4b0c:	756f5b00 	strbvc	r5, [pc, #-2816]!	; 4014 <__Stack_Size+0x3c14>
    4b10:	1d010074 	stcne	0, cr0, [r1, #-464]	; 0xfffffe30
    4b14:	003db706 	eorseq	fp, sp, r6, lsl #14
    4b18:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4b1c:	01006949 	tsteq	r0, r9, asr #18
    4b20:	059e061e 	ldreq	r0, [lr, #1566]	; 0x61e
    4b24:	1dc60000 	stclne	0, cr0, [r6]
    4b28:	6a1e0000 	bvs	784b30 <__Stack_Size+0x784730>
    4b2c:	061e0100 	ldreq	r0, [lr], -r0, lsl #2
    4b30:	0000059e 	muleq	r0, lr, r5
    4b34:	0049342b 	subeq	r3, r9, fp, lsr #8
    4b38:	002ee808 	eoreq	lr, lr, r8, lsl #16
    4b3c:	50012900 	andpl	r2, r1, r0, lsl #18
    4b40:	00007402 	andeq	r7, r0, r2, lsl #8
    4b44:	00785200 	rsbseq	r5, r8, r0, lsl #4
    4b48:	3dc70000 	stclcc	0, cr0, [r7]
    4b4c:	64530000 	ldrbvs	r0, [r3], #-0
    4b50:	0a000000 	beq	4b58 <__Stack_Size+0x4758>
    4b54:	99013300 	stmdbls	r1, {r8, r9, ip, sp}
    4b58:	0100000b 	tsteq	r0, fp
    4b5c:	5401030c 	strpl	r0, [r1], #-780	; 0x30c
    4b60:	cc080049 	stcgt	0, cr0, [r8], {73}	; 0x49
    4b64:	da080049 	ble	204c90 <__Stack_Size+0x204890>
    4b68:	0100001d 	tsteq	r0, sp, lsl r0
    4b6c:	00003ef6 	strdeq	r3, [r0], -r6
    4b70:	001b4747 	andseq	r4, fp, r7, asr #14
    4b74:	030d0100 	movweq	r0, #53504	; 0xd100
    4b78:	000005a9 	andeq	r0, r0, r9, lsr #11
    4b7c:	5c285401 	cfstrspl	mvf5, [r8], #-4
    4b80:	c1080049 	tstgt	r8, r9, asr #32
    4b84:	03000012 	movweq	r0, #18
    4b88:	2900003e 	stmdbcs	r0, {r1, r2, r3, r4, r5}
    4b8c:	36015001 	strcc	r5, [r1], -r1
    4b90:	49662800 	stmdbmi	r6!, {fp, sp}^
    4b94:	34190800 	ldrcc	r0, [r9], #-2048	; 0x800
    4b98:	3e1a0000 	cdpcc	0, 1, cr0, cr10, cr0, {0}
    4b9c:	01290000 	teqeq	r9, r0
    4ba0:	b8030550 	stmdalt	r3, {r4, r6, r8, sl}
    4ba4:	0008006d 	andeq	r0, r8, sp, rrx
    4ba8:	00496c28 	subeq	r6, r9, r8, lsr #24
    4bac:	003d3408 	eorseq	r3, sp, r8, lsl #8
    4bb0:	003e2e00 	eorseq	r2, lr, r0, lsl #28
    4bb4:	50012900 	andpl	r2, r1, r0, lsl #18
    4bb8:	00007402 	andeq	r7, r0, r2, lsl #8
    4bbc:	00497228 	subeq	r7, r9, r8, lsr #4
    4bc0:	00341908 	eorseq	r1, r4, r8, lsl #18
    4bc4:	003e4500 	eorseq	r4, lr, r0, lsl #10
    4bc8:	50012900 	andpl	r2, r1, r0, lsl #18
    4bcc:	6dcb0305 	stclvs	3, cr0, [fp, #20]
    4bd0:	28000800 	stmdacs	r0, {fp}
    4bd4:	08004980 	stmdaeq	r0, {r7, r8, fp, lr}
    4bd8:	000018b6 			; <UNDEFINED> instruction: 0x000018b6
    4bdc:	00003e60 	andeq	r3, r0, r0, ror #28
    4be0:	02510129 	subseq	r0, r1, #1073741834	; 0x4000000a
    4be4:	01296408 	teqeq	r9, r8, lsl #8
    4be8:	f40a0350 	vst2.16	{d0-d3}, [sl :64], r0
    4bec:	8c280001 	stchi	0, cr0, [r8], #-4
    4bf0:	b6080049 	strlt	r0, [r8], -r9, asr #32
    4bf4:	7c000018 	stcvc	0, cr0, [r0], {24}
    4bf8:	2900003e 	stmdbcs	r0, {r1, r2, r3, r4, r5}
    4bfc:	0a035101 	beq	d9008 <__Stack_Size+0xd8c08>
    4c00:	01291388 	smlawbeq	r9, r8, r3, r1
    4c04:	f40a0350 	vst2.16	{d0-d3}, [sl :64], r0
    4c08:	96280001 	strtls	r0, [r8], -r1
    4c0c:	b6080049 	strlt	r0, [r8], -r9, asr #32
    4c10:	97000018 	smladls	r0, r8, r0, r0
    4c14:	2900003e 	stmdbcs	r0, {r1, r2, r3, r4, r5}
    4c18:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    4c1c:	50012964 	andpl	r2, r1, r4, ror #18
    4c20:	01f40a03 	mvnseq	r0, r3, lsl #20
    4c24:	49a22800 	stmibmi	r2!, {fp, sp}
    4c28:	18b60800 	ldmne	r6!, {fp}
    4c2c:	3eb30000 	cdpcc	0, 11, cr0, cr3, cr0, {0}
    4c30:	01290000 	teqeq	r9, r0
    4c34:	880a0351 	stmdahi	sl, {r0, r4, r6, r8, r9}
    4c38:	50012913 	andpl	r2, r1, r3, lsl r9
    4c3c:	01f40a03 	mvnseq	r0, r3, lsl #20
    4c40:	49a82800 	stmibmi	r8!, {fp, sp}
    4c44:	34190800 	ldrcc	r0, [r9], #-2048	; 0x800
    4c48:	3eca0000 	cdpcc	0, 12, cr0, cr10, cr0, {0}
    4c4c:	01290000 	teqeq	r9, r0
    4c50:	d8030550 	stmdale	r3, {r4, r6, r8, sl}
    4c54:	0008006d 	andeq	r0, r8, sp, rrx
    4c58:	0049ae28 	subeq	sl, r9, r8, lsr #28
    4c5c:	00341908 	eorseq	r1, r4, r8, lsl #18
    4c60:	003ee100 	eorseq	lr, lr, r0, lsl #2
    4c64:	50012900 	andpl	r2, r1, r0, lsl #18
    4c68:	6e030305 	cdpvs	3, 0, cr0, cr3, cr5, {0}
    4c6c:	2d000800 	stccs	8, cr0, [r0, #-0]
    4c70:	080049b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp, lr}
    4c74:	00341901 	eorseq	r1, r4, r1, lsl #18
    4c78:	50012900 	andpl	r2, r1, r0, lsl #18
    4c7c:	6dd80305 	ldclvs	3, cr0, [r8, #20]
    4c80:	00000800 	andeq	r0, r0, r0, lsl #16
    4c84:	10e60133 	rscne	r0, r6, r3, lsr r1
    4c88:	34010000 	strcc	r0, [r1], #-0
    4c8c:	49cc0106 	stmibmi	ip, {r1, r2, r8}^
    4c90:	4a3c0800 	bmi	f06c98 <__Stack_Size+0xf06898>
    4c94:	1dfa0800 	ldclne	8, cr0, [sl]
    4c98:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    4c9c:	3500003f 	strcc	r0, [r0, #-63]	; 0x3f
    4ca0:	0000116e 	andeq	r1, r0, lr, ror #2
    4ca4:	ca063401 	bgt	191cb0 <__Stack_Size+0x1918b0>
    4ca8:	26000005 	strcs	r0, [r0], -r5
    4cac:	3d00001e 	stccc	0, cr0, [r0, #-120]	; 0xffffff88
    4cb0:	00001b59 	andeq	r1, r0, r9, asr fp
    4cb4:	b4063501 	strlt	r3, [r6], #-1281	; 0x501
    4cb8:	47000005 	strmi	r0, [r0, -r5]
    4cbc:	3d00001e 	stccc	0, cr0, [r0, #-120]	; 0xffffff88
    4cc0:	00001854 	andeq	r1, r0, r4, asr r8
    4cc4:	b4063501 	strlt	r3, [r6], #-1281	; 0x501
    4cc8:	5a000005 	bpl	4ce4 <__Stack_Size+0x48e4>
    4ccc:	4900001e 	stmdbmi	r0, {r1, r2, r3, r4}
    4cd0:	00766964 	rsbseq	r6, r6, r4, ror #18
    4cd4:	b4063501 	strlt	r3, [r6], #-1281	; 0x501
    4cd8:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
    4cdc:	5b00001e 	blpl	4d5c <__Stack_Size+0x495c>
    4ce0:	0074756f 	rsbseq	r7, r4, pc, ror #10
    4ce4:	89063601 	stmdbhi	r6, {r0, r9, sl, ip, sp}
    4ce8:	0200003f 	andeq	r0, r0, #63	; 0x3f
    4cec:	69496491 	stmdbvs	r9, {r0, r4, r7, sl, sp, lr}^
    4cf0:	06370100 	ldrteq	r0, [r7], -r0, lsl #2
    4cf4:	0000059e 	muleq	r0, lr, r5
    4cf8:	00001e90 	muleq	r0, r0, lr
    4cfc:	01006a1e 	tsteq	r0, lr, lsl sl
    4d00:	059e0637 	ldreq	r0, [lr, #1591]	; 0x637
    4d04:	1a2b0000 	bne	ac4d0c <__Stack_Size+0xac490c>
    4d08:	e808004a 	stmda	r8, {r1, r3, r6}
    4d0c:	2900002e 	stmdbcs	r0, {r1, r2, r3, r5}
    4d10:	91025001 	tstls	r2, r1
    4d14:	52000064 	andpl	r0, r0, #100	; 0x64
    4d18:	00000078 	andeq	r0, r0, r8, ror r0
    4d1c:	00003f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    4d20:	00006453 	andeq	r6, r0, r3, asr r4
    4d24:	33000b00 	movwcc	r0, #2816	; 0xb00
    4d28:	00000001 	andeq	r0, r0, r1
    4d2c:	06540100 	ldrbeq	r0, [r4], -r0, lsl #2
    4d30:	004a3c01 	subeq	r3, sl, r1, lsl #24
    4d34:	004ab608 	subeq	fp, sl, r8, lsl #12
    4d38:	001eb008 	andseq	fp, lr, r8
    4d3c:	3fe40100 	svccc	0x00e40100
    4d40:	d7350000 	ldrle	r0, [r5, -r0]!
    4d44:	01000009 	tsteq	r0, r9
    4d48:	05a90654 	streq	r0, [r9, #1620]!	; 0x654
    4d4c:	1ed00000 	cdpne	0, 13, cr0, cr0, cr0, {0}
    4d50:	6f5b0000 	svcvs	0x005b0000
    4d54:	01007475 	tsteq	r0, r5, ror r4
    4d58:	3fe40655 	svccc	0x00e40655
    4d5c:	91020000 	mrsls	r0, (UNDEF: 2)
    4d60:	4ab42b70 	bmi	fed0fb28 <SCS_BASE+0x1ed01b28>
    4d64:	2ee80800 	cdpcs	8, 14, cr0, cr8, cr0, {0}
    4d68:	01290000 	teqeq	r9, r0
    4d6c:	70910250 	addsvc	r0, r1, r0, asr r2
    4d70:	78520000 	ldmdavc	r2, {}^	; <UNPREDICTABLE>
    4d74:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    4d78:	5300003f 	movwpl	r0, #63	; 0x3f
    4d7c:	00000064 	andeq	r0, r0, r4, rrx
    4d80:	01330006 	teqeq	r3, r6
    4d84:	000017cc 	andeq	r1, r0, ip, asr #15
    4d88:	01066801 	tsteq	r6, r1, lsl #16
    4d8c:	08004ab6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, fp, lr}
    4d90:	08004b00 	stmdaeq	r0, {r8, r9, fp, lr}
    4d94:	00001ef1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    4d98:	00403f01 	subeq	r3, r0, r1, lsl #30
    4d9c:	0ea93500 	cdpeq	5, 10, cr3, cr9, cr0, {0}
    4da0:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    4da4:	00059e06 	andeq	r9, r5, r6, lsl #28
    4da8:	001f1100 	andseq	r1, pc, r0, lsl #2
    4dac:	756f5b00 	strbvc	r5, [pc, #-2816]!	; 42b4 <__Stack_Size+0x3eb4>
    4db0:	69010074 	stmdbvs	r1, {r2, r4, r5, r6}
    4db4:	00403f06 	subeq	r3, r0, r6, lsl #30
    4db8:	70910200 	addsvc	r0, r1, r0, lsl #4
    4dbc:	004afe2b 	subeq	pc, sl, fp, lsr #28
    4dc0:	002ee808 	eoreq	lr, lr, r8, lsl #16
    4dc4:	50012900 	andpl	r2, r1, r0, lsl #18
    4dc8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    4dcc:	00785200 	rsbseq	r5, r8, r0, lsl #4
    4dd0:	404f0000 	submi	r0, pc, r0
    4dd4:	64530000 	ldrbvs	r0, [r3], #-0
    4dd8:	04000000 	streq	r0, [r0], #-0
    4ddc:	03013300 	movweq	r3, #4864	; 0x1300
    4de0:	0100000c 	tsteq	r0, ip
    4de4:	00010167 	andeq	r0, r1, r7, ror #2
    4de8:	7408004b 	strvc	r0, [r8], #-75	; 0x4b
    4dec:	3208004b 	andcc	r0, r8, #75	; 0x4b
    4df0:	0100001f 	tsteq	r0, pc, lsl r0
    4df4:	00004114 	andeq	r4, r0, r4, lsl r1
    4df8:	00646949 	rsbeq	r6, r4, r9, asr #18
    4dfc:	9e016901 	cdpls	9, 0, cr6, cr1, cr1, {0}
    4e00:	52000005 	andpl	r0, r0, #5
    4e04:	3d00001f 	stccc	0, cr0, [r0, #-124]	; 0xffffff84
    4e08:	00001446 	andeq	r1, r0, r6, asr #8
    4e0c:	48016a01 	stmdami	r1, {r0, r9, fp, sp, lr}
    4e10:	7c000000 	stcvc	0, cr0, [r0], {-0}
    4e14:	2800001f 	stmdacs	r0, {r0, r1, r2, r3, r4}
    4e18:	08004b08 	stmdaeq	r0, {r3, r8, r9, fp, lr}
    4e1c:	00003419 	andeq	r3, r0, r9, lsl r4
    4e20:	000040a0 	andeq	r4, r0, r0, lsr #1
    4e24:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    4e28:	006e1c03 	rsbeq	r1, lr, r3, lsl #24
    4e2c:	14280008 	strtne	r0, [r8], #-8
    4e30:	1908004b 	stmdbne	r8, {r0, r1, r3, r6}
    4e34:	b7000034 	smladxlt	r0, r4, r0, r0
    4e38:	29000040 	stmdbcs	r0, {r6}
    4e3c:	03055001 	movweq	r5, #20481	; 0x5001
    4e40:	08006e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, sp, lr}
    4e44:	4b1a2800 	blmi	68ee4c <__Stack_Size+0x68ea4c>
    4e48:	3ff40800 	svccc	0x00f40800
    4e4c:	40cb0000 	sbcmi	r0, fp, r0
    4e50:	01290000 	teqeq	r9, r0
    4e54:	00750250 	rsbseq	r0, r5, r0, asr r2
    4e58:	4b202800 	blmi	80ee60 <__Stack_Size+0x80ea60>
    4e5c:	34190800 	ldrcc	r0, [r9], #-2048	; 0x800
    4e60:	40e20000 	rscmi	r0, r2, r0
    4e64:	01290000 	teqeq	r9, r0
    4e68:	c8030550 	stmdagt	r3, {r4, r6, r8, sl}
    4e6c:	0008006d 	andeq	r0, r8, sp, rrx
    4e70:	004b2628 	subeq	r2, fp, r8, lsr #12
    4e74:	0029c008 	eoreq	ip, r9, r8
    4e78:	0040f600 	subeq	pc, r0, r0, lsl #12
    4e7c:	50012900 	andpl	r2, r1, r0, lsl #18
    4e80:	00007402 	andeq	r7, r0, r2, lsl #8
    4e84:	004b482a 	subeq	r4, fp, sl, lsr #16
    4e88:	00341908 	eorseq	r1, r4, r8, lsl #18
    4e8c:	4b582d00 	blmi	1610294 <__Stack_Size+0x160fe94>
    4e90:	19010800 	stmdbne	r1, {fp}
    4e94:	29000034 	stmdbcs	r0, {r2, r4, r5}
    4e98:	03055001 	movweq	r5, #20481	; 0x5001
    4e9c:	08006e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, sp, lr}
    4ea0:	01330000 	teqeq	r3, r0
    4ea4:	0000048b 	andeq	r0, r0, fp, lsl #9
    4ea8:	01076201 	tsteq	r7, r1, lsl #4
    4eac:	08004b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, lr}
    4eb0:	08004c50 	stmdaeq	r0, {r4, r6, sl, fp, lr}
    4eb4:	00001fb7 			; <UNDEFINED> instruction: 0x00001fb7
    4eb8:	00418901 	subeq	r8, r1, r1, lsl #18
    4ebc:	4bb22800 	blmi	fec8eec4 <SCS_BASE+0x1ec80ec4>
    4ec0:	0d140800 	ldceq	8, cr0, [r4, #-0]
    4ec4:	41420000 	mrsmi	r0, (UNDEF: 66)
    4ec8:	01290000 	teqeq	r9, r0
    4ecc:	00360150 	eorseq	r0, r6, r0, asr r1
    4ed0:	004bb82a 	subeq	fp, fp, sl, lsr #16
    4ed4:	000a9708 	andeq	r9, sl, r8, lsl #14
    4ed8:	4bc42800 	blmi	ff10eee0 <SCS_BASE+0x1f100ee0>
    4edc:	0a970800 	beq	fe5c6ee4 <SCS_BASE+0x1e5b8ee4>
    4ee0:	41630000 	cmnmi	r3, r0
    4ee4:	01290000 	teqeq	r9, r0
    4ee8:	29300151 	ldmdbcs	r0!, {r0, r4, r6, r8}
    4eec:	36015001 	strcc	r5, [r1], -r1
    4ef0:	4c402800 	mcrrmi	8, 0, r2, r0, cr0
    4ef4:	4dae0800 	stcmi	8, cr0, [lr]
    4ef8:	41770000 	cmnmi	r7, r0
    4efc:	01290000 	teqeq	r9, r0
    4f00:	fe090250 	mcr2	2, 0, r0, cr9, cr0, {2}
    4f04:	4c4a2d00 	mcrrmi	13, 0, r2, sl, cr0
    4f08:	ae010800 	cdpge	8, 0, cr0, cr1, cr0, {0}
    4f0c:	2900004d 	stmdbcs	r0, {r0, r2, r3, r6}
    4f10:	74025001 	strvc	r5, [r2], #-1
    4f14:	33000000 	movwcc	r0, #0
    4f18:	00141901 	andseq	r1, r4, r1, lsl #18
    4f1c:	07a40100 	streq	r0, [r4, r0, lsl #2]!
    4f20:	004c5001 	subeq	r5, ip, r1
    4f24:	004c6c08 	subeq	r6, ip, r8, lsl #24
    4f28:	001fd708 	andseq	sp, pc, r8, lsl #14
    4f2c:	41c80100 	bicmi	r0, r8, r0, lsl #2
    4f30:	58280000 	stmdapl	r8!, {}	; <UNPREDICTABLE>
    4f34:	b908004c 	stmdblt	r8, {r2, r3, r6}
    4f38:	b800004e 	stmdalt	r0, {r1, r2, r3, r6}
    4f3c:	29000041 	stmdbcs	r0, {r0, r6}
    4f40:	08025001 	stmdaeq	r2, {r0, ip, lr}
    4f44:	5e2b005a 	mcrpl	0, 1, r0, cr11, cr10, {2}
    4f48:	cd08004c 	stcgt	0, cr0, [r8, #-304]	; 0xfffffed0
    4f4c:	2900004e 	stmdbcs	r0, {r1, r2, r3, r6}
    4f50:	31015001 	tstcc	r1, r1
    4f54:	01330000 	teqeq	r3, r0
    4f58:	0000137d 	andeq	r1, r0, sp, ror r3
    4f5c:	0107b401 	tsteq	r7, r1, lsl #8
    4f60:	08004c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, lr}
    4f64:	08004cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, lr}
    4f68:	00001ff7 	strdeq	r1, [r0], -r7
    4f6c:	00433e01 	subeq	r3, r3, r1, lsl #28
    4f70:	156d3d00 	strbne	r3, [sp, #-3328]!	; 0xd00
    4f74:	b5010000 	strlt	r0, [r1, #-0]
    4f78:	00013f07 	andeq	r3, r1, r7, lsl #30
    4f7c:	00201700 	eoreq	r1, r0, r0, lsl #14
    4f80:	4c722a00 	ldclmi	10, cr2, [r2], #-0
    4f84:	4ee10800 	cdpmi	8, 14, cr0, cr1, cr0, {0}
    4f88:	7a280000 	bvc	a04f90 <__Stack_Size+0xa04b90>
    4f8c:	eb08004c 	bl	2050c4 <__Stack_Size+0x204cc4>
    4f90:	1100004e 	tstne	r0, lr, asr #32
    4f94:	29000042 	stmdbcs	r0, {r1, r6}
    4f98:	40035001 	andmi	r5, r3, r1
    4f9c:	2a00243c 	bcs	e094 <__Stack_Size+0xdc94>
    4fa0:	08004c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, lr}
    4fa4:	00004eff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    4fa8:	004c8e28 	subeq	r8, ip, r8, lsr #28
    4fac:	004f0d08 	subeq	r0, pc, r8, lsl #26
    4fb0:	00423400 	subeq	r3, r2, r0, lsl #8
    4fb4:	51012900 	tstpl	r1, r0, lsl #18
    4fb8:	01293101 	teqeq	r9, r1, lsl #2
    4fbc:	1c0a0350 	stcne	3, cr0, [sl], {80}	; 0x50
    4fc0:	98280006 	stmdals	r8!, {r1, r2}
    4fc4:	0d08004c 	stceq	0, cr0, [r8, #-304]	; 0xfffffed0
    4fc8:	4e00004f 	cdpmi	0, 0, cr0, cr0, cr15, {2}
    4fcc:	29000042 	stmdbcs	r0, {r1, r6}
    4fd0:	31015101 	tstcc	r1, r1, lsl #2
    4fd4:	03500129 	cmpeq	r0, #1073741834	; 0x4000000a
    4fd8:	0040000a 	subeq	r0, r0, sl
    4fdc:	004ca228 	subeq	sl, ip, r8, lsr #4
    4fe0:	004f2708 	subeq	r2, pc, r8, lsl #14
    4fe4:	00426800 	subeq	r6, r2, r0, lsl #16
    4fe8:	51012900 	tstpl	r1, r0, lsl #18
    4fec:	01293101 	teqeq	r9, r1, lsl #2
    4ff0:	3e400350 	mcrcc	3, 2, r0, cr0, cr0, {2}
    4ff4:	ac5c0024 	mrrcge	0, 2, r0, ip, cr4
    4ff8:	0108004c 	tsteq	r8, ip, asr #32
    4ffc:	00004f41 	andeq	r4, r0, r1, asr #30
    5000:	0000427c 	andeq	r4, r0, ip, ror r2
    5004:	01500129 	cmpeq	r0, r9, lsr #2
    5008:	b2280031 	eorlt	r0, r8, #49	; 0x31
    500c:	5508004c 	strpl	r0, [r8, #-76]	; 0x4c
    5010:	8f00004f 	svchi	0x0000004f
    5014:	29000042 	stmdbcs	r0, {r1, r6}
    5018:	40015001 	andmi	r5, r1, r1
    501c:	4cb82800 	ldcmi	8, cr2, [r8]
    5020:	4f690800 	svcmi	0x00690800
    5024:	42a20000 	adcmi	r0, r2, #0
    5028:	01290000 	teqeq	r9, r0
    502c:	00320150 	eorseq	r0, r2, r0, asr r1
    5030:	004cbe28 	subeq	fp, ip, r8, lsr #28
    5034:	004f7d08 	subeq	r7, pc, r8, lsl #26
    5038:	0042b500 	subeq	fp, r2, r0, lsl #10
    503c:	50012900 	andpl	r2, r1, r0, lsl #18
    5040:	28003001 	stmdacs	r0, {r0, ip, sp}
    5044:	08004cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, lr}
    5048:	00004f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    504c:	000042c8 	andeq	r4, r0, r8, asr #5
    5050:	01500129 	cmpeq	r0, r9, lsr #2
    5054:	cc280030 	stcgt	0, cr0, [r8], #-192	; 0xffffff40
    5058:	a708004c 	strge	r0, [r8, -ip, asr #32]
    505c:	dd00004f 	stcle	0, cr0, [r0, #-316]	; 0xfffffec4
    5060:	29000042 	stmdbcs	r0, {r1, r6}
    5064:	0a035001 	beq	d9070 <__Stack_Size+0xd8c70>
    5068:	28000400 	stmdacs	r0, {sl}
    506c:	08004cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, lr}
    5070:	00004fbc 			; <UNDEFINED> instruction: 0x00004fbc
    5074:	000042f9 	strdeq	r4, [r0], -r9
    5078:	03510129 	cmpeq	r1, #1073741834	; 0x4000000a
    507c:	2924404c 	stmdbcs	r4!, {r2, r3, r6, lr}
    5080:	40035001 	andmi	r5, r3, r1
    5084:	2800243c 	stmdacs	r0, {r2, r3, r4, r5, sl, sp}
    5088:	08004cde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, fp, lr}
    508c:	00004fd6 	ldrdeq	r4, [r0], -r6
    5090:	0000430d 	andeq	r4, r0, sp, lsl #6
    5094:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    5098:	28000074 	stmdacs	r0, {r2, r4, r5, r6}
    509c:	08004ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, lr}
    50a0:	00004feb 	andeq	r4, r0, fp, ror #31
    50a4:	00004321 	andeq	r4, r0, r1, lsr #6
    50a8:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    50ac:	28003908 	stmdacs	r0, {r3, r8, fp, ip, sp}
    50b0:	08004cee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, fp, lr}
    50b4:	00005004 	andeq	r5, r0, r4
    50b8:	00004334 	andeq	r4, r0, r4, lsr r3
    50bc:	01500129 	cmpeq	r0, r9, lsr #2
    50c0:	f22a0032 	vqadd.s32	d0, d10, d18
    50c4:	1908004c 	stmdbne	r8, {r2, r3, r6}
    50c8:	00000050 	andeq	r0, r0, r0, asr r0
    50cc:	12150133 	andsne	r0, r5, #-1073741812	; 0xc000000c
    50d0:	e5010000 	str	r0, [r1, #-0]
    50d4:	4cf80107 	ldfmie	f0, [r8], #28
    50d8:	4d5e0800 	ldclmi	8, cr0, [lr, #-0]
    50dc:	204b0800 	subcs	r0, fp, r0, lsl #16
    50e0:	d2010000 	andle	r0, r1, #0
    50e4:	47000043 	strmi	r0, [r0, -r3, asr #32]
    50e8:	000009dc 	ldrdeq	r0, [r0], -ip
    50ec:	2b07e601 	blcs	1fe8f8 <__Stack_Size+0x1fe4f8>
    50f0:	02000005 	andeq	r0, r0, #5
    50f4:	06286c91 			; <UNDEFINED> instruction: 0x06286c91
    50f8:	2808004d 	stmdacs	r8, {r0, r2, r3, r6}
    50fc:	84000050 	strhi	r0, [r0], #-80	; 0x50
    5100:	29000043 	stmdbcs	r0, {r0, r1, r6}
    5104:	0a035101 	beq	d9510 <__Stack_Size+0xd9110>
    5108:	01293000 	teqeq	r9, r0
    510c:	47400350 	smlsldmi	r0, r0, r0, r3	; <UNPREDICTABLE>
    5110:	0e280024 	cdpeq	0, 2, cr0, cr8, cr4, {1}
    5114:	4208004d 	andmi	r0, r8, #77	; 0x4d
    5118:	99000050 	stmdbls	r0, {r4, r6}
    511c:	29000043 	stmdbcs	r0, {r0, r1, r6}
    5120:	0a035001 	beq	d912c <__Stack_Size+0xd8d2c>
    5124:	28000500 	stmdacs	r0, {r8, sl}
    5128:	08004d2a 	stmdaeq	r0, {r1, r3, r5, r8, sl, fp, lr}
    512c:	00005056 	andeq	r5, r0, r6, asr r0
    5130:	000043ad 	andeq	r4, r0, sp, lsr #7
    5134:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    5138:	28006c91 	stmdacs	r0, {r0, r4, r7, sl, fp, sp, lr}
    513c:	08004d42 	stmdaeq	r0, {r1, r6, r8, sl, fp, lr}
    5140:	00005056 	andeq	r5, r0, r6, asr r0
    5144:	000043c1 	andeq	r4, r0, r1, asr #7
    5148:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    514c:	2b006c91 	blcs	20398 <__Stack_Size+0x1ff98>
    5150:	08004d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, lr}
    5154:	00005056 	andeq	r5, r0, r6, asr r0
    5158:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    515c:	00006c91 	muleq	r0, r1, ip
    5160:	0a140133 	beq	505634 <__Stack_Size+0x505234>
    5164:	03010000 	movweq	r0, #4096	; 0x1000
    5168:	4d5e0108 	ldfmie	f0, [lr, #-32]	; 0xffffffe0
    516c:	4f200800 	svcmi	0x00200800
    5170:	206b0800 	rsbcs	r0, fp, r0, lsl #16
    5174:	45010000 	strmi	r0, [r1, #-0]
    5178:	47000046 	strmi	r0, [r0, -r6, asr #32]
    517c:	000016e9 	andeq	r1, r0, r9, ror #13
    5180:	df080501 	svcle	0x00080501
    5184:	02000004 	andeq	r0, r0, #4
    5188:	6c285c91 	stcvs	12, cr5, [r8], #-580	; 0xfffffdbc
    518c:	7108004d 	tstvc	r8, sp, asr #32
    5190:	10000050 	andne	r0, r0, r0, asr r0
    5194:	29000044 	stmdbcs	r0, {r2, r6}
    5198:	91025001 	tstls	r2, r1
    519c:	8628005c 			; <UNDEFINED> instruction: 0x8628005c
    51a0:	8b08004d 	blhi	2052dc <__Stack_Size+0x204edc>
    51a4:	2a000050 	bcs	52ec <__Stack_Size+0x4eec>
    51a8:	29000044 	stmdbcs	r0, {r2, r6}
    51ac:	91025101 	tstls	r2, r1, lsl #2
    51b0:	5001295c 	andpl	r2, r1, ip, asr r9
    51b4:	00007602 	andeq	r7, r0, r2, lsl #12
    51b8:	004d9e28 	subeq	r9, sp, r8, lsr #28
    51bc:	00508b08 	subseq	r8, r0, r8, lsl #22
    51c0:	00444400 	subeq	r4, r4, r0, lsl #8
    51c4:	51012900 	tstpl	r1, r0, lsl #18
    51c8:	295c9102 	ldmdbcs	ip, {r1, r8, ip, pc}^
    51cc:	76025001 	strvc	r5, [r2], -r1
    51d0:	b6280000 	strtlt	r0, [r8], -r0
    51d4:	8b08004d 	blhi	205310 <__Stack_Size+0x204f10>
    51d8:	5e000050 	mcrpl	0, 0, r0, cr0, cr0, {2}
    51dc:	29000044 	stmdbcs	r0, {r2, r6}
    51e0:	91025101 	tstls	r2, r1, lsl #2
    51e4:	5001295c 	andpl	r2, r1, ip, asr r9
    51e8:	00007602 	andeq	r7, r0, r2, lsl #12
    51ec:	004dce28 	subeq	ip, sp, r8, lsr #28
    51f0:	00508b08 	subseq	r8, r0, r8, lsl #22
    51f4:	00447b00 	subeq	r7, r4, r0, lsl #22
    51f8:	51012900 	tstpl	r1, r0, lsl #18
    51fc:	295c9102 	ldmdbcs	ip, {r1, r8, ip, pc}^
    5200:	0c055001 	stceq	0, cr5, [r5], {1}
    5204:	40010800 	andmi	r0, r1, r0, lsl #16
    5208:	4de62800 	stclmi	8, cr2, [r6]
    520c:	508b0800 	addpl	r0, fp, r0, lsl #16
    5210:	44950000 	ldrmi	r0, [r5], #0
    5214:	01290000 	teqeq	r9, r0
    5218:	5c910251 	lfmpl	f0, 4, [r1], {81}	; 0x51
    521c:	02500129 	subseq	r0, r0, #1073741834	; 0x4000000a
    5220:	28000076 	stmdacs	r0, {r1, r2, r4, r5, r6}
    5224:	08004e00 	stmdaeq	r0, {r9, sl, fp, lr}
    5228:	0000508b 	andeq	r5, r0, fp, lsl #1
    522c:	000044af 	andeq	r4, r0, pc, lsr #9
    5230:	02510129 	subseq	r0, r1, #1073741834	; 0x4000000a
    5234:	01295c91 			; <UNDEFINED> instruction: 0x01295c91
    5238:	00760250 	rsbseq	r0, r6, r0, asr r2
    523c:	4e1a2800 	cdpmi	8, 1, cr2, cr10, cr0, {0}
    5240:	508b0800 	addpl	r0, fp, r0, lsl #16
    5244:	44cf0000 	strbmi	r0, [pc], #0	; 524c <__Stack_Size+0x4e4c>
    5248:	01290000 	teqeq	r9, r0
    524c:	00910851 	addseq	r0, r1, r1, asr r8
    5250:	08220078 	stmdaeq	r2!, {r3, r4, r5, r6}
    5254:	01291c28 	teqeq	r9, r8, lsr #24
    5258:	00760250 	rsbseq	r0, r6, r0, asr r2
    525c:	4e342800 	cdpmi	8, 3, cr2, cr4, cr0, {0}
    5260:	508b0800 	addpl	r0, fp, r0, lsl #16
    5264:	44ef0000 	strbtmi	r0, [pc], #0	; 526c <__Stack_Size+0x4e6c>
    5268:	01290000 	teqeq	r9, r0
    526c:	00910851 	addseq	r0, r1, r1, asr r8
    5270:	08220078 	stmdaeq	r2!, {r3, r4, r5, r6}
    5274:	01291c28 	teqeq	r9, r8, lsr #24
    5278:	00760250 	rsbseq	r0, r6, r0, asr r2
    527c:	4e4c2800 	cdpmi	8, 4, cr2, cr12, cr0, {0}
    5280:	508b0800 	addpl	r0, fp, r0, lsl #16
    5284:	45100000 	ldrmi	r0, [r0, #-0]
    5288:	01290000 	teqeq	r9, r0
    528c:	00910851 	addseq	r0, r1, r1, asr r8
    5290:	08220078 	stmdaeq	r2!, {r3, r4, r5, r6}
    5294:	01291c28 	teqeq	r9, r8, lsr #24
    5298:	80760350 	rsbshi	r0, r6, r0, asr r3
    529c:	66280078 			; <UNDEFINED> instruction: 0x66280078
    52a0:	8b08004e 	blhi	2053e0 <__Stack_Size+0x204fe0>
    52a4:	30000050 	andcc	r0, r0, r0, asr r0
    52a8:	29000045 	stmdbcs	r0, {r0, r2, r6}
    52ac:	91085101 	tstls	r8, r1, lsl #2
    52b0:	22007800 	andcs	r7, r0, #0
    52b4:	291c2808 	ldmdbcs	ip, {r3, fp, sp}
    52b8:	76025001 	strvc	r5, [r2], -r1
    52bc:	7e280000 	cdpvc	0, 2, cr0, cr8, cr0, {0}
    52c0:	8b08004e 	blhi	205400 <__Stack_Size+0x205000>
    52c4:	50000050 	andpl	r0, r0, r0, asr r0
    52c8:	29000045 	stmdbcs	r0, {r0, r2, r6}
    52cc:	91085101 	tstls	r8, r1, lsl #2
    52d0:	22007800 	andcs	r7, r0, #0
    52d4:	291c2808 	ldmdbcs	ip, {r3, fp, sp}
    52d8:	76025001 	strvc	r5, [r2], -r1
    52dc:	98280000 	stmdals	r8!, {}	; <UNPREDICTABLE>
    52e0:	8b08004e 	blhi	205420 <__Stack_Size+0x205020>
    52e4:	70000050 	andvc	r0, r0, r0, asr r0
    52e8:	29000045 	stmdbcs	r0, {r0, r2, r6}
    52ec:	91085101 	tstls	r8, r1, lsl #2
    52f0:	22007800 	andcs	r7, r0, #0
    52f4:	291c2808 	ldmdbcs	ip, {r3, fp, sp}
    52f8:	76025001 	strvc	r5, [r2], -r1
    52fc:	b2280000 	eorlt	r0, r8, #0
    5300:	8b08004e 	blhi	205440 <__Stack_Size+0x205040>
    5304:	90000050 	andls	r0, r0, r0, asr r0
    5308:	29000045 	stmdbcs	r0, {r0, r2, r6}
    530c:	91085101 	tstls	r8, r1, lsl #2
    5310:	22007800 	andcs	r7, r0, #0
    5314:	291c2808 	ldmdbcs	ip, {r3, fp, sp}
    5318:	76025001 	strvc	r5, [r2], -r1
    531c:	c6280000 	strtgt	r0, [r8], -r0
    5320:	8b08004e 	blhi	205460 <__Stack_Size+0x205060>
    5324:	b0000050 	andlt	r0, r0, r0, asr r0
    5328:	29000045 	stmdbcs	r0, {r0, r2, r6}
    532c:	91085101 	tstls	r8, r1, lsl #2
    5330:	22007800 	andcs	r7, r0, #0
    5334:	291c2808 	ldmdbcs	ip, {r3, fp, sp}
    5338:	76025001 	strvc	r5, [r2], -r1
    533c:	d8280000 	stmdale	r8!, {}	; <UNPREDICTABLE>
    5340:	8b08004e 	blhi	205480 <__Stack_Size+0x205080>
    5344:	d0000050 	andle	r0, r0, r0, asr r0
    5348:	29000045 	stmdbcs	r0, {r0, r2, r6}
    534c:	91085101 	tstls	r8, r1, lsl #2
    5350:	22007800 	andcs	r7, r0, #0
    5354:	291c2808 	ldmdbcs	ip, {r3, fp, sp}
    5358:	76025001 	strvc	r5, [r2], -r1
    535c:	ee280000 	cdp	0, 2, cr0, cr8, cr0, {0}
    5360:	8b08004e 	blhi	2054a0 <__Stack_Size+0x2050a0>
    5364:	f0000050 			; <UNDEFINED> instruction: 0xf0000050
    5368:	29000045 	stmdbcs	r0, {r0, r2, r6}
    536c:	91085101 	tstls	r8, r1, lsl #2
    5370:	22007800 	andcs	r7, r0, #0
    5374:	291c2808 	ldmdbcs	ip, {r3, fp, sp}
    5378:	76025001 	strvc	r5, [r2], -r1
    537c:	00280000 	eoreq	r0, r8, r0
    5380:	8b08004f 	blhi	2054c4 <__Stack_Size+0x2050c4>
    5384:	13000050 	movwne	r0, #80	; 0x50
    5388:	29000046 	stmdbcs	r0, {r1, r2, r6}
    538c:	91085101 	tstls	r8, r1, lsl #2
    5390:	22007800 	andcs	r7, r0, #0
    5394:	291c2808 	ldmdbcs	ip, {r3, fp, sp}
    5398:	0c055001 	stceq	0, cr5, [r5], {1}
    539c:	40011400 	andmi	r1, r1, r0, lsl #8
    53a0:	4f082800 	svcmi	0x00082800
    53a4:	50a40800 	adcpl	r0, r4, r0, lsl #16
    53a8:	462c0000 	strtmi	r0, [ip], -r0
    53ac:	01290000 	teqeq	r9, r0
    53b0:	29310151 	ldmdbcs	r1!, {r0, r4, r6, r8}
    53b4:	78025001 	stmdavc	r2, {r0, ip, lr}
    53b8:	102b0000 	eorne	r0, fp, r0
    53bc:	a408004f 	strge	r0, [r8], #-79	; 0x4f
    53c0:	29000050 	stmdbcs	r0, {r4, r6}
    53c4:	31015101 	tstcc	r1, r1, lsl #2
    53c8:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    53cc:	3004000c 	andcc	r0, r4, ip
    53d0:	33000000 	movwcc	r0, #0
    53d4:	0010f001 	andseq	pc, r0, r1
    53d8:	084a0100 	stmdaeq	sl, {r8}^
    53dc:	004f2001 	subeq	r2, pc, r1
    53e0:	004fec08 	subeq	lr, pc, r8, lsl #24
    53e4:	00208b08 	eoreq	r8, r0, r8, lsl #22
    53e8:	48340100 	ldmdami	r4!, {r8}
    53ec:	c6470000 	strbgt	r0, [r7], -r0
    53f0:	01000008 	tsteq	r0, r8
    53f4:	0436084b 	ldrteq	r0, [r6], #-2123	; 0x84b
    53f8:	91020000 	mrsls	r0, (UNDEF: 2)
    53fc:	4f2a285c 	svcmi	0x002a285c
    5400:	50bd0800 	adcspl	r0, sp, r0, lsl #16
    5404:	46830000 	strmi	r0, [r3], r0
    5408:	01290000 	teqeq	r9, r0
    540c:	5c910250 	lfmpl	f0, 4, [r1], {80}	; 0x50
    5410:	4f4c2800 	svcmi	0x004c2800
    5414:	50d80800 	sbcspl	r0, r8, r0, lsl #16
    5418:	46a00000 	strtmi	r0, [r0], r0
    541c:	01290000 	teqeq	r9, r0
    5420:	5c910251 	lfmpl	f0, 4, [r1], {81}	; 0x51
    5424:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    5428:	0124000c 	teqeq	r4, ip
    542c:	68280040 	stmdavs	r8!, {r6}
    5430:	d808004f 	stmdale	r8, {r0, r1, r2, r3, r6}
    5434:	bd000050 	stclt	0, cr0, [r0, #-320]	; 0xfffffec0
    5438:	29000046 	stmdbcs	r0, {r1, r2, r6}
    543c:	91025101 	tstls	r2, r1, lsl #2
    5440:	5001295c 	andpl	r2, r1, ip, asr r9
    5444:	28000c05 	stmdacs	r0, {r0, r2, sl, fp}
    5448:	28004001 	stmdacs	r0, {r0, lr}
    544c:	08004f74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, fp, lr}
    5450:	00004dc2 	andeq	r4, r0, r2, asr #27
    5454:	000046e4 	andeq	r4, r0, r4, ror #13
    5458:	01530129 	cmpeq	r3, r9, lsr #2
    545c:	52012937 	andpl	r2, r1, #901120	; 0xdc000
    5460:	29007402 	stmdbcs	r0, {r1, sl, ip, sp, lr}
    5464:	3a015101 	bcc	59870 <__Stack_Size+0x59470>
    5468:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    546c:	0124000c 	teqeq	r4, ip
    5470:	80280040 	eorhi	r0, r8, r0, asr #32
    5474:	c208004f 	andgt	r0, r8, #79	; 0x4f
    5478:	0b00004d 	bleq	55b4 <__Stack_Size+0x51b4>
    547c:	29000047 	stmdbcs	r0, {r0, r1, r2, r6}
    5480:	37015301 	strcc	r5, [r1, -r1, lsl #6]
    5484:	02520129 	subseq	r0, r2, #1073741834	; 0x4000000a
    5488:	01290074 	teqeq	r9, r4, ror r0
    548c:	29350151 	ldmdbcs	r5!, {r0, r4, r6, r8}
    5490:	0c055001 	stceq	0, cr5, [r5], {1}
    5494:	40012800 	andmi	r2, r1, r0, lsl #16
    5498:	4f882800 	svcmi	0x00882800
    549c:	50f20800 	rscspl	r0, r2, r0, lsl #16
    54a0:	47280000 	strmi	r0, [r8, -r0]!
    54a4:	01290000 	teqeq	r9, r0
    54a8:	00740251 	rsbseq	r0, r4, r1, asr r2
    54ac:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    54b0:	0124000c 	teqeq	r4, ip
    54b4:	90280040 	eorls	r0, r8, r0, asr #32
    54b8:	f208004f 	vhadd.s8	q0, q4, <illegal reg q7.5>
    54bc:	45000050 	strmi	r0, [r0, #-80]	; 0x50
    54c0:	29000047 	stmdbcs	r0, {r0, r1, r2, r6}
    54c4:	74025101 	strvc	r5, [r2], #-257	; 0x101
    54c8:	50012900 	andpl	r2, r1, r0, lsl #18
    54cc:	28000c05 	stmdacs	r0, {r0, r2, sl, fp}
    54d0:	28004001 	stmdacs	r0, {r0, lr}
    54d4:	08004f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, lr}
    54d8:	0000510c 	andeq	r5, r0, ip, lsl #2
    54dc:	0000475c 	andeq	r4, r0, ip, asr r7
    54e0:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    54e4:	0124000c 	teqeq	r4, ip
    54e8:	9c280040 	stcls	0, cr0, [r8], #-256	; 0xffffff00
    54ec:	2108004f 	tstcs	r8, pc, asr #32
    54f0:	73000051 	movwvc	r0, #81	; 0x51
    54f4:	29000047 	stmdbcs	r0, {r0, r1, r2, r6}
    54f8:	0c055001 	stceq	0, cr5, [r5], {1}
    54fc:	40012400 	andmi	r2, r1, r0, lsl #8
    5500:	4fa62800 	svcmi	0x00a62800
    5504:	510c0800 	tstpl	ip, r0, lsl #16
    5508:	478a0000 	strmi	r0, [sl, r0]
    550c:	01290000 	teqeq	r9, r0
    5510:	000c0550 	andeq	r0, ip, r0, asr r5
    5514:	00400128 	subeq	r0, r0, r8, lsr #2
    5518:	004fac28 	subeq	sl, pc, r8, lsr #24
    551c:	00512108 	subseq	r2, r1, r8, lsl #2
    5520:	0047a100 	subeq	sl, r7, r0, lsl #2
    5524:	50012900 	andpl	r2, r1, r0, lsl #18
    5528:	28000c05 	stmdacs	r0, {r0, r2, sl, fp}
    552c:	28004001 	stmdacs	r0, {r0, lr}
    5530:	08004fb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, fp, lr}
    5534:	0000513a 	andeq	r5, r0, sl, lsr r1
    5538:	000047b8 			; <UNDEFINED> instruction: 0x000047b8
    553c:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    5540:	0124000c 	teqeq	r4, ip
    5544:	bc280040 	stclt	0, cr0, [r8], #-256	; 0xffffff00
    5548:	4f08004f 	svcmi	0x0008004f
    554c:	cf000051 	svcgt	0x00000051
    5550:	29000047 	stmdbcs	r0, {r0, r1, r2, r6}
    5554:	0c055001 	stceq	0, cr5, [r5], {1}
    5558:	40012400 	andmi	r2, r1, r0, lsl #8
    555c:	4fc62800 	svcmi	0x00c62800
    5560:	513a0800 	teqpl	sl, r0, lsl #16
    5564:	47e60000 	strbmi	r0, [r6, r0]!
    5568:	01290000 	teqeq	r9, r0
    556c:	000c0550 	andeq	r0, ip, r0, asr r5
    5570:	00400128 	subeq	r0, r0, r8, lsr #2
    5574:	004fcc28 	subeq	ip, pc, r8, lsr #24
    5578:	00514f08 	subseq	r4, r1, r8, lsl #30
    557c:	0047fd00 	subeq	pc, r7, r0, lsl #26
    5580:	50012900 	andpl	r2, r1, r0, lsl #18
    5584:	28000c05 	stmdacs	r0, {r0, r2, sl, fp}
    5588:	28004001 	stmdacs	r0, {r0, lr}
    558c:	08004fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, lr}
    5590:	00004dec 	andeq	r4, r0, ip, ror #27
    5594:	0000481a 	andeq	r4, r0, sl, lsl r8
    5598:	02510129 	subseq	r0, r1, #1073741834	; 0x4000000a
    559c:	01290074 	teqeq	r9, r4, ror r0
    55a0:	000c0550 	andeq	r0, ip, r0, asr r5
    55a4:	00400124 	subeq	r0, r0, r4, lsr #2
    55a8:	004fe02b 	subeq	lr, pc, fp, lsr #32
    55ac:	004dec08 	subeq	lr, sp, r8, lsl #24
    55b0:	51012900 	tstpl	r1, r0, lsl #18
    55b4:	29007402 	stmdbcs	r0, {r1, sl, ip, sp, lr}
    55b8:	0c055001 	stceq	0, cr5, [r5], {1}
    55bc:	40012800 	andmi	r2, r1, r0, lsl #16
    55c0:	01330000 	teqeq	r3, r0
    55c4:	00000079 	andeq	r0, r0, r9, ror r0
    55c8:	01073c01 	tsteq	r7, r1, lsl #24
    55cc:	08004fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, lr}
    55d0:	08005090 	stmdaeq	r0, {r4, r7, ip, lr}
    55d4:	000020b7 	strheq	r2, [r0], -r7
    55d8:	0049e501 	subeq	lr, r9, r1, lsl #10
    55dc:	08363d00 	ldmdaeq	r6!, {r8, sl, fp, ip, sp}
    55e0:	45010000 	strmi	r0, [r1, #-0]
    55e4:	0005a907 	andeq	sl, r5, r7, lsl #18
    55e8:	0020d700 	eoreq	sp, r0, r0, lsl #14
    55ec:	6f744900 	svcvs	0x00744900
    55f0:	45010067 	strmi	r0, [r1, #-103]	; 0x67
    55f4:	0005a907 	andeq	sl, r5, r7, lsl #18
    55f8:	0020f600 	eoreq	pc, r0, r0, lsl #12
    55fc:	12354800 	eorsne	r4, r5, #0
    5600:	500c0000 	andpl	r0, ip, r0
    5604:	50120800 	andspl	r0, r2, r0, lsl #16
    5608:	4b010800 	blmi	47610 <__Stack_Size+0x47210>
    560c:	00489d07 	subeq	r9, r8, r7, lsl #26
    5610:	12443e00 	subne	r3, r4, #0
    5614:	2b640000 	blcs	190561c <__Stack_Size+0x190521c>
    5618:	08005012 	stmdaeq	r0, {r1, r4, ip, lr}
    561c:	00001200 	andeq	r1, r0, r0, lsl #4
    5620:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    5624:	0186a00c 	orreq	sl, r6, ip
    5628:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    562c:	00001235 	andeq	r1, r0, r5, lsr r2
    5630:	0800501e 	stmdaeq	r0, {r1, r2, r3, r4, ip, lr}
    5634:	000001a8 	andeq	r0, r0, r8, lsr #3
    5638:	cb075101 	blgt	1d9a44 <__Stack_Size+0x1d9644>
    563c:	3e000048 	cdpcc	0, 0, cr0, cr0, cr8, {2}
    5640:	00001244 	andeq	r1, r0, r4, asr #4
    5644:	50282b64 	eorpl	r2, r8, r4, ror #22
    5648:	12000800 	andne	r0, r0, #0
    564c:	01290000 	teqeq	r9, r0
    5650:	a00c0550 	andge	r0, ip, r0, asr r5
    5654:	00000186 	andeq	r0, r0, r6, lsl #3
    5658:	12353800 	eorsne	r3, r5, #0
    565c:	50600000 	rsbpl	r0, r0, r0
    5660:	01c00800 	biceq	r0, r0, r0, lsl #16
    5664:	5b010000 	blpl	4566c <__Stack_Size+0x4526c>
    5668:	0048fc07 	subeq	pc, r8, r7, lsl #24
    566c:	12442200 	subne	r2, r4, #0
    5670:	21210000 	teqcs	r1, r0
    5674:	6a2b0000 	bvs	ac567c <__Stack_Size+0xac527c>
    5678:	00080050 	andeq	r0, r8, r0, asr r0
    567c:	29000012 	stmdbcs	r0, {r1, r4}
    5680:	0c055001 	stceq	0, cr5, [r5], {1}
    5684:	0007a120 	andeq	sl, r7, r0, lsr #2
    5688:	35480000 	strbcc	r0, [r8, #-0]
    568c:	6c000012 	stcvs	0, cr0, [r0], {18}
    5690:	72080050 	andvc	r0, r8, #80	; 0x50
    5694:	01080050 	qaddeq	r0, r0, r8
    5698:	492a075e 	stmdbmi	sl!, {r1, r2, r3, r4, r6, r8, r9, sl}
    569c:	443e0000 	ldrtmi	r0, [lr], #-0
    56a0:	64000012 	strvs	r0, [r0], #-18
    56a4:	0050722b 	subseq	r7, r0, fp, lsr #4
    56a8:	00120008 	andseq	r0, r2, r8
    56ac:	50012900 	andpl	r2, r1, r0, lsl #18
    56b0:	86a00c05 	strthi	r0, [r0], r5, lsl #24
    56b4:	00000001 	andeq	r0, r0, r1
    56b8:	004ffc2a 	subeq	pc, pc, sl, lsr #24
    56bc:	0041c808 	subeq	ip, r1, r8, lsl #16
    56c0:	50002a00 	andpl	r2, r0, r0, lsl #20
    56c4:	433e0800 	teqmi	lr, #0
    56c8:	042a0000 	strteq	r0, [sl], #-0
    56cc:	d2080050 	andle	r0, r8, #80	; 0x50
    56d0:	2a000043 	bcs	57e4 <__Stack_Size+0x53e4>
    56d4:	08005008 	stmdaeq	r0, {r3, ip, lr}
    56d8:	00004189 	andeq	r4, r0, r9, lsl #3
    56dc:	00500c2a 	subseq	r0, r0, sl, lsr #24
    56e0:	00464508 	subeq	r4, r6, r8, lsl #10
    56e4:	501a2a00 	andspl	r2, sl, r0, lsl #20
    56e8:	2e380800 	cdpcs	8, 3, cr0, cr8, cr0, {0}
    56ec:	302a0000 	eorcc	r0, sl, r0
    56f0:	63080050 	movwvs	r0, #32848	; 0x8050
    56f4:	2800001d 	stmdacs	r0, {r0, r2, r3, r4}
    56f8:	08005042 	stmdaeq	r0, {r1, r6, ip, lr}
    56fc:	00000a97 	muleq	r0, r7, sl
    5700:	00004984 	andeq	r4, r0, r4, lsl #19
    5704:	04510129 	ldrbeq	r0, [r1], #-297	; 0x129
    5708:	1a310074 	bne	c458e0 <__Stack_Size+0xc454e0>
    570c:	01500129 	cmpeq	r0, r9, lsr #2
    5710:	4a280033 	bmi	a057e4 <__Stack_Size+0xa053e4>
    5714:	97080050 	smlsdls	r8, r0, r0, r0
    5718:	9c00000a 	stcls	0, cr0, [r0], {10}
    571c:	29000049 	stmdbcs	r0, {r0, r3, r6}
    5720:	30015101 	andcc	r5, r1, r1, lsl #2
    5724:	01500129 	cmpeq	r0, r9, lsr #2
    5728:	54280032 	strtpl	r0, [r8], #-50	; 0x32
    572c:	97080050 	smlsdls	r8, r0, r0, r0
    5730:	b700000a 	strlt	r0, [r0, -sl]
    5734:	29000049 	stmdbcs	r0, {r0, r3, r6}
    5738:	74045101 	strvc	r5, [r4], #-257	; 0x101
    573c:	291a3400 	ldmdbcs	sl, {sl, ip, sp}
    5740:	31015001 	tstcc	r1, r1
    5744:	50602800 	rsbpl	r2, r0, r0, lsl #16
    5748:	0a970800 	beq	fe5c7750 <SCS_BASE+0x1e5b9750>
    574c:	49d00000 	ldmibmi	r0, {}^	; <UNPREDICTABLE>
    5750:	01290000 	teqeq	r9, r0
    5754:	00750251 	rsbseq	r0, r5, r1, asr r2
    5758:	01500129 	cmpeq	r0, r9, lsr #2
    575c:	7c2d0030 	stcvc	0, cr0, [sp], #-192	; 0xffffff40
    5760:	01080050 	qaddeq	r0, r0, r8
    5764:	00003419 	andeq	r3, r0, r9, lsl r4
    5768:	05500129 	ldrbeq	r0, [r0, #-297]	; 0x129
    576c:	006e6703 	rsbeq	r6, lr, r3, lsl #14
    5770:	52000008 	andpl	r0, r0, #8
    5774:	0000059e 	muleq	r0, lr, r5
    5778:	000049f5 	strdeq	r4, [r0], -r5
    577c:	00006453 	andeq	r6, r0, r3, asr r4
    5780:	47009f00 	strmi	r9, [r0, -r0, lsl #30]
    5784:	0000000a 	andeq	r0, r0, sl
    5788:	e5017108 	str	r7, [r1, #-264]	; 0x108
    578c:	05000049 	streq	r0, [r0, #-73]	; 0x49
    5790:	00021d03 	andeq	r1, r2, r3, lsl #26
    5794:	059e5220 	ldreq	r5, [lr, #544]	; 0x220
    5798:	4a170000 	bmi	5c57a0 <__Stack_Size+0x5c53a0>
    579c:	64530000 	ldrbvs	r0, [r3], #-0
    57a0:	45000000 	strmi	r0, [r0, #-0]
    57a4:	025a4700 	subseq	r4, sl, #0
    57a8:	72080000 	andvc	r0, r8, #0
    57ac:	004a0701 	subeq	r0, sl, r1, lsl #14
    57b0:	bf030500 	svclt	0x00030500
    57b4:	47200002 	strmi	r0, [r0, -r2]!
    57b8:	00000127 	andeq	r0, r0, r7, lsr #2
    57bc:	9e017308 	cdpls	3, 0, cr7, cr1, cr8, {0}
    57c0:	05000005 	streq	r0, [r0, #-5]
    57c4:	0002be03 	andeq	fp, r2, r3, lsl #28
    57c8:	009f4720 	addseq	r4, pc, r0, lsr #14
    57cc:	74080000 	strvc	r0, [r8], #-0
    57d0:	00059e01 	andeq	r9, r5, r1, lsl #28
    57d4:	bd030500 	cfstr32lt	mvfx0, [r3, #-0]
    57d8:	47200002 	strmi	r0, [r0, -r2]!
    57dc:	000000ef 	andeq	r0, r0, pc, ror #1
    57e0:	5f017608 	svcpl	0x00017608
    57e4:	0500004a 	streq	r0, [r0, #-74]	; 0x4a
    57e8:	0000c803 	andeq	ip, r0, r3, lsl #16
    57ec:	05a90820 	streq	r0, [r9, #2080]!	; 0x820
    57f0:	a0470000 	subge	r0, r7, r0
    57f4:	08000002 	stmdaeq	r0, {r1}
    57f8:	4a760177 	bmi	1d85ddc <__Stack_Size+0x1d859dc>
    57fc:	03050000 	movweq	r0, #20480	; 0x5000
    5800:	2000021c 	andcs	r0, r0, ip, lsl r2
    5804:	00059e08 	andeq	r9, r5, r8, lsl #28
    5808:	0b7f4700 	bleq	1fd7410 <__Stack_Size+0x1fd7010>
    580c:	a7010000 	strge	r0, [r1, -r0]
    5810:	004a5f03 	subeq	r5, sl, r3, lsl #30
    5814:	1a030500 	bne	c6c1c <__Stack_Size+0xc681c>
    5818:	47200002 	strmi	r0, [r0, -r2]!
    581c:	00001a1f 	andeq	r1, r0, pc, lsl sl
    5820:	5f03a701 	svcpl	0x0003a701
    5824:	0500004a 	streq	r0, [r0, #-74]	; 0x4a
    5828:	00021803 	andeq	r1, r2, r3, lsl #16
    582c:	059e5220 	ldreq	r5, [lr, #544]	; 0x220
    5830:	4aaf0000 	bmi	febc5838 <SCS_BASE+0x1ebb7838>
    5834:	64530000 	ldrbvs	r0, [r3], #-0
    5838:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    583c:	0baf4700 	bleq	febd7444 <SCS_BASE+0x1ebc9444>
    5840:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    5844:	004ac103 	subeq	ip, sl, r3, lsl #2
    5848:	18030500 	stmdane	r3, {r8, sl}
    584c:	08200001 	stmdaeq	r0!, {r0}
    5850:	00004a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    5854:	000dfb47 	andeq	pc, sp, r7, asr #22
    5858:	05200100 	streq	r0, [r0, #-256]!	; 0x100
    585c:	00004a5f 	andeq	r4, r0, pc, asr sl
    5860:	03060305 	movweq	r0, #25349	; 0x6305
    5864:	0b472000 	bleq	11cd86c <__Stack_Size+0x11cd46c>
    5868:	01000019 	tsteq	r0, r9, lsl r0
    586c:	4a5f0520 	bmi	17c6cf4 <__Stack_Size+0x17c68f4>
    5870:	03050000 	movweq	r0, #20480	; 0x5000
    5874:	20000308 	andcs	r0, r0, r8, lsl #6
    5878:	00059e52 	andeq	r9, r5, r2, asr lr
    587c:	004afa00 	subeq	pc, sl, r0, lsl #20
    5880:	00645300 	rsbeq	r5, r4, r0, lsl #6
    5884:	007f0000 	rsbseq	r0, pc, r0
    5888:	000dbb47 	andeq	fp, sp, r7, asr #22
    588c:	05210100 	streq	r0, [r1, #-256]!	; 0x100
    5890:	00004b0c 	andeq	r4, r0, ip, lsl #22
    5894:	030a0305 	movweq	r0, #41733	; 0xa305
    5898:	ea082000 	b	20d8a0 <__Stack_Size+0x20d4a0>
    589c:	4700004a 	strmi	r0, [r0, -sl, asr #32]
    58a0:	0000091e 	andeq	r0, r0, lr, lsl r9
    58a4:	76052201 	strvc	r2, [r5], -r1, lsl #4
    58a8:	0500004a 	streq	r0, [r0, #-74]	; 0x4a
    58ac:	00038a03 	andeq	r8, r3, r3, lsl #20
    58b0:	0d595d20 	ldcleq	13, cr5, [r9, #-128]	; 0xffffff80
    58b4:	04010000 	streq	r0, [r1], #-0
    58b8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    58bc:	d0030501 	andle	r0, r3, r1, lsl #10
    58c0:	5d200000 	stcpl	0, cr0, [r0, #-0]
    58c4:	00001b90 	muleq	r0, r0, fp
    58c8:	05b40a01 	ldreq	r0, [r4, #2561]!	; 0xa01
    58cc:	05010000 	streq	r0, [r1, #-0]
    58d0:	0000cc03 	andeq	ip, r0, r3, lsl #24
    58d4:	09205220 	stmdbeq	r0!, {r5, r9, ip, lr}
    58d8:	4b570000 	blmi	15c58e0 <__Stack_Size+0x15c54e0>
    58dc:	64530000 	ldrbvs	r0, [r3], #-0
    58e0:	05000000 	streq	r0, [r0, #-0]
    58e4:	081a5d00 	ldmdaeq	sl, {r8, sl, fp, ip, lr}
    58e8:	11010000 	mrsne	r0, (UNDEF: 1)
    58ec:	00004b47 	andeq	r4, r0, r7, asr #22
    58f0:	38030501 	stmdacc	r3, {r0, r8, sl}
    58f4:	52200000 	eorpl	r0, r0, #0
    58f8:	00000920 	andeq	r0, r0, r0, lsr #18
    58fc:	00004b79 	andeq	r4, r0, r9, ror fp
    5900:	00006453 	andeq	r6, r0, r3, asr r4
    5904:	5d000600 	stcpl	6, cr0, [r0, #-0]
    5908:	00000ad3 	ldrdeq	r0, [r0], -r3
    590c:	4b691901 	blmi	1a4bd18 <__Stack_Size+0x1a4b918>
    5910:	05010000 	streq	r0, [r1, #-0]
    5914:	00000003 	andeq	r0, r0, r3
    5918:	09205220 	stmdbeq	r0!, {r5, r9, ip, lr}
    591c:	4b9b0000 	blmi	fe6c5924 <SCS_BASE+0x1e6b7924>
    5920:	64530000 	ldrbvs	r0, [r3], #-0
    5924:	0b000000 	bleq	592c <__Stack_Size+0x552c>
    5928:	1a595d00 	bne	165cd30 <__Stack_Size+0x165c930>
    592c:	22010000 	andcs	r0, r1, #0
    5930:	00004b8b 	andeq	r4, r0, fp, lsl #23
    5934:	68030501 	stmdavs	r3, {r0, r8, sl}
    5938:	5d200000 	stcpl	0, cr0, [r0, #-0]
    593c:	00000d4e 	andeq	r0, r0, lr, asr #26
    5940:	059e3401 	ldreq	r3, [lr, #1025]	; 0x401
    5944:	05010000 	streq	r0, [r1, #-0]
    5948:	00038b03 	andeq	r8, r3, r3, lsl #22
    594c:	18ed5d20 	stmiane	sp!, {r5, r8, sl, fp, ip, lr}^
    5950:	36010000 	strcc	r0, [r1], -r0
    5954:	00000a67 	andeq	r0, r0, r7, ror #20
    5958:	d4030501 	strle	r0, [r3], #-1281	; 0x501
    595c:	5d200000 	stcpl	0, cr0, [r0, #-0]
    5960:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
    5964:	0b8d3701 	bleq	fe353570 <SCS_BASE+0x1e345570>
    5968:	05010000 	streq	r0, [r1, #-0]
    596c:	00030503 	andeq	r0, r3, r3, lsl #10
    5970:	11595d20 	cmpne	r9, r0, lsr #26
    5974:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    5978:	00004a76 	andeq	r4, r0, r6, ror sl
    597c:	e6030501 	str	r0, [r3], -r1, lsl #10
    5980:	5d200000 	stcpl	0, cr0, [r0, #-0]
    5984:	00000931 	andeq	r0, r0, r1, lsr r9
    5988:	4a763901 	bmi	1d93d94 <__Stack_Size+0x1d93994>
    598c:	05010000 	streq	r0, [r1, #-0]
    5990:	0000e503 	andeq	lr, r0, r3, lsl #10
    5994:	059e5220 	ldreq	r5, [lr, #544]	; 0x220
    5998:	4c170000 	ldcmi	0, cr0, [r7], {-0}
    599c:	64530000 	ldrbvs	r0, [r3], #-0
    59a0:	20000000 	andcs	r0, r0, r0
    59a4:	19ab5d00 	stmibne	fp!, {r8, sl, fp, ip, lr}
    59a8:	3a010000 	bcc	459b0 <__Stack_Size+0x455b0>
    59ac:	00004c29 	andeq	r4, r0, r9, lsr #24
    59b0:	e7030501 	str	r0, [r3, -r1, lsl #10]
    59b4:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    59b8:	00004c07 	andeq	r4, r0, r7, lsl #24
    59bc:	00189f5e 	andseq	r9, r8, lr, asr pc
    59c0:	03250100 	teqeq	r5, #0
    59c4:	00004c41 	andeq	r4, r0, r1, asr #24
    59c8:	08030501 	stmdaeq	r3, {r0, r8, sl}
    59cc:	08200001 	stmdaeq	r0!, {r0}
    59d0:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    59d4:	00059e52 	andeq	r9, r5, r2, asr lr
    59d8:	004c5600 	subeq	r5, ip, r0, lsl #12
    59dc:	00645300 	rsbeq	r5, r4, r0, lsl #6
    59e0:	00190000 	andseq	r0, r9, r0
    59e4:	00139f5d 	andseq	r9, r3, sp, asr pc
    59e8:	68300100 	ldmdavs	r0!, {r8}
    59ec:	0100004c 	tsteq	r0, ip, asr #32
    59f0:	67880305 	strvs	r0, [r8, r5, lsl #6]
    59f4:	46050800 	strmi	r0, [r5], -r0, lsl #16
    59f8:	5200004c 	andpl	r0, r0, #76	; 0x4c
    59fc:	0000059e 	muleq	r0, lr, r5
    5a00:	00004c7d 	andeq	r4, r0, sp, ror ip
    5a04:	00006453 	andeq	r6, r0, r3, asr r4
    5a08:	5d001100 	stfpls	f1, [r0, #-0]
    5a0c:	00001564 	andeq	r1, r0, r4, ror #10
    5a10:	4c8f3101 	stfmis	f3, [pc], {1}
    5a14:	05010000 	streq	r0, [r1, #-0]
    5a18:	00677603 	rsbeq	r7, r7, r3, lsl #12
    5a1c:	4c6d0508 	cfstr64mi	mvdx0, [sp], #-32	; 0xffffffe0
    5a20:	d75d0000 	ldrble	r0, [sp, -r0]
    5a24:	01000012 	tsteq	r0, r2, lsl r0
    5a28:	004ca632 	subeq	sl, ip, r2, lsr r6
    5a2c:	03050100 	movweq	r0, #20736	; 0x5100
    5a30:	08006775 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, sl, sp, lr}
    5a34:	00059e05 	andeq	r9, r5, r5, lsl #28
    5a38:	1b205e00 	blne	81d240 <__Stack_Size+0x81ce40>
    5a3c:	93010000 	movwls	r0, #4096	; 0x1000
    5a40:	0000aa02 	andeq	sl, r0, r2, lsl #20
    5a44:	03050100 	movweq	r0, #20736	; 0x5100
    5a48:	2000010c 	andcs	r0, r0, ip, lsl #2
    5a4c:	0009675e 	andeq	r6, r9, lr, asr r7
    5a50:	03240100 	teqeq	r4, #0
    5a54:	00004c41 	andeq	r4, r0, r1, asr #24
    5a58:	e0030501 	and	r0, r3, r1, lsl #10
    5a5c:	5e200000 	cdppl	0, 2, cr0, cr0, cr0, {0}
    5a60:	00000ee1 	andeq	r0, r0, r1, ror #29
    5a64:	41032601 	tstmi	r3, r1, lsl #12
    5a68:	0100004c 	tsteq	r0, ip, asr #32
    5a6c:	01100305 	tsteq	r0, r5, lsl #6
    5a70:	775e2000 	ldrbvc	r2, [lr, -r0]
    5a74:	0100000f 	tsteq	r0, pc
    5a78:	4c410327 	mcrrmi	3, 2, r0, r1, cr7
    5a7c:	05010000 	streq	r0, [r1, #-0]
    5a80:	00011403 	andeq	r1, r1, r3, lsl #8
    5a84:	19265e20 	stmdbne	r6!, {r5, r9, sl, fp, ip, lr}
    5a88:	2a010000 	bcs	45a90 <__Stack_Size+0x45690>
    5a8c:	004a7603 	subeq	r7, sl, r3, lsl #12
    5a90:	03050100 	movweq	r0, #20736	; 0x5100
    5a94:	200000e4 	andcs	r0, r0, r4, ror #1
    5a98:	1672015f 			; <UNDEFINED> instruction: 0x1672015f
    5a9c:	e1050000 	mrs	r0, (UNDEF: 5)
    5aa0:	4d230101 	stfmis	f0, [r3, #-4]!
    5aa4:	1a600000 	bne	1805aac <__Stack_Size+0x18056ac>
    5aa8:	60000009 	andvs	r0, r0, r9
    5aac:	00000095 	muleq	r0, r5, r0
    5ab0:	1f015f00 	svcne	0x00015f00
    5ab4:	0700000e 	streq	r0, [r0, -lr]
    5ab8:	3c0101ec 	stfccs	f0, [r1], {236}	; 0xec
    5abc:	6000004d 	andvs	r0, r0, sp, asr #32
    5ac0:	00004d3c 	andeq	r4, r0, ip, lsr sp
    5ac4:	00009560 	andeq	r9, r0, r0, ror #10
    5ac8:	04040000 	streq	r0, [r4], #-0
    5acc:	000003cd 	andeq	r0, r0, sp, asr #7
    5ad0:	13100161 	tstne	r0, #1073741848	; 0x40000018
    5ad4:	f6070000 			; <UNDEFINED> instruction: 0xf6070000
    5ad8:	0000f401 	andeq	pc, r0, r1, lsl #8
    5adc:	4d5f0100 	ldfmie	f0, [pc, #-0]	; 5ae4 <__Stack_Size+0x56e4>
    5ae0:	3c600000 	stclcc	0, cr0, [r0], #-0
    5ae4:	6000004d 	andvs	r0, r0, sp, asr #32
    5ae8:	00000095 	muleq	r0, r5, r0
    5aec:	4c015f00 	stcmi	15, cr5, [r1], {-0}
    5af0:	0500001a 	streq	r0, [r0, #-26]
    5af4:	780101e0 	stmdavc	r1, {r5, r6, r7, r8}
    5af8:	6000004d 	andvs	r0, r0, sp, asr #32
    5afc:	0000091a 	andeq	r0, r0, sl, lsl r9
    5b00:	00009560 	andeq	r9, r0, r0, ror #10
    5b04:	015f0000 	cmpeq	pc, r0
    5b08:	00001706 	andeq	r1, r0, r6, lsl #14
    5b0c:	0101e407 	tsteq	r1, r7, lsl #8
    5b10:	00004d91 	muleq	r0, r1, sp
    5b14:	004d3c60 	subeq	r3, sp, r0, ror #24
    5b18:	011f6000 	tsteq	pc, r0
    5b1c:	61000000 	mrsvs	r0, (UNDEF: 0)
    5b20:	00106e01 	andseq	r6, r0, r1, lsl #28
    5b24:	01dc0500 	bicseq	r0, ip, r0, lsl #10
    5b28:	000000a0 	andeq	r0, r0, r0, lsr #1
    5b2c:	004dae01 	subeq	sl, sp, r1, lsl #28
    5b30:	091a6000 	ldmdbeq	sl, {sp, lr}
    5b34:	95600000 	strbls	r0, [r0, #-0]!
    5b38:	00000000 	andeq	r0, r0, r0
    5b3c:	1346015f 	movtne	r0, #24927	; 0x615f
    5b40:	390a0000 	stmdbcc	sl, {}	; <UNPREDICTABLE>
    5b44:	4dc20101 	stfmie	f0, [r2, #4]
    5b48:	8a600000 	bhi	1805b50 <__Stack_Size+0x1805750>
    5b4c:	00000000 	andeq	r0, r0, r0
    5b50:	0da20162 	stfeqs	f0, [r2, #392]!	; 0x188
    5b54:	13040000 	movwne	r0, #16384	; 0x4000
    5b58:	e6010101 	str	r0, [r1], -r1, lsl #2
    5b5c:	6000004d 	andvs	r0, r0, sp, asr #32
    5b60:	00004de6 	andeq	r4, r0, r6, ror #27
    5b64:	0000a060 	andeq	sl, r0, r0, rrx
    5b68:	00a06000 	adceq	r6, r0, r0
    5b6c:	a0600000 	rsbge	r0, r0, r0
    5b70:	00000000 	andeq	r0, r0, r0
    5b74:	02690404 	rsbeq	r0, r9, #67108864	; 0x4000000
    5b78:	01620000 	cmneq	r2, r0
    5b7c:	00001878 	andeq	r1, r0, r8, ror r8
    5b80:	01010f04 	tsteq	r1, r4, lsl #30
    5b84:	004e0601 	subeq	r0, lr, r1, lsl #12
    5b88:	4de66000 	stclmi	0, cr6, [r6]
    5b8c:	1f600000 	svcne	0x00600000
    5b90:	00000001 	andeq	r0, r0, r1
    5b94:	17d50163 	ldrbne	r0, [r5, r3, ror #2]
    5b98:	15040000 	strne	r0, [r4, #-0]
    5b9c:	00950101 	addseq	r0, r5, r1, lsl #2
    5ba0:	1f010000 	svcne	0x00010000
    5ba4:	6000004e 	andvs	r0, r0, lr, asr #32
    5ba8:	00004de6 	andeq	r4, r0, r6, ror #27
    5bac:	e0015f00 	and	r5, r1, r0, lsl #30
    5bb0:	07000008 	streq	r0, [r0, -r8]
    5bb4:	330101e1 	movwcc	r0, #4577	; 0x11e1
    5bb8:	6000004e 	andvs	r0, r0, lr, asr #32
    5bbc:	00004e33 	andeq	r4, r0, r3, lsr lr
    5bc0:	93040400 	movwls	r0, #17408	; 0x4400
    5bc4:	5f000005 	svcpl	0x00000005
    5bc8:	001a2901 	andseq	r2, sl, r1, lsl #18
    5bcc:	01df0700 	bicseq	r0, pc, r0, lsl #14
    5bd0:	004e4d01 	subeq	r4, lr, r1, lsl #26
    5bd4:	4d3c6000 	ldcmi	0, cr6, [ip, #-0]
    5bd8:	5f000000 	svcpl	0x00000000
    5bdc:	000ebd01 	andeq	fp, lr, r1, lsl #26
    5be0:	01e00700 	mvneq	r0, r0, lsl #14
    5be4:	004e6601 	subeq	r6, lr, r1, lsl #12
    5be8:	4d3c6000 	ldcmi	0, cr6, [ip, #-0]
    5bec:	33600000 	cmncc	r0, #0
    5bf0:	0000004e 	andeq	r0, r0, lr, asr #32
    5bf4:	0e3a015f 	mrceq	1, 1, r0, cr10, cr15, {2}
    5bf8:	e5070000 	str	r0, [r7, #-0]
    5bfc:	4e840101 	rmfmis	f0, f4, f1
    5c00:	3c600000 	stclcc	0, cr0, [r0], #-0
    5c04:	6000004d 	andvs	r0, r0, sp, asr #32
    5c08:	00000095 	muleq	r0, r5, r0
    5c0c:	00011f60 	andeq	r1, r1, r0, ror #30
    5c10:	01610000 	cmneq	r1, r0
    5c14:	00000a98 	muleq	r0, r8, sl
    5c18:	ff01f807 			; <UNDEFINED> instruction: 0xff01f807
    5c1c:	01000000 	mrseq	r0, (UNDEF: 0)
    5c20:	00004ea1 	andeq	r4, r0, r1, lsr #29
    5c24:	004d3c60 	subeq	r3, sp, r0, ror #24
    5c28:	00956000 	addseq	r6, r5, r0
    5c2c:	61000000 	mrsvs	r0, (UNDEF: 0)
    5c30:	00132d01 	andseq	r2, r3, r1, lsl #26
    5c34:	01ed0700 	mvneq	r0, r0, lsl #14
    5c38:	00000095 	muleq	r0, r5, r0
    5c3c:	004eb901 	subeq	fp, lr, r1, lsl #18
    5c40:	4d3c6000 	ldcmi	0, cr6, [ip, #-0]
    5c44:	5f000000 	svcpl	0x00000000
    5c48:	000d3c01 	andeq	r3, sp, r1, lsl #24
    5c4c:	01380a00 	teqeq	r8, r0, lsl #20
    5c50:	004ecd01 	subeq	ip, lr, r1, lsl #26
    5c54:	008a6000 	addeq	r6, sl, r0
    5c58:	5f000000 	svcpl	0x00000000
    5c5c:	00174001 	andseq	r4, r7, r1
    5c60:	013a0a00 	teqeq	sl, r0, lsl #20
    5c64:	004ee101 	subeq	lr, lr, r1, lsl #2
    5c68:	011f6000 	tsteq	pc, r0
    5c6c:	64000000 	strvs	r0, [r0], #-0
    5c70:	000aed01 	andeq	lr, sl, r1, lsl #26
    5c74:	01fd0b00 	mvnseq	r0, r0, lsl #22
    5c78:	d3015f01 	movwle	r5, #7937	; 0x1f01
    5c7c:	0b00000e 	bleq	5cbc <__Stack_Size+0x58bc>
    5c80:	ff0101fe 			; <UNDEFINED> instruction: 0xff0101fe
    5c84:	6000004e 	andvs	r0, r0, lr, asr #32
    5c88:	0000008a 	andeq	r0, r0, sl, lsl #1
    5c8c:	c3016500 	movwgt	r6, #5376	; 0x1500
    5c90:	0b000016 	bleq	5cf0 <__Stack_Size+0x58f0>
    5c94:	013f01ff 			; <UNDEFINED> instruction: 0x013f01ff
    5c98:	62010000 	andvs	r0, r1, #0
    5c9c:	0010cf01 	andseq	ip, r0, r1, lsl #30
    5ca0:	01120b00 	tsteq	r2, r0, lsl #22
    5ca4:	4f270101 	svcmi	0x00270101
    5ca8:	8a600000 	bhi	1805cb0 <__Stack_Size+0x18058b0>
    5cac:	60000000 	andvs	r0, r0, r0
    5cb0:	0000011f 	andeq	r0, r0, pc, lsl r1
    5cb4:	0c016200 	sfmeq	f6, 4, [r1], {-0}
    5cb8:	0b000011 	bleq	5d04 <__Stack_Size+0x5904>
    5cbc:	01010113 	tsteq	r1, r3, lsl r1
    5cc0:	00004f41 	andeq	r4, r0, r1, asr #30
    5cc4:	00008a60 	andeq	r8, r0, r0, ror #20
    5cc8:	011f6000 	tsteq	pc, r0
    5ccc:	5f000000 	svcpl	0x00000000
    5cd0:	00165001 	andseq	r5, r6, r1
    5cd4:	01420c00 	cmpeq	r2, r0, lsl #24
    5cd8:	004f5501 	subeq	r5, pc, r1, lsl #10
    5cdc:	011f6000 	tsteq	pc, r0
    5ce0:	5f000000 	svcpl	0x00000000
    5ce4:	00108401 	andseq	r8, r0, r1, lsl #8
    5ce8:	01b60d00 			; <UNDEFINED> instruction: 0x01b60d00
    5cec:	004f6901 	subeq	r6, pc, r1, lsl #18
    5cf0:	008a6000 	addeq	r6, sl, r0
    5cf4:	5f000000 	svcpl	0x00000000
    5cf8:	00084e01 	andeq	r4, r8, r1, lsl #28
    5cfc:	01b40d00 			; <UNDEFINED> instruction: 0x01b40d00
    5d00:	004f7d01 	subeq	r7, pc, r1, lsl #26
    5d04:	008a6000 	addeq	r6, sl, r0
    5d08:	62000000 	andvs	r0, r0, #0
    5d0c:	000eae01 	andeq	sl, lr, r1, lsl #28
    5d10:	01060b00 	tsteq	r6, r0, lsl #22
    5d14:	4f920101 	svcmi	0x00920101
    5d18:	8a600000 	bhi	1805d20 <__Stack_Size+0x1805920>
    5d1c:	00000000 	andeq	r0, r0, r0
    5d20:	0d920162 	ldfeqs	f0, [r2, #392]	; 0x188
    5d24:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    5d28:	a7010101 	strge	r0, [r1, -r1, lsl #2]
    5d2c:	6000004f 	andvs	r0, r0, pc, asr #32
    5d30:	0000008a 	andeq	r0, r0, sl, lsl #1
    5d34:	4a016200 	bmi	5e53c <__Stack_Size+0x5e13c>
    5d38:	0b00000a 	bleq	5d68 <__Stack_Size+0x5968>
    5d3c:	01010107 	tsteq	r1, r7, lsl #2
    5d40:	00004fbc 			; <UNDEFINED> instruction: 0x00004fbc
    5d44:	00008a60 	andeq	r8, r0, r0, ror #20
    5d48:	01620000 	cmneq	r2, r0
    5d4c:	00001bab 	andeq	r1, r0, fp, lsr #23
    5d50:	0101020b 	tsteq	r1, fp, lsl #4
    5d54:	004fd601 	subeq	sp, pc, r1, lsl #12
    5d58:	008a6000 	addeq	r6, sl, r0
    5d5c:	8a600000 	bhi	1805d64 <__Stack_Size+0x1805964>
    5d60:	00000000 	andeq	r0, r0, r0
    5d64:	16b20162 	ldrtne	r0, [r2], r2, ror #2
    5d68:	030b0000 	movweq	r0, #45056	; 0xb000
    5d6c:	eb010101 	bl	46178 <__Stack_Size+0x45d78>
    5d70:	6000004f 	andvs	r0, r0, pc, asr #32
    5d74:	0000011f 	andeq	r0, r0, pc, lsl r1
    5d78:	77016300 	strvc	r6, [r1, -r0, lsl #6]
    5d7c:	0b000012 	bleq	5dcc <__Stack_Size+0x59cc>
    5d80:	f4010119 	vst4.8	{d0,d2,d4,d6}, [r1 :64], r9
    5d84:	01000000 	mrseq	r0, (UNDEF: 0)
    5d88:	00005004 	andeq	r5, r0, r4
    5d8c:	0000a060 	andeq	sl, r0, r0, rrx
    5d90:	01620000 	cmneq	r2, r0
    5d94:	00001b7f 	andeq	r1, r0, pc, ror fp
    5d98:	0101040b 	tsteq	r1, fp, lsl #8
    5d9c:	00501901 	subseq	r1, r0, r1, lsl #18
    5da0:	008a6000 	addeq	r6, sl, r0
    5da4:	66000000 	strvs	r0, [r0], -r0
    5da8:	000ef501 	andeq	pc, lr, r1, lsl #10
    5dac:	01050b00 	tsteq	r5, r0, lsl #22
    5db0:	0000a001 	andeq	sl, r0, r1
    5db4:	01620100 	cmneq	r2, r0, lsl #2
    5db8:	000010ae 	andeq	r1, r0, lr, lsr #1
    5dbc:	01010f06 	tsteq	r1, r6, lsl #30
    5dc0:	00504201 	subseq	r4, r0, r1, lsl #4
    5dc4:	008a6000 	addeq	r6, sl, r0
    5dc8:	8a600000 	bhi	1805dd0 <__Stack_Size+0x18059d0>
    5dcc:	00000000 	andeq	r0, r0, r0
    5dd0:	0cc9015f 	stfeqe	f0, [r9], {95}	; 0x5f
    5dd4:	ff060000 			; <UNDEFINED> instruction: 0xff060000
    5dd8:	50560101 	subspl	r0, r6, r1, lsl #2
    5ddc:	8a600000 	bhi	1805de4 <__Stack_Size+0x18059e4>
    5de0:	00000000 	andeq	r0, r0, r0
    5de4:	15e40162 	strbne	r0, [r4, #354]!	; 0x162
    5de8:	00060000 	andeq	r0, r6, r0
    5dec:	6b010101 	blvs	461f8 <__Stack_Size+0x45df8>
    5df0:	60000050 	andvs	r0, r0, r0, asr r0
    5df4:	0000506b 	andeq	r5, r0, fp, rrx
    5df8:	2b040400 	blcs	106e00 <__Stack_Size+0x106a00>
    5dfc:	5f000005 	svcpl	0x00000005
    5e00:	000b0801 	andeq	r0, fp, r1, lsl #16
    5e04:	01db0500 	bicseq	r0, fp, r0, lsl #10
    5e08:	00508501 	subseq	r8, r0, r1, lsl #10
    5e0c:	50856000 	addpl	r6, r5, r0
    5e10:	04000000 	streq	r0, [r0], #-0
    5e14:	0004df04 	andeq	sp, r4, r4, lsl #30
    5e18:	c8015f00 	stmdagt	r1, {r8, r9, sl, fp, ip, lr}
    5e1c:	05000015 	streq	r0, [r0, #-21]
    5e20:	a40101da 	strge	r0, [r1], #-474	; 0x1da
    5e24:	60000050 	andvs	r0, r0, r0, asr r0
    5e28:	0000091a 	andeq	r0, r0, sl, lsl r9
    5e2c:	00508560 	subseq	r8, r0, r0, ror #10
    5e30:	015f0000 	cmpeq	pc, r0
    5e34:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
    5e38:	0101e705 	tsteq	r1, r5, lsl #14
    5e3c:	000050bd 	strheq	r5, [r0], -sp
    5e40:	00008a60 	andeq	r8, r0, r0, ror #20
    5e44:	011f6000 	tsteq	pc, r0
    5e48:	62000000 	andvs	r0, r0, #0
    5e4c:	001b3001 	andseq	r3, fp, r1
    5e50:	01070400 	tsteq	r7, r0, lsl #8
    5e54:	50d20101 	sbcspl	r0, r2, r1, lsl #2
    5e58:	d2600000 	rsble	r0, r0, #0
    5e5c:	00000050 	andeq	r0, r0, r0, asr r0
    5e60:	04360404 	ldrteq	r0, [r6], #-1028	; 0x404
    5e64:	01620000 	cmneq	r2, r0
    5e68:	0000158f 	andeq	r1, r0, pc, lsl #11
    5e6c:	01010604 	tsteq	r1, r4, lsl #12
    5e70:	0050f201 	subseq	pc, r0, r1, lsl #4
    5e74:	4de66000 	stclmi	0, cr6, [r6]
    5e78:	d2600000 	rsble	r0, r0, #0
    5e7c:	00000050 	andeq	r0, r0, r0, asr r0
    5e80:	16640162 	strbtne	r0, [r4], -r2, ror #2
    5e84:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    5e88:	0c010101 	stfeqs	f0, [r1], {1}
    5e8c:	60000051 	andvs	r0, r0, r1, asr r0
    5e90:	00004de6 	andeq	r4, r0, r6, ror #27
    5e94:	00011f60 	andeq	r1, r1, r0, ror #30
    5e98:	01620000 	cmneq	r2, r0
    5e9c:	0000125d 	andeq	r1, r0, sp, asr r2
    5ea0:	01010b04 	tsteq	r1, r4, lsl #22
    5ea4:	00512101 	subseq	r2, r1, r1, lsl #2
    5ea8:	4de66000 	stclmi	0, cr6, [r6]
    5eac:	63000000 	movwvs	r0, #0
    5eb0:	0013bc01 	andseq	fp, r3, r1, lsl #24
    5eb4:	010c0400 	tsteq	ip, r0, lsl #8
    5eb8:	0000f401 	andeq	pc, r0, r1, lsl #8
    5ebc:	513a0100 	teqpl	sl, r0, lsl #2
    5ec0:	e6600000 	strbt	r0, [r0], -r0
    5ec4:	0000004d 	andeq	r0, r0, sp, asr #32
    5ec8:	09760162 	ldmdbeq	r6!, {r1, r5, r6, r8}^
    5ecc:	0d040000 	stceq	0, cr0, [r4, #-0]
    5ed0:	4f010101 	svcmi	0x00010101
    5ed4:	60000051 	andvs	r0, r0, r1, asr r0
    5ed8:	00004de6 	andeq	r4, r0, r6, ror #27
    5edc:	55016700 	strpl	r6, [r1, #-1792]	; 0x700
    5ee0:	0400000c 	streq	r0, [r0], #-12
    5ee4:	f401010e 	vst4.8	{d0,d2,d4,d6}, [r1], lr
    5ee8:	01000000 	mrseq	r0, (UNDEF: 0)
    5eec:	004de660 	subeq	lr, sp, r0, ror #12
    5ef0:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    5ef4:	0200000c 	andeq	r0, r0, #12
    5ef8:	0008fc00 	andeq	pc, r8, r0, lsl #24
    5efc:	11010400 	tstne	r1, r0, lsl #8
    5f00:	01000002 	tsteq	r0, r2
    5f04:	00001c62 	andeq	r1, r0, r2, ror #24
    5f08:	0000018b 	andeq	r0, r0, fp, lsl #3
    5f0c:	08005090 	stmdaeq	r0, {r4, r7, ip, lr}
    5f10:	080053d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, lr}
    5f14:	00000cfd 	strdeq	r0, [r0], -sp
    5f18:	d3070402 	movwle	r0, #29698	; 0x7402
    5f1c:	02000000 	andeq	r0, r0, #0
    5f20:	015b0601 	cmpeq	fp, r1, lsl #12
    5f24:	01020000 	mrseq	r0, (UNDEF: 2)
    5f28:	00015908 	andeq	r5, r1, r8, lsl #18
    5f2c:	05020200 	streq	r0, [r2, #-512]	; 0x200
    5f30:	00000025 	andeq	r0, r0, r5, lsr #32
    5f34:	c4070202 	strgt	r0, [r7], #-514	; 0x202
    5f38:	03000001 	movweq	r0, #1
    5f3c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5f40:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    5f44:	0000bb05 	andeq	fp, r0, r5, lsl #22
    5f48:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5f4c:	000000c9 	andeq	r0, r0, r9, asr #1
    5f50:	c0050402 	andgt	r0, r5, r2, lsl #8
    5f54:	02000000 	andeq	r0, r0, #0
    5f58:	002f0704 	eoreq	r0, pc, r4, lsl #14
    5f5c:	04020000 	streq	r0, [r2], #-0
    5f60:	0000ce07 	andeq	ip, r0, r7, lsl #28
    5f64:	08010200 	stmdaeq	r1, {r9}
    5f68:	00000162 	andeq	r0, r0, r2, ror #2
    5f6c:	32337504 	eorscc	r7, r3, #16777216	; 0x1000000
    5f70:	6b270200 	blvs	9c6778 <__Stack_Size+0x9c6378>
    5f74:	04000000 	streq	r0, [r0], #-0
    5f78:	00363175 	eorseq	r3, r6, r5, ror r1
    5f7c:	00412802 	subeq	r2, r1, r2, lsl #16
    5f80:	75040000 	strvc	r0, [r4, #-0]
    5f84:	29020038 	stmdbcs	r2, {r3, r4, r5}
    5f88:	00000033 	andeq	r0, r0, r3, lsr r0
    5f8c:	000d7d05 	andeq	r7, sp, r5, lsl #26
    5f90:	a42f0200 	strtge	r0, [pc], #-512	; 5f98 <__Stack_Size+0x5b98>
    5f94:	06000000 	streq	r0, [r0], -r0
    5f98:	0000006b 	andeq	r0, r0, fp, rrx
    5f9c:	39020107 	stmdbcc	r2, {r0, r1, r2, r8}
    5fa0:	000000be 	strheq	r0, [r0], -lr
    5fa4:	000b5908 	andeq	r5, fp, r8, lsl #18
    5fa8:	53090000 	movwpl	r0, #36864	; 0x9000
    5fac:	01005445 	tsteq	r0, r5, asr #8
    5fb0:	127e0500 	rsbsne	r0, lr, #0
    5fb4:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    5fb8:	000000a9 	andeq	r0, r0, r9, lsr #1
    5fbc:	002a9905 	eoreq	r9, sl, r5, lsl #18
    5fc0:	a9390200 	ldmdbge	r9!, {r9}
    5fc4:	07000000 	streq	r0, [r0, -r0]
    5fc8:	e93b0201 	ldmdb	fp!, {r0, r9}
    5fcc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5fd0:	00001517 	andeq	r1, r0, r7, lsl r5
    5fd4:	19350800 	ldmdbne	r5!, {fp}
    5fd8:	00010000 	andeq	r0, r1, r0
    5fdc:	0015ee05 	andseq	lr, r5, r5, lsl #28
    5fe0:	d43b0200 	ldrtle	r0, [fp], #-512	; 0x200
    5fe4:	0a000000 	beq	5fec <__Stack_Size+0x5bec>
    5fe8:	13240350 	teqne	r4, #1073741825	; 0x40000001
    5fec:	0b000002 	bleq	5ffc <__Stack_Size+0x5bfc>
    5ff0:	03005253 	movweq	r5, #595	; 0x253
    5ff4:	00009926 	andeq	r9, r0, r6, lsr #18
    5ff8:	00230200 	eoreq	r0, r3, r0, lsl #4
    5ffc:	3152430b 	cmpcc	r2, fp, lsl #6
    6000:	99270300 	stmdbls	r7!, {r8, r9}
    6004:	02000000 	andeq	r0, r0, #0
    6008:	430b0423 	movwmi	r0, #46115	; 0xb423
    600c:	03003252 	movweq	r3, #594	; 0x252
    6010:	00009928 	andeq	r9, r0, r8, lsr #18
    6014:	08230200 	stmdaeq	r3!, {r9}
    6018:	0011740c 	andseq	r7, r1, ip, lsl #8
    601c:	99290300 	stmdbls	r9!, {r8, r9}
    6020:	02000000 	andeq	r0, r0, #0
    6024:	7a0c0c23 	bvc	3090b8 <__Stack_Size+0x308cb8>
    6028:	03000011 	movweq	r0, #17
    602c:	0000992a 	andeq	r9, r0, sl, lsr #18
    6030:	10230200 	eorne	r0, r3, r0, lsl #4
    6034:	0018f30c 	andseq	pc, r8, ip, lsl #6
    6038:	992b0300 	stmdbls	fp!, {r8, r9}
    603c:	02000000 	andeq	r0, r0, #0
    6040:	f90c1423 			; <UNDEFINED> instruction: 0xf90c1423
    6044:	03000018 	movweq	r0, #24
    6048:	0000992c 	andeq	r9, r0, ip, lsr #18
    604c:	18230200 	stmdane	r3!, {r9}
    6050:	0018ff0c 	andseq	pc, r8, ip, lsl #30
    6054:	992d0300 	pushls	{r8, r9}
    6058:	02000000 	andeq	r0, r0, #0
    605c:	050c1c23 	streq	r1, [ip, #-3107]	; 0xc23
    6060:	03000019 	movweq	r0, #25
    6064:	0000992e 	andeq	r9, r0, lr, lsr #18
    6068:	20230200 	eorcs	r0, r3, r0, lsl #4
    606c:	5254480b 	subspl	r4, r4, #720896	; 0xb0000
    6070:	992f0300 	stmdbls	pc!, {r8, r9}	; <UNPREDICTABLE>
    6074:	02000000 	andeq	r0, r0, #0
    6078:	4c0b2423 	cfstrsmi	mvf2, [fp], {35}	; 0x23
    607c:	03005254 	movweq	r5, #596	; 0x254
    6080:	00009930 	andeq	r9, r0, r0, lsr r9
    6084:	28230200 	stmdacs	r3!, {r9}
    6088:	0008a80c 	andeq	sl, r8, ip, lsl #16
    608c:	99310300 	ldmdbls	r1!, {r8, r9}
    6090:	02000000 	andeq	r0, r0, #0
    6094:	ad0c2c23 	stcge	12, cr2, [ip, #-140]	; 0xffffff74
    6098:	03000008 	movweq	r0, #8
    609c:	00009932 	andeq	r9, r0, r2, lsr r9
    60a0:	30230200 	eorcc	r0, r3, r0, lsl #4
    60a4:	0008b20c 	andeq	fp, r8, ip, lsl #4
    60a8:	99330300 	ldmdbls	r3!, {r8, r9}
    60ac:	02000000 	andeq	r0, r0, #0
    60b0:	bf0c3423 	svclt	0x000c3423
    60b4:	03000019 	movweq	r0, #25
    60b8:	00009934 	andeq	r9, r0, r4, lsr r9
    60bc:	38230200 	stmdacc	r3!, {r9}
    60c0:	00197c0c 	andseq	r7, r9, ip, lsl #24
    60c4:	99350300 	ldmdbls	r5!, {r8, r9}
    60c8:	02000000 	andeq	r0, r0, #0
    60cc:	810c3c23 	tsthi	ip, r3, lsr #24
    60d0:	03000019 	movweq	r0, #25
    60d4:	00009936 	andeq	r9, r0, r6, lsr r9
    60d8:	40230200 	eormi	r0, r3, r0, lsl #4
    60dc:	0019860c 	andseq	r8, r9, ip, lsl #12
    60e0:	99370300 	ldmdbls	r7!, {r8, r9}
    60e4:	02000000 	andeq	r0, r0, #0
    60e8:	8b0c4423 	blhi	31717c <__Stack_Size+0x316d7c>
    60ec:	03000019 	movweq	r0, #25
    60f0:	00009938 	andeq	r9, r0, r8, lsr r9
    60f4:	48230200 	stmdami	r3!, {r9}
    60f8:	0052440b 	subseq	r4, r2, fp, lsl #8
    60fc:	00993903 	addseq	r3, r9, r3, lsl #18
    6100:	23020000 	movwcs	r0, #8192	; 0x2000
    6104:	a205004c 	andge	r0, r5, #76	; 0x4c
    6108:	0300000f 	movweq	r0, #15
    610c:	0000f43a 	andeq	pc, r0, sl, lsr r4	; <UNPREDICTABLE>
    6110:	04140a00 	ldreq	r0, [r4], #-2560	; 0xa00
    6114:	00027b1a 	andeq	r7, r2, sl, lsl fp
    6118:	1a360c00 	bne	d89120 <__Stack_Size+0xd88d20>
    611c:	1c040000 	stcne	0, cr0, [r4], {-0}
    6120:	00000079 	andeq	r0, r0, r9, ror r0
    6124:	0c002302 	stceq	3, cr2, [r0], {2}
    6128:	000011b9 			; <UNDEFINED> instruction: 0x000011b9
    612c:	00e91d04 	rsceq	r1, r9, r4, lsl #26
    6130:	23020000 	movwcs	r0, #8192	; 0x2000
    6134:	11e70c04 	mvnne	r0, r4, lsl #24
    6138:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    613c:	000000e9 	andeq	r0, r0, r9, ror #1
    6140:	0c052302 	stceq	3, cr2, [r5], {2}
    6144:	00001468 	andeq	r1, r0, r8, ror #8
    6148:	00791f04 	rsbseq	r1, r9, r4, lsl #30
    614c:	23020000 	movwcs	r0, #8192	; 0x2000
    6150:	0f090c08 	svceq	0x00090c08
    6154:	20040000 	andcs	r0, r4, r0
    6158:	00000079 	andeq	r0, r0, r9, ror r0
    615c:	0c0c2302 	stceq	3, cr2, [ip], {2}
    6160:	00001a71 	andeq	r1, r0, r1, ror sl
    6164:	008f2104 	addeq	r2, pc, r4, lsl #2
    6168:	23020000 	movwcs	r0, #8192	; 0x2000
    616c:	80050010 	andhi	r0, r5, r0, lsl r0
    6170:	04000011 	streq	r0, [r0], #-17
    6174:	00021e22 	andeq	r1, r2, r2, lsr #28
    6178:	b6010d00 	strlt	r0, [r1], -r0, lsl #26
    617c:	0100001d 	tsteq	r0, sp, lsl r0
    6180:	50900182 	addspl	r0, r0, r2, lsl #3
    6184:	50e80800 	rscpl	r0, r8, r0, lsl #16
    6188:	21370800 	teqcs	r7, r0, lsl #16
    618c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    6190:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    6194:	00001bdd 	ldrdeq	r1, [r0], -sp
    6198:	030e8201 	movweq	r8, #57857	; 0xe201
    619c:	21570000 	cmpcs	r7, r0
    61a0:	b20f0000 	andlt	r0, pc, #0
    61a4:	46080050 			; <UNDEFINED> instruction: 0x46080050
    61a8:	c900000c 	stmdbgt	r0, {r2, r3}
    61ac:	10000002 	andne	r0, r0, r2
    61b0:	31015101 	tstcc	r1, r1, lsl #2
    61b4:	03500110 	cmpeq	r0, #4
    61b8:	0002000a 	andeq	r0, r2, sl
    61bc:	0050c20f 	subseq	ip, r0, pc, lsl #4
    61c0:	000c4608 	andeq	r4, ip, r8, lsl #12
    61c4:	0002e300 	andeq	lr, r2, r0, lsl #6
    61c8:	51011000 	mrspl	r1, (UNDEF: 1)
    61cc:	01103101 	tsteq	r0, r1, lsl #2
    61d0:	000a0350 	andeq	r0, sl, r0, asr r3
    61d4:	d20f0004 	andle	r0, pc, #4
    61d8:	46080050 			; <UNDEFINED> instruction: 0x46080050
    61dc:	fd00000c 	stc2	0, cr0, [r0, #-48]	; 0xffffffd0
    61e0:	10000002 	andne	r0, r0, r2
    61e4:	31015101 	tstcc	r1, r1, lsl #2
    61e8:	03500110 	cmpeq	r0, #4
    61ec:	0080000a 	addeq	r0, r0, sl
    61f0:	0050e011 	subseq	lr, r0, r1, lsl r0
    61f4:	0c460108 	stfeqe	f0, [r6], {8}
    61f8:	01100000 	tsteq	r0, r0
    61fc:	00300151 	eorseq	r0, r0, r1, asr r1
    6200:	13041200 	movwne	r1, #16896	; 0x4200
    6204:	0d000002 	stceq	0, cr0, [r0, #-8]
    6208:	00158f01 	andseq	r8, r5, r1, lsl #30
    620c:	01ae0100 			; <UNDEFINED> instruction: 0x01ae0100
    6210:	080050e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, lr}
    6214:	08005130 	stmdaeq	r0, {r4, r5, r8, ip, lr}
    6218:	000021b5 			; <UNDEFINED> instruction: 0x000021b5
    621c:	00036901 	andeq	r6, r3, r1, lsl #18
    6220:	1bdd1300 	blne	ff74ae28 <SCS_BASE+0x1f73ce28>
    6224:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    6228:	0000030e 	andeq	r0, r0, lr, lsl #6
    622c:	8b0e5001 	blhi	39a238 <__Stack_Size+0x399e38>
    6230:	0100001c 	tsteq	r0, ip, lsl r0
    6234:	000369ae 	andeq	r6, r3, lr, lsr #19
    6238:	0021d500 	eoreq	sp, r1, r0, lsl #10
    623c:	1be21400 	blne	ff88b244 <SCS_BASE+0x1f87d244>
    6240:	b0010000 	andlt	r0, r1, r0
    6244:	00000079 	andeq	r0, r0, r9, ror r0
    6248:	000021f6 	strdeq	r2, [r0], -r6
    624c:	001e3f14 	andseq	r3, lr, r4, lsl pc
    6250:	8fb10100 	svchi	0x00b10100
    6254:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    6258:	00000022 	andeq	r0, r0, r2, lsr #32
    625c:	027b0412 	rsbseq	r0, fp, #301989888	; 0x12000000
    6260:	01150000 	tsteq	r5, r0
    6264:	00001b30 	andeq	r1, r0, r0, lsr fp
    6268:	3001eb01 	andcc	lr, r1, r1, lsl #22
    626c:	42080051 	andmi	r0, r8, #81	; 0x51
    6270:	02080051 	andeq	r0, r8, #81	; 0x51
    6274:	9601007d 			; <UNDEFINED> instruction: 0x9601007d
    6278:	13000003 	movwne	r0, #3
    627c:	00001c8b 	andeq	r1, r0, fp, lsl #25
    6280:	0369eb01 	cmneq	r9, #1024	; 0x400
    6284:	50010000 	andpl	r0, r1, r0
    6288:	64011600 	strvs	r1, [r1], #-1536	; 0x600
    628c:	01000016 	tsteq	r0, r6, lsl r0
    6290:	4201010a 	andmi	r0, r1, #-2147483646	; 0x80000002
    6294:	54080051 	strpl	r0, [r8], #-81	; 0x51
    6298:	02080051 	andeq	r0, r8, #81	; 0x51
    629c:	cf01007d 	svcgt	0x0001007d
    62a0:	17000003 	strne	r0, [r0, -r3]
    62a4:	00001bdd 	ldrdeq	r1, [r0], -sp
    62a8:	0e010a01 	vmlaeq.f32	s0, s2, s2
    62ac:	01000003 	tsteq	r0, r3
    62b0:	1cfb1850 	ldclne	8, cr1, [fp], #320	; 0x140
    62b4:	0a010000 	beq	462bc <__Stack_Size+0x45ebc>
    62b8:	0000e901 	andeq	lr, r0, r1, lsl #18
    62bc:	00228c00 	eoreq	r8, r2, r0, lsl #24
    62c0:	01160000 	tsteq	r6, r0
    62c4:	00001f6e 	andeq	r1, r0, lr, ror #30
    62c8:	01012601 	tsteq	r1, r1, lsl #12
    62cc:	08005154 	stmdaeq	r0, {r2, r4, r6, r8, ip, lr}
    62d0:	08005166 	stmdaeq	r0, {r1, r2, r5, r6, r8, ip, lr}
    62d4:	01007d02 	tsteq	r0, r2, lsl #26
    62d8:	00000408 	andeq	r0, r0, r8, lsl #8
    62dc:	001bdd17 	andseq	sp, fp, r7, lsl sp
    62e0:	01260100 	teqeq	r6, r0, lsl #2
    62e4:	0000030e 	andeq	r0, r0, lr, lsl #6
    62e8:	fb185001 	blx	61a2f6 <__Stack_Size+0x619ef6>
    62ec:	0100001c 	tsteq	r0, ip, lsl r0
    62f0:	00e90126 	rsceq	r0, r9, r6, lsr #2
    62f4:	22c60000 	sbccs	r0, r6, #0
    62f8:	16000000 	strne	r0, [r0], -r0
    62fc:	001c0001 	andseq	r0, ip, r1
    6300:	01470100 	mrseq	r0, (UNDEF: 87)
    6304:	00516601 	subseq	r6, r1, r1, lsl #12
    6308:	00517808 	subseq	r7, r1, r8, lsl #16
    630c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    6310:	00045f01 	andeq	r5, r4, r1, lsl #30
    6314:	1bdd1700 	blne	ff74bf1c <SCS_BASE+0x1f73df1c>
    6318:	47010000 	strmi	r0, [r1, -r0]
    631c:	00030e01 	andeq	r0, r3, r1, lsl #28
    6320:	18500100 	ldmdane	r0, {r8}^
    6324:	00001f46 	andeq	r1, r0, r6, asr #30
    6328:	84014701 	strhi	r4, [r1], #-1793	; 0x701
    632c:	00000000 	andeq	r0, r0, r0
    6330:	17000023 	strne	r0, [r0, -r3, lsr #32]
    6334:	00001cfb 	strdeq	r1, [r0], -fp
    6338:	e9014701 	stmdb	r1, {r0, r8, r9, sl, lr}
    633c:	01000000 	mrseq	r0, (UNDEF: 0)
    6340:	1f4d1952 	svcne	0x004d1952
    6344:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    6348:	00008f01 	andeq	r8, r0, r1, lsl #30
    634c:	00232100 	eoreq	r2, r3, r0, lsl #2
    6350:	01160000 	tsteq	r6, r0
    6354:	0000125d 	andeq	r1, r0, sp, asr r2
    6358:	01016601 	tsteq	r1, r1, lsl #12
    635c:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
    6360:	08005182 	stmdaeq	r0, {r1, r7, r8, ip, lr}
    6364:	01007d02 	tsteq	r0, r2, lsl #26
    6368:	00000488 	andeq	r0, r0, r8, lsl #9
    636c:	001bdd17 	andseq	sp, fp, r7, lsl sp
    6370:	01660100 	cmneq	r6, r0, lsl #2
    6374:	0000030e 	andeq	r0, r0, lr, lsl #6
    6378:	1a005001 	bne	1a384 <__Stack_Size+0x19f84>
    637c:	0013bc01 	andseq	fp, r3, r1, lsl #24
    6380:	01760100 	cmneq	r6, r0, lsl #2
    6384:	0000be01 	andeq	fp, r0, r1, lsl #28
    6388:	00518200 	subseq	r8, r1, r0, lsl #4
    638c:	00518a08 	subseq	r8, r1, r8, lsl #20
    6390:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    6394:	0004c701 	andeq	ip, r4, r1, lsl #14
    6398:	1bdd1800 	blne	ff74c3a0 <SCS_BASE+0x1f73e3a0>
    639c:	76010000 	strvc	r0, [r1], -r0
    63a0:	00030e01 	andeq	r0, r3, r1, lsl #28
    63a4:	00234e00 	eoreq	r4, r3, r0, lsl #28
    63a8:	1e4f1900 	cdpne	9, 4, cr1, cr15, cr0, {0}
    63ac:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    63b0:	0000be01 	andeq	fp, r0, r1, lsl #28
    63b4:	00236f00 	eoreq	r6, r3, r0, lsl #30
    63b8:	01160000 	tsteq	r6, r0
    63bc:	00000976 	andeq	r0, r0, r6, ror r9
    63c0:	01019401 	tsteq	r1, r1, lsl #8
    63c4:	0800518a 	stmdaeq	r0, {r1, r3, r7, r8, ip, lr}
    63c8:	08005194 	stmdaeq	r0, {r2, r4, r7, r8, ip, lr}
    63cc:	01007d02 	tsteq	r0, r2, lsl #26
    63d0:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    63d4:	001bdd17 	andseq	sp, fp, r7, lsl sp
    63d8:	01940100 	orrseq	r0, r4, r0, lsl #2
    63dc:	0000030e 	andeq	r0, r0, lr, lsl #6
    63e0:	1a005001 	bne	1a3ec <__Stack_Size+0x19fec>
    63e4:	000c5501 	andeq	r5, ip, r1, lsl #10
    63e8:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    63ec:	0000be01 	andeq	fp, r0, r1, lsl #28
    63f0:	00519400 	subseq	r9, r1, r0, lsl #8
    63f4:	00519c08 	subseq	r9, r1, r8, lsl #24
    63f8:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    63fc:	00052f01 	andeq	r2, r5, r1, lsl #30
    6400:	1bdd1800 	blne	ff74c408 <SCS_BASE+0x1f73e408>
    6404:	a4010000 	strge	r0, [r1], #-0
    6408:	00030e01 	andeq	r0, r3, r1, lsl #28
    640c:	00239400 	eoreq	r9, r3, r0, lsl #8
    6410:	1e4f1900 	cdpne	9, 4, cr1, cr15, cr0, {0}
    6414:	a6010000 	strge	r0, [r1], -r0
    6418:	0000be01 	andeq	fp, r0, r1, lsl #28
    641c:	0023b500 	eoreq	fp, r3, r0, lsl #10
    6420:	01160000 	tsteq	r6, r0
    6424:	00001878 	andeq	r1, r0, r8, ror r8
    6428:	0101c401 	tsteq	r1, r1, lsl #8
    642c:	0800519c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, lr}
    6430:	080051ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, ip, lr}
    6434:	01007d02 	tsteq	r0, r2, lsl #26
    6438:	00000568 	andeq	r0, r0, r8, ror #10
    643c:	001bdd17 	andseq	sp, fp, r7, lsl sp
    6440:	01c40100 	biceq	r0, r4, r0, lsl #2
    6444:	0000030e 	andeq	r0, r0, lr, lsl #6
    6448:	fb185001 	blx	61a456 <__Stack_Size+0x61a056>
    644c:	0100001c 	tsteq	r0, ip, lsl r0
    6450:	00e901c4 	rsceq	r0, r9, r4, asr #3
    6454:	23da0000 	bicscs	r0, sl, #0
    6458:	1a000000 	bne	6460 <__Stack_Size+0x6060>
    645c:	001cdc01 	andseq	sp, ip, r1, lsl #24
    6460:	01df0100 	bicseq	r0, pc, r0, lsl #2
    6464:	0000be01 	andeq	fp, r0, r1, lsl #28
    6468:	0051ae00 	subseq	sl, r1, r0, lsl #28
    646c:	0051b608 	subseq	fp, r1, r8, lsl #12
    6470:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    6474:	0005a701 	andeq	sl, r5, r1, lsl #14
    6478:	1bdd1800 	blne	ff74c480 <SCS_BASE+0x1f73e480>
    647c:	df010000 	svcle	0x00010000
    6480:	00030e01 	andeq	r0, r3, r1, lsl #28
    6484:	00241400 	eoreq	r1, r4, r0, lsl #8
    6488:	1e4f1900 	cdpne	9, 4, cr1, cr15, cr0, {0}
    648c:	e1010000 	mrs	r0, (UNDEF: 1)
    6490:	0000be01 	andeq	fp, r0, r1, lsl #28
    6494:	00243500 	eoreq	r3, r4, r0, lsl #10
    6498:	01160000 	tsteq	r6, r0
    649c:	00001d45 	andeq	r1, r0, r5, asr #26
    64a0:	01020001 	tsteq	r2, r1
    64a4:	080051b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, ip, lr}
    64a8:	080051c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, lr}
    64ac:	01007d02 	tsteq	r0, r2, lsl #26
    64b0:	00000600 	andeq	r0, r0, r0, lsl #12
    64b4:	001bdd17 	andseq	sp, fp, r7, lsl sp
    64b8:	02000100 	andeq	r0, r0, #0
    64bc:	0000030e 	andeq	r0, r0, lr, lsl #6
    64c0:	84185001 	ldrhi	r5, [r8], #-1
    64c4:	0100001c 	tsteq	r0, ip, lsl r0
    64c8:	008f0200 	addeq	r0, pc, r0, lsl #4
    64cc:	245c0000 	ldrbcs	r0, [ip], #-0
    64d0:	e2190000 	ands	r0, r9, #0
    64d4:	0100001b 	tsteq	r0, fp, lsl r0
    64d8:	00790202 	rsbseq	r0, r9, r2, lsl #4
    64dc:	247d0000 	ldrbtcs	r0, [sp], #-0
    64e0:	3f190000 	svccc	0x00190000
    64e4:	0100001e 	tsteq	r0, lr, lsl r0
    64e8:	00790203 	rsbseq	r0, r9, r3, lsl #4
    64ec:	24b20000 	ldrtcs	r0, [r2], #0
    64f0:	16000000 	strne	r0, [r0], -r0
    64f4:	001f1701 	andseq	r1, pc, r1, lsl #14
    64f8:	021f0100 	andseq	r0, pc, #0
    64fc:	0051c601 	subseq	ip, r1, r1, lsl #12
    6500:	0051d808 	subseq	sp, r1, r8, lsl #16
    6504:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    6508:	00063901 	andeq	r3, r6, r1, lsl #18
    650c:	1bdd1700 	blne	ff74c114 <SCS_BASE+0x1f73e114>
    6510:	1f010000 	svcne	0x00010000
    6514:	00030e02 	andeq	r0, r3, r2, lsl #28
    6518:	18500100 	ldmdane	r0, {r8}^
    651c:	00001cfb 	strdeq	r1, [r0], -fp
    6520:	e9021f01 	stmdb	r2, {r0, r8, r9, sl, fp, ip}
    6524:	c6000000 	strgt	r0, [r0], -r0
    6528:	00000024 	andeq	r0, r0, r4, lsr #32
    652c:	0da2011b 	stfeqs	f0, [r2, #108]!	; 0x6c
    6530:	5a010000 	bpl	46538 <__Stack_Size+0x46138>
    6534:	51d80102 	bicspl	r0, r8, r2, lsl #2
    6538:	52720800 	rsbspl	r0, r2, #0
    653c:	25000800 	strcs	r0, [r0, #-2048]	; 0x800
    6540:	b3010000 	movwlt	r0, #4096	; 0x1000
    6544:	17000006 	strne	r0, [r0, -r6]
    6548:	00001bdd 	ldrdeq	r1, [r0], -sp
    654c:	0e025a01 	vmlaeq.f32	s10, s4, s2
    6550:	01000003 	tsteq	r0, r3
    6554:	1e1c1850 	mrcne	8, 0, r1, cr12, cr0, {2}
    6558:	5a010000 	bpl	46560 <__Stack_Size+0x46160>
    655c:	00008f02 	andeq	r8, r0, r2, lsl #30
    6560:	00252000 	eoreq	r2, r5, r0
    6564:	1d6b1800 	stclne	8, cr1, [fp, #-0]
    6568:	5a010000 	bpl	46570 <__Stack_Size+0x46170>
    656c:	00008f02 	andeq	r8, r0, r2, lsl #30
    6570:	00257300 	eoreq	r7, r5, r0, lsl #6
    6574:	1ea81800 	cdpne	8, 10, cr1, cr8, cr0, {0}
    6578:	5a010000 	bpl	46580 <__Stack_Size+0x46180>
    657c:	00008f02 	andeq	r8, r0, r2, lsl #30
    6580:	0025c600 	eoreq	ip, r5, r0, lsl #12
    6584:	1be21900 	blne	ff88c98c <SCS_BASE+0x1f87e98c>
    6588:	5c010000 	stcpl	0, cr0, [r1], {-0}
    658c:	00007902 	andeq	r7, r0, r2, lsl #18
    6590:	00260000 	eoreq	r0, r6, r0
    6594:	1e3f1900 	cdpne	9, 3, cr1, cr15, cr0, {0}
    6598:	5c010000 	stcpl	0, cr0, [r1], {-0}
    659c:	00007902 	andeq	r7, r0, r2, lsl #18
    65a0:	0026c500 	eoreq	ip, r6, r0, lsl #10
    65a4:	01160000 	tsteq	r6, r0
    65a8:	00001d88 	andeq	r1, r0, r8, lsl #27
    65ac:	0102bf01 	tsteq	r2, r1, lsl #30
    65b0:	08005272 	stmdaeq	r0, {r1, r4, r5, r6, r9, ip, lr}
    65b4:	08005284 	stmdaeq	r0, {r2, r7, r9, ip, lr}
    65b8:	01007d02 	tsteq	r0, r2, lsl #26
    65bc:	000006ec 	andeq	r0, r0, ip, ror #13
    65c0:	001bdd17 	andseq	sp, fp, r7, lsl sp
    65c4:	02bf0100 	adcseq	r0, pc, #0
    65c8:	0000030e 	andeq	r0, r0, lr, lsl #6
    65cc:	fb185001 	blx	61a5da <__Stack_Size+0x61a1da>
    65d0:	0100001c 	tsteq	r0, ip, lsl r0
    65d4:	00e902bf 	strhteq	r0, [r9], #47	; 0x2f
    65d8:	271c0000 	ldrcs	r0, [ip, -r0]
    65dc:	1a000000 	bne	65e4 <__Stack_Size+0x61e4>
    65e0:	0017d501 	andseq	sp, r7, r1, lsl #10
    65e4:	02d80100 	sbcseq	r0, r8, #0
    65e8:	00008401 	andeq	r8, r0, r1, lsl #8
    65ec:	00528400 	subseq	r8, r2, r0, lsl #8
    65f0:	00528a08 	subseq	r8, r2, r8, lsl #20
    65f4:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    65f8:	00071b01 	andeq	r1, r7, r1, lsl #22
    65fc:	1bdd1800 	blne	ff74c604 <SCS_BASE+0x1f73e604>
    6600:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    6604:	00030e02 	andeq	r0, r3, r2, lsl #28
    6608:	00275600 	eoreq	r5, r7, r0, lsl #12
    660c:	011c0000 	tsteq	ip, r0
    6610:	00001f79 	andeq	r1, r0, r9, ror pc
    6614:	0102e701 	tsteq	r2, r1, lsl #14
    6618:	00000079 	andeq	r0, r0, r9, ror r0
    661c:	0800528a 	stmdaeq	r0, {r1, r3, r7, r9, ip, lr}
    6620:	08005294 	stmdaeq	r0, {r2, r4, r7, r9, ip, lr}
    6624:	01007d02 	tsteq	r0, r2, lsl #26
    6628:	1d700116 	ldfnee	f0, [r0, #-88]!	; 0xffffffa8
    662c:	f8010000 			; <UNDEFINED> instruction: 0xf8010000
    6630:	52940102 	addspl	r0, r4, #-2147483648	; 0x80000000
    6634:	52a60800 	adcpl	r0, r6, #0
    6638:	7d020800 	stcvc	8, cr0, [r2, #-0]
    663c:	076e0100 	strbeq	r0, [lr, -r0, lsl #2]!
    6640:	dd170000 	ldcle	0, cr0, [r7, #-0]
    6644:	0100001b 	tsteq	r0, fp, lsl r0
    6648:	030e02f8 	movweq	r0, #58104	; 0xe2f8
    664c:	50010000 	andpl	r0, r1, r0
    6650:	001cfb18 	andseq	pc, ip, r8, lsl fp	; <UNPREDICTABLE>
    6654:	02f80100 	rscseq	r0, r8, #0
    6658:	000000e9 	andeq	r0, r0, r9, ror #1
    665c:	00002777 	andeq	r2, r0, r7, ror r7
    6660:	e1011600 	tst	r1, r0, lsl #12
    6664:	0100001d 	tsteq	r0, sp, lsl r0
    6668:	a6010315 			; <UNDEFINED> instruction: 0xa6010315
    666c:	b8080052 	stmdalt	r8, {r1, r4, r6}
    6670:	02080052 	andeq	r0, r8, #82	; 0x52
    6674:	a701007d 	smlsdxge	r1, sp, r0, r0
    6678:	17000007 	strne	r0, [r0, -r7]
    667c:	00001bdd 	ldrdeq	r1, [r0], -sp
    6680:	0e031501 	cfsh32eq	mvfx1, mvfx3, #1
    6684:	01000003 	tsteq	r0, r3
    6688:	1cfb1850 	ldclne	8, cr1, [fp], #320	; 0x140
    668c:	15010000 	strne	r0, [r1, #-0]
    6690:	0000e903 	andeq	lr, r0, r3, lsl #18
    6694:	0027b100 	eoreq	fp, r7, r0, lsl #2
    6698:	01160000 	tsteq	r6, r0
    669c:	00001df9 	strdeq	r1, [r0], -r9
    66a0:	01034d01 	tsteq	r3, r1, lsl #26
    66a4:	080052b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, lr}
    66a8:	080052c4 	stmdaeq	r0, {r2, r6, r7, r9, ip, lr}
    66ac:	01007d02 	tsteq	r0, r2, lsl #26
    66b0:	000007f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    66b4:	001bdd17 	andseq	sp, fp, r7, lsl sp
    66b8:	034d0100 	movteq	r0, #53504	; 0xd100
    66bc:	0000030e 	andeq	r0, r0, lr, lsl #6
    66c0:	54185001 	ldrpl	r5, [r8], #-1
    66c4:	0100001f 	tsteq	r0, pc, lsl r0
    66c8:	0079034d 	rsbseq	r0, r9, sp, asr #6
    66cc:	27eb0000 	strbcs	r0, [fp, r0]!
    66d0:	64190000 	ldrvs	r0, [r9], #-0
    66d4:	0100001d 	tsteq	r0, sp, lsl r0
    66d8:	0079034f 	rsbseq	r0, r9, pc, asr #6
    66dc:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    66e0:	16000000 	strne	r0, [r0], -r0
    66e4:	001dc101 	andseq	ip, sp, r1, lsl #2
    66e8:	036a0100 	cmneq	sl, #0
    66ec:	0052c401 	subseq	ip, r2, r1, lsl #8
    66f0:	0052d608 	subseq	sp, r2, r8, lsl #12
    66f4:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    66f8:	00082901 	andeq	r2, r8, r1, lsl #18
    66fc:	1bdd1700 	blne	ff74c304 <SCS_BASE+0x1f73e304>
    6700:	6a010000 	bvs	46708 <__Stack_Size+0x46308>
    6704:	00030e03 	andeq	r0, r3, r3, lsl #28
    6708:	18500100 	ldmdane	r0, {r8}^
    670c:	00001cfb 	strdeq	r1, [r0], -fp
    6710:	e9036a01 	stmdb	r3, {r0, r9, fp, sp, lr}
    6714:	41000000 	mrsmi	r0, (UNDEF: 0)
    6718:	00000028 	andeq	r0, r0, r8, lsr #32
    671c:	1eb70116 	mrcne	1, 5, r0, cr7, cr6, {0}
    6720:	87010000 	strhi	r0, [r1, -r0]
    6724:	52d60103 	sbcspl	r0, r6, #-1073741824	; 0xc0000000
    6728:	52e80800 	rscpl	r0, r8, #0
    672c:	7d020800 	stcvc	8, cr0, [r2, #-0]
    6730:	08620100 	stmdaeq	r2!, {r8}^
    6734:	dd170000 	ldcle	0, cr0, [r7, #-0]
    6738:	0100001b 	tsteq	r0, fp, lsl r0
    673c:	030e0387 	movweq	r0, #58247	; 0xe387
    6740:	50010000 	andpl	r0, r1, r0
    6744:	001cfb18 	andseq	pc, ip, r8, lsl fp	; <UNPREDICTABLE>
    6748:	03870100 	orreq	r0, r7, #0
    674c:	000000e9 	andeq	r0, r0, r9, ror #1
    6750:	0000287b 	andeq	r2, r0, fp, ror r8
    6754:	0d011a00 	vstreq	s2, [r1, #-0]
    6758:	0100001c 	tsteq	r0, ip, lsl r0
    675c:	be0103a2 	cdplt	3, 0, cr0, cr1, cr2, {5}
    6760:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    6764:	f0080052 			; <UNDEFINED> instruction: 0xf0080052
    6768:	02080052 	andeq	r0, r8, #82	; 0x52
    676c:	a101007d 	tstge	r1, sp, ror r0
    6770:	18000008 	stmdane	r0, {r3}
    6774:	00001bdd 	ldrdeq	r1, [r0], -sp
    6778:	0e03a201 	cdpeq	2, 0, cr10, cr3, cr1, {0}
    677c:	b5000003 	strlt	r0, [r0, #-3]
    6780:	19000028 	stmdbne	r0, {r3, r5}
    6784:	00001e4f 	andeq	r1, r0, pc, asr #28
    6788:	be03a401 	cdplt	4, 0, cr10, cr3, cr1, {0}
    678c:	d6000000 	strle	r0, [r0], -r0
    6790:	00000028 	andeq	r0, r0, r8, lsr #32
    6794:	1e8e011b 	mcrne	1, 4, r0, cr14, cr11, {0}
    6798:	e2010000 	and	r0, r1, #0
    679c:	52f00103 	rscspl	r0, r0, #-1073741824	; 0xc0000000
    67a0:	53500800 	cmppl	r0, #0
    67a4:	28fd0800 	ldmcs	sp!, {fp}^
    67a8:	2b010000 	blcs	467b0 <__Stack_Size+0x463b0>
    67ac:	17000009 	strne	r0, [r0, -r9]
    67b0:	00001bdd 	ldrdeq	r1, [r0], -sp
    67b4:	0e03e201 	cdpeq	2, 0, cr14, cr3, cr1, {0}
    67b8:	01000003 	tsteq	r0, r3
    67bc:	1e1c1850 	mrcne	8, 0, r1, cr12, cr0, {2}
    67c0:	e2010000 	and	r0, r1, #0
    67c4:	00008f03 	andeq	r8, r0, r3, lsl #30
    67c8:	00291d00 	eoreq	r1, r9, r0, lsl #26
    67cc:	1d6b1800 	stclne	8, cr1, [fp, #-0]
    67d0:	e2010000 	and	r0, r1, #0
    67d4:	00008f03 	andeq	r8, r0, r3, lsl #30
    67d8:	00293e00 	eoreq	r3, r9, r0, lsl #28
    67dc:	1ea81800 	cdpne	8, 10, cr1, cr8, cr0, {0}
    67e0:	e2010000 	and	r0, r1, #0
    67e4:	00008f03 	andeq	r8, r0, r3, lsl #30
    67e8:	00295f00 	eoreq	r5, r9, r0, lsl #30
    67ec:	1be21900 	blne	ff88cbf4 <SCS_BASE+0x1f87ebf4>
    67f0:	e4010000 	str	r0, [r1], #-0
    67f4:	00007903 	andeq	r7, r0, r3, lsl #18
    67f8:	00299900 	eoreq	r9, r9, r0, lsl #18
    67fc:	1e3f1900 	cdpne	9, 3, cr1, cr15, cr0, {0}
    6800:	e4010000 	str	r0, [r1], #-0
    6804:	00007903 	andeq	r7, r0, r3, lsl #18
    6808:	002a1100 	eoreq	r1, sl, r0, lsl #2
    680c:	1e471900 	cdpne	9, 4, cr1, cr7, cr0, {0}
    6810:	e4010000 	str	r0, [r1], #-0
    6814:	00007903 	andeq	r7, r0, r3, lsl #18
    6818:	002a6100 	eoreq	r6, sl, r0, lsl #2
    681c:	01160000 	tsteq	r6, r0
    6820:	00001e59 	andeq	r1, r0, r9, asr lr
    6824:	01042601 	tsteq	r4, r1, lsl #12
    6828:	08005350 	stmdaeq	r0, {r4, r6, r8, r9, ip, lr}
    682c:	08005360 	stmdaeq	r0, {r5, r6, r8, r9, ip, lr}
    6830:	01007d02 	tsteq	r0, r2, lsl #26
    6834:	00000984 	andeq	r0, r0, r4, lsl #19
    6838:	001bdd17 	andseq	sp, fp, r7, lsl sp
    683c:	04260100 	strteq	r0, [r6], #-256	; 0x100
    6840:	0000030e 	andeq	r0, r0, lr, lsl #6
    6844:	1d185001 	ldcne	0, cr5, [r8, #-4]
    6848:	0100000d 	tsteq	r0, sp
    684c:	008f0426 	addeq	r0, pc, r6, lsr #8
    6850:	2a880000 	bcs	fe206858 <SCS_BASE+0x1e1f8858>
    6854:	e2190000 	ands	r0, r9, #0
    6858:	0100001b 	tsteq	r0, fp, lsl r0
    685c:	00790428 	rsbseq	r0, r9, r8, lsr #8
    6860:	2aa90000 	bcs	fea46868 <SCS_BASE+0x1ea38868>
    6864:	3f190000 	svccc	0x00190000
    6868:	0100001e 	tsteq	r0, lr, lsl r0
    686c:	00790429 	rsbseq	r0, r9, r9, lsr #8
    6870:	2ade0000 	bcs	ff786878 <SCS_BASE+0x1f778878>
    6874:	16000000 	strne	r0, [r0], -r0
    6878:	001da001 	andseq	sl, sp, r1
    687c:	044a0100 	strbeq	r0, [sl], #-256	; 0x100
    6880:	00536001 	subseq	r6, r3, r1
    6884:	00536408 	subseq	r6, r3, r8, lsl #8
    6888:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    688c:	0009c901 	andeq	ip, r9, r1, lsl #18
    6890:	1bdd1700 	blne	ff74c498 <SCS_BASE+0x1f73e498>
    6894:	4a010000 	bmi	4689c <__Stack_Size+0x4649c>
    6898:	00030e04 	andeq	r0, r3, r4, lsl #28
    689c:	17500100 	ldrbne	r0, [r0, -r0, lsl #2]
    68a0:	00001ed8 	ldrdeq	r1, [r0], -r8
    68a4:	8f044a01 	svchi	0x00044a01
    68a8:	01000000 	mrseq	r0, (UNDEF: 0)
    68ac:	1daf1751 	stcne	7, cr1, [pc, #324]!	; 69f8 <__Stack_Size+0x65f8>
    68b0:	4a010000 	bmi	468b8 <__Stack_Size+0x464b8>
    68b4:	00008404 	andeq	r8, r0, r4, lsl #8
    68b8:	00520100 	subseq	r0, r2, r0, lsl #2
    68bc:	1f27011a 	svcne	0x0027011a
    68c0:	62010000 	andvs	r0, r1, #0
    68c4:	00840104 	addeq	r0, r4, r4, lsl #2
    68c8:	53640000 	cmnpl	r4, #0
    68cc:	536c0800 	cmnpl	ip, #0
    68d0:	7d020800 	stcvc	8, cr0, [r2, #-0]
    68d4:	0a060100 	beq	186cdc <__Stack_Size+0x1868dc>
    68d8:	dd180000 	ldcle	0, cr0, [r8, #-0]
    68dc:	0100001b 	tsteq	r0, fp, lsl r0
    68e0:	030e0462 	movweq	r0, #58466	; 0xe462
    68e4:	2af20000 	bcs	ffc868ec <SCS_BASE+0x1fc788ec>
    68e8:	d8170000 	ldmdale	r7, {}	; <UNPREDICTABLE>
    68ec:	0100001e 	tsteq	r0, lr, lsl r0
    68f0:	008f0462 	addeq	r0, pc, r2, ror #8
    68f4:	51010000 	mrspl	r0, (UNDEF: 1)
    68f8:	ea011600 	b	4c100 <__Stack_Size+0x4bd00>
    68fc:	0100001b 	tsteq	r0, fp, lsl r0
    6900:	6c010484 	cfstrsvs	mvf0, [r1], {132}	; 0x84
    6904:	7c080053 	stcvc	0, cr0, [r8], {83}	; 0x53
    6908:	02080053 	andeq	r0, r8, #83	; 0x53
    690c:	4f01007d 	svcmi	0x0001007d
    6910:	1700000a 	strne	r0, [r0, -sl]
    6914:	00001bdd 	ldrdeq	r1, [r0], -sp
    6918:	0e048401 	cdpeq	4, 0, cr8, cr4, cr1, {0}
    691c:	01000003 	tsteq	r0, r3
    6920:	1e7b1850 	mrcne	8, 3, r1, cr11, cr0, {2}
    6924:	84010000 	strhi	r0, [r1], #-0
    6928:	00007904 	andeq	r7, r0, r4, lsl #18
    692c:	002b2000 	eoreq	r2, fp, r0
    6930:	1d641900 	stclne	9, cr1, [r4, #-0]
    6934:	86010000 	strhi	r0, [r1], -r0
    6938:	00007904 	andeq	r7, r0, r4, lsl #18
    693c:	002b4100 	eoreq	r4, fp, r0, lsl #2
    6940:	01160000 	tsteq	r6, r0
    6944:	00001c9a 	muleq	r0, sl, ip
    6948:	0104a101 	tsteq	r4, r1, lsl #2
    694c:	0800537c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, lr}
    6950:	08005382 	stmdaeq	r0, {r1, r7, r8, r9, ip, lr}
    6954:	01007d02 	tsteq	r0, r2, lsl #26
    6958:	00000a94 	muleq	r0, r4, sl
    695c:	001bdd17 	andseq	sp, fp, r7, lsl sp
    6960:	04a10100 	strteq	r0, [r1], #256	; 0x100
    6964:	0000030e 	andeq	r0, r0, lr, lsl #6
    6968:	37175001 	ldrcc	r5, [r7, -r1]
    696c:	0100001d 	tsteq	r0, sp, lsl r0
    6970:	008404a1 	addeq	r0, r4, r1, lsr #9
    6974:	51010000 	mrspl	r0, (UNDEF: 1)
    6978:	001c3717 	andseq	r3, ip, r7, lsl r7
    697c:	04a20100 	strteq	r0, [r2], #256	; 0x100
    6980:	00000084 	andeq	r0, r0, r4, lsl #1
    6984:	16005201 	strne	r5, [r0], -r1, lsl #4
    6988:	001d0401 	andseq	r0, sp, r1, lsl #8
    698c:	04cb0100 	strbeq	r0, [fp], #256	; 0x100
    6990:	00538201 	subseq	r8, r3, r1, lsl #4
    6994:	00538e08 	subseq	r8, r3, r8, lsl #28
    6998:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    699c:	000add01 	andeq	sp, sl, r1, lsl #26
    69a0:	1bdd1700 	blne	ff74c5a8 <SCS_BASE+0x1f73e5a8>
    69a4:	cb010000 	blgt	469ac <__Stack_Size+0x465ac>
    69a8:	00030e04 	andeq	r0, r3, r4, lsl #28
    69ac:	18500100 	ldmdane	r0, {r8}^
    69b0:	00001e1c 	andeq	r1, r0, ip, lsl lr
    69b4:	8f04cb01 	svchi	0x0004cb01
    69b8:	6b000000 	blvs	69c0 <__Stack_Size+0x65c0>
    69bc:	1900002b 	stmdbne	r0, {r0, r1, r3, r5}
    69c0:	00001d64 	andeq	r1, r0, r4, ror #26
    69c4:	7904cd01 	stmdbvc	r4, {r0, r8, sl, fp, lr, pc}
    69c8:	8c000000 	stchi	0, cr0, [r0], {-0}
    69cc:	0000002b 	andeq	r0, r0, fp, lsr #32
    69d0:	1efe0116 	mrcne	1, 7, r0, cr14, cr6, {0}
    69d4:	e5010000 	str	r0, [r1, #-0]
    69d8:	538e0104 	orrpl	r0, lr, #1
    69dc:	53a80800 			; <UNDEFINED> instruction: 0x53a80800
    69e0:	7d020800 	stcvc	8, cr0, [r2, #-0]
    69e4:	0b080100 	bleq	206dec <__Stack_Size+0x2069ec>
    69e8:	fb180000 	blx	6069f2 <__Stack_Size+0x6065f2>
    69ec:	0100001c 	tsteq	r0, ip, lsl r0
    69f0:	00e904e5 	rsceq	r0, r9, r5, ror #9
    69f4:	2bc10000 	blcs	ff0469fc <SCS_BASE+0x1f0389fc>
    69f8:	1a000000 	bne	6a00 <__Stack_Size+0x6600>
    69fc:	001eec01 	andseq	lr, lr, r1, lsl #24
    6a00:	05040100 	streq	r0, [r4, #-256]	; 0x100
    6a04:	0000be01 	andeq	fp, r0, r1, lsl #28
    6a08:	0053a800 	subseq	sl, r3, r0, lsl #16
    6a0c:	0053b408 	subseq	fp, r3, r8, lsl #8
    6a10:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    6a14:	000b5501 	andeq	r5, fp, r1, lsl #10
    6a18:	1bdd1800 	blne	ff74ca20 <SCS_BASE+0x1f73ea20>
    6a1c:	04010000 	streq	r0, [r1], #-0
    6a20:	00030e05 	andeq	r0, r3, r5, lsl #28
    6a24:	002bfb00 	eoreq	pc, fp, r0, lsl #22
    6a28:	1cd31700 	ldclne	7, cr1, [r3], {0}
    6a2c:	04010000 	streq	r0, [r1], #-0
    6a30:	00008f05 	andeq	r8, r0, r5, lsl #30
    6a34:	19510100 	ldmdbne	r1, {r8}^
    6a38:	00001e4f 	andeq	r1, r0, pc, asr #28
    6a3c:	be050601 	cfmadd32lt	mvax0, mvfx0, mvfx5, mvfx1
    6a40:	1c000000 	stcne	0, cr0, [r0], {-0}
    6a44:	0000002c 	andeq	r0, r0, ip, lsr #32
    6a48:	1c440116 	stfnee	f0, [r4], {22}
    6a4c:	2a010000 	bcs	46a54 <__Stack_Size+0x46654>
    6a50:	53b40105 			; <UNDEFINED> instruction: 0x53b40105
    6a54:	53ba0800 			; <UNDEFINED> instruction: 0x53ba0800
    6a58:	7d020800 	stcvc	8, cr0, [r2, #-0]
    6a5c:	0b8e0100 	bleq	fe386e64 <SCS_BASE+0x1e378e64>
    6a60:	dd170000 	ldcle	0, cr0, [r7, #-0]
    6a64:	0100001b 	tsteq	r0, fp, lsl r0
    6a68:	030e052a 	movweq	r0, #58666	; 0xe52a
    6a6c:	50010000 	andpl	r0, r1, r0
    6a70:	001cd318 	andseq	sp, ip, r8, lsl r3
    6a74:	052a0100 	streq	r0, [sl, #-256]!	; 0x100
    6a78:	0000008f 	andeq	r0, r0, pc, lsl #1
    6a7c:	00002c45 	andeq	r2, r0, r5, asr #24
    6a80:	52011a00 	andpl	r1, r1, #0
    6a84:	0100001c 	tsteq	r0, ip, lsl r0
    6a88:	c9010540 	stmdbgt	r1, {r6, r8, sl}
    6a8c:	ba000000 	blt	6a94 <__Stack_Size+0x6694>
    6a90:	d0080053 	andle	r0, r8, r3, asr r0
    6a94:	02080053 	andeq	r0, r8, #83	; 0x53
    6a98:	fd01007d 	stc2	0, cr0, [r1, #-500]	; 0xfffffe0c
    6a9c:	1800000b 	stmdane	r0, {r0, r1, r3}
    6aa0:	00001bdd 	ldrdeq	r1, [r0], -sp
    6aa4:	0e054001 	cdpeq	0, 0, cr4, cr5, cr1, {0}
    6aa8:	66000003 	strvs	r0, [r0], -r3
    6aac:	1800002c 	stmdane	r0, {r2, r3, r5}
    6ab0:	00001f46 	andeq	r1, r0, r6, asr #30
    6ab4:	84054001 	strhi	r4, [r5], #-1
    6ab8:	87000000 	strhi	r0, [r0, -r0]
    6abc:	1900002c 	stmdbne	r0, {r2, r3, r5}
    6ac0:	00001e4f 	andeq	r1, r0, pc, asr #28
    6ac4:	c9054201 	stmdbgt	r5, {r0, r9, lr}
    6ac8:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    6acc:	1900002c 	stmdbne	r0, {r2, r3, r5}
    6ad0:	00001f4d 	andeq	r1, r0, sp, asr #30
    6ad4:	79054301 	stmdbvc	r5, {r0, r8, r9, lr}
    6ad8:	c7000000 	strgt	r0, [r0, -r0]
    6adc:	1900002c 	stmdbne	r0, {r2, r3, r5}
    6ae0:	00001d2a 	andeq	r1, r0, sl, lsr #26
    6ae4:	79054301 	stmdbvc	r5, {r0, r8, r9, lr}
    6ae8:	e2000000 	and	r0, r0, #0
    6aec:	0000002c 	andeq	r0, r0, ip, lsr #32
    6af0:	1cbd0116 	ldfnes	f0, [sp], #88	; 0x58
    6af4:	6b010000 	blvs	46afc <__Stack_Size+0x466fc>
    6af8:	53d00105 	bicspl	r0, r0, #1073741825	; 0x40000001
    6afc:	53d80800 	bicspl	r0, r8, #0
    6b00:	7d020800 	stcvc	8, cr0, [r2, #-0]
    6b04:	0c460100 	stfeqe	f0, [r6], {-0}
    6b08:	dd170000 	ldcle	0, cr0, [r7, #-0]
    6b0c:	0100001b 	tsteq	r0, fp, lsl r0
    6b10:	030e056b 	movweq	r0, #58731	; 0xe56b
    6b14:	50010000 	andpl	r0, r1, r0
    6b18:	001f4618 	andseq	r4, pc, r8, lsl r6	; <UNPREDICTABLE>
    6b1c:	056b0100 	strbeq	r0, [fp, #-256]!	; 0x100
    6b20:	00000084 	andeq	r0, r0, r4, lsl #1
    6b24:	00002d09 	andeq	r2, r0, r9, lsl #26
    6b28:	001f4d19 	andseq	r4, pc, r9, lsl sp	; <UNPREDICTABLE>
    6b2c:	056d0100 	strbeq	r0, [sp, #-256]!	; 0x100
    6b30:	0000008f 	andeq	r0, r0, pc, lsl #1
    6b34:	00002d2a 	andeq	r2, r0, sl, lsr #26
    6b38:	28011d00 	stmdacs	r1, {r8, sl, fp, ip}
    6b3c:	0500001e 	streq	r0, [r0, #-30]
    6b40:	01010114 	tsteq	r1, r4, lsl r1
    6b44:	0000791e 	andeq	r7, r0, lr, lsl r9
    6b48:	00e91e00 	rsceq	r1, r9, r0, lsl #28
    6b4c:	00000000 	andeq	r0, r0, r0
    6b50:	00000975 	andeq	r0, r0, r5, ror r9
    6b54:	0ad10002 	beq	ff446b64 <SCS_BASE+0x1f438b64>
    6b58:	01040000 	mrseq	r0, (UNDEF: 4)
    6b5c:	00000211 	andeq	r0, r0, r1, lsl r2
    6b60:	00211a01 	eoreq	r1, r1, r1, lsl #20
    6b64:	00018b00 	andeq	r8, r1, r0, lsl #22
    6b68:	0053d800 	subseq	sp, r3, r0, lsl #16
    6b6c:	00585808 	subseq	r5, r8, r8, lsl #16
    6b70:	000f2808 	andeq	r2, pc, r8, lsl #16
    6b74:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6b78:	000000d3 	ldrdeq	r0, [r0], -r3
    6b7c:	5b060102 	blpl	186f8c <__Stack_Size+0x186b8c>
    6b80:	02000001 	andeq	r0, r0, #1
    6b84:	01590801 	cmpeq	r9, r1, lsl #16
    6b88:	02020000 	andeq	r0, r2, #0
    6b8c:	00002505 	andeq	r2, r0, r5, lsl #10
    6b90:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6b94:	000001c4 	andeq	r0, r0, r4, asr #3
    6b98:	69050403 	stmdbvs	r5, {r0, r1, sl}
    6b9c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6ba0:	00bb0508 	adcseq	r0, fp, r8, lsl #10
    6ba4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6ba8:	0000c907 	andeq	ip, r0, r7, lsl #18
    6bac:	05040200 	streq	r0, [r4, #-512]	; 0x200
    6bb0:	000000c0 	andeq	r0, r0, r0, asr #1
    6bb4:	2f070402 	svccs	0x00070402
    6bb8:	02000000 	andeq	r0, r0, #0
    6bbc:	00ce0704 	sbceq	r0, lr, r4, lsl #14
    6bc0:	01020000 	mrseq	r0, (UNDEF: 2)
    6bc4:	00016208 	andeq	r6, r1, r8, lsl #4
    6bc8:	33750400 	cmncc	r5, #0
    6bcc:	27020032 	smladxcs	r2, r2, r0, r0
    6bd0:	0000006b 	andeq	r0, r0, fp, rrx
    6bd4:	36317504 	ldrtcc	r7, [r1], -r4, lsl #10
    6bd8:	41280200 	teqmi	r8, r0, lsl #4
    6bdc:	04000000 	streq	r0, [r0], #-0
    6be0:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    6be4:	00003329 	andeq	r3, r0, r9, lsr #6
    6be8:	0d7d0500 	cfldr64eq	mvdx0, [sp, #-0]
    6bec:	2f020000 	svccs	0x00020000
    6bf0:	000000a4 	andeq	r0, r0, r4, lsr #1
    6bf4:	00006b06 	andeq	r6, r0, r6, lsl #22
    6bf8:	0bbc0500 	bleq	fef08000 <SCS_BASE+0x1eefa000>
    6bfc:	30020000 	andcc	r0, r2, r0
    6c00:	000000b4 	strheq	r0, [r0], -r4
    6c04:	00004106 	andeq	r4, r0, r6, lsl #2
    6c08:	02010700 	andeq	r0, r1, #0
    6c0c:	0000ce39 	andeq	ip, r0, r9, lsr lr
    6c10:	0b590800 	bleq	1648c18 <__Stack_Size+0x1648818>
    6c14:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6c18:	00544553 	subseq	r4, r4, r3, asr r5
    6c1c:	7e050001 	cdpvc	0, 0, cr0, cr5, cr1, {0}
    6c20:	02000012 	andeq	r0, r0, #18
    6c24:	0000b939 	andeq	fp, r0, r9, lsr r9
    6c28:	02010700 	andeq	r0, r1, #0
    6c2c:	0000ee3b 	andeq	lr, r0, fp, lsr lr
    6c30:	15170800 	ldrne	r0, [r7, #-2048]	; 0x800
    6c34:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6c38:	00001935 	andeq	r1, r0, r5, lsr r9
    6c3c:	ee050001 	cdp	0, 0, cr0, cr5, cr1, {0}
    6c40:	02000015 	andeq	r0, r0, #21
    6c44:	0000d93b 	andeq	sp, r0, fp, lsr r9
    6c48:	03240a00 	teqeq	r4, #0
    6c4c:	0187010c 	orreq	r0, r7, ip, lsl #2
    6c50:	410b0000 	mrsmi	r0, (UNDEF: 11)
    6c54:	03005243 	movweq	r5, #579	; 0x243
    6c58:	0099010e 	addseq	r0, r9, lr, lsl #2
    6c5c:	23020000 	movwcs	r0, #8192	; 0x2000
    6c60:	209d0c00 	addscs	r0, sp, r0, lsl #24
    6c64:	0f030000 	svceq	0x00030000
    6c68:	00009901 	andeq	r9, r0, r1, lsl #18
    6c6c:	04230200 	strteq	r0, [r3], #-512	; 0x200
    6c70:	00209a0c 	eoreq	r9, r0, ip, lsl #20
    6c74:	01100300 	tsteq	r0, r0, lsl #6
    6c78:	00000099 	muleq	r0, r9, r0
    6c7c:	0b082302 	bleq	20f88c <__Stack_Size+0x20f48c>
    6c80:	03005253 	movweq	r5, #595	; 0x253
    6c84:	00990111 	addseq	r0, r9, r1, lsl r1
    6c88:	23020000 	movwcs	r0, #8192	; 0x2000
    6c8c:	52430b0c 	subpl	r0, r3, #12288	; 0x3000
    6c90:	01120300 	tsteq	r2, r0, lsl #6
    6c94:	00000099 	muleq	r0, r9, r0
    6c98:	0b102302 	bleq	40f8a8 <__Stack_Size+0x40f4a8>
    6c9c:	03005241 	movweq	r5, #577	; 0x241
    6ca0:	00990113 	addseq	r0, r9, r3, lsl r1
    6ca4:	23020000 	movwcs	r0, #8192	; 0x2000
    6ca8:	22c30c14 	sbccs	r0, r3, #5120	; 0x1400
    6cac:	14030000 	strne	r0, [r3], #-0
    6cb0:	00009901 	andeq	r9, r0, r1, lsl #18
    6cb4:	18230200 	stmdane	r3!, {r9}
    6cb8:	52424f0b 	subpl	r4, r2, #44	; 0x2c
    6cbc:	01150300 	tsteq	r5, r0, lsl #6
    6cc0:	00000099 	muleq	r0, r9, r0
    6cc4:	0c1c2302 	ldceq	3, cr2, [ip], {2}
    6cc8:	00002030 	andeq	r2, r0, r0, lsr r0
    6ccc:	99011603 	stmdbls	r1, {r0, r1, r9, sl, ip}
    6cd0:	02000000 	andeq	r0, r0, #0
    6cd4:	0d002023 	stceq	0, cr2, [r0, #-140]	; 0xffffff74
    6cd8:	000022cc 	andeq	r2, r0, ip, asr #5
    6cdc:	f9011703 			; <UNDEFINED> instruction: 0xf9011703
    6ce0:	0a000000 	beq	6ce8 <__Stack_Size+0x68e8>
    6ce4:	01190310 	tsteq	r9, r0, lsl r3
    6ce8:	00000215 	andeq	r0, r0, r5, lsl r2
    6cec:	5044520b 	subpl	r5, r4, fp, lsl #4
    6cf0:	011b0300 	tsteq	fp, r0, lsl #6
    6cf4:	000000a9 	andeq	r0, r0, r9, lsr #1
    6cf8:	0c002302 	stceq	3, cr2, [r0], {2}
    6cfc:	0000228b 	andeq	r2, r0, fp, lsl #5
    6d00:	a9011c03 	stmdbge	r1, {r0, r1, sl, fp, ip}
    6d04:	02000000 	andeq	r0, r0, #0
    6d08:	900c0223 	andls	r0, ip, r3, lsr #4
    6d0c:	03000022 	movweq	r0, #34	; 0x22
    6d10:	00a9011d 	adceq	r0, r9, sp, lsl r1
    6d14:	23020000 	movwcs	r0, #8192	; 0x2000
    6d18:	22960c04 	addscs	r0, r6, #1024	; 0x400
    6d1c:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    6d20:	0000a901 	andeq	sl, r0, r1, lsl #18
    6d24:	06230200 	strteq	r0, [r3], -r0, lsl #4
    6d28:	0020630c 	eoreq	r6, r0, ip, lsl #6
    6d2c:	011f0300 	tsteq	pc, r0, lsl #6
    6d30:	000000a9 	andeq	r0, r0, r9, lsr #1
    6d34:	0c082302 	stceq	3, cr2, [r8], {2}
    6d38:	00002068 	andeq	r2, r0, r8, rrx
    6d3c:	a9012003 	stmdbge	r1, {r0, r1, sp}
    6d40:	02000000 	andeq	r0, r0, #0
    6d44:	6d0c0a23 	vstrvs	s0, [ip, #-140]	; 0xffffff74
    6d48:	03000020 	movweq	r0, #32
    6d4c:	00a90121 	adceq	r0, r9, r1, lsr #2
    6d50:	23020000 	movwcs	r0, #8192	; 0x2000
    6d54:	20720c0c 	rsbscs	r0, r2, ip, lsl #24
    6d58:	22030000 	andcs	r0, r3, #0
    6d5c:	0000a901 	andeq	sl, r0, r1, lsl #18
    6d60:	0e230200 	cdpeq	2, 2, cr0, cr3, cr0, {0}
    6d64:	21ec0d00 	mvncs	r0, r0, lsl #26
    6d68:	23030000 	movwcs	r0, #12288	; 0x3000
    6d6c:	00019301 	andeq	r9, r1, r1, lsl #6
    6d70:	04010700 	streq	r0, [r1], #-1792	; 0x700
    6d74:	0002481d 	andeq	r4, r2, sp, lsl r8
    6d78:	21620800 	cmncs	r2, r0, lsl #16
    6d7c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    6d80:	000020f6 	strdeq	r2, [r0], -r6
    6d84:	1fde0802 	svcne	0x00de0802
    6d88:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    6d8c:	000021b7 			; <UNDEFINED> instruction: 0x000021b7
    6d90:	21770804 	cmncs	r7, r4, lsl #16
    6d94:	00050000 	andeq	r0, r5, r0
    6d98:	00205605 	eoreq	r5, r0, r5, lsl #12
    6d9c:	21230400 	teqcs	r3, r0, lsl #8
    6da0:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    6da4:	0021dc01 	eoreq	sp, r1, r1, lsl #24
    6da8:	033f0100 	teqeq	pc, #0
    6dac:	00024801 	andeq	r4, r2, r1, lsl #16
    6db0:	02730100 	rsbseq	r0, r3, #0
    6db4:	dd0f0000 	stcle	0, cr0, [pc, #-0]	; 6dbc <__Stack_Size+0x69bc>
    6db8:	01000020 	tsteq	r0, r0, lsr #32
    6dbc:	02480341 	subeq	r0, r8, #67108865	; 0x4000001
    6dc0:	10000000 	andne	r0, r0, r0
    6dc4:	00084e01 	andeq	r4, r8, r1, lsl #28
    6dc8:	01560100 	cmpeq	r6, r0, lsl #2
    6dcc:	080053d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, lr}
    6dd0:	080053f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, lr}
    6dd4:	01007d02 	tsteq	r0, r2, lsl #26
    6dd8:	0000029c 	muleq	r0, ip, r2
    6ddc:	001ffe11 	andseq	pc, pc, r1, lsl lr	; <UNPREDICTABLE>
    6de0:	79560100 	ldmdbvc	r6, {r8}^
    6de4:	51000000 	mrspl	r0, (UNDEF: 0)
    6de8:	0000002d 	andeq	r0, r0, sp, lsr #32
    6dec:	22010110 	andcs	r0, r1, #4
    6df0:	6a010000 	bvs	46df8 <__Stack_Size+0x469f8>
    6df4:	0053f001 	subseq	pc, r3, r1
    6df8:	00540808 	subseq	r0, r4, r8, lsl #16
    6dfc:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    6e00:	0002c501 	andeq	ip, r2, r1, lsl #10
    6e04:	21c61100 	biccs	r1, r6, r0, lsl #2
    6e08:	6a010000 	bvs	46e10 <__Stack_Size+0x46a10>
    6e0c:	00000079 	andeq	r0, r0, r9, ror r0
    6e10:	00002d72 	andeq	r2, r0, r2, ror sp
    6e14:	84011000 	strhi	r1, [r1], #-0
    6e18:	01000010 	tsteq	r0, r0, lsl r0
    6e1c:	5408017e 	strpl	r0, [r8], #-382	; 0x17e
    6e20:	54200800 	strtpl	r0, [r0], #-2048	; 0x800
    6e24:	7d020800 	stcvc	8, cr0, [r2, #-0]
    6e28:	02ee0100 	rsceq	r0, lr, #0
    6e2c:	f5110000 			; <UNDEFINED> instruction: 0xf5110000
    6e30:	01000022 	tsteq	r0, r2, lsr #32
    6e34:	0000797e 	andeq	r7, r0, lr, ror r9
    6e38:	002d9300 	eoreq	r9, sp, r0, lsl #6
    6e3c:	01120000 	tsteq	r2, r0
    6e40:	00002035 	andeq	r2, r0, r5, lsr r0
    6e44:	20019001 	andcs	r9, r1, r1
    6e48:	38080054 	stmdacc	r8, {r2, r4, r6}
    6e4c:	02080054 	andeq	r0, r8, #84	; 0x54
    6e50:	1201007d 	andne	r0, r1, #125	; 0x7d
    6e54:	00210501 	eoreq	r0, r1, r1, lsl #10
    6e58:	019e0100 	orrseq	r0, lr, r0, lsl #2
    6e5c:	08005438 	stmdaeq	r0, {r3, r4, r5, sl, ip, lr}
    6e60:	08005448 	stmdaeq	r0, {r3, r6, sl, ip, lr}
    6e64:	01007d02 	tsteq	r0, r2, lsl #26
    6e68:	22360113 	eorscs	r0, r6, #-1073741820	; 0xc0000004
    6e6c:	96010000 	strls	r0, [r1], -r0
    6e70:	00790102 	rsbseq	r0, r9, r2, lsl #2
    6e74:	54480000 	strbpl	r0, [r8], #-0
    6e78:	54540800 	ldrbpl	r0, [r4], #-2048	; 0x800
    6e7c:	7d020800 	stcvc	8, cr0, [r2, #-0]
    6e80:	01130100 	tsteq	r3, r0, lsl #2
    6e84:	00002077 	andeq	r2, r0, r7, ror r0
    6e88:	0102a301 	tsteq	r2, r1, lsl #6
    6e8c:	00000079 	andeq	r0, r0, r9, ror r0
    6e90:	08005454 	stmdaeq	r0, {r2, r4, r6, sl, ip, lr}
    6e94:	08005460 	stmdaeq	r0, {r5, r6, sl, ip, lr}
    6e98:	01007d02 	tsteq	r0, r2, lsl #26
    6e9c:	218d0114 	orrcs	r0, sp, r4, lsl r1
    6ea0:	b1010000 	mrslt	r0, (UNDEF: 1)
    6ea4:	00ce0102 	sbceq	r0, lr, r2, lsl #2
    6ea8:	54600000 	strbtpl	r0, [r0], #-0
    6eac:	54700800 	ldrbtpl	r0, [r0], #-2048	; 0x800
    6eb0:	7d020800 	stcvc	8, cr0, [r2, #-0]
    6eb4:	037b0100 	cmneq	fp, #0
    6eb8:	d0150000 	andsle	r0, r5, r0
    6ebc:	0100001f 	tsteq	r0, pc, lsl r0
    6ec0:	00ce02b3 	strheq	r0, [lr], #35	; 0x23
    6ec4:	2db40000 	ldccs	0, cr0, [r4]
    6ec8:	14000000 	strne	r0, [r0], #-0
    6ecc:	00200c01 	eoreq	r0, r0, r1, lsl #24
    6ed0:	02c70100 	sbceq	r0, r7, #0
    6ed4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    6ed8:	00547000 	subseq	r7, r4, r0
    6edc:	00548008 	subseq	r8, r4, r8
    6ee0:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    6ee4:	0003aa01 	andeq	sl, r3, r1, lsl #20
    6ee8:	1e4f1500 	cdpne	5, 4, cr1, cr15, cr0, {0}
    6eec:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    6ef0:	0000ce02 	andeq	ip, r0, r2, lsl #28
    6ef4:	002dd900 	eoreq	sp, sp, r0, lsl #18
    6ef8:	01160000 	tsteq	r6, r0
    6efc:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    6f00:	0102e201 	tsteq	r2, r1, lsl #4
    6f04:	08005480 	stmdaeq	r0, {r7, sl, ip, lr}
    6f08:	08005498 	stmdaeq	r0, {r3, r4, r7, sl, ip, lr}
    6f0c:	01007d02 	tsteq	r0, r2, lsl #26
    6f10:	000003e3 	andeq	r0, r0, r3, ror #7
    6f14:	0022a817 	eoreq	sl, r2, r7, lsl r8
    6f18:	02e20100 	rsceq	r0, r2, #0
    6f1c:	00000084 	andeq	r0, r0, r4, lsl #1
    6f20:	00002dff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    6f24:	001cfb18 	andseq	pc, ip, r8, lsl fp	; <UNPREDICTABLE>
    6f28:	02e20100 	rsceq	r0, r2, #0
    6f2c:	000000ee 	andeq	r0, r0, lr, ror #1
    6f30:	14005101 	strne	r5, [r0], #-257	; 0x101
    6f34:	00213e01 	eoreq	r3, r1, r1, lsl #28
    6f38:	03010100 	movweq	r0, #4352	; 0x1100
    6f3c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    6f40:	00549800 	subseq	r9, r4, r0, lsl #16
    6f44:	0054b808 	subseq	fp, r4, r8, lsl #16
    6f48:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    6f4c:	00042201 	andeq	r2, r4, r1, lsl #4
    6f50:	22641700 	rsbcs	r1, r4, #0
    6f54:	01010000 	mrseq	r0, (UNDEF: 1)
    6f58:	00008403 	andeq	r8, r0, r3, lsl #8
    6f5c:	002e3900 	eoreq	r3, lr, r0, lsl #18
    6f60:	1e4f1500 	cdpne	5, 4, cr1, cr15, cr0, {0}
    6f64:	03010000 	movweq	r0, #4096	; 0x1000
    6f68:	0000ce03 	andeq	ip, r0, r3, lsl #28
    6f6c:	002e7300 	eoreq	r7, lr, r0, lsl #6
    6f70:	01160000 	tsteq	r6, r0
    6f74:	00002152 	andeq	r2, r0, r2, asr r1
    6f78:	01032e01 	tsteq	r3, r1, lsl #28
    6f7c:	080054b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, lr}
    6f80:	080054c4 	stmdaeq	r0, {r2, r6, r7, sl, ip, lr}
    6f84:	01007d02 	tsteq	r0, r2, lsl #26
    6f88:	0000044b 	andeq	r0, r0, fp, asr #8
    6f8c:	00226418 	eoreq	r6, r2, r8, lsl r4
    6f90:	032e0100 	teqeq	lr, #0
    6f94:	00000084 	andeq	r0, r0, r4, lsl #1
    6f98:	19005001 	stmdbne	r0, {r0, ip, lr}
    6f9c:	00000253 	andeq	r0, r0, r3, asr r2
    6fa0:	080054c4 	stmdaeq	r0, {r2, r6, r7, sl, ip, lr}
    6fa4:	080054ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, ip, lr}
    6fa8:	01007d02 	tsteq	r0, r2, lsl #26
    6fac:	0000048a 	andeq	r0, r0, sl, lsl #9
    6fb0:	0002661a 	andeq	r6, r2, sl, lsl r6
    6fb4:	002e9200 	eoreq	r9, lr, r0, lsl #4
    6fb8:	02531b00 	subseq	r1, r3, #0
    6fbc:	54d20000 	ldrbpl	r0, [r2], #0
    6fc0:	54e00800 	strbtpl	r0, [r0], #2048	; 0x800
    6fc4:	3f010800 	svccc	0x00010800
    6fc8:	54d21c03 	ldrbpl	r1, [r2], #3075	; 0xc03
    6fcc:	54e00800 	strbtpl	r0, [r0], #2048	; 0x800
    6fd0:	661d0800 	ldrvs	r0, [sp], -r0, lsl #16
    6fd4:	00000002 	andeq	r0, r0, r2
    6fd8:	2a1e0000 	bcs	786fe0 <__Stack_Size+0x786be0>
    6fdc:	01000020 	tsteq	r0, r0, lsr #32
    6fe0:	01010385 	smlabbeq	r1, r5, r3, r0
    6fe4:	000004a3 	andeq	r0, r0, r3, lsr #9
    6fe8:	0100691f 	tsteq	r0, pc, lsl r9
    6fec:	00990387 	addseq	r0, r9, r7, lsl #7
    6ff0:	20000000 	andcs	r0, r0, r0
    6ff4:	0022da01 	eoreq	sp, r2, r1, lsl #20
    6ff8:	03660100 	cmneq	r6, #0
    6ffc:	00024801 	andeq	r4, r2, r1, lsl #16
    7000:	0054ec00 	subseq	lr, r4, r0, lsl #24
    7004:	00552008 	subseq	r2, r5, r8
    7008:	002eb108 	eoreq	fp, lr, r8, lsl #2
    700c:	051d0100 	ldreq	r0, [sp, #-256]	; 0x100
    7010:	85170000 	ldrhi	r0, [r7, #-0]
    7014:	01000021 	tsteq	r0, r1, lsr #32
    7018:	00790366 	rsbseq	r0, r9, r6, ror #6
    701c:	2ed10000 	cdpcs	0, 13, cr0, cr1, cr0, {0}
    7020:	30150000 	andscc	r0, r5, r0
    7024:	0100001d 	tsteq	r0, sp, lsl r0
    7028:	02480368 	subeq	r0, r8, #-1610612735	; 0xa0000001
    702c:	2eef0000 	cdpcs	0, 14, cr0, cr15, cr0, {0}
    7030:	8a210000 	bhi	847038 <__Stack_Size+0x846c38>
    7034:	fa000004 	blx	704c <__Stack_Size+0x6c4c>
    7038:	0c080054 	stceq	0, cr0, [r8], {84}	; 0x54
    703c:	01080055 	qaddeq	r0, r5, r8
    7040:	050a0370 	streq	r0, [sl, #-880]	; 0x370
    7044:	fa1c0000 	blx	70704c <__Stack_Size+0x706c4c>
    7048:	0c080054 	stceq	0, cr0, [r8], {84}	; 0x54
    704c:	1a080055 	bne	2071a8 <__Stack_Size+0x206da8>
    7050:	00000498 	muleq	r0, r8, r4
    7054:	00002f24 	andeq	r2, r0, r4, lsr #30
    7058:	f4220000 	vld4.8	{d0-d3}, [r2], r0
    705c:	53080054 	movwpl	r0, #32852	; 0x8054
    7060:	22000002 	andcs	r0, r0, #2
    7064:	08005510 	stmdaeq	r0, {r4, r8, sl, ip, lr}
    7068:	00000253 	andeq	r0, r0, r3, asr r2
    706c:	a2012000 	andge	r2, r1, #0
    7070:	01000020 	tsteq	r0, r0, lsr #32
    7074:	4801026a 	stmdami	r1, {r1, r3, r5, r6, r9}
    7078:	20000002 	andcs	r0, r0, r2
    707c:	74080055 	strvc	r0, [r8], #-85	; 0x55
    7080:	4f080055 	svcmi	0x00080055
    7084:	0100002f 	tsteq	r0, pc, lsr #32
    7088:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    708c:	0020bd17 	eoreq	fp, r0, r7, lsl sp
    7090:	026a0100 	rsbeq	r0, sl, #0
    7094:	00000084 	andeq	r0, r0, r4, lsl #1
    7098:	00002f6f 	andeq	r2, r0, pc, ror #30
    709c:	001fb117 	andseq	fp, pc, r7, lsl r1	; <UNPREDICTABLE>
    70a0:	026a0100 	rsbeq	r0, sl, #0
    70a4:	00000084 	andeq	r0, r0, r4, lsl #1
    70a8:	00002f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    70ac:	0021ae17 	eoreq	sl, r1, r7, lsl lr
    70b0:	026a0100 	rsbeq	r0, sl, #0
    70b4:	00000084 	andeq	r0, r0, r4, lsl #1
    70b8:	00002fb1 			; <UNDEFINED> instruction: 0x00002fb1
    70bc:	001d3015 	andseq	r3, sp, r5, lsl r0
    70c0:	026c0100 	rsbeq	r0, ip, #0
    70c4:	00000248 	andeq	r0, r0, r8, asr #4
    70c8:	00002fd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    70cc:	00553a23 	subseq	r3, r5, r3, lsr #20
    70d0:	0004a308 	andeq	sl, r4, r8, lsl #6
    70d4:	00058f00 	andeq	r8, r5, r0, lsl #30
    70d8:	50012400 	andpl	r2, r1, r0, lsl #8
    70dc:	25003f01 	strcs	r3, [r0, #-3841]	; 0xf01
    70e0:	08005558 	stmdaeq	r0, {r3, r4, r6, r8, sl, ip, lr}
    70e4:	000004a3 	andeq	r0, r0, r3, lsr #9
    70e8:	01500124 	cmpeq	r0, r4, lsr #2
    70ec:	2000003f 	andcs	r0, r0, pc, lsr r0
    70f0:	0020c501 	eoreq	ip, r0, r1, lsl #10
    70f4:	02190100 	andseq	r0, r9, #0
    70f8:	00024801 	andeq	r4, r2, r1, lsl #16
    70fc:	00557400 	subseq	r7, r5, r0, lsl #8
    7100:	00560408 	subseq	r0, r6, r8, lsl #8
    7104:	002ffc08 	eoreq	pc, pc, r8, lsl #24
    7108:	061a0100 	ldreq	r0, [sl], -r0, lsl #2
    710c:	fb170000 	blx	5c7116 <__Stack_Size+0x5c6d16>
    7110:	0100001c 	tsteq	r0, ip, lsl r0
    7114:	00ee0219 	rsceq	r0, lr, r9, lsl r2
    7118:	301c0000 	andscc	r0, ip, r0
    711c:	30150000 	andscc	r0, r5, r0
    7120:	0100001d 	tsteq	r0, sp, lsl r0
    7124:	0248021b 	subeq	r0, r8, #-1342177279	; 0xb0000001
    7128:	303d0000 	eorscc	r0, sp, r0
    712c:	80230000 	eorhi	r0, r3, r0
    7130:	a3080055 	movwge	r0, #32853	; 0x8055
    7134:	f3000004 	vhadd.u8	d0, d0, d4
    7138:	24000005 	strcs	r0, [r0], #-5
    713c:	0a035001 	beq	db148 <__Stack_Size+0xdad48>
    7140:	23000fff 	movwcs	r0, #4095	; 0xfff
    7144:	080055a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, ip, lr}
    7148:	000004a3 	andeq	r0, r0, r3, lsr #9
    714c:	00000608 	andeq	r0, r0, r8, lsl #12
    7150:	03500124 	cmpeq	r0, #9
    7154:	000fff0a 	andeq	pc, pc, sl, lsl #30
    7158:	0055d225 	subseq	sp, r5, r5, lsr #4
    715c:	0004a308 	andeq	sl, r4, r8, lsl #6
    7160:	50012400 	andpl	r2, r1, r0, lsl #8
    7164:	0fff0a03 	svceq	0x00ff0a03
    7168:	01200000 	teqeq	r0, r0
    716c:	0000226f 	andeq	r2, r0, pc, ror #4
    7170:	0101ca01 	tsteq	r1, r1, lsl #20
    7174:	00000248 	andeq	r0, r0, r8, asr #4
    7178:	08005604 	stmdaeq	r0, {r2, r9, sl, ip, lr}
    717c:	080056a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, lr}
    7180:	0000307d 	andeq	r3, r0, sp, ror r0
    7184:	0006f501 	andeq	pc, r6, r1, lsl #10
    7188:	229c1700 	addscs	r1, ip, #0
    718c:	ca010000 	bgt	47194 <__Stack_Size+0x46d94>
    7190:	00007901 	andeq	r7, r0, r1, lsl #18
    7194:	00309d00 	eorseq	r9, r0, r0, lsl #26
    7198:	21f71500 	mvnscs	r1, r0, lsl #10
    719c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    71a0:	00008401 	andeq	r8, r0, r1, lsl #8
    71a4:	0030e600 	eorseq	lr, r0, r0, lsl #12
    71a8:	216d1500 	cmncs	sp, r0, lsl #10
    71ac:	cc010000 	stcgt	0, cr0, [r1], {-0}
    71b0:	00008401 	andeq	r8, r0, r1, lsl #8
    71b4:	00313200 	eorseq	r3, r1, r0, lsl #4
    71b8:	1fa71500 	svcne	0x00a71500
    71bc:	cc010000 	stcgt	0, cr0, [r1], {-0}
    71c0:	00008401 	andeq	r8, r0, r1, lsl #8
    71c4:	00318a00 	eorseq	r8, r1, r0, lsl #20
    71c8:	21101500 	tstcs	r0, r0, lsl #10
    71cc:	cc010000 	stcgt	0, cr0, [r1], {-0}
    71d0:	00008401 	andeq	r8, r0, r1, lsl #8
    71d4:	0031e600 	eorseq	lr, r1, r0, lsl #12
    71d8:	1d301500 	cfldr32ne	mvfx1, [r0, #-0]
    71dc:	ce010000 	cdpgt	0, 0, cr0, cr1, cr0, {0}
    71e0:	00024801 	andeq	r4, r2, r1, lsl #16
    71e4:	00322e00 	eorseq	r2, r2, r0, lsl #28
    71e8:	560e2300 	strpl	r2, [lr], -r0, lsl #6
    71ec:	04a30800 	strteq	r0, [r3], #2048	; 0x800
    71f0:	06ac0000 	strteq	r0, [ip], r0
    71f4:	01240000 	teqeq	r4, r0
    71f8:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    71fc:	00564223 	subseq	r4, r6, r3, lsr #4
    7200:	0004a308 	andeq	sl, r4, r8, lsl #6
    7204:	0006bf00 	andeq	fp, r6, r0, lsl #30
    7208:	50012400 	andpl	r2, r1, r0, lsl #8
    720c:	23003f01 	movwcs	r3, #3841	; 0xf01
    7210:	08005652 	stmdaeq	r0, {r1, r4, r6, r9, sl, ip, lr}
    7214:	000004a3 	andeq	r0, r0, r3, lsr #9
    7218:	000006d2 	ldrdeq	r0, [r0], -r2
    721c:	01500124 	cmpeq	r0, r4, lsr #2
    7220:	6823003f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r5}
    7224:	a3080056 	movwge	r0, #32854	; 0x8056
    7228:	e5000004 	str	r0, [r0, #-4]
    722c:	24000006 	strcs	r0, [r0], #-6
    7230:	3f015001 	svccc	0x00015001
    7234:	56802500 	strpl	r2, [r0], r0, lsl #10
    7238:	04a30800 	strteq	r0, [r3], #2048	; 0x800
    723c:	01240000 	teqeq	r4, r0
    7240:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    7244:	1a012000 	bne	4f24c <__Stack_Size+0x4ee4c>
    7248:	01000022 	tsteq	r0, r2, lsr #32
    724c:	48010199 	stmdami	r1, {r0, r3, r4, r7, r8}
    7250:	a0000002 	andge	r0, r0, r2
    7254:	e4080056 	str	r0, [r8], #-86	; 0x56
    7258:	84080056 	strhi	r0, [r8], #-86	; 0x56
    725c:	01000032 	tsteq	r0, r2, lsr r0
    7260:	00000767 	andeq	r0, r0, r7, ror #14
    7264:	002fd217 	eoreq	sp, pc, r7, lsl r2	; <UNPREDICTABLE>
    7268:	01990100 	orrseq	r0, r9, r0, lsl #2
    726c:	00000079 	andeq	r0, r0, r9, ror r0
    7270:	000032a4 	andeq	r3, r0, r4, lsr #5
    7274:	0021fc17 	eoreq	pc, r1, r7, lsl ip	; <UNPREDICTABLE>
    7278:	01990100 	orrseq	r0, r9, r0, lsl #2
    727c:	0000008f 	andeq	r0, r0, pc, lsl #1
    7280:	000032c2 	andeq	r3, r0, r2, asr #5
    7284:	001d3015 	andseq	r3, sp, r5, lsl r0
    7288:	019b0100 	orrseq	r0, fp, r0, lsl #2
    728c:	00000248 	andeq	r0, r0, r8, asr #4
    7290:	000032e3 	andeq	r3, r0, r3, ror #5
    7294:	0056ac23 	subseq	sl, r6, r3, lsr #24
    7298:	0004a308 	andeq	sl, r4, r8, lsl #6
    729c:	00075700 	andeq	r5, r7, r0, lsl #14
    72a0:	50012400 	andpl	r2, r1, r0, lsl #8
    72a4:	25003f01 	strcs	r3, [r0, #-3841]	; 0xf01
    72a8:	080056cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, ip, lr}
    72ac:	000004a3 	andeq	r0, r0, r3, lsr #9
    72b0:	01500124 	cmpeq	r0, r4, lsr #2
    72b4:	2000003f 	andcs	r0, r0, pc, lsr r0
    72b8:	00224e01 	eoreq	r4, r2, r1, lsl #28
    72bc:	01710100 	cmneq	r1, r0, lsl #2
    72c0:	00024801 	andeq	r4, r2, r1, lsl #16
    72c4:	0056e400 	subseq	lr, r6, r0, lsl #8
    72c8:	00571c08 	subseq	r1, r7, r8, lsl #24
    72cc:	00330d08 	eorseq	r0, r3, r8, lsl #26
    72d0:	07d90100 	ldrbeq	r0, [r9, r0, lsl #2]
    72d4:	d2170000 	andsle	r0, r7, #0
    72d8:	0100002f 	tsteq	r0, pc, lsr #32
    72dc:	00790171 	rsbseq	r0, r9, r1, ror r1
    72e0:	332d0000 	teqcc	sp, #0
    72e4:	fc170000 	ldc2	0, cr0, [r7], {-0}
    72e8:	01000021 	tsteq	r0, r1, lsr #32
    72ec:	00840171 	addeq	r0, r4, r1, ror r1
    72f0:	334b0000 	movtcc	r0, #45056	; 0xb000
    72f4:	30150000 	andscc	r0, r5, r0
    72f8:	0100001d 	tsteq	r0, sp, lsl r0
    72fc:	02480173 	subeq	r0, r8, #-1073741796	; 0xc000001c
    7300:	336c0000 	cmncc	ip, #0
    7304:	f0230000 			; <UNDEFINED> instruction: 0xf0230000
    7308:	a3080056 	movwge	r0, #32854	; 0x8056
    730c:	c9000004 	stmdbgt	r0, {r2}
    7310:	24000007 	strcs	r0, [r0], #-7
    7314:	3f015001 	svccc	0x00015001
    7318:	57062500 	strpl	r2, [r6, -r0, lsl #10]
    731c:	04a30800 	strteq	r0, [r3], #2048	; 0x800
    7320:	01240000 	teqeq	r4, r0
    7324:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    7328:	b1012000 	mrslt	r2, (UNDEF: 1)
    732c:	01000022 	tsteq	r0, r2, lsr #32
    7330:	48010136 	stmdami	r1, {r1, r2, r4, r5, r8}
    7334:	1c000002 	stcne	0, cr0, [r0], {2}
    7338:	68080057 	stmdavs	r8, {r0, r1, r2, r4, r6}
    733c:	96080057 			; <UNDEFINED> instruction: 0x96080057
    7340:	01000033 	tsteq	r0, r3, lsr r0
    7344:	0000085e 	andeq	r0, r0, lr, asr r8
    7348:	002fd217 	eoreq	sp, pc, r7, lsl r2	; <UNPREDICTABLE>
    734c:	01360100 	teqeq	r6, r0, lsl #2
    7350:	00000079 	andeq	r0, r0, r9, ror r0
    7354:	000033b6 			; <UNDEFINED> instruction: 0x000033b6
    7358:	0021fc17 	eoreq	pc, r1, r7, lsl ip	; <UNPREDICTABLE>
    735c:	01360100 	teqeq	r6, r0, lsl #2
    7360:	00000079 	andeq	r0, r0, r9, ror r0
    7364:	000033d4 	ldrdeq	r3, [r0], -r4
    7368:	001d3015 	andseq	r3, sp, r5, lsl r0
    736c:	01380100 	teqeq	r8, r0, lsl #2
    7370:	00000248 	andeq	r0, r0, r8, asr #4
    7374:	00003400 	andeq	r3, r0, r0, lsl #8
    7378:	00572823 	subseq	r2, r7, r3, lsr #16
    737c:	0004a308 	andeq	sl, r4, r8, lsl #6
    7380:	00083b00 	andeq	r3, r8, r0, lsl #22
    7384:	50012400 	andpl	r2, r1, r0, lsl #8
    7388:	23003f01 	movwcs	r3, #3841	; 0xf01
    738c:	08005740 	stmdaeq	r0, {r6, r8, r9, sl, ip, lr}
    7390:	000004a3 	andeq	r0, r0, r3, lsr #9
    7394:	0000084e 	andeq	r0, r0, lr, asr #16
    7398:	01500124 	cmpeq	r0, r4, lsr #2
    739c:	4e25003f 	mcrmi	0, 1, r0, cr5, cr15, {1}
    73a0:	a3080057 	movwge	r0, #32855	; 0x8057
    73a4:	24000004 	strcs	r0, [r0], #-4
    73a8:	3f015001 	svccc	0x00015001
    73ac:	01260000 	teqeq	r6, r0
    73b0:	00001fb9 			; <UNDEFINED> instruction: 0x00001fb9
    73b4:	4801f701 	stmdami	r1, {r0, r8, r9, sl, ip, sp, lr, pc}
    73b8:	68000002 	stmdavs	r0, {r1}
    73bc:	dc080057 	stcle	0, cr0, [r8], {87}	; 0x57
    73c0:	40080057 	andmi	r0, r8, r7, asr r0
    73c4:	01000034 	tsteq	r0, r4, lsr r0
    73c8:	000008c5 	andeq	r0, r0, r5, asr #17
    73cc:	001d3027 	andseq	r3, sp, r7, lsr #32
    73d0:	48f90100 	ldmmi	r9!, {r8}^
    73d4:	60000002 	andvs	r0, r0, r2
    73d8:	23000034 	movwcs	r0, #52	; 0x34
    73dc:	08005772 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sl, ip, lr}
    73e0:	000004a3 	andeq	r0, r0, r3, lsr #9
    73e4:	000008a0 	andeq	r0, r0, r0, lsr #17
    73e8:	03500124 	cmpeq	r0, #9
    73ec:	000fff0a 	andeq	pc, pc, sl, lsl #30
    73f0:	00579a23 	subseq	r9, r7, r3, lsr #20
    73f4:	0004a308 	andeq	sl, r4, r8, lsl #6
    73f8:	0008b500 	andeq	fp, r8, r0, lsl #10
    73fc:	50012400 	andpl	r2, r1, r0, lsl #8
    7400:	0fff0a03 	svceq	0x00ff0a03
    7404:	57bc2500 	ldrpl	r2, [ip, r0, lsl #10]!
    7408:	04a30800 	strteq	r0, [r3], #2048	; 0x800
    740c:	01240000 	teqeq	r4, r0
    7410:	003f0150 	eorseq	r0, pc, r0, asr r1	; <UNPREDICTABLE>
    7414:	42012600 	andmi	r2, r1, #0
    7418:	01000020 	tsteq	r0, r0, lsr #32
    741c:	024801d4 	subeq	r0, r8, #53	; 0x35
    7420:	57dc0000 	ldrbpl	r0, [ip, r0]
    7424:	58180800 	ldmdapl	r8, {fp}
    7428:	34a00800 	strtcc	r0, [r0], #2048	; 0x800
    742c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    7430:	27000009 	strcs	r0, [r0, -r9]
    7434:	00001d30 	andeq	r1, r0, r0, lsr sp
    7438:	0248d601 	subeq	sp, r8, #1048576	; 0x100000
    743c:	34c00000 	strbcc	r0, [r0], #0
    7440:	e6230000 	strt	r0, [r3], -r0
    7444:	a3080057 	movwge	r0, #32855	; 0x8057
    7448:	07000004 	streq	r0, [r0, -r4]
    744c:	24000009 	strcs	r0, [r0], #-9
    7450:	0a035001 	beq	db45c <__Stack_Size+0xdb05c>
    7454:	25000fff 	strcs	r0, [r0, #-4095]	; 0xfff
    7458:	08005804 	stmdaeq	r0, {r2, fp, ip, lr}
    745c:	000004a3 	andeq	r0, r0, r3, lsr #9
    7460:	03500124 	cmpeq	r0, #9
    7464:	000fff0a 	andeq	pc, pc, sl, lsl #30
    7468:	ee012800 	cdp	8, 0, cr2, cr1, cr0, {0}
    746c:	0100001f 	tsteq	r0, pc, lsl r0
    7470:	024801ad 	subeq	r0, r8, #1073741867	; 0x4000002b
    7474:	58180000 	ldmdapl	r8, {}	; <UNPREDICTABLE>
    7478:	58580800 	ldmdapl	r8, {fp}^
    747c:	34ea0800 	strbtcc	r0, [sl], #2048	; 0x800
    7480:	11010000 	mrsne	r0, (UNDEF: 1)
    7484:	000020e9 	andeq	r2, r0, r9, ror #1
    7488:	0079ad01 	rsbseq	sl, r9, r1, lsl #26
    748c:	350a0000 	strcc	r0, [sl, #-0]
    7490:	30270000 	eorcc	r0, r7, r0
    7494:	0100001d 	tsteq	r0, sp, lsl r0
    7498:	000248af 	andeq	r4, r2, pc, lsr #17
    749c:	00352800 	eorseq	r2, r5, r0, lsl #16
    74a0:	58242300 	stmdapl	r4!, {r8, r9, sp}
    74a4:	04a30800 	strteq	r0, [r3], #2048	; 0x800
    74a8:	09660000 	stmdbeq	r6!, {}^	; <UNPREDICTABLE>
    74ac:	01240000 	teqeq	r4, r0
    74b0:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    74b4:	4425000f 	strtmi	r0, [r5], #-15
    74b8:	a3080058 	movwge	r0, #32856	; 0x8058
    74bc:	24000004 	strcs	r0, [r0], #-4
    74c0:	0a035001 	beq	db4cc <__Stack_Size+0xdb0cc>
    74c4:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    74c8:	0007d100 	andeq	sp, r7, r0, lsl #2
    74cc:	4c000200 	sfmmi	f0, 4, [r0], {-0}
    74d0:	0400000d 	streq	r0, [r0], #-13
    74d4:	00021101 	andeq	r1, r2, r1, lsl #2
    74d8:	23670100 	cmncs	r7, #0
    74dc:	018b0000 	orreq	r0, fp, r0
    74e0:	58580000 	ldmdapl	r8, {}^	; <UNPREDICTABLE>
    74e4:	5ac00800 	bpl	ff0094ec <SCS_BASE+0x1effb4ec>
    74e8:	113c0800 	teqne	ip, r0, lsl #16
    74ec:	04020000 	streq	r0, [r2], #-0
    74f0:	0000d307 	andeq	sp, r0, r7, lsl #6
    74f4:	06010200 	streq	r0, [r1], -r0, lsl #4
    74f8:	0000015b 	andeq	r0, r0, fp, asr r1
    74fc:	59080102 	stmdbpl	r8, {r1, r8}
    7500:	02000001 	andeq	r0, r0, #1
    7504:	00250502 	eoreq	r0, r5, r2, lsl #10
    7508:	02020000 	andeq	r0, r2, #0
    750c:	0001c407 	andeq	ip, r1, r7, lsl #8
    7510:	05040300 	streq	r0, [r4, #-768]	; 0x300
    7514:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7518:	bb050802 	bllt	149528 <__Stack_Size+0x149128>
    751c:	02000000 	andeq	r0, r0, #0
    7520:	00c90708 	sbceq	r0, r9, r8, lsl #14
    7524:	04020000 	streq	r0, [r2], #-0
    7528:	0000c005 	andeq	ip, r0, r5
    752c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7530:	0000002f 	andeq	r0, r0, pc, lsr #32
    7534:	ce070402 	cdpgt	4, 0, cr0, cr7, cr2, {0}
    7538:	02000000 	andeq	r0, r0, #0
    753c:	01620801 	cmneq	r2, r1, lsl #16
    7540:	75040000 	strvc	r0, [r4, #-0]
    7544:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    7548:	00006b27 	andeq	r6, r0, r7, lsr #22
    754c:	31750400 	cmncc	r5, r0, lsl #8
    7550:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    7554:	00000041 	andeq	r0, r0, r1, asr #32
    7558:	00387504 	eorseq	r7, r8, r4, lsl #10
    755c:	00332902 	eorseq	r2, r3, r2, lsl #18
    7560:	7d050000 	stcvc	0, cr0, [r5, #-0]
    7564:	0200000d 	andeq	r0, r0, #13
    7568:	0000a42f 	andeq	sl, r0, pc, lsr #8
    756c:	006b0600 	rsbeq	r0, fp, r0, lsl #12
    7570:	01070000 	mrseq	r0, (UNDEF: 7)
    7574:	00be3b02 	adcseq	r3, lr, r2, lsl #22
    7578:	17080000 	strne	r0, [r8, -r0]
    757c:	00000015 	andeq	r0, r0, r5, lsl r0
    7580:	00193508 	andseq	r3, r9, r8, lsl #10
    7584:	05000100 	streq	r0, [r0, #-256]	; 0x100
    7588:	000015ee 	andeq	r1, r0, lr, ror #11
    758c:	00a93b02 	adceq	r3, r9, r2, lsl #22
    7590:	1c090000 	stcne	0, cr0, [r9], {-0}
    7594:	3c014e03 	stccc	14, cr4, [r1], {3}
    7598:	0a000001 	beq	75a4 <__Stack_Size+0x71a4>
    759c:	004c5243 	subeq	r5, ip, r3, asr #4
    75a0:	99015003 	stmdbls	r1, {r0, r1, ip, lr}
    75a4:	02000000 	andeq	r0, r0, #0
    75a8:	430a0023 	movwmi	r0, #40995	; 0xa023
    75ac:	03004852 	movweq	r4, #2130	; 0x852
    75b0:	00990151 	addseq	r0, r9, r1, asr r1
    75b4:	23020000 	movwcs	r0, #8192	; 0x2000
    75b8:	44490a04 	strbmi	r0, [r9], #-2564	; 0xa04
    75bc:	52030052 	andpl	r0, r3, #82	; 0x52
    75c0:	00009901 	andeq	r9, r0, r1, lsl #18
    75c4:	08230200 	stmdaeq	r3!, {r9}
    75c8:	52444f0a 	subpl	r4, r4, #40	; 0x28
    75cc:	01530300 	cmpeq	r3, r0, lsl #6
    75d0:	00000099 	muleq	r0, r9, r0
    75d4:	0b0c2302 	bleq	3101e4 <__Stack_Size+0x30fde4>
    75d8:	00001977 	andeq	r1, r0, r7, ror r9
    75dc:	99015403 	stmdbls	r1, {r0, r1, sl, ip, lr}
    75e0:	02000000 	andeq	r0, r0, #0
    75e4:	420a1023 	andmi	r1, sl, #35	; 0x23
    75e8:	03005252 	movweq	r5, #594	; 0x252
    75ec:	00990155 	addseq	r0, r9, r5, asr r1
    75f0:	23020000 	movwcs	r0, #8192	; 0x2000
    75f4:	11a40b14 			; <UNDEFINED> instruction: 0x11a40b14
    75f8:	56030000 	strpl	r0, [r3], -r0
    75fc:	00009901 	andeq	r9, r0, r1, lsl #18
    7600:	18230200 	stmdane	r3!, {r9}
    7604:	19dd0c00 	ldmibne	sp, {sl, fp}^
    7608:	57030000 	strpl	r0, [r3, -r0]
    760c:	0000c901 	andeq	ip, r0, r1, lsl #18
    7610:	03180900 	tsteq	r8, #0
    7614:	017f0159 	cmneq	pc, r9, asr r1	; <UNPREDICTABLE>
    7618:	820b0000 	andhi	r0, fp, #0
    761c:	03000024 	movweq	r0, #36	; 0x24
    7620:	0099015b 	addseq	r0, r9, fp, asr r1
    7624:	23020000 	movwcs	r0, #8192	; 0x2000
    7628:	24670b00 	strbtcs	r0, [r7], #-2816	; 0xb00
    762c:	5c030000 	stcpl	0, cr0, [r3], {-0}
    7630:	00009901 	andeq	r9, r0, r1, lsl #18
    7634:	04230200 	strteq	r0, [r3], #-512	; 0x200
    7638:	0023600b 	eoreq	r6, r3, fp
    763c:	015d0300 	cmpeq	sp, r0, lsl #6
    7640:	0000018f 	andeq	r0, r0, pc, lsl #3
    7644:	00082302 	andeq	r2, r8, r2, lsl #6
    7648:	0000990d 	andeq	r9, r0, sp, lsl #18
    764c:	00018f00 	andeq	r8, r1, r0, lsl #30
    7650:	00640e00 	rsbeq	r0, r4, r0, lsl #28
    7654:	00030000 	andeq	r0, r3, r0
    7658:	00017f06 	andeq	r7, r1, r6, lsl #30
    765c:	24500c00 	ldrbcs	r0, [r0], #-3072	; 0xc00
    7660:	5e030000 	cdppl	0, 0, cr0, cr3, cr0, {0}
    7664:	00014801 	andeq	r4, r1, r1, lsl #16
    7668:	04010700 	streq	r0, [r1], #-1792	; 0x700
    766c:	0001bb23 	andeq	fp, r1, r3, lsr #22
    7670:	1afe0800 	bne	fff89678 <SCS_BASE+0x1ff7b678>
    7674:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    7678:	0000180c 	andeq	r1, r0, ip, lsl #16
    767c:	0e490802 	cdpeq	8, 4, cr0, cr9, cr2, {0}
    7680:	00030000 	andeq	r0, r3, r0
    7684:	00181c05 	andseq	r1, r8, r5, lsl #24
    7688:	a0270400 	eorge	r0, r7, r0, lsl #8
    768c:	07000001 	streq	r0, [r0, -r1]
    7690:	002e0401 	eoreq	r0, lr, r1, lsl #8
    7694:	08000002 	stmdaeq	r0, {r1}
    7698:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
    769c:	18d70800 	ldmne	r7, {fp}^
    76a0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    76a4:	00001bcf 	andeq	r1, r0, pc, asr #23
    76a8:	086c0828 	stmdaeq	ip!, {r3, r5, fp}^
    76ac:	00c80000 	sbceq	r0, r8, r0
    76b0:	000dea08 	andeq	lr, sp, r8, lsl #20
    76b4:	8b081400 	blhi	20c6bc <__Stack_Size+0x20c2bc>
    76b8:	1000000e 	andne	r0, r0, lr
    76bc:	000b5f08 	andeq	r5, fp, r8, lsl #30
    76c0:	e2081c00 	and	r1, r8, #0
    76c4:	1800000c 	stmdane	r0, {r2, r3}
    76c8:	17620500 	strbne	r0, [r2, -r0, lsl #10]!
    76cc:	36040000 	strcc	r0, [r4], -r0
    76d0:	000001c6 	andeq	r0, r0, r6, asr #3
    76d4:	3e04040f 	cdpcc	4, 0, cr0, cr4, cr15, {0}
    76d8:	0000023e 	andeq	r0, r0, lr, lsr r2
    76dc:	00182e10 	andseq	r2, r8, r0, lsl lr
    76e0:	843f0400 	ldrthi	r0, [pc], #-1024	; 76e8 <__Stack_Size+0x72e8>
    76e4:	02000000 	andeq	r0, r0, #0
    76e8:	5a100023 	bpl	40777c <__Stack_Size+0x40737c>
    76ec:	0400000a 	streq	r0, [r0], #-10
    76f0:	0001bb40 	andeq	fp, r1, r0, asr #22
    76f4:	02230200 	eoreq	r0, r3, #0
    76f8:	0016fc10 	andseq	pc, r6, r0, lsl ip	; <UNPREDICTABLE>
    76fc:	00410400 	subeq	r0, r1, r0, lsl #8
    7700:	02000002 	andeq	r0, r0, #2
    7704:	05000323 	streq	r0, [r0, #-803]	; 0x323
    7708:	00000c33 	andeq	r0, r0, r3, lsr ip
    770c:	020b4204 	andeq	r4, fp, #1073741824	; 0x40000000
    7710:	01070000 	mrseq	r0, (UNDEF: 7)
    7714:	025e4504 	subseq	r4, lr, #16777216	; 0x1000000
    7718:	48080000 	stmdami	r8, {}	; <UNPREDICTABLE>
    771c:	00000023 	andeq	r0, r0, r3, lsr #32
    7720:	00231108 	eoreq	r1, r3, r8, lsl #2
    7724:	05000100 	streq	r0, [r0, #-256]	; 0x100
    7728:	0000245d 	andeq	r2, r0, sp, asr r4
    772c:	02494804 	subeq	r4, r9, #262144	; 0x40000
    7730:	01110000 	tsteq	r1, r0
    7734:	000023a2 	andeq	r2, r0, r2, lsr #7
    7738:	58013301 	stmdapl	r1, {r0, r8, r9, ip, sp}
    773c:	fc080058 	stc2	0, cr0, [r8], {88}	; 0x58
    7740:	52080058 	andpl	r0, r8, #88	; 0x58
    7744:	01000035 	tsteq	r0, r5, lsr r0
    7748:	00000350 	andeq	r0, r0, r0, asr r3
    774c:	00246c12 	eoreq	r6, r4, r2, lsl ip
    7750:	50330100 	eorspl	r0, r3, r0, lsl #2
    7754:	72000003 	andvc	r0, r0, #3
    7758:	13000035 	movwne	r0, #53	; 0x35
    775c:	08005882 	stmdaeq	r0, {r1, r7, fp, ip, lr}
    7760:	000007be 			; <UNDEFINED> instruction: 0x000007be
    7764:	000002aa 	andeq	r0, r0, sl, lsr #5
    7768:	01510114 	cmpeq	r1, r4, lsl r1
    776c:	50011431 	andpl	r1, r1, r1, lsr r4
    7770:	13003401 	movwne	r3, #1025	; 0x401
    7774:	080058a4 	stmdaeq	r0, {r2, r5, r7, fp, ip, lr}
    7778:	000007be 			; <UNDEFINED> instruction: 0x000007be
    777c:	000002c3 	andeq	r0, r0, r3, asr #5
    7780:	01510114 	cmpeq	r1, r4, lsl r1
    7784:	50011431 	andpl	r1, r1, r1, lsr r4
    7788:	00400802 	subeq	r0, r0, r2, lsl #16
    778c:	0058b013 	subseq	fp, r8, r3, lsl r0
    7790:	0007be08 	andeq	fp, r7, r8, lsl #28
    7794:	0002db00 	andeq	sp, r2, r0, lsl #22
    7798:	51011400 	tstpl	r1, r0, lsl #8
    779c:	01143101 	tsteq	r4, r1, lsl #2
    77a0:	00380150 	eorseq	r0, r8, r0, asr r1
    77a4:	0058bc13 	subseq	fp, r8, r3, lsl ip
    77a8:	0007be08 	andeq	fp, r7, r8, lsl #28
    77ac:	0002f300 	andeq	pc, r2, r0, lsl #6
    77b0:	51011400 	tstpl	r1, r0, lsl #8
    77b4:	01143101 	tsteq	r4, r1, lsl #2
    77b8:	00400150 	subeq	r0, r0, r0, asr r1
    77bc:	0058c813 	subseq	ip, r8, r3, lsl r8
    77c0:	0007be08 	andeq	fp, r7, r8, lsl #28
    77c4:	00030c00 	andeq	r0, r3, r0, lsl #24
    77c8:	51011400 	tstpl	r1, r0, lsl #8
    77cc:	01143101 	tsteq	r4, r1, lsl #2
    77d0:	20080250 	andcs	r0, r8, r0, asr r2
    77d4:	58d41300 	ldmpl	r4, {r8, r9, ip}^
    77d8:	07be0800 	ldreq	r0, [lr, r0, lsl #16]!
    77dc:	03250000 	teqeq	r5, #0
    77e0:	01140000 	tsteq	r4, r0
    77e4:	14310151 	ldrtne	r0, [r1], #-337	; 0x151
    77e8:	08025001 	stmdaeq	r2, {r0, ip, lr}
    77ec:	e2130080 	ands	r0, r3, #128	; 0x80
    77f0:	be080058 	mcrlt	0, 0, r0, cr8, cr8, {2}
    77f4:	3f000007 	svccc	0x00000007
    77f8:	14000003 	strne	r0, [r0], #-3
    77fc:	31015101 	tstcc	r1, r1, lsl #2
    7800:	03500114 	cmpeq	r0, #5
    7804:	0001000a 	andeq	r0, r1, sl
    7808:	0058f015 	subseq	pc, r8, r5, lsl r0	; <UNPREDICTABLE>
    780c:	07be0108 	ldreq	r0, [lr, r8, lsl #2]!
    7810:	01140000 	tsteq	r4, r0
    7814:	00300151 	eorseq	r0, r0, r1, asr r1
    7818:	3c041600 	stccc	6, cr1, [r4], {-0}
    781c:	11000001 	tstne	r0, r1
    7820:	00249e01 	eoreq	r9, r4, r1, lsl #28
    7824:	016b0100 	cmneq	fp, r0, lsl #2
    7828:	080058fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, lr}
    782c:	08005912 	stmdaeq	r0, {r1, r4, r8, fp, ip, lr}
    7830:	00003634 	andeq	r3, r0, r4, lsr r6
    7834:	00039e01 	andeq	r9, r3, r1, lsl #28
    7838:	59061300 	stmdbpl	r6, {r8, r9, ip}
    783c:	07be0800 	ldreq	r0, [lr, r0, lsl #16]!
    7840:	03880000 	orreq	r0, r8, #0
    7844:	01140000 	tsteq	r4, r0
    7848:	14310151 	ldrtne	r0, [r1], #-337	; 0x151
    784c:	31015001 	tstcc	r1, r1
    7850:	59121500 	ldmdbpl	r2, {r8, sl, ip}
    7854:	be010800 	cdplt	8, 0, cr0, cr1, cr0, {0}
    7858:	14000007 	strne	r0, [r0], #-7
    785c:	30015101 	andcc	r5, r1, r1, lsl #2
    7860:	01500114 	cmpeq	r0, r4, lsl r1
    7864:	11000031 	tstne	r0, r1, lsr r0
    7868:	0015c801 	andseq	ip, r5, r1, lsl #16
    786c:	017c0100 	cmneq	ip, r0, lsl #2
    7870:	08005912 	stmdaeq	r0, {r1, r4, r8, fp, ip, lr}
    7874:	080059b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, fp, ip, lr}
    7878:	00003654 	andeq	r3, r0, r4, asr r6
    787c:	00042f01 	andeq	r2, r4, r1, lsl #30
    7880:	246c1700 	strbtcs	r1, [ip], #-1792	; 0x700
    7884:	7c010000 	stcvc	0, cr0, [r1], {-0}
    7888:	00000350 	andeq	r0, r0, r0, asr r3
    788c:	72125001 	andsvc	r5, r2, #1
    7890:	01000024 	tsteq	r0, r4, lsr #32
    7894:	00042f7c 	andeq	r2, r4, ip, ror pc
    7898:	00367400 	eorseq	r7, r6, r0, lsl #8
    789c:	23d81800 	bicscs	r1, r8, #0
    78a0:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
    78a4:	00000079 	andeq	r0, r0, r9, ror r0
    78a8:	00003695 	muleq	r0, r5, r6
    78ac:	00242118 	eoreq	r2, r4, r8, lsl r1
    78b0:	797e0100 	ldmdbvc	lr!, {r8}^
    78b4:	c4000000 	strgt	r0, [r0], #-0
    78b8:	18000036 	stmdane	r0, {r1, r2, r4, r5}
    78bc:	0000230a 	andeq	r2, r0, sl, lsl #6
    78c0:	00797e01 	rsbseq	r7, r9, r1, lsl #28
    78c4:	36ee0000 	strbtcc	r0, [lr], r0
    78c8:	70190000 	andsvc	r0, r9, r0
    78cc:	0100736f 	tsteq	r0, pc, ror #6
    78d0:	0000797e 	andeq	r7, r0, lr, ror r9
    78d4:	00372400 	eorseq	r2, r7, r0, lsl #8
    78d8:	1d641800 	stclne	8, cr1, [r4, #-0]
    78dc:	7f010000 	svcvc	0x00010000
    78e0:	00000079 	andeq	r0, r0, r9, ror r0
    78e4:	000037a0 	andeq	r3, r0, r0, lsr #15
    78e8:	00238a18 	eoreq	r8, r3, r8, lsl sl
    78ec:	797f0100 	ldmdbvc	pc!, {r8}^	; <UNPREDICTABLE>
    78f0:	ca000000 	bgt	78f8 <__Stack_Size+0x74f8>
    78f4:	00000037 	andeq	r0, r0, r7, lsr r0
    78f8:	023e0416 	eorseq	r0, lr, #369098752	; 0x16000000
    78fc:	011a0000 	tsteq	sl, r0
    7900:	00000b08 	andeq	r0, r0, r8, lsl #22
    7904:	b201e501 	andlt	lr, r1, #4194304	; 0x400000
    7908:	c2080059 	andgt	r0, r8, #89	; 0x59
    790c:	02080059 	andeq	r0, r8, #89	; 0x59
    7910:	5c01007d 	stcpl	0, cr0, [r1], {125}	; 0x7d
    7914:	17000004 	strne	r0, [r0, -r4]
    7918:	00002472 	andeq	r2, r0, r2, ror r4
    791c:	042fe501 	strteq	lr, [pc], #-1281	; 7924 <__Stack_Size+0x7524>
    7920:	50010000 	andpl	r0, r1, r0
    7924:	6e011b00 	vmlavs.f64	d1, d1, d0
    7928:	01000010 	tsteq	r0, r0, lsl r0
    792c:	008f01f6 	strdeq	r0, [pc], r6
    7930:	59c20000 	stmibpl	r2, {}^	; <UNPREDICTABLE>
    7934:	59ce0800 	stmibpl	lr, {fp}^
    7938:	7d020800 	stcvc	8, cr0, [r2, #-0]
    793c:	04a50100 	strteq	r0, [r5], #256	; 0x100
    7940:	6c120000 	ldcvs	0, cr0, [r2], {-0}
    7944:	01000024 	tsteq	r0, r4, lsr #32
    7948:	000350f6 	strdeq	r5, [r3], -r6
    794c:	00381200 	eorseq	r1, r8, r0, lsl #4
    7950:	182e1700 	stmdane	lr!, {r8, r9, sl, ip}
    7954:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    7958:	00000084 	andeq	r0, r0, r4, lsl #1
    795c:	4f185101 	svcmi	0x00185101
    7960:	0100001e 	tsteq	r0, lr, lsl r0
    7964:	00008ff8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    7968:	00383300 	eorseq	r3, r8, r0, lsl #6
    796c:	011c0000 	tsteq	ip, r0
    7970:	000023f3 	strdeq	r2, [r0], -r3
    7974:	01011001 	tsteq	r1, r1
    7978:	00000084 	andeq	r0, r0, r4, lsl #1
    797c:	080059ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip, lr}
    7980:	080059d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, lr}
    7984:	01007d02 	tsteq	r0, r2, lsl #26
    7988:	000004d4 	ldrdeq	r0, [r0], -r4
    798c:	00246c1d 	eoreq	r6, r4, sp, lsl ip
    7990:	01100100 	tsteq	r0, r0, lsl #2
    7994:	00000350 	andeq	r0, r0, r0, asr r3
    7998:	0000385d 	andeq	r3, r0, sp, asr r8
    799c:	87011c00 	strhi	r1, [r1, -r0, lsl #24]
    79a0:	01000024 	tsteq	r0, r4, lsr #32
    79a4:	8f010121 	svchi	0x00010121
    79a8:	d4000000 	strle	r0, [r0], #-0
    79ac:	e0080059 	and	r0, r8, r9, asr r0
    79b0:	02080059 	andeq	r0, r8, #89	; 0x59
    79b4:	2101007d 	tstcs	r1, sp, ror r0
    79b8:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    79bc:	0000246c 	andeq	r2, r0, ip, ror #8
    79c0:	50012101 	andpl	r2, r1, r1, lsl #2
    79c4:	7e000003 	cdpvc	0, 0, cr0, cr0, cr3, {0}
    79c8:	1e000038 	mcrne	0, 0, r0, cr0, cr8, {1}
    79cc:	0000182e 	andeq	r1, r0, lr, lsr #16
    79d0:	84012101 	strhi	r2, [r1], #-257	; 0x101
    79d4:	01000000 	mrseq	r0, (UNDEF: 0)
    79d8:	1e4f1f51 	mcrne	15, 2, r1, cr15, cr1, {2}
    79dc:	23010000 	movwcs	r0, #4096	; 0x1000
    79e0:	00008f01 	andeq	r8, r0, r1, lsl #30
    79e4:	00389f00 	eorseq	r9, r8, r0, lsl #30
    79e8:	011c0000 	tsteq	ip, r0
    79ec:	00002319 	andeq	r2, r0, r9, lsl r3
    79f0:	01013b01 	tsteq	r1, r1, lsl #22
    79f4:	00000084 	andeq	r0, r0, r4, lsl #1
    79f8:	080059e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, lr}
    79fc:	080059e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp, ip, lr}
    7a00:	01007d02 	tsteq	r0, r2, lsl #26
    7a04:	00000550 	andeq	r0, r0, r0, asr r5
    7a08:	00246c1d 	eoreq	r6, r4, sp, lsl ip
    7a0c:	013b0100 	teqeq	fp, r0, lsl #2
    7a10:	00000350 	andeq	r0, r0, r0, asr r3
    7a14:	000038c9 	andeq	r3, r0, r9, asr #17
    7a18:	4c012000 	stcmi	0, cr2, [r1], {-0}
    7a1c:	0100001a 	tsteq	r0, sl, lsl r0
    7a20:	e601014d 	str	r0, [r1], -sp, asr #2
    7a24:	ea080059 	b	207b90 <__Stack_Size+0x207790>
    7a28:	02080059 	andeq	r0, r8, #89	; 0x59
    7a2c:	8701007d 	smlsdxhi	r1, sp, r0, r0
    7a30:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    7a34:	0000246c 	andeq	r2, r0, ip, ror #8
    7a38:	50014d01 	andpl	r4, r1, r1, lsl #26
    7a3c:	01000003 	tsteq	r0, r3
    7a40:	182e1e50 	stmdane	lr!, {r4, r6, r9, sl, fp, ip}
    7a44:	4d010000 	stcmi	0, cr0, [r1, #-0]
    7a48:	00008401 	andeq	r8, r0, r1, lsl #8
    7a4c:	00510100 	subseq	r0, r1, r0, lsl #2
    7a50:	16720120 	ldrbtne	r0, [r2], -r0, lsr #2
    7a54:	60010000 	andvs	r0, r1, r0
    7a58:	59ea0101 	stmibpl	sl!, {r0, r8}^
    7a5c:	59ee0800 	stmibpl	lr!, {fp}^
    7a60:	7d020800 	stcvc	8, cr0, [r2, #-0]
    7a64:	05be0100 	ldreq	r0, [lr, #256]!	; 0x100
    7a68:	6c1e0000 	ldcvs	0, cr0, [lr], {-0}
    7a6c:	01000024 	tsteq	r0, r4, lsr #32
    7a70:	03500160 	cmpeq	r0, #24
    7a74:	50010000 	andpl	r0, r1, r0
    7a78:	00182e1e 	andseq	r2, r8, lr, lsl lr
    7a7c:	01600100 	cmneq	r0, r0, lsl #2
    7a80:	00000084 	andeq	r0, r0, r4, lsl #1
    7a84:	20005101 	andcs	r5, r0, r1, lsl #2
    7a88:	00235201 	eoreq	r5, r3, r1, lsl #4
    7a8c:	01750100 	cmneq	r5, r0, lsl #2
    7a90:	0059ee01 	subseq	lr, r9, r1, lsl #28
    7a94:	0059f808 	subseq	pc, r9, r8, lsl #16
    7a98:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    7a9c:	00060301 	andeq	r0, r6, r1, lsl #6
    7aa0:	246c1e00 	strbtcs	r1, [ip], #-3584	; 0xe00
    7aa4:	75010000 	strvc	r0, [r1, #-0]
    7aa8:	00035001 	andeq	r5, r3, r1
    7aac:	1e500100 	rdfnes	f0, f0, f0
    7ab0:	0000182e 	andeq	r1, r0, lr, lsr #16
    7ab4:	84017501 	strhi	r7, [r1], #-1281	; 0x501
    7ab8:	01000000 	mrseq	r0, (UNDEF: 0)
    7abc:	23411e51 	movtcs	r1, #7761	; 0x1e51
    7ac0:	75010000 	strvc	r0, [r1, #-0]
    7ac4:	00025e01 	andeq	r5, r2, r1, lsl #28
    7ac8:	00520100 	subseq	r0, r2, r0, lsl #2
    7acc:	242c0120 	strtcs	r0, [ip], #-288	; 0x120
    7ad0:	8f010000 	svchi	0x00010000
    7ad4:	59f80101 	ldmibpl	r8!, {r0, r8}^
    7ad8:	59fc0800 	ldmibpl	ip!, {fp}^
    7adc:	7d020800 	stcvc	8, cr0, [r2, #-0]
    7ae0:	063a0100 	ldrteq	r0, [sl], -r0, lsl #2
    7ae4:	6c1e0000 	ldcvs	0, cr0, [lr], {-0}
    7ae8:	01000024 	tsteq	r0, r4, lsr #32
    7aec:	0350018f 	cmpeq	r0, #-1073741789	; 0xc0000023
    7af0:	50010000 	andpl	r0, r1, r0
    7af4:	0023d01e 	eoreq	sp, r3, lr, lsl r0
    7af8:	018f0100 	orreq	r0, pc, r0, lsl #2
    7afc:	00000084 	andeq	r0, r0, r4, lsl #1
    7b00:	20005101 	andcs	r5, r0, r1, lsl #2
    7b04:	00240e01 	eoreq	r0, r4, r1, lsl #28
    7b08:	01a10100 			; <UNDEFINED> instruction: 0x01a10100
    7b0c:	0059fc01 	subseq	pc, r9, r1, lsl #24
    7b10:	005a0c08 	subseq	r0, sl, r8, lsl #24
    7b14:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    7b18:	00068101 	andeq	r8, r6, r1, lsl #2
    7b1c:	246c1e00 	strbtcs	r1, [ip], #-3584	; 0xe00
    7b20:	a1010000 	mrsge	r0, (UNDEF: 1)
    7b24:	00035001 	andeq	r5, r3, r1
    7b28:	1e500100 	rdfnes	f0, f0, f0
    7b2c:	0000182e 	andeq	r1, r0, lr, lsr #16
    7b30:	8401a101 	strhi	sl, [r1], #-257	; 0x101
    7b34:	01000000 	mrseq	r0, (UNDEF: 0)
    7b38:	6d742151 	ldfvse	f2, [r4, #-324]!	; 0xfffffebc
    7b3c:	a3010070 	movwge	r0, #4208	; 0x1070
    7b40:	00007901 	andeq	r7, r0, r1, lsl #18
    7b44:	0038ea00 	eorseq	lr, r8, r0, lsl #20
    7b48:	01220000 	teqeq	r2, r0
    7b4c:	000023ae 	andeq	r2, r0, lr, lsr #7
    7b50:	0101c201 	tsteq	r1, r1, lsl #4
    7b54:	08005a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip, lr}
    7b58:	08005a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, lr}
    7b5c:	0000390b 	andeq	r3, r0, fp, lsl #18
    7b60:	0006cd01 	andeq	ip, r6, r1, lsl #26
    7b64:	23921d00 	orrscs	r1, r2, #0
    7b68:	c2010000 	andgt	r0, r1, #0
    7b6c:	00008f01 	andeq	r8, r0, r1, lsl #30
    7b70:	00392b00 	eorseq	r2, r9, r0, lsl #22
    7b74:	23e41d00 	mvncs	r1, #0
    7b78:	c2010000 	andgt	r0, r1, #0
    7b7c:	00008f01 	andeq	r8, r0, r1, lsl #30
    7b80:	00394c00 	eorseq	r4, r9, r0, lsl #24
    7b84:	1d641f00 	stclne	15, cr1, [r4, #-0]
    7b88:	c4010000 	strgt	r0, [r1], #-0
    7b8c:	00007901 	andeq	r7, r0, r1, lsl #18
    7b90:	00396d00 	eorseq	r6, r9, r0, lsl #26
    7b94:	01200000 	teqeq	r0, r0
    7b98:	0000232d 	andeq	r2, r0, sp, lsr #6
    7b9c:	0101db01 	tsteq	r1, r1, lsl #22
    7ba0:	08005a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, lr}
    7ba4:	08005a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, lr}
    7ba8:	01007d02 	tsteq	r0, r2, lsl #26
    7bac:	000006f6 	strdeq	r0, [r0], -r6
    7bb0:	001cfb1e 	andseq	pc, ip, lr, lsl fp	; <UNPREDICTABLE>
    7bb4:	01db0100 	bicseq	r0, fp, r0, lsl #2
    7bb8:	000000be 	strheq	r0, [r0], -lr
    7bbc:	22005001 	andcs	r5, r0, #1
    7bc0:	000fbc01 	andeq	fp, pc, r1, lsl #24
    7bc4:	02060100 	andeq	r0, r6, #0
    7bc8:	005a3401 	subseq	r3, sl, r1, lsl #8
    7bcc:	005a8c08 	subseq	r8, sl, r8, lsl #24
    7bd0:	0039ac08 	eorseq	sl, r9, r8, lsl #24
    7bd4:	07720100 	ldrbeq	r0, [r2, -r0, lsl #2]!
    7bd8:	c51d0000 	ldrgt	r0, [sp, #-0]
    7bdc:	01000023 	tsteq	r0, r3, lsr #32
    7be0:	00790206 	rsbseq	r0, r9, r6, lsl #4
    7be4:	39cc0000 	stmibcc	ip, {}^	; <UNPREDICTABLE>
    7be8:	fb1d0000 	blx	747bf2 <__Stack_Size+0x7477f2>
    7bec:	0100001c 	tsteq	r0, ip, lsl r0
    7bf0:	00be0206 	adcseq	r0, lr, r6, lsl #4
    7bf4:	39ed0000 	stmibcc	sp!, {}^	; <UNPREDICTABLE>
    7bf8:	74210000 	strtvc	r0, [r1], #-0
    7bfc:	0100706d 	tsteq	r0, sp, rrx
    7c00:	00790208 	rsbseq	r0, r9, r8, lsl #4
    7c04:	3a0e0000 	bcc	387c0c <__Stack_Size+0x38780c>
    7c08:	371f0000 	ldrcc	r0, [pc, -r0]
    7c0c:	01000024 	tsteq	r0, r4, lsr #32
    7c10:	00790208 	rsbseq	r0, r9, r8, lsl #4
    7c14:	3a3f0000 	bcc	fc7c1c <__Stack_Size+0xfc781c>
    7c18:	641f0000 	ldrvs	r0, [pc], #-0	; 7c20 <__Stack_Size+0x7820>
    7c1c:	0100001d 	tsteq	r0, sp, lsl r0
    7c20:	00790208 	rsbseq	r0, r9, r8, lsl #4
    7c24:	3a740000 	bcc	1d07c2c <__Stack_Size+0x1d0782c>
    7c28:	061f0000 	ldreq	r0, [pc], -r0
    7c2c:	01000024 	tsteq	r0, r4, lsr #32
    7c30:	00790208 	rsbseq	r0, r9, r8, lsl #4
    7c34:	3a930000 	bcc	fe4c7c3c <SCS_BASE+0x1e4b9c3c>
    7c38:	22000000 	andcs	r0, r0, #0
    7c3c:	00243c01 	eoreq	r3, r4, r1, lsl #24
    7c40:	02380100 	eorseq	r0, r8, #0
    7c44:	005a8c01 	subseq	r8, sl, r1, lsl #24
    7c48:	005ac008 	subseq	ip, sl, r8
    7c4c:	003ace08 	eorseq	ip, sl, r8, lsl #28
    7c50:	07be0100 	ldreq	r0, [lr, r0, lsl #2]!
    7c54:	921d0000 	andsls	r0, sp, #0
    7c58:	01000023 	tsteq	r0, r3, lsr #32
    7c5c:	008f0238 	addeq	r0, pc, r8, lsr r2	; <UNPREDICTABLE>
    7c60:	3aee0000 	bcc	ffb87c68 <SCS_BASE+0x1fb79c68>
    7c64:	e41d0000 	ldr	r0, [sp], #-0
    7c68:	01000023 	tsteq	r0, r3, lsr #32
    7c6c:	008f0238 	addeq	r0, pc, r8, lsr r2	; <UNPREDICTABLE>
    7c70:	3b0f0000 	blcc	3c7c78 <__Stack_Size+0x3c7878>
    7c74:	74210000 	strtvc	r0, [r1], #-0
    7c78:	0100706d 	tsteq	r0, sp, rrx
    7c7c:	0079023a 	rsbseq	r0, r9, sl, lsr r2
    7c80:	3b300000 	blcc	c07c88 <__Stack_Size+0xc07888>
    7c84:	23000000 	movwcs	r0, #0
    7c88:	001e2801 	andseq	r2, lr, r1, lsl #16
    7c8c:	01140500 	tsteq	r4, r0, lsl #10
    7c90:	79240101 	stmdbvc	r4!, {r0, r8}
    7c94:	24000000 	strcs	r0, [r0], #-0
    7c98:	000000be 	strheq	r0, [r0], -lr
    7c9c:	0a550000 	beq	1547ca4 <__Stack_Size+0x15478a4>
    7ca0:	00020000 	andeq	r0, r2, r0
    7ca4:	00000f73 	andeq	r0, r0, r3, ror pc
    7ca8:	02110104 	andseq	r0, r1, #1
    7cac:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    7cb0:	8b000025 	blhi	7d4c <__Stack_Size+0x794c>
    7cb4:	c0000001 	andgt	r0, r0, r1
    7cb8:	f008005a 			; <UNDEFINED> instruction: 0xf008005a
    7cbc:	c408005d 	strgt	r0, [r8], #-93	; 0x5d
    7cc0:	02000012 	andeq	r0, r0, #18
    7cc4:	00d30704 	sbcseq	r0, r3, r4, lsl #14
    7cc8:	01020000 	mrseq	r0, (UNDEF: 2)
    7ccc:	00015b06 	andeq	r5, r1, r6, lsl #22
    7cd0:	08010200 	stmdaeq	r1, {r9}
    7cd4:	00000159 	andeq	r0, r0, r9, asr r1
    7cd8:	25050202 	strcs	r0, [r5, #-514]	; 0x202
    7cdc:	02000000 	andeq	r0, r0, #0
    7ce0:	01c40702 	biceq	r0, r4, r2, lsl #14
    7ce4:	04030000 	streq	r0, [r3], #-0
    7ce8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    7cec:	05080200 	streq	r0, [r8, #-512]	; 0x200
    7cf0:	000000bb 	strheq	r0, [r0], -fp
    7cf4:	c9070802 	stmdbgt	r7, {r1, fp}
    7cf8:	02000000 	andeq	r0, r0, #0
    7cfc:	00c00504 	sbceq	r0, r0, r4, lsl #10
    7d00:	04020000 	streq	r0, [r2], #-0
    7d04:	00002f07 	andeq	r2, r0, r7, lsl #30
    7d08:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7d0c:	000000ce 	andeq	r0, r0, lr, asr #1
    7d10:	62080102 	andvs	r0, r8, #-2147483648	; 0x80000000
    7d14:	04000001 	streq	r0, [r0], #-1
    7d18:	00323375 	eorseq	r3, r2, r5, ror r3
    7d1c:	006b2702 	rsbeq	r2, fp, r2, lsl #14
    7d20:	75040000 	strvc	r0, [r4, #-0]
    7d24:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    7d28:	00004128 	andeq	r4, r0, r8, lsr #2
    7d2c:	38750400 	ldmdacc	r5!, {sl}^
    7d30:	33290200 	teqcc	r9, #0
    7d34:	05000000 	streq	r0, [r0, #-0]
    7d38:	00000d7d 	andeq	r0, r0, sp, ror sp
    7d3c:	00a42f02 	adceq	r2, r4, r2, lsl #30
    7d40:	6b060000 	blvs	187d48 <__Stack_Size+0x187948>
    7d44:	05000000 	streq	r0, [r0, #-0]
    7d48:	0000282a 	andeq	r2, r0, sl, lsr #16
    7d4c:	00b43302 	adcseq	r3, r4, r2, lsl #6
    7d50:	a4070000 	strge	r0, [r7], #-0
    7d54:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7d58:	ce390201 	cdpgt	2, 3, cr0, cr9, cr1, {0}
    7d5c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7d60:	00000b59 	andeq	r0, r0, r9, asr fp
    7d64:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    7d68:	00010054 	andeq	r0, r1, r4, asr r0
    7d6c:	002a9905 	eoreq	r9, sl, r5, lsl #18
    7d70:	b9390200 	ldmdblt	r9!, {r9}
    7d74:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7d78:	ee3b0201 	cdp	2, 3, cr0, cr11, cr1, {0}
    7d7c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7d80:	00001517 	andeq	r1, r0, r7, lsl r5
    7d84:	19350900 	ldmdbne	r5!, {r8, fp}
    7d88:	00010000 	andeq	r0, r1, r0
    7d8c:	0015ee05 	andseq	lr, r5, r5, lsl #28
    7d90:	d93b0200 	ldmdble	fp!, {r9}
    7d94:	0b000000 	bleq	7d9c <__Stack_Size+0x799c>
    7d98:	8103033c 	tsthi	r3, ip, lsr r3
    7d9c:	0001b201 	andeq	fp, r1, r1, lsl #4
    7da0:	27b00c00 	ldrcs	r0, [r0, r0, lsl #24]!
    7da4:	83030000 	movwhi	r0, #12288	; 0x3000
    7da8:	0001c201 	andeq	ip, r1, r1, lsl #4
    7dac:	00230200 	eoreq	r0, r3, r0, lsl #4
    7db0:	000c8d0c 	andeq	r8, ip, ip, lsl #26
    7db4:	01840300 	orreq	r0, r4, r0, lsl #6
    7db8:	000001c7 	andeq	r0, r0, r7, asr #3
    7dbc:	0c082302 	stceq	3, cr2, [r8], {2}
    7dc0:	000028c8 	andeq	r2, r0, r8, asr #17
    7dc4:	d7018503 	strle	r8, [r1, -r3, lsl #10]
    7dc8:	03000001 	movweq	r0, #1
    7dcc:	0c018023 	stceq	0, cr8, [r1], {35}	; 0x23
    7dd0:	00002636 	andeq	r2, r0, r6, lsr r6
    7dd4:	c7018603 	strgt	r8, [r1, -r3, lsl #12]
    7dd8:	03000001 	movweq	r0, #1
    7ddc:	0c018823 	stceq	8, cr8, [r1], {35}	; 0x23
    7de0:	0000278a 	andeq	r2, r0, sl, lsl #15
    7de4:	dc018703 	stcle	7, cr8, [r1], {3}
    7de8:	03000001 	movweq	r0, #1
    7dec:	0c028023 	stceq	0, cr8, [r2], {35}	; 0x23
    7df0:	00000d66 	andeq	r0, r0, r6, ror #26
    7df4:	c7018803 	strgt	r8, [r1, -r3, lsl #16]
    7df8:	03000001 	movweq	r0, #1
    7dfc:	0c028823 	stceq	8, cr8, [r2], {35}	; 0x23
    7e00:	000026f1 	strdeq	r2, [r0], -r1
    7e04:	e1018903 	tst	r1, r3, lsl #18
    7e08:	03000001 	movweq	r0, #1
    7e0c:	0c038023 	stceq	0, cr8, [r3], {35}	; 0x23
    7e10:	00000ca1 	andeq	r0, r0, r1, lsr #25
    7e14:	c7018a03 	strgt	r8, [r1, -r3, lsl #20]
    7e18:	03000001 	movweq	r0, #1
    7e1c:	0c038823 	stceq	8, cr8, [r3], {35}	; 0x23
    7e20:	000024ae 	andeq	r2, r0, lr, lsr #9
    7e24:	e6018b03 	str	r8, [r1], -r3, lsl #22
    7e28:	03000001 	movweq	r0, #1
    7e2c:	0c048023 	stceq	0, cr8, [r4], {35}	; 0x23
    7e30:	00000cab 	andeq	r0, r0, fp, lsr #25
    7e34:	eb018c03 	bl	6ae48 <__Stack_Size+0x6aa48>
    7e38:	03000001 	movweq	r0, #1
    7e3c:	0d048823 	stceq	8, cr8, [r4, #-140]	; 0xffffff74
    7e40:	00525049 	subseq	r5, r2, r9, asr #32
    7e44:	0b018d03 	bleq	6b258 <__Stack_Size+0x6ae58>
    7e48:	03000002 	movweq	r0, #2
    7e4c:	00068023 	andeq	r8, r6, r3, lsr #32
    7e50:	0000990e 	andeq	r9, r0, lr, lsl #18
    7e54:	0001c200 	andeq	ip, r1, r0, lsl #4
    7e58:	00640f00 	rsbeq	r0, r4, r0, lsl #30
    7e5c:	00010000 	andeq	r0, r1, r0
    7e60:	0001b206 	andeq	fp, r1, r6, lsl #4
    7e64:	00790e00 	rsbseq	r0, r9, r0, lsl #28
    7e68:	01d70000 	bicseq	r0, r7, r0
    7e6c:	640f0000 	strvs	r0, [pc], #-0	; 7e74 <__Stack_Size+0x7a74>
    7e70:	1d000000 	stcne	0, cr0, [r0, #-0]
    7e74:	01b20600 			; <UNDEFINED> instruction: 0x01b20600
    7e78:	b2060000 	andlt	r0, r6, #0
    7e7c:	06000001 	streq	r0, [r0], -r1
    7e80:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    7e84:	0001b206 	andeq	fp, r1, r6, lsl #4
    7e88:	00790e00 	rsbseq	r0, r9, r0, lsl #28
    7e8c:	01fb0000 	mvnseq	r0, r0
    7e90:	640f0000 	strvs	r0, [pc], #-0	; 7e98 <__Stack_Size+0x7a98>
    7e94:	3d000000 	stccc	0, cr0, [r0, #-0]
    7e98:	00990e00 	addseq	r0, r9, r0, lsl #28
    7e9c:	020b0000 	andeq	r0, fp, #0
    7ea0:	640f0000 	strvs	r0, [pc], #-0	; 7ea8 <__Stack_Size+0x7aa8>
    7ea4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    7ea8:	01fb0600 	mvnseq	r0, r0, lsl #12
    7eac:	11100000 	tstne	r0, r0
    7eb0:	03000027 	movweq	r0, #39	; 0x27
    7eb4:	00f9018e 	rscseq	r0, r9, lr, lsl #3
    7eb8:	40110000 	andsmi	r0, r1, r0
    7ebc:	f8019003 			; <UNDEFINED> instruction: 0xf8019003
    7ec0:	0c000002 	stceq	0, cr0, [r0], {2}
    7ec4:	000025d9 	ldrdeq	r2, [r0], -r9
    7ec8:	a9019203 	stmdbge	r1, {r0, r1, r9, ip, pc}
    7ecc:	02000000 	andeq	r0, r0, #0
    7ed0:	310c0023 	tstcc	ip, r3, lsr #32
    7ed4:	03000026 	movweq	r0, #38	; 0x26
    7ed8:	00990193 	umullseq	r0, r9, r3, r1
    7edc:	23020000 	movwcs	r0, #8192	; 0x2000
    7ee0:	27850c04 	strcs	r0, [r5, r4, lsl #24]
    7ee4:	94030000 	strls	r0, [r3], #-0
    7ee8:	00009901 	andeq	r9, r0, r1, lsl #18
    7eec:	08230200 	stmdaeq	r3!, {r9}
    7ef0:	0026eb0c 	eoreq	lr, r6, ip, lsl #22
    7ef4:	01950300 	orrseq	r0, r5, r0, lsl #6
    7ef8:	00000099 	muleq	r0, r9, r0
    7efc:	0d0c2302 	stceq	3, cr2, [ip, #-8]
    7f00:	00524353 	subseq	r4, r2, r3, asr r3
    7f04:	99019603 	stmdbls	r1, {r0, r1, r9, sl, ip, pc}
    7f08:	02000000 	andeq	r0, r0, #0
    7f0c:	430d1023 	movwmi	r1, #53283	; 0xd023
    7f10:	03005243 	movweq	r5, #579	; 0x243
    7f14:	00990197 	umullseq	r0, r9, r7, r1
    7f18:	23020000 	movwcs	r0, #8192	; 0x2000
    7f1c:	27060c14 	smladcs	r6, r4, ip, r0
    7f20:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
    7f24:	00030801 	andeq	r0, r3, r1, lsl #16
    7f28:	18230200 	stmdane	r3!, {r9}
    7f2c:	00270b0c 	eoreq	r0, r7, ip, lsl #22
    7f30:	01990300 	orrseq	r0, r9, r0, lsl #6
    7f34:	00000099 	muleq	r0, r9, r0
    7f38:	0c242302 	stceq	3, cr2, [r4], #-8
    7f3c:	000026c6 	andeq	r2, r0, r6, asr #13
    7f40:	99019a03 	stmdbls	r1, {r0, r1, r9, fp, ip, pc}
    7f44:	02000000 	andeq	r0, r0, #0
    7f48:	940c2823 	strls	r2, [ip], #-2083	; 0x823
    7f4c:	03000027 	movweq	r0, #39	; 0x27
    7f50:	0099019b 	umullseq	r0, r9, fp, r1
    7f54:	23020000 	movwcs	r0, #8192	; 0x2000
    7f58:	278f0c2c 	strcs	r0, [pc, ip, lsr #24]
    7f5c:	9c030000 	stcls	0, cr0, [r3], {-0}
    7f60:	00009901 	andeq	r9, r0, r1, lsl #18
    7f64:	30230200 	eorcc	r0, r3, r0, lsl #4
    7f68:	00272f0c 	eoreq	r2, r7, ip, lsl #30
    7f6c:	019d0300 	orrseq	r0, sp, r0, lsl #6
    7f70:	00000099 	muleq	r0, r9, r0
    7f74:	0c342302 	ldceq	3, cr2, [r4], #-8
    7f78:	0000269d 	muleq	r0, sp, r6
    7f7c:	99019e03 	stmdbls	r1, {r0, r1, r9, sl, fp, ip, pc}
    7f80:	02000000 	andeq	r0, r0, #0
    7f84:	ab0c3823 	blge	316018 <__Stack_Size+0x315c18>
    7f88:	03000027 	movweq	r0, #39	; 0x27
    7f8c:	0099019f 	umullseq	r0, r9, pc, r1	; <UNPREDICTABLE>
    7f90:	23020000 	movwcs	r0, #8192	; 0x2000
    7f94:	990e003c 	stmdbls	lr, {r2, r3, r4, r5}
    7f98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7f9c:	0f000003 	svceq	0x00000003
    7fa0:	00000064 	andeq	r0, r0, r4, rrx
    7fa4:	f8060002 			; <UNDEFINED> instruction: 0xf8060002
    7fa8:	10000002 	andne	r0, r0, r2
    7fac:	000027d1 	ldrdeq	r2, [r0], -r1
    7fb0:	1c01a003 	stcne	0, cr10, [r1], {3}
    7fb4:	12000002 	andne	r0, r0, #2
    7fb8:	5a1a0404 	bpl	688fd0 <__Stack_Size+0x688bd0>
    7fbc:	13000003 	movwne	r0, #3
    7fc0:	0000087a 	andeq	r0, r0, sl, ror r8
    7fc4:	008f1c04 	addeq	r1, pc, r4, lsl #24
    7fc8:	23020000 	movwcs	r0, #8192	; 0x2000
    7fcc:	0dc81300 	stcleq	3, cr1, [r8]
    7fd0:	1d040000 	stcne	0, cr0, [r4, #-0]
    7fd4:	0000008f 	andeq	r0, r0, pc, lsl #1
    7fd8:	13012302 	movwne	r2, #4866	; 0x1302
    7fdc:	000014df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    7fe0:	008f1e04 	addeq	r1, pc, r4, lsl #28
    7fe4:	23020000 	movwcs	r0, #8192	; 0x2000
    7fe8:	0a651302 	beq	194cbf8 <__Stack_Size+0x194c7f8>
    7fec:	1f040000 	svcne	0x00040000
    7ff0:	000000ee 	andeq	r0, r0, lr, ror #1
    7ff4:	00032302 	andeq	r2, r3, r2, lsl #6
    7ff8:	001b0f05 	andseq	r0, fp, r5, lsl #30
    7ffc:	19200400 	stmdbne	r0!, {sl}
    8000:	14000003 	strne	r0, [r0], #-3
    8004:	00292401 	eoreq	r2, r9, r1, lsl #8
    8008:	01240100 	teqeq	r4, r0, lsl #2
    800c:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
    8010:	08005af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, lr}
    8014:	01007d02 	tsteq	r0, r2, lsl #26
    8018:	0000038e 	andeq	r0, r0, lr, lsl #7
    801c:	00105315 	andseq	r5, r0, r5, lsl r3
    8020:	79260100 	stmdbvc	r6!, {r8}
    8024:	6d000000 	stcvs	0, cr0, [r0, #-0]
    8028:	0000003b 	andeq	r0, r0, fp, lsr r0
    802c:	28900114 	ldmcs	r0, {r2, r4, r8}
    8030:	3b010000 	blcc	48038 <__Stack_Size+0x47c38>
    8034:	005af401 	subseq	pc, sl, r1, lsl #8
    8038:	005b2408 	subseq	r2, fp, r8, lsl #8
    803c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    8040:	0003b701 	andeq	fp, r3, r1, lsl #14
    8044:	10531500 	subsne	r1, r3, r0, lsl #10
    8048:	3d010000 	stccc	0, cr0, [r1, #-0]
    804c:	00000079 	andeq	r0, r0, r9, ror r0
    8050:	00003b8c 	andeq	r3, r0, ip, lsl #23
    8054:	c9011400 	stmdbgt	r1, {sl, ip}
    8058:	0100000c 	tsteq	r0, ip
    805c:	5b240161 	blpl	9085e8 <__Stack_Size+0x9081e8>
    8060:	5b380800 	blpl	e0a068 <__Stack_Size+0xe09c68>
    8064:	7d020800 	stcvc	8, cr0, [r2, #-0]
    8068:	03e00100 	mvneq	r0, #0
    806c:	df160000 	svcle	0x00160000
    8070:	01000025 	tsteq	r0, r5, lsr #32
    8074:	00007961 	andeq	r7, r0, r1, ror #18
    8078:	003bc400 	eorseq	ip, fp, r0, lsl #8
    807c:	01170000 	tsteq	r7, r0
    8080:	000015e4 	andeq	r1, r0, r4, ror #11
    8084:	38017401 	stmdacc	r1, {r0, sl, ip, sp, lr}
    8088:	bc08005b 	stclt	0, cr0, [r8], {91}	; 0x5b
    808c:	e508005b 	str	r0, [r8, #-91]	; 0x5b
    8090:	0100003b 	tsteq	r0, fp, lsr r0
    8094:	00000455 	andeq	r0, r0, r5, asr r4
    8098:	0024d216 	eoreq	sp, r4, r6, lsl r2
    809c:	55740100 	ldrbpl	r0, [r4, #-256]!	; 0x100
    80a0:	05000004 	streq	r0, [r0, #-4]
    80a4:	1500003c 	strne	r0, [r0, #-60]	; 0x3c
    80a8:	00002779 	andeq	r2, r0, r9, ror r7
    80ac:	00797601 	rsbseq	r7, r9, r1, lsl #12
    80b0:	3c3f0000 	ldccc	0, cr0, [pc], #-0	; 80b8 <__Stack_Size+0x7cb8>
    80b4:	64150000 	ldrvs	r0, [r5], #-0
    80b8:	0100001d 	tsteq	r0, sp, lsl r0
    80bc:	00007976 	andeq	r7, r0, r6, ror r9
    80c0:	003cd400 	eorseq	sp, ip, r0, lsl #8
    80c4:	24061500 	strcs	r1, [r6], #-1280	; 0x500
    80c8:	76010000 	strvc	r0, [r1], -r0
    80cc:	00000079 	andeq	r0, r0, r9, ror r0
    80d0:	00003d42 	andeq	r3, r0, r2, asr #26
    80d4:	00255a15 	eoreq	r5, r5, r5, lsl sl
    80d8:	79770100 	ldmdbvc	r7!, {r8}^
    80dc:	a0000000 	andge	r0, r0, r0
    80e0:	1500003d 	strne	r0, [r0, #-61]	; 0x3d
    80e4:	00002735 	andeq	r2, r0, r5, lsr r7
    80e8:	00797701 	rsbseq	r7, r9, r1, lsl #14
    80ec:	3dda0000 	ldclcc	0, cr0, [sl]
    80f0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    80f4:	00035a04 	andeq	r5, r3, r4, lsl #20
    80f8:	69011400 	stmdbvs	r1, {sl, ip}
    80fc:	01000027 	tsteq	r0, r7, lsr #32
    8100:	5bbc01a8 	blpl	fef087a8 <SCS_BASE+0x1eefa7a8>
    8104:	5bc80800 	blpl	ff20a10c <SCS_BASE+0x1f1fc10c>
    8108:	7d020800 	stcvc	8, cr0, [r2, #-0]
    810c:	04820100 	streq	r0, [r2], #256	; 0x100
    8110:	d2190000 	andsle	r0, r9, #0
    8114:	01000024 	tsteq	r0, r4, lsr #32
    8118:	000455a8 	andeq	r5, r4, r8, lsr #11
    811c:	00500100 	subseq	r0, r0, r0, lsl #2
    8120:	25310114 	ldrcs	r0, [r1, #-276]!	; 0x114
    8124:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    8128:	005bc801 	subseq	ip, fp, r1, lsl #16
    812c:	005bcc08 	subseq	ip, fp, r8, lsl #24
    8130:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    8134:	0004a601 	andeq	sl, r4, r1, lsl #12
    8138:	5bcc1a00 	blpl	ff30e940 <SCS_BASE+0x1f300940>
    813c:	0e010800 	cdpeq	8, 0, cr0, cr1, cr0, {0}
    8140:	0000000a 	andeq	r0, r0, sl
    8144:	25610114 	strbcs	r0, [r1, #-276]!	; 0x114
    8148:	c4010000 	strgt	r0, [r1], #-0
    814c:	005bcc01 	subseq	ip, fp, r1, lsl #24
    8150:	005bd008 	subseq	sp, fp, r8
    8154:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    8158:	0004ca01 	andeq	ip, r4, r1, lsl #20
    815c:	5bd01a00 	blpl	ff40e964 <SCS_BASE+0x1f400964>
    8160:	18010800 	stmdane	r1, {fp}
    8164:	0000000a 	andeq	r0, r0, sl
    8168:	27990114 			; <UNDEFINED> instruction: 0x27990114
    816c:	d0010000 	andle	r0, r1, r0
    8170:	005bd001 	subseq	sp, fp, r1
    8174:	005bd408 	subseq	sp, fp, r8, lsl #8
    8178:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    817c:	0004ee01 	andeq	lr, r4, r1, lsl #28
    8180:	5bd41a00 	blpl	ff50e988 <SCS_BASE+0x1f500988>
    8184:	22010800 	andcs	r0, r1, #0
    8188:	0000000a 	andeq	r0, r0, sl
    818c:	25f20114 	ldrbcs	r0, [r2, #276]!	; 0x114
    8190:	dc010000 	stcle	0, cr0, [r1], {-0}
    8194:	005bd401 	subseq	sp, fp, r1, lsl #8
    8198:	005bd808 	subseq	sp, fp, r8, lsl #16
    819c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    81a0:	00051201 	andeq	r1, r5, r1, lsl #4
    81a4:	5bd81a00 	blpl	ff60e9ac <SCS_BASE+0x1f6009ac>
    81a8:	2c010800 	stccs	8, cr0, [r1], {-0}
    81ac:	0000000a 	andeq	r0, r0, sl
    81b0:	268a0114 	pkhbtcs	r0, sl, r4, lsl #2
    81b4:	ea010000 	b	481bc <__Stack_Size+0x47dbc>
    81b8:	005bd801 	subseq	sp, fp, r1, lsl #16
    81bc:	005bde08 	subseq	sp, fp, r8, lsl #28
    81c0:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    81c4:	00054f01 	andeq	r4, r5, r1, lsl #30
    81c8:	289f1600 	ldmcs	pc, {r9, sl, ip}	; <UNPREDICTABLE>
    81cc:	ea010000 	b	481d4 <__Stack_Size+0x47dd4>
    81d0:	00000079 	andeq	r0, r0, r9, ror r0
    81d4:	00003e14 	andeq	r3, r0, r4, lsl lr
    81d8:	005bde1b 	subseq	sp, fp, fp, lsl lr
    81dc:	0a360108 	beq	d88604 <__Stack_Size+0xd88204>
    81e0:	011c0000 	tsteq	ip, r0
    81e4:	01f30550 	mvnseq	r0, r0, asr r5
    81e8:	00243450 	eoreq	r3, r4, r0, asr r4
    81ec:	80011d00 	andhi	r1, r1, r0, lsl #26
    81f0:	01000028 	tsteq	r0, r8, lsr #32
    81f4:	007901f9 	ldrshteq	r0, [r9], #-25	; 0xffffffe7
    81f8:	5bde0000 	blpl	ff788200 <SCS_BASE+0x1f77a200>
    81fc:	5be20800 	blpl	ff88a204 <SCS_BASE+0x1f87c204>
    8200:	7d020800 	stcvc	8, cr0, [r2, #-0]
    8204:	05770100 	ldrbeq	r0, [r7, #-256]!	; 0x100
    8208:	e21a0000 	ands	r0, sl, #0
    820c:	0108005b 	qaddeq	r0, fp, r8
    8210:	00000a4a 	andeq	r0, r0, sl, asr #20
    8214:	e2011e00 	and	r1, r1, #0
    8218:	01000024 	tsteq	r0, r4, lsr #32
    821c:	84010105 	strhi	r0, [r1], #-261	; 0x105
    8220:	e2000000 	and	r0, r0, #0
    8224:	f008005b 			; <UNDEFINED> instruction: 0xf008005b
    8228:	0208005b 	andeq	r0, r8, #91	; 0x5b
    822c:	1f01007d 	svcne	0x0001007d
    8230:	00285d01 	eoreq	r5, r8, r1, lsl #26
    8234:	01120100 	tsteq	r2, r0, lsl #2
    8238:	0000ce01 	andeq	ip, r0, r1, lsl #28
    823c:	005bf000 	subseq	pc, fp, r0
    8240:	005c1408 	subseq	r1, ip, r8, lsl #8
    8244:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    8248:	0005e001 	andeq	lr, r5, r1
    824c:	087a2000 	ldmdaeq	sl!, {sp}^
    8250:	12010000 	andne	r0, r1, #0
    8254:	00008f01 	andeq	r8, r0, r1, lsl #30
    8258:	003e3500 	eorseq	r3, lr, r0, lsl #10
    825c:	29302100 	ldmdbcs	r0!, {r8, sp}
    8260:	14010000 	strne	r0, [r1], #-0
    8264:	0000ce01 	andeq	ip, r0, r1, lsl #28
    8268:	003e5600 	eorseq	r5, lr, r0, lsl #12
    826c:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    8270:	15010070 	strne	r0, [r1, #-112]	; 0x70
    8274:	00007901 	andeq	r7, r0, r1, lsl #18
    8278:	003e7d00 	eorseq	r7, lr, r0, lsl #26
    827c:	01230000 	teqeq	r3, r0
    8280:	000026a2 	andeq	r2, r0, r2, lsr #13
    8284:	01012e01 	tsteq	r1, r1, lsl #28
    8288:	08005c14 	stmdaeq	r0, {r2, r4, sl, fp, ip, lr}
    828c:	08005c20 	stmdaeq	r0, {r5, sl, fp, ip, lr}
    8290:	01007d02 	tsteq	r0, r2, lsl #26
    8294:	00000609 	andeq	r0, r0, r9, lsl #12
    8298:	00087a24 	andeq	r7, r8, r4, lsr #20
    829c:	012e0100 	teqeq	lr, r0, lsl #2
    82a0:	0000008f 	andeq	r0, r0, pc, lsl #1
    82a4:	23005001 	movwcs	r5, #1
    82a8:	0024b301 	eoreq	fp, r4, r1, lsl #6
    82ac:	013d0100 	teqeq	sp, r0, lsl #2
    82b0:	005c2001 	subseq	r2, ip, r1
    82b4:	005c3c08 	subseq	r3, ip, r8, lsl #24
    82b8:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    82bc:	00063401 	andeq	r3, r6, r1, lsl #8
    82c0:	087a2000 	ldmdaeq	sl!, {sp}^
    82c4:	3d010000 	stccc	0, cr0, [r1, #-0]
    82c8:	00008f01 	andeq	r8, r0, r1, lsl #30
    82cc:	003e9c00 	eorseq	r9, lr, r0, lsl #24
    82d0:	011e0000 	tsteq	lr, r0
    82d4:	00002606 	andeq	r2, r0, r6, lsl #12
    82d8:	01014d01 	tsteq	r1, r1, lsl #26
    82dc:	00000084 	andeq	r0, r0, r4, lsl #1
    82e0:	08005c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, ip, lr}
    82e4:	08005c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, lr}
    82e8:	01007d02 	tsteq	r0, r2, lsl #26
    82ec:	2902011f 	stmdbcs	r2, {r0, r1, r2, r3, r4, r8}
    82f0:	5a010000 	bpl	482f8 <__Stack_Size+0x47ef8>
    82f4:	00ce0101 	sbceq	r0, lr, r1, lsl #2
    82f8:	5c4c0000 	marpl	acc0, r0, ip
    82fc:	5c700800 	ldclpl	8, cr0, [r0], #-0
    8300:	7d020800 	stcvc	8, cr0, [r2, #-0]
    8304:	069d0100 	ldreq	r0, [sp], r0, lsl #2
    8308:	7a200000 	bvc	808310 <__Stack_Size+0x807f10>
    830c:	01000008 	tsteq	r0, r8
    8310:	008f015a 	addeq	r0, pc, sl, asr r1	; <UNPREDICTABLE>
    8314:	3ebd0000 	cdpcc	0, 11, cr0, cr13, cr0, {0}
    8318:	b8210000 	stmdalt	r1!, {}	; <UNPREDICTABLE>
    831c:	01000028 	tsteq	r0, r8, lsr #32
    8320:	00ce015c 	sbceq	r0, lr, ip, asr r1
    8324:	3ede0000 	cdpcc	0, 13, cr0, cr14, cr0, {0}
    8328:	74220000 	strtvc	r0, [r2], #-0
    832c:	0100706d 	tsteq	r0, sp, rrx
    8330:	0079015d 	rsbseq	r0, r9, sp, asr r1
    8334:	3f050000 	svccc	0x00050000
    8338:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    833c:	0025d101 	eoreq	sp, r5, r1, lsl #2
    8340:	01770100 	cmneq	r7, r0, lsl #2
    8344:	00007901 	andeq	r7, r0, r1, lsl #18
    8348:	005c7000 	subseq	r7, ip, r0
    834c:	005c7c08 	subseq	r7, ip, r8, lsl #24
    8350:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    8354:	ae012301 	cdpge	3, 0, cr2, cr1, cr1, {0}
    8358:	01000010 	tsteq	r0, r0, lsl r0
    835c:	7c010189 	stfvcs	f0, [r1], {137}	; 0x89
    8360:	9008005c 	andls	r0, r8, ip, asr r0
    8364:	0208005c 	andeq	r0, r8, #92	; 0x5c
    8368:	f201007d 	vqadd.s8	q0, <illegal reg q0.5>, <illegal reg q14.5>
    836c:	20000006 	andcs	r0, r0, r6
    8370:	000028ab 	andeq	r2, r0, fp, lsr #17
    8374:	79018901 	stmdbvc	r1, {r0, r8, fp, pc}
    8378:	24000000 	strcs	r0, [r0], #-0
    837c:	2000003f 	andcs	r0, r0, pc, lsr r0
    8380:	00001daf 	andeq	r1, r0, pc, lsr #27
    8384:	79018901 	stmdbvc	r1, {r0, r8, fp, pc}
    8388:	45000000 	strmi	r0, [r0, #-0]
    838c:	0000003f 	andeq	r0, r0, pc, lsr r0
    8390:	25410125 	strbcs	r0, [r1, #-293]	; 0x125
    8394:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    8398:	5c900101 	ldfpls	f0, [r0], {1}
    839c:	5ca00800 	stcpl	8, cr0, [r0]
    83a0:	7d020800 	stcvc	8, cr0, [r2, #-0]
    83a4:	01250100 	teqeq	r5, r0, lsl #2
    83a8:	0000264e 	andeq	r2, r0, lr, asr #12
    83ac:	0101a501 	tsteq	r1, r1, lsl #10
    83b0:	08005ca0 	stmdaeq	r0, {r5, r7, sl, fp, ip, lr}
    83b4:	08005cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip, lr}
    83b8:	01007d02 	tsteq	r0, r2, lsl #26
    83bc:	27550123 	ldrbcs	r0, [r5, -r3, lsr #2]
    83c0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    83c4:	5cb00101 	ldfpls	f0, [r0], #4
    83c8:	5cc80800 	stclpl	8, cr0, [r8], {0}
    83cc:	7d020800 	stcvc	8, cr0, [r2, #-0]
    83d0:	07570100 	ldrbeq	r0, [r7, -r0, lsl #2]
    83d4:	f5200000 			; <UNDEFINED> instruction: 0xf5200000
    83d8:	01000028 	tsteq	r0, r8, lsr #32
    83dc:	008f01b8 			; <UNDEFINED> instruction: 0x008f01b8
    83e0:	3f660000 	svccc	0x00660000
    83e4:	fb240000 	blx	9083ee <__Stack_Size+0x907fee>
    83e8:	0100001c 	tsteq	r0, ip, lsl r0
    83ec:	00ee01b8 	strhteq	r0, [lr], #24
    83f0:	51010000 	mrspl	r0, (UNDEF: 1)
    83f4:	3c012300 	stccc	3, cr2, [r1], {-0}
    83f8:	01000027 	tsteq	r0, r7, lsr #32
    83fc:	c80101d6 	stmdagt	r1, {r1, r2, r4, r6, r7, r8}
    8400:	e808005c 	stmda	r8, {r2, r3, r4, r6}
    8404:	0208005c 	andeq	r0, r8, #92	; 0x5c
    8408:	a001007d 	andge	r0, r1, sp, ror r0
    840c:	20000007 	andcs	r0, r0, r7
    8410:	00002623 	andeq	r2, r0, r3, lsr #12
    8414:	7901d601 	stmdbvc	r1, {r0, r9, sl, ip, lr, pc}
    8418:	a0000000 	andge	r0, r0, r0
    841c:	2400003f 	strcs	r0, [r0], #-63	; 0x3f
    8420:	00001cfb 	strdeq	r1, [r0], -fp
    8424:	ee01d601 	cfmadd32	mvax0, mvfx13, mvfx1, mvfx1
    8428:	01000000 	mrseq	r0, (UNDEF: 0)
    842c:	1d642151 	stfnee	f2, [r4, #-324]!	; 0xfffffebc
    8430:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    8434:	00007901 	andeq	r7, r0, r1, lsl #18
    8438:	003fc100 	eorseq	ip, pc, r0, lsl #2
    843c:	01260000 	teqeq	r6, r0
    8440:	00002580 	andeq	r2, r0, r0, lsl #11
    8444:	0101fe01 	tsteq	r1, r1, lsl #28
    8448:	08005ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, ip, lr}
    844c:	08005d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, lr}
    8450:	0000400f 	andeq	r4, r0, pc
    8454:	00082c01 	andeq	r2, r8, r1, lsl #24
    8458:	26232000 	strtcs	r2, [r3], -r0
    845c:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    8460:	00007901 	andeq	r7, r0, r1, lsl #18
    8464:	00402f00 	subeq	r2, r0, r0, lsl #30
    8468:	283d2000 	ldmdacs	sp!, {sp}
    846c:	fe010000 	cdp2	0, 0, cr0, cr1, cr0, {0}
    8470:	00008f01 	andeq	r8, r0, r1, lsl #30
    8474:	00405000 	subeq	r5, r0, r0
    8478:	25182000 	ldrcs	r2, [r8, #-0]
    847c:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    8480:	00008f01 	andeq	r8, r0, r1, lsl #30
    8484:	00407100 	subeq	r7, r0, r0, lsl #2
    8488:	24372100 	ldrtcs	r2, [r7], #-256	; 0x100
    848c:	01010000 	mrseq	r0, (UNDEF: 1)
    8490:	00007902 	andeq	r7, r0, r2, lsl #18
    8494:	00409200 	subeq	r9, r0, r0, lsl #4
    8498:	27dd2100 	ldrbcs	r2, [sp, r0, lsl #2]
    849c:	01010000 	mrseq	r0, (UNDEF: 1)
    84a0:	00007902 	andeq	r7, r0, r2, lsl #18
    84a4:	0040d800 	subeq	sp, r0, r0, lsl #16
    84a8:	28da2100 	ldmcs	sl, {r8, sp}^
    84ac:	01010000 	mrseq	r0, (UNDEF: 1)
    84b0:	00007902 	andeq	r7, r0, r2, lsl #18
    84b4:	00410800 	subeq	r0, r1, r0, lsl #16
    84b8:	27792100 	ldrbcs	r2, [r9, -r0, lsl #2]!
    84bc:	02010000 	andeq	r0, r1, #0
    84c0:	00007902 	andeq	r7, r0, r2, lsl #18
    84c4:	00413700 	subeq	r3, r1, r0, lsl #14
    84c8:	011f0000 	tsteq	pc, r0
    84cc:	000027e2 	andeq	r2, r0, r2, ror #15
    84d0:	01022801 	tsteq	r2, r1, lsl #16
    84d4:	000000ce 	andeq	r0, r0, lr, asr #1
    84d8:	08005d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, lr}
    84dc:	08005d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, ip, lr}
    84e0:	01007d02 	tsteq	r0, r2, lsl #26
    84e4:	0000088b 	andeq	r0, r0, fp, lsl #17
    84e8:	00262320 	eoreq	r2, r6, r0, lsr #6
    84ec:	02280100 	eoreq	r0, r8, #0
    84f0:	00000079 	andeq	r0, r0, r9, ror r0
    84f4:	0000417c 	andeq	r4, r0, ip, ror r1
    84f8:	001e4f21 	andseq	r4, lr, r1, lsr #30
    84fc:	022a0100 	eoreq	r0, sl, #0
    8500:	000000ce 	andeq	r0, r0, lr, asr #1
    8504:	0000419d 	muleq	r0, sp, r1
    8508:	706d7422 	rsbvc	r7, sp, r2, lsr #8
    850c:	022b0100 	eoreq	r0, fp, #0
    8510:	00000079 	andeq	r0, r0, r9, ror r0
    8514:	000041c4 	andeq	r4, r0, r4, asr #3
    8518:	0026bf21 	eoreq	fp, r6, r1, lsr #30
    851c:	022b0100 	eoreq	r0, fp, #0
    8520:	00000079 	andeq	r0, r0, r9, ror r0
    8524:	000041f3 	strdeq	r4, [r0], -r3
    8528:	cb012300 	blgt	51130 <__Stack_Size+0x50d30>
    852c:	01000026 	tsteq	r0, r6, lsr #32
    8530:	5401024e 	strpl	r0, [r1], #-590	; 0x24e
    8534:	6c08005d 	stcvs	0, cr0, [r8], {93}	; 0x5d
    8538:	0208005d 	andeq	r0, r8, #93	; 0x5d
    853c:	c601007d 			; <UNDEFINED> instruction: 0xc601007d
    8540:	20000008 	andcs	r0, r0, r8
    8544:	00002623 	andeq	r2, r0, r3, lsr #12
    8548:	79024e01 	stmdbvc	r2, {r0, r9, sl, fp, lr}
    854c:	4b000000 	blmi	8554 <__Stack_Size+0x8154>
    8550:	22000042 	andcs	r0, r0, #66	; 0x42
    8554:	00706d74 	rsbseq	r6, r0, r4, ror sp
    8558:	79025001 	stmdbvc	r2, {r0, ip, lr}
    855c:	6c000000 	stcvs	0, cr0, [r0], {-0}
    8560:	00000042 	andeq	r0, r0, r2, asr #32
    8564:	28080123 	stmdacs	r8, {r0, r1, r5, r8}
    8568:	66010000 	strvs	r0, [r1], -r0
    856c:	5d6c0102 	stfple	f0, [ip, #-8]!
    8570:	5d880800 	stcpl	8, cr0, [r8]
    8574:	7d020800 	stcvc	8, cr0, [r2, #-0]
    8578:	09010100 	stmdbeq	r1, {r8}
    857c:	23200000 	teqcs	r0, #0
    8580:	01000026 	tsteq	r0, r6, lsr #32
    8584:	00790266 	rsbseq	r0, r9, r6, ror #4
    8588:	429e0000 	addsmi	r0, lr, #0
    858c:	74220000 	strtvc	r0, [r2], #-0
    8590:	0100706d 	tsteq	r0, sp, rrx
    8594:	00790268 	rsbseq	r0, r9, r8, ror #4
    8598:	42bf0000 	adcsmi	r0, pc, #0
    859c:	1f000000 	svcne	0x00000000
    85a0:	00266501 	eoreq	r6, r6, r1, lsl #10
    85a4:	02840100 	addeq	r0, r4, #0
    85a8:	0000ce01 	andeq	ip, r0, r1, lsl #28
    85ac:	005d8800 	subseq	r8, sp, r0, lsl #16
    85b0:	005dac08 	subseq	sl, sp, r8, lsl #24
    85b4:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    85b8:	00096001 	andeq	r6, r9, r1
    85bc:	26232000 	strtcs	r2, [r3], -r0
    85c0:	84010000 	strhi	r0, [r1], #-0
    85c4:	00007902 	andeq	r7, r0, r2, lsl #18
    85c8:	0042fe00 	subeq	pc, r2, r0, lsl #28
    85cc:	1e4f2100 	dvfnee	f2, f7, f0
    85d0:	86010000 	strhi	r0, [r1], -r0
    85d4:	0000ce02 	andeq	ip, r0, r2, lsl #28
    85d8:	00431f00 	subeq	r1, r3, r0, lsl #30
    85dc:	6d742200 	lfmvs	f2, 2, [r4, #-0]
    85e0:	88010070 	stmdahi	r1, {r4, r5, r6}
    85e4:	00007902 	andeq	r7, r0, r2, lsl #18
    85e8:	00434600 	subeq	r4, r3, r0, lsl #12
    85ec:	26bf2100 	ldrtcs	r2, [pc], r0, lsl #2
    85f0:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    85f4:	00007902 	andeq	r7, r0, r2, lsl #18
    85f8:	00437500 	subeq	r7, r3, r0, lsl #10
    85fc:	011f0000 	tsteq	pc, r0
    8600:	000027b5 			; <UNDEFINED> instruction: 0x000027b5
    8604:	0102ac01 	tsteq	r2, r1, lsl #24
    8608:	00000079 	andeq	r0, r0, r9, ror r0
    860c:	08005dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, ip, lr}
    8610:	08005ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, ip, lr}
    8614:	01007d02 	tsteq	r0, r2, lsl #26
    8618:	000009bf 			; <UNDEFINED> instruction: 0x000009bf
    861c:	00262320 	eoreq	r2, r6, r0, lsr #6
    8620:	02ac0100 	adceq	r0, ip, #0
    8624:	00000079 	andeq	r0, r0, r9, ror r0
    8628:	000043ab 	andeq	r4, r0, fp, lsr #7
    862c:	00283021 	eoreq	r3, r8, r1, lsr #32
    8630:	02ae0100 	adceq	r0, lr, #0
    8634:	00000079 	andeq	r0, r0, r9, ror r0
    8638:	000043fe 	strdeq	r4, [r0], -lr
    863c:	001d6421 	andseq	r6, sp, r1, lsr #8
    8640:	02af0100 	adceq	r0, pc, #0
    8644:	00000079 	andeq	r0, r0, r9, ror r0
    8648:	0000444b 	andeq	r4, r0, fp, asr #8
    864c:	0026bf21 	eoreq	fp, r6, r1, lsr #30
    8650:	02af0100 	adceq	r0, pc, #0
    8654:	00000079 	andeq	r0, r0, r9, ror r0
    8658:	00004488 	andeq	r4, r0, r8, lsl #9
    865c:	03011f00 	movweq	r1, #7936	; 0x1f00
    8660:	01000025 	tsteq	r0, r5, lsr #32
    8664:	790102da 	stmdbvc	r1, {r1, r3, r4, r6, r7, r9}
    8668:	dc000000 	stcle	0, cr0, [r0], {-0}
    866c:	f008005d 			; <UNDEFINED> instruction: 0xf008005d
    8670:	0208005d 	andeq	r0, r8, #93	; 0x5d
    8674:	0e01007d 	mcreq	0, 0, r0, cr1, cr13, {3}
    8678:	2000000a 	andcs	r0, r0, sl
    867c:	00002623 	andeq	r2, r0, r3, lsr #12
    8680:	7902da01 	stmdbvc	r2, {r0, r9, fp, ip, lr, pc}
    8684:	05000000 	streq	r0, [r0, #-0]
    8688:	21000045 	tstcs	r0, r5, asr #32
    868c:	00002573 	andeq	r2, r0, r3, ror r5
    8690:	7902dc01 	stmdbvc	r2, {r0, sl, fp, ip, lr, pc}
    8694:	26000000 	strcs	r0, [r0], -r0
    8698:	22000045 	andcs	r0, r0, #69	; 0x45
    869c:	00706d74 	rsbseq	r6, r0, r4, ror sp
    86a0:	7902dd01 	stmdbvc	r2, {r0, r8, sl, fp, ip, lr, pc}
    86a4:	45000000 	strmi	r0, [r0, #-0]
    86a8:	00000045 	andeq	r0, r0, r5, asr #32
    86ac:	28cd0127 	stmiacs	sp, {r0, r1, r2, r5, r8}^
    86b0:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    86b4:	01270101 	teqeq	r7, r1, lsl #2
    86b8:	000028e6 	andeq	r2, r0, r6, ror #17
    86bc:	01012805 	tsteq	r1, r5, lsl #16
    86c0:	263f0127 	ldrtcs	r0, [pc], -r7, lsr #2
    86c4:	2c050000 	stccs	0, cr0, [r5], {-0}
    86c8:	01270101 	teqeq	r7, r1, lsl #2
    86cc:	0000271e 	andeq	r2, r0, lr, lsl r7
    86d0:	01012b05 	tsteq	r1, r5, lsl #22
    86d4:	26f60128 	ldrbtcs	r0, [r6], r8, lsr #2
    86d8:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    86dc:	0a4a0101 	beq	1288ae8 <__Stack_Size+0x12886e8>
    86e0:	79290000 	stmdbvc	r9!, {}	; <UNPREDICTABLE>
    86e4:	00000000 	andeq	r0, r0, r0
    86e8:	25a1012a 	strcs	r0, [r1, #298]!	; 0x12a
    86ec:	2f050000 	svccs	0x00050000
    86f0:	00007901 	andeq	r7, r0, r1, lsl #18
    86f4:	1b000100 	blne	8afc <__Stack_Size+0x86fc>
    86f8:	02000003 	andeq	r0, r0, #3
    86fc:	00120100 	andseq	r0, r2, r0, lsl #2
    8700:	11010400 	tstne	r1, r0, lsl #8
    8704:	01000002 	tsteq	r0, r2
    8708:	000029aa 	andeq	r2, r0, sl, lsr #19
    870c:	0000018b 	andeq	r0, r0, fp, lsl #3
    8710:	08005df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip, lr}
    8714:	08005eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip, lr}
    8718:	00001497 	muleq	r0, r7, r4
    871c:	d3070402 	movwle	r0, #29698	; 0x7402
    8720:	02000000 	andeq	r0, r0, #0
    8724:	015b0601 	cmpeq	fp, r1, lsl #12
    8728:	01020000 	mrseq	r0, (UNDEF: 2)
    872c:	00015908 	andeq	r5, r1, r8, lsl #18
    8730:	05020200 	streq	r0, [r2, #-512]	; 0x200
    8734:	00000025 	andeq	r0, r0, r5, lsr #32
    8738:	c4070202 	strgt	r0, [r7], #-514	; 0x202
    873c:	03000001 	movweq	r0, #1
    8740:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8744:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    8748:	0000bb05 	andeq	fp, r0, r5, lsl #22
    874c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    8750:	000000c9 	andeq	r0, r0, r9, asr #1
    8754:	c0050402 	andgt	r0, r5, r2, lsl #8
    8758:	02000000 	andeq	r0, r0, #0
    875c:	002f0704 	eoreq	r0, pc, r4, lsl #14
    8760:	04020000 	streq	r0, [r2], #-0
    8764:	0000ce07 	andeq	ip, r0, r7, lsl #28
    8768:	08010200 	stmdaeq	r1, {r9}
    876c:	00000162 	andeq	r0, r0, r2, ror #2
    8770:	32337504 	eorscc	r7, r3, #16777216	; 0x1000000
    8774:	6b270200 	blvs	9c8f7c <__Stack_Size+0x9c8b7c>
    8778:	04000000 	streq	r0, [r0], #-0
    877c:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    8780:	00003329 	andeq	r3, r0, r9, lsr #6
    8784:	0d7d0500 	cfldr64eq	mvdx0, [sp, #-0]
    8788:	2f020000 	svccs	0x00020000
    878c:	00000099 	muleq	r0, r9, r0
    8790:	00006b06 	andeq	r6, r0, r6, lsl #22
    8794:	02010700 	andeq	r0, r1, #0
    8798:	0000b339 	andeq	fp, r0, r9, lsr r3
    879c:	0b590800 	bleq	164a7a4 <__Stack_Size+0x164a3a4>
    87a0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    87a4:	00544553 	subseq	r4, r4, r3, asr r5
    87a8:	7e050001 	cdpvc	0, 0, cr0, cr5, cr1, {0}
    87ac:	02000012 	andeq	r0, r0, #18
    87b0:	00009e39 	andeq	r9, r0, r9, lsr lr
    87b4:	02010700 	andeq	r0, r1, #0
    87b8:	0000d33b 	andeq	sp, r0, fp, lsr r3
    87bc:	15170800 	ldrne	r0, [r7, #-2048]	; 0x800
    87c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    87c4:	00001935 	andeq	r1, r0, r5, lsr r9
    87c8:	ee050001 	cdp	0, 0, cr0, cr5, cr1, {0}
    87cc:	02000015 	andeq	r0, r0, #21
    87d0:	0000be3b 	andeq	fp, r0, fp, lsr lr
    87d4:	03080a00 	movweq	r0, #35328	; 0x8a00
    87d8:	010501a3 	smlatbeq	r5, r3, r1, r0
    87dc:	430b0000 	movwmi	r0, #45056	; 0xb000
    87e0:	a5030052 	strge	r0, [r3, #-82]	; 0x52
    87e4:	00008e01 	andeq	r8, r0, r1, lsl #28
    87e8:	00230200 	eoreq	r0, r3, r0, lsl #4
    87ec:	5253430b 	subspl	r4, r3, #738197504	; 0x2c000000
    87f0:	01a60300 			; <UNDEFINED> instruction: 0x01a60300
    87f4:	0000008e 	andeq	r0, r0, lr, lsl #1
    87f8:	00042302 	andeq	r2, r4, r2, lsl #6
    87fc:	0029930c 	eoreq	r9, r9, ip, lsl #6
    8800:	01a70300 			; <UNDEFINED> instruction: 0x01a70300
    8804:	000000de 	ldrdeq	r0, [r0], -lr
    8808:	2964010d 	stmdbcs	r4!, {r0, r2, r3, r8}^
    880c:	43010000 	movwmi	r0, #4096	; 0x1000
    8810:	005df001 	subseq	pc, sp, r1
    8814:	005e0a08 	subseq	r0, lr, r8, lsl #20
    8818:	00457008 	subeq	r7, r5, r8
    881c:	015d0100 	cmpeq	sp, r0, lsl #2
    8820:	fc0e0000 	stc2	0, cr0, [lr], {-0}
    8824:	f008005d 			; <UNDEFINED> instruction: 0xf008005d
    8828:	45000002 	strmi	r0, [r0, #-2]
    882c:	0f000001 	svceq	0x00000001
    8830:	31015101 	tstcc	r1, r1, lsl #2
    8834:	0350010f 	cmpeq	r0, #-1073741821	; 0xc0000003
    8838:	00244840 	eoreq	r4, r4, r0, asr #16
    883c:	005e0a10 	subseq	r0, lr, r0, lsl sl
    8840:	02f00108 	rscseq	r0, r0, #2
    8844:	010f0000 	mrseq	r0, CPSR
    8848:	0f300151 	svceq	0x00300151
    884c:	40035001 	andmi	r5, r3, r1
    8850:	00002448 	andeq	r2, r0, r8, asr #8
    8854:	16500111 			; <UNDEFINED> instruction: 0x16500111
    8858:	51010000 	mrspl	r0, (UNDEF: 1)
    885c:	005e0a01 	subseq	r0, lr, r1, lsl #20
    8860:	005e1408 	subseq	r1, lr, r8, lsl #8
    8864:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    8868:	00018401 	andeq	r8, r1, r1, lsl #8
    886c:	1cfb1200 	lfmne	f1, 2, [fp]
    8870:	51010000 	mrspl	r0, (UNDEF: 1)
    8874:	000000d3 	ldrdeq	r0, [r0], -r3
    8878:	11005001 	tstne	r0, r1
    887c:	00299f01 	eoreq	r9, r9, r1, lsl #30
    8880:	01610100 	cmneq	r1, r0, lsl #2
    8884:	08005e14 	stmdaeq	r0, {r2, r4, r9, sl, fp, ip, lr}
    8888:	08005e20 	stmdaeq	r0, {r5, r9, sl, fp, ip, lr}
    888c:	01007d02 	tsteq	r0, r2, lsl #26
    8890:	000001ab 	andeq	r0, r0, fp, lsr #3
    8894:	001cfb12 	andseq	pc, ip, r2, lsl fp	; <UNPREDICTABLE>
    8898:	d3610100 	cmnle	r1, #0
    889c:	01000000 	mrseq	r0, (UNDEF: 0)
    88a0:	01110050 	tsteq	r1, r0, asr r0
    88a4:	000029cc 	andeq	r2, r0, ip, asr #19
    88a8:	20017a01 	andcs	r7, r1, r1, lsl #20
    88ac:	3408005e 	strcc	r0, [r8], #-94	; 0x5e
    88b0:	0208005e 	andeq	r0, r8, #94	; 0x5e
    88b4:	e301007d 	movw	r0, #4221	; 0x107d
    88b8:	13000001 	movwne	r0, #1
    88bc:	0000297d 	andeq	r2, r0, sp, ror r9
    88c0:	00797a01 	rsbseq	r7, r9, r1, lsl #20
    88c4:	45900000 	ldrmi	r0, [r0]
    88c8:	64140000 	ldrvs	r0, [r4], #-0
    88cc:	0100001d 	tsteq	r0, sp, lsl r0
    88d0:	0000797c 	andeq	r7, r0, ip, ror r9
    88d4:	0045b100 	subeq	fp, r5, r0, lsl #2
    88d8:	01110000 	tsteq	r1, r0
    88dc:	00002a34 	andeq	r2, r0, r4, lsr sl
    88e0:	34019501 	strcc	r9, [r1], #-1281	; 0x501
    88e4:	4008005e 	andmi	r0, r8, lr, asr r0
    88e8:	0208005e 	andeq	r0, r8, #94	; 0x5e
    88ec:	0a01007d 	beq	48ae8 <__Stack_Size+0x486e8>
    88f0:	12000002 	andne	r0, r0, #2
    88f4:	00001cfb 	strdeq	r1, [r0], -fp
    88f8:	00d39501 	sbcseq	r9, r3, r1, lsl #10
    88fc:	50010000 	andpl	r0, r1, r0
    8900:	fd011100 	stc2	1, cr1, [r1, #-0]
    8904:	01000029 	tsteq	r0, r9, lsr #32
    8908:	5e4001ad 	dvfpldp	f0, f0, #5.0
    890c:	5e6c0800 	cdppl	8, 6, cr0, cr12, cr0, {0}
    8910:	7d020800 	stcvc	8, cr0, [r2, #-0]
    8914:	02650100 	rsbeq	r0, r5, #0
    8918:	6f130000 	svcvs	0x00130000
    891c:	01000029 	tsteq	r0, r9, lsr #32
    8920:	000079ad 	andeq	r7, r0, sp, lsr #19
    8924:	0045e600 	subeq	lr, r5, r0, lsl #12
    8928:	2a261300 	bcs	98d530 <__Stack_Size+0x98d130>
    892c:	ad010000 	stcge	0, cr0, [r1, #-0]
    8930:	00000084 	andeq	r0, r0, r4, lsl #1
    8934:	00004607 	andeq	r4, r0, r7, lsl #12
    8938:	001d6414 	andseq	r6, sp, r4, lsl r4
    893c:	79af0100 	stmibvc	pc!, {r8}	; <UNPREDICTABLE>
    8940:	41000000 	mrsmi	r0, (UNDEF: 0)
    8944:	15000046 	strne	r0, [r0, #-70]	; 0x46
    8948:	08005e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, ip, lr}
    894c:	00030a01 	andeq	r0, r3, r1, lsl #20
    8950:	5e641500 	cdppl	5, 6, cr1, cr4, cr0, {0}
    8954:	14010800 	strne	r0, [r1], #-2048	; 0x800
    8958:	00000003 	andeq	r0, r0, r3
    895c:	29410111 	stmdbcs	r1, {r0, r4, r8}^
    8960:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    8964:	005e6c01 	subseq	r6, lr, r1, lsl #24
    8968:	005e9408 	subseq	r9, lr, r8, lsl #8
    896c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    8970:	00028901 	andeq	r8, r2, r1, lsl #18
    8974:	5e8c1500 	cdppl	5, 8, cr1, cr12, cr0, {0}
    8978:	0a010800 	beq	4a980 <__Stack_Size+0x4a580>
    897c:	00000003 	andeq	r0, r0, r3
    8980:	29df0116 	ldmibcs	pc, {r1, r2, r4, r8}^	; <UNPREDICTABLE>
    8984:	f2010000 	vhadd.s8	d0, d1, d0
    8988:	0000b301 	andeq	fp, r0, r1, lsl #6
    898c:	005e9400 	subseq	r9, lr, r0, lsl #8
    8990:	005ea808 	subseq	sl, lr, r8, lsl #16
    8994:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    8998:	0002c501 	andeq	ip, r2, r1, lsl #10
    899c:	298a1300 	stmibcs	sl, {r8, r9, ip}
    89a0:	f2010000 	vhadd.s8	d0, d1, d0
    89a4:	00000079 	andeq	r0, r0, r9, ror r0
    89a8:	00004695 	muleq	r0, r5, r6
    89ac:	001e4f14 	andseq	r4, lr, r4, lsl pc
    89b0:	b3f40100 	mvnslt	r0, #0
    89b4:	b6000000 	strlt	r0, [r0], -r0
    89b8:	00000046 	andeq	r0, r0, r6, asr #32
    89bc:	29560117 	ldmdbcs	r6, {r0, r1, r2, r4, r8}^
    89c0:	10010000 	andne	r0, r1, r0
    89c4:	5ea80101 	fdvple	f0, f0, f1
    89c8:	5eb80800 	cdppl	8, 11, cr0, cr8, cr0, {0}
    89cc:	7d020800 	stcvc	8, cr0, [r2, #-0]
    89d0:	02f00100 	rscseq	r0, r0, #0
    89d4:	8a180000 	bhi	6089dc <__Stack_Size+0x6085dc>
    89d8:	01000029 	tsteq	r0, r9, lsr #32
    89dc:	00790110 	rsbseq	r0, r9, r0, lsl r1
    89e0:	46ef0000 	strbtmi	r0, [pc], r0
    89e4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    89e8:	002a0f01 	eoreq	r0, sl, r1, lsl #30
    89ec:	01150500 	tsteq	r5, r0, lsl #10
    89f0:	030a0101 	movweq	r0, #41217	; 0xa101
    89f4:	791a0000 	ldmdbvc	sl, {}	; <UNPREDICTABLE>
    89f8:	1a000000 	bne	8a00 <__Stack_Size+0x8600>
    89fc:	000000d3 	ldrdeq	r0, [r0], -r3
    8a00:	f7011b00 			; <UNDEFINED> instruction: 0xf7011b00
    8a04:	04000029 	streq	r0, [r0], #-41	; 0x29
    8a08:	1b01011b 	blne	48e7c <__Stack_Size+0x48a7c>
    8a0c:	0029f101 	eoreq	pc, r9, r1, lsl #2
    8a10:	011c0400 	tsteq	ip, r0, lsl #8
    8a14:	09350001 	ldmdbeq	r5!, {r0}
    8a18:	00020000 	andeq	r0, r2, r0
    8a1c:	0000139a 	muleq	r0, sl, r3
    8a20:	02110104 	andseq	r0, r1, #1
    8a24:	b5010000 	strlt	r0, [r1, #-0]
    8a28:	8b00002c 	blhi	8ae0 <__Stack_Size+0x86e0>
    8a2c:	b8000001 	stmdalt	r0, {r0}
    8a30:	f008005e 			; <UNDEFINED> instruction: 0xf008005e
    8a34:	8c080061 	stchi	0, cr0, [r8], {97}	; 0x61
    8a38:	02000015 	andeq	r0, r0, #21
    8a3c:	00d30704 	sbcseq	r0, r3, r4, lsl #14
    8a40:	01020000 	mrseq	r0, (UNDEF: 2)
    8a44:	00015b06 	andeq	r5, r1, r6, lsl #22
    8a48:	08010200 	stmdaeq	r1, {r9}
    8a4c:	00000159 	andeq	r0, r0, r9, asr r1
    8a50:	25050202 	strcs	r0, [r5, #-514]	; 0x202
    8a54:	02000000 	andeq	r0, r0, #0
    8a58:	01c40702 	biceq	r0, r4, r2, lsl #14
    8a5c:	04030000 	streq	r0, [r3], #-0
    8a60:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    8a64:	05080200 	streq	r0, [r8, #-512]	; 0x200
    8a68:	000000bb 	strheq	r0, [r0], -fp
    8a6c:	c9070802 	stmdbgt	r7, {r1, fp}
    8a70:	02000000 	andeq	r0, r0, #0
    8a74:	00c00504 	sbceq	r0, r0, r4, lsl #10
    8a78:	04020000 	streq	r0, [r2], #-0
    8a7c:	00002f07 	andeq	r2, r0, r7, lsl #30
    8a80:	07040200 	streq	r0, [r4, -r0, lsl #4]
    8a84:	000000ce 	andeq	r0, r0, lr, asr #1
    8a88:	62080102 	andvs	r0, r8, #-2147483648	; 0x80000000
    8a8c:	04000001 	streq	r0, [r0], #-1
    8a90:	00323375 	eorseq	r3, r2, r5, ror r3
    8a94:	006b2702 	rsbeq	r2, fp, r2, lsl #14
    8a98:	75040000 	strvc	r0, [r4, #-0]
    8a9c:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    8aa0:	00004128 	andeq	r4, r0, r8, lsr #2
    8aa4:	38750400 	ldmdacc	r5!, {sl}^
    8aa8:	33290200 	teqcc	r9, #0
    8aac:	04000000 	streq	r0, [r0], #-0
    8ab0:	00386375 	eorseq	r6, r8, r5, ror r3
    8ab4:	00a42d02 	adceq	r2, r4, r2, lsl #26
    8ab8:	33050000 	movwcc	r0, #20480	; 0x5000
    8abc:	06000000 	streq	r0, [r0], -r0
    8ac0:	00000d7d 	andeq	r0, r0, sp, ror sp
    8ac4:	00b42f02 	adcseq	r2, r4, r2, lsl #30
    8ac8:	6b070000 	blvs	1c8ad0 <__Stack_Size+0x1c86d0>
    8acc:	04000000 	streq	r0, [r0], #-0
    8ad0:	00387576 	eorseq	r7, r8, r6, ror r5
    8ad4:	00c43102 	sbceq	r3, r4, r2, lsl #2
    8ad8:	33070000 	movwcc	r0, #28672	; 0x7000
    8adc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8ae0:	de390201 	cdple	2, 3, cr0, cr9, cr1, {0}
    8ae4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8ae8:	00000b59 	andeq	r0, r0, r9, asr fp
    8aec:	45530a00 	ldrbmi	r0, [r3, #-2560]	; 0xa00
    8af0:	00010054 	andeq	r0, r1, r4, asr r0
    8af4:	00127e06 	andseq	r7, r2, r6, lsl #28
    8af8:	c9390200 	ldmdbgt	r9!, {r9}
    8afc:	06000000 	streq	r0, [r0], -r0
    8b00:	00002a99 	muleq	r0, r9, sl
    8b04:	00c93902 	sbceq	r3, r9, r2, lsl #18
    8b08:	01080000 	mrseq	r0, (UNDEF: 8)
    8b0c:	01093b02 	tsteq	r9, r2, lsl #22
    8b10:	17090000 	strne	r0, [r9, -r0]
    8b14:	00000015 	andeq	r0, r0, r5, lsl r0
    8b18:	00193509 	andseq	r3, r9, r9, lsl #10
    8b1c:	06000100 	streq	r0, [r0], -r0, lsl #2
    8b20:	000015ee 	andeq	r1, r0, lr, ror #11
    8b24:	00f43b02 	rscseq	r3, r4, r2, lsl #22
    8b28:	01080000 	mrseq	r0, (UNDEF: 8)
    8b2c:	01293e02 	teqeq	r9, r2, lsl #28
    8b30:	46090000 	strmi	r0, [r9], -r0
    8b34:	00000000 	andeq	r0, r0, r0
    8b38:	00009709 	andeq	r9, r0, r9, lsl #14
    8b3c:	06000100 	streq	r0, [r0], -r0, lsl #2
    8b40:	00001598 	muleq	r0, r8, r5
    8b44:	01143e02 	tsteq	r4, r2, lsl #28
    8b48:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
    8b4c:	d301aa03 	movwle	sl, #6659	; 0x1a03
    8b50:	0c000001 	stceq	0, cr0, [r0], {1}
    8b54:	03005243 	movweq	r5, #579	; 0x243
    8b58:	00a901ac 	adceq	r0, r9, ip, lsr #3
    8b5c:	23020000 	movwcs	r0, #8192	; 0x2000
    8b60:	2af30d00 	bcs	ffccbf68 <SCS_BASE+0x1fcbdf68>
    8b64:	ad030000 	stcge	0, cr0, [r3, #-0]
    8b68:	0000a901 	andeq	sl, r0, r1, lsl #18
    8b6c:	04230200 	strteq	r0, [r3], #-512	; 0x200
    8b70:	5249430c 	subpl	r4, r9, #805306368	; 0x30000000
    8b74:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
    8b78:	000000a9 	andeq	r0, r0, r9, lsr #1
    8b7c:	0d082302 	stceq	3, cr2, [r8, #-8]
    8b80:	00002b52 	andeq	r2, r0, r2, asr fp
    8b84:	a901af03 	stmdbge	r1, {r0, r1, r8, r9, sl, fp, sp, pc}
    8b88:	02000000 	andeq	r0, r0, #0
    8b8c:	510d0c23 	tstpl	sp, r3, lsr #24
    8b90:	0300002a 	movweq	r0, #42	; 0x2a
    8b94:	00a901b0 			; <UNDEFINED> instruction: 0x00a901b0
    8b98:	23020000 	movwcs	r0, #8192	; 0x2000
    8b9c:	2b850d10 	blcs	fe14bfe4 <SCS_BASE+0x1e13dfe4>
    8ba0:	b1030000 	mrslt	r0, (UNDEF: 3)
    8ba4:	0000a901 	andeq	sl, r0, r1, lsl #18
    8ba8:	14230200 	strtne	r0, [r3], #-512	; 0x200
    8bac:	002b960d 	eoreq	r9, fp, sp, lsl #12
    8bb0:	01b20300 			; <UNDEFINED> instruction: 0x01b20300
    8bb4:	000000a9 	andeq	r0, r0, r9, lsr #1
    8bb8:	0d182302 	ldceq	3, cr2, [r8, #-8]
    8bbc:	00002b07 	andeq	r2, r0, r7, lsl #22
    8bc0:	a901b303 	stmdbge	r1, {r0, r1, r8, r9, ip, sp, pc}
    8bc4:	02000000 	andeq	r0, r0, #0
    8bc8:	a20d1c23 	andge	r1, sp, #8960	; 0x2300
    8bcc:	0300002a 	movweq	r0, #42	; 0x2a
    8bd0:	00a901b4 			; <UNDEFINED> instruction: 0x00a901b4
    8bd4:	23020000 	movwcs	r0, #8192	; 0x2000
    8bd8:	53430c20 	movtpl	r0, #15392	; 0x3c20
    8bdc:	b5030052 	strlt	r0, [r3, #-82]	; 0x52
    8be0:	0000a901 	andeq	sl, r0, r1, lsl #18
    8be4:	24230200 	strtcs	r0, [r3], #-512	; 0x200
    8be8:	2a450e00 	bcs	114c3f0 <__Stack_Size+0x114bff0>
    8bec:	b6030000 	strlt	r0, [r3], -r0
    8bf0:	00013401 	andeq	r3, r1, r1, lsl #8
    8bf4:	04140f00 	ldreq	r0, [r4], #-3840	; 0xf00
    8bf8:	00022e19 	andeq	r2, r2, r9, lsl lr
    8bfc:	2c1c1000 	ldccs	0, cr1, [ip], {-0}
    8c00:	1b040000 	blne	108c08 <__Stack_Size+0x108808>
    8c04:	00000079 	andeq	r0, r0, r9, ror r0
    8c08:	10002302 	andne	r2, r0, r2, lsl #6
    8c0c:	00002af8 	strdeq	r2, [r0], -r8
    8c10:	00791c04 	rsbseq	r1, r9, r4, lsl #24
    8c14:	23020000 	movwcs	r0, #8192	; 0x2000
    8c18:	2c741004 	ldclcs	0, cr1, [r4], #-16
    8c1c:	1d040000 	stcne	0, cr0, [r4, #-0]
    8c20:	00000079 	andeq	r0, r0, r9, ror r0
    8c24:	10082302 	andne	r2, r8, r2, lsl #6
    8c28:	00002c38 	andeq	r2, r0, r8, lsr ip
    8c2c:	00791e04 	rsbseq	r1, r9, r4, lsl #28
    8c30:	23020000 	movwcs	r0, #8192	; 0x2000
    8c34:	2bc0100c 	blcs	ff00cc6c <SCS_BASE+0x1effec6c>
    8c38:	1f040000 	svcne	0x00040000
    8c3c:	00000079 	andeq	r0, r0, r9, ror r0
    8c40:	00102302 	andseq	r2, r0, r2, lsl #6
    8c44:	002ac006 	eoreq	ip, sl, r6
    8c48:	df200400 	svcle	0x00200400
    8c4c:	11000001 	tstne	r0, r1
    8c50:	000aed01 	andeq	lr, sl, r1, lsl #26
    8c54:	017c0100 	cmneq	ip, r0, lsl #2
    8c58:	08005eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip, lr}
    8c5c:	08005ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    8c60:	01007d02 	tsteq	r0, r2, lsl #26
    8c64:	0ed30112 	mrceq	1, 6, r0, cr3, cr2, {0}
    8c68:	9f010000 	svcls	0x00010000
    8c6c:	005ef401 	subseq	pc, lr, r1, lsl #8
    8c70:	005f2808 	subseq	r2, pc, r8, lsl #16
    8c74:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    8c78:	00027701 	andeq	r7, r2, r1, lsl #14
    8c7c:	2c5b1300 	mrrccs	3, 0, r1, fp, cr0
    8c80:	9f010000 	svcls	0x00010000
    8c84:	00000079 	andeq	r0, r0, r9, ror r0
    8c88:	00004710 	andeq	r4, r0, r0, lsl r7
    8c8c:	1a011200 	bne	4d494 <__Stack_Size+0x4d094>
    8c90:	0100002d 	tsteq	r0, sp, lsr #32
    8c94:	5f2801e9 	svcpl	0x002801e9
    8c98:	5f3c0800 	svcpl	0x003c0800
    8c9c:	7d020800 	stcvc	8, cr0, [r2, #-0]
    8ca0:	02af0100 	adceq	r0, pc, #0
    8ca4:	24130000 	ldrcs	r0, [r3], #-0
    8ca8:	0100002d 	tsteq	r0, sp, lsr #32
    8cac:	00008fe9 	andeq	r8, r0, r9, ror #31
    8cb0:	00474a00 	subeq	r4, r7, r0, lsl #20
    8cb4:	1d641400 	cfstrdne	mvd1, [r4, #-0]
    8cb8:	eb010000 	bl	48cc0 <__Stack_Size+0x488c0>
    8cbc:	00000079 	andeq	r0, r0, r9, ror r0
    8cc0:	0000476b 	andeq	r4, r0, fp, ror #14
    8cc4:	00011500 	andeq	r1, r1, r0, lsl #10
    8cc8:	0100002d 	tsteq	r0, sp, lsr #32
    8ccc:	3c010106 	stfccs	f0, [r1], {6}
    8cd0:	4808005f 	stmdami	r8, {r0, r1, r2, r3, r4, r6}
    8cd4:	0208005f 	andeq	r0, r8, #95	; 0x5f
    8cd8:	d801007d 	stmdale	r1, {r0, r2, r3, r4, r5, r6}
    8cdc:	16000002 	strne	r0, [r0], -r2
    8ce0:	00001cfb 	strdeq	r1, [r0], -fp
    8ce4:	09010601 	stmdbeq	r1, {r0, r9, sl}
    8ce8:	01000001 	tsteq	r0, r1
    8cec:	01150050 	tsteq	r5, r0, asr r0
    8cf0:	00001bab 	andeq	r1, r0, fp, lsr #23
    8cf4:	01011f01 	tsteq	r1, r1, lsl #30
    8cf8:	08005f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, lr}
    8cfc:	08005f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    8d00:	01007d02 	tsteq	r0, r2, lsl #26
    8d04:	00000323 	andeq	r0, r0, r3, lsr #6
    8d08:	002bda17 	eoreq	sp, fp, r7, lsl sl
    8d0c:	011f0100 	tsteq	pc, r0, lsl #2
    8d10:	00000079 	andeq	r0, r0, r9, ror r0
    8d14:	000047a0 	andeq	r4, r0, r0, lsr #15
    8d18:	002ad217 	eoreq	sp, sl, r7, lsl r2
    8d1c:	011f0100 	tsteq	pc, r0, lsl #2
    8d20:	00000079 	andeq	r0, r0, r9, ror r0
    8d24:	000047c1 	andeq	r4, r0, r1, asr #15
    8d28:	001d6418 	andseq	r6, sp, r8, lsl r4
    8d2c:	01210100 	teqeq	r1, r0, lsl #2
    8d30:	00000079 	andeq	r0, r0, r9, ror r0
    8d34:	000047e2 	andeq	r4, r0, r2, ror #15
    8d38:	b2011500 	andlt	r1, r1, #0
    8d3c:	01000016 	tsteq	r0, r6, lsl r0
    8d40:	5c01013c 	stfpls	f0, [r1], {60}	; 0x3c
    8d44:	6808005f 	stmdavs	r8, {r0, r1, r2, r3, r4, r6}
    8d48:	0208005f 	andeq	r0, r8, #95	; 0x5f
    8d4c:	4c01007d 	stcmi	0, cr0, [r1], {125}	; 0x7d
    8d50:	16000003 	strne	r0, [r0], -r3
    8d54:	00001cfb 	strdeq	r1, [r0], -fp
    8d58:	09013c01 	stmdbeq	r1, {r0, sl, fp, ip, sp}
    8d5c:	01000001 	tsteq	r0, r1
    8d60:	01150050 	tsteq	r5, r0, asr r0
    8d64:	00001b7f 	andeq	r1, r0, pc, ror fp
    8d68:	01014f01 	tsteq	r1, r1, lsl #30
    8d6c:	08005f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, ip, lr}
    8d70:	08005f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
    8d74:	01007d02 	tsteq	r0, r2, lsl #26
    8d78:	00000387 	andeq	r0, r0, r7, lsl #7
    8d7c:	002c6317 	eoreq	r6, ip, r7, lsl r3
    8d80:	014f0100 	mrseq	r0, (UNDEF: 95)
    8d84:	00000079 	andeq	r0, r0, r9, ror r0
    8d88:	0000481f 	andeq	r4, r0, pc, lsl r8
    8d8c:	001d6418 	andseq	r6, sp, r8, lsl r4
    8d90:	01510100 	cmpeq	r1, r0, lsl #2
    8d94:	00000079 	andeq	r0, r0, r9, ror r0
    8d98:	00004840 	andeq	r4, r0, r0, asr #16
    8d9c:	f5011900 			; <UNDEFINED> instruction: 0xf5011900
    8da0:	0100000e 	tsteq	r0, lr
    8da4:	8f01016d 	svchi	0x0001016d
    8da8:	7c000000 	stcvc	0, cr0, [r0], {-0}
    8dac:	8c08005f 	stchi	0, cr0, [r8], {95}	; 0x5f
    8db0:	0208005f 	andeq	r0, r8, #95	; 0x5f
    8db4:	1501007d 	strne	r0, [r1, #-125]	; 0x7d
    8db8:	000eae01 	andeq	sl, lr, r1, lsl #28
    8dbc:	01840100 	orreq	r0, r4, r0, lsl #2
    8dc0:	005f8c01 	subseq	r8, pc, r1, lsl #24
    8dc4:	005fa008 	subseq	sl, pc, r8
    8dc8:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    8dcc:	0003dc01 	andeq	sp, r3, r1, lsl #24
    8dd0:	2c071700 	stccs	7, cr1, [r7], {-0}
    8dd4:	84010000 	strhi	r0, [r1], #-0
    8dd8:	00007901 	andeq	r7, r0, r1, lsl #18
    8ddc:	00487500 	subeq	r7, r8, r0, lsl #10
    8de0:	1d641800 	stclne	8, cr1, [r4, #-0]
    8de4:	86010000 	strhi	r0, [r1], -r0
    8de8:	00007901 	andeq	r7, r0, r1, lsl #18
    8dec:	00489600 	subeq	r9, r8, r0, lsl #12
    8df0:	01150000 	tsteq	r5, r0
    8df4:	00000a4a 	andeq	r0, r0, sl, asr #20
    8df8:	0101a501 	tsteq	r1, r1, lsl #10
    8dfc:	08005fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp, ip, lr}
    8e00:	08005fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, lr}
    8e04:	01007d02 	tsteq	r0, r2, lsl #26
    8e08:	00000417 	andeq	r0, r0, r7, lsl r4
    8e0c:	002a5a17 	eoreq	r5, sl, r7, lsl sl
    8e10:	01a50100 			; <UNDEFINED> instruction: 0x01a50100
    8e14:	00000079 	andeq	r0, r0, r9, ror r0
    8e18:	000048cb 	andeq	r4, r0, fp, asr #17
    8e1c:	001d6418 	andseq	r6, sp, r8, lsl r4
    8e20:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    8e24:	00000079 	andeq	r0, r0, r9, ror r0
    8e28:	000048ec 	andeq	r4, r0, ip, ror #17
    8e2c:	92011500 	andls	r1, r1, #0
    8e30:	0100000d 	tsteq	r0, sp
    8e34:	b40101c6 	strlt	r0, [r1], #-454	; 0x1c6
    8e38:	c808005f 	stmdagt	r8, {r0, r1, r2, r3, r4, r6}
    8e3c:	0208005f 	andeq	r0, r8, #95	; 0x5f
    8e40:	5201007d 	andpl	r0, r1, #125	; 0x7d
    8e44:	17000004 	strne	r0, [r0, -r4]
    8e48:	00002a5a 	andeq	r2, r0, sl, asr sl
    8e4c:	7901c601 	stmdbvc	r1, {r0, r9, sl, lr, pc}
    8e50:	21000000 	mrscs	r0, (UNDEF: 0)
    8e54:	18000049 	stmdane	r0, {r0, r3, r6}
    8e58:	00001d64 	andeq	r1, r0, r4, ror #26
    8e5c:	7901c801 	stmdbvc	r1, {r0, fp, lr, pc}
    8e60:	42000000 	andmi	r0, r0, #0
    8e64:	00000049 	andeq	r0, r0, r9, asr #32
    8e68:	2c480115 	stfcse	f0, [r8], {21}
    8e6c:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    8e70:	5fc80101 	svcpl	0x00c80101
    8e74:	5fe00800 	svcpl	0x00e00800
    8e78:	7d020800 	stcvc	8, cr0, [r2, #-0]
    8e7c:	048b0100 	streq	r0, [fp], #256	; 0x100
    8e80:	13170000 	tstne	r7, #0
    8e84:	0100002d 	tsteq	r0, sp, lsr #32
    8e88:	008f01e9 	addeq	r0, pc, r9, ror #3
    8e8c:	49770000 	ldmdbmi	r7!, {}^	; <UNPREDICTABLE>
    8e90:	fb160000 	blx	588e9a <__Stack_Size+0x588a9a>
    8e94:	0100001c 	tsteq	r0, ip, lsl r0
    8e98:	010901e9 	smlatteq	r9, r9, r1, r0
    8e9c:	51010000 	mrspl	r0, (UNDEF: 1)
    8ea0:	36011500 	strcc	r1, [r1], -r0, lsl #10
    8ea4:	0100002b 	tsteq	r0, fp, lsr #32
    8ea8:	e0010208 	and	r0, r1, r8, lsl #4
    8eac:	ec08005f 	stc	0, cr0, [r8], {95}	; 0x5f
    8eb0:	0208005f 	andeq	r0, r8, #95	; 0x5f
    8eb4:	b401007d 	strlt	r0, [r1], #-125	; 0x7d
    8eb8:	16000004 	strne	r0, [r0], -r4
    8ebc:	00002b74 	andeq	r2, r0, r4, ror fp
    8ec0:	79020801 	stmdbvc	r2, {r0, fp}
    8ec4:	01000000 	mrseq	r0, (UNDEF: 0)
    8ec8:	01150050 	tsteq	r5, r0, asr r0
    8ecc:	00002a63 	andeq	r2, r0, r3, ror #20
    8ed0:	01021d01 	tsteq	r2, r1, lsl #26
    8ed4:	08005fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8ed8:	08006000 	stmdaeq	r0, {sp, lr}
    8edc:	01007d02 	tsteq	r0, r2, lsl #26
    8ee0:	000004ef 	andeq	r0, r0, pc, ror #9
    8ee4:	002ab617 	eoreq	fp, sl, r7, lsl r6
    8ee8:	021d0100 	andseq	r0, sp, #0
    8eec:	00000079 	andeq	r0, r0, r9, ror r0
    8ef0:	000049b1 			; <UNDEFINED> instruction: 0x000049b1
    8ef4:	001d6418 	andseq	r6, sp, r8, lsl r4
    8ef8:	021f0100 	andseq	r0, pc, #0
    8efc:	00000079 	andeq	r0, r0, r9, ror r0
    8f00:	000049d2 	ldrdeq	r4, [r0], -r2
    8f04:	84011500 	strhi	r1, [r1], #-1280	; 0x500
    8f08:	0100002c 	tsteq	r0, ip, lsr #32
    8f0c:	0001023c 	andeq	r0, r1, ip, lsr r2
    8f10:	20080060 	andcs	r0, r8, r0, rrx
    8f14:	02080060 	andeq	r0, r8, #96	; 0x60
    8f18:	1a01007d 	bne	49114 <__Stack_Size+0x48d14>
    8f1c:	17000005 	strne	r0, [r0, -r5]
    8f20:	00002a8a 	andeq	r2, r0, sl, lsl #21
    8f24:	8f023c01 	svchi	0x00023c01
    8f28:	07000000 	streq	r0, [r0, -r0]
    8f2c:	0000004a 	andeq	r0, r0, sl, asr #32
    8f30:	2b470115 	blcs	11c938c <__Stack_Size+0x11c8f8c>
    8f34:	63010000 	movwvs	r0, #4096	; 0x1000
    8f38:	60200102 	eorvs	r0, r0, r2, lsl #2
    8f3c:	602c0800 	eorvs	r0, ip, r0, lsl #16
    8f40:	7d020800 	stcvc	8, cr0, [r2, #-0]
    8f44:	05430100 	strbeq	r0, [r3, #-256]	; 0x100
    8f48:	fb160000 	blx	588f52 <__Stack_Size+0x588b52>
    8f4c:	0100001c 	tsteq	r0, ip, lsl r0
    8f50:	01090263 	tsteq	r9, r3, ror #4
    8f54:	50010000 	andpl	r0, r1, r0
    8f58:	e8011500 	stmda	r1, {r8, sl, ip}
    8f5c:	0100002b 	tsteq	r0, fp, lsr #32
    8f60:	2c010279 	sfmcs	f0, 4, [r1], {121}	; 0x79
    8f64:	3c080060 	stccc	0, cr0, [r8], {96}	; 0x60
    8f68:	02080060 	andeq	r0, r8, #96	; 0x60
    8f6c:	6e01007d 	mcrvs	0, 0, r0, cr1, cr13, {3}
    8f70:	17000005 	strne	r0, [r0, -r5]
    8f74:	00002b1d 	andeq	r2, r0, sp, lsl fp
    8f78:	79027901 	stmdbvc	r2, {r0, r8, fp, ip, sp, lr}
    8f7c:	41000000 	mrsmi	r0, (UNDEF: 0)
    8f80:	0000004a 	andeq	r0, r0, sl, asr #32
    8f84:	2cd70115 	ldfcse	f0, [r7], {21}
    8f88:	8c010000 	stchi	0, cr0, [r1], {-0}
    8f8c:	603c0102 	eorsvs	r0, ip, r2, lsl #2
    8f90:	60480800 	subvs	r0, r8, r0, lsl #16
    8f94:	7d020800 	stcvc	8, cr0, [r2, #-0]
    8f98:	05970100 	ldreq	r0, [r7, #256]	; 0x100
    8f9c:	fb160000 	blx	588fa6 <__Stack_Size+0x588ba6>
    8fa0:	0100001c 	tsteq	r0, ip, lsl r0
    8fa4:	0109028c 	smlabbeq	r9, ip, r2, r0
    8fa8:	50010000 	andpl	r0, r1, r0
    8fac:	a3011a00 	movwge	r1, #6656	; 0x1a00
    8fb0:	0100002c 	tsteq	r0, ip, lsr #32
    8fb4:	4801029c 	stmdami	r1, {r2, r3, r4, r7, r9}
    8fb8:	d0080060 	andle	r0, r8, r0, rrx
    8fbc:	62080060 	andvs	r0, r8, #96	; 0x60
    8fc0:	0100004a 	tsteq	r0, sl, asr #32
    8fc4:	00000601 	andeq	r0, r0, r1, lsl #12
    8fc8:	002c2d16 	eoreq	r2, ip, r6, lsl sp
    8fcc:	029c0100 	addseq	r0, ip, #0
    8fd0:	00000601 	andeq	r0, r0, r1, lsl #12
    8fd4:	741b5001 	ldrvc	r5, [fp], #-1
    8fd8:	0100706d 	tsteq	r0, sp, rrx
    8fdc:	0079029e 			; <UNDEFINED> instruction: 0x0079029e
    8fe0:	4a820000 	bmi	fe088fe8 <SCS_BASE+0x1e07afe8>
    8fe4:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
    8fe8:	0100002b 	tsteq	r0, fp, lsr #32
    8fec:	0079029e 			; <UNDEFINED> instruction: 0x0079029e
    8ff0:	4b0a0000 	blmi	288ff8 <__Stack_Size+0x288bf8>
    8ff4:	6a180000 	bvs	608ffc <__Stack_Size+0x608bfc>
    8ff8:	0100002b 	tsteq	r0, fp, lsr #32
    8ffc:	0079029e 			; <UNDEFINED> instruction: 0x0079029e
    9000:	4b3a0000 	blmi	e89008 <__Stack_Size+0xe88c08>
    9004:	55180000 	ldrpl	r0, [r8, #-0]
    9008:	0100002c 	tsteq	r0, ip, lsr #32
    900c:	0079029e 			; <UNDEFINED> instruction: 0x0079029e
    9010:	4b5f0000 	blmi	17c9018 <__Stack_Size+0x17c8c18>
    9014:	1c000000 	stcne	0, cr0, [r0], {-0}
    9018:	00022e04 	andeq	r2, r2, r4, lsl #28
    901c:	dd011500 	cfstr32le	mvfx1, [r1, #-0]
    9020:	0100002a 	tsteq	r0, sl, lsr #32
    9024:	d0010300 	andle	r0, r1, r0, lsl #6
    9028:	e8080060 	stmda	r8, {r5, r6}
    902c:	02080060 	andeq	r0, r8, #96	; 0x60
    9030:	4001007d 	andmi	r0, r1, sp, ror r0
    9034:	17000006 	strne	r0, [r0, -r6]
    9038:	00002d38 	andeq	r2, r0, r8, lsr sp
    903c:	79030001 	stmdbvc	r3, {r0}
    9040:	ea000000 	b	9048 <__Stack_Size+0x8c48>
    9044:	1600004b 	strne	r0, [r0], -fp, asr #32
    9048:	00001cfb 	strdeq	r1, [r0], -fp
    904c:	09030001 	stmdbeq	r3, {r0}
    9050:	01000001 	tsteq	r0, r1
    9054:	01150051 	tsteq	r5, r1, asr r0
    9058:	000010cf 	andeq	r1, r0, pc, asr #1
    905c:	01032101 	tsteq	r3, r1, lsl #2
    9060:	080060e8 	stmdaeq	r0, {r3, r5, r6, r7, sp, lr}
    9064:	08006100 	stmdaeq	r0, {r8, sp, lr}
    9068:	01007d02 	tsteq	r0, r2, lsl #26
    906c:	00000679 	andeq	r0, r0, r9, ror r6
    9070:	002aa717 	eoreq	sl, sl, r7, lsl r7
    9074:	03210100 	teqeq	r1, #0
    9078:	00000079 	andeq	r0, r0, r9, ror r0
    907c:	00004c24 	andeq	r4, r0, r4, lsr #24
    9080:	001cfb16 	andseq	pc, ip, r6, lsl fp	; <UNPREDICTABLE>
    9084:	03210100 	teqeq	r1, #0
    9088:	00000109 	andeq	r0, r0, r9, lsl #2
    908c:	15005101 	strne	r5, [r0, #-257]	; 0x101
    9090:	00110c01 	andseq	r0, r1, r1, lsl #24
    9094:	03430100 	movteq	r0, #12544	; 0x3100
    9098:	00610001 	rsbeq	r0, r1, r1
    909c:	00611808 	rsbeq	r1, r1, r8, lsl #16
    90a0:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    90a4:	0006b201 	andeq	fp, r6, r1, lsl #4
    90a8:	2b5b1700 	blcs	16cecb0 <__Stack_Size+0x16ce8b0>
    90ac:	43010000 	movwmi	r0, #4096	; 0x1000
    90b0:	00007903 	andeq	r7, r0, r3, lsl #18
    90b4:	004c5e00 	subeq	r5, ip, r0, lsl #28
    90b8:	1cfb1600 	ldclne	6, cr1, [fp]
    90bc:	43010000 	movwmi	r0, #4096	; 0x1000
    90c0:	00010903 	andeq	r0, r1, r3, lsl #18
    90c4:	00510100 	subseq	r0, r1, r0, lsl #2
    90c8:	1e280115 	mcrne	1, 1, r0, cr8, cr5, {0}
    90cc:	63010000 	movwvs	r0, #4096	; 0x1000
    90d0:	61180103 	tstvs	r8, r3, lsl #2
    90d4:	61300800 	teqvs	r0, r0, lsl #16
    90d8:	7d020800 	stcvc	8, cr0, [r2, #-0]
    90dc:	06eb0100 	strbteq	r0, [fp], r0, lsl #2
    90e0:	a7170000 	ldrge	r0, [r7, -r0]
    90e4:	0100002a 	tsteq	r0, sl, lsr #32
    90e8:	00790363 	rsbseq	r0, r9, r3, ror #6
    90ec:	4c980000 	ldcmi	0, cr0, [r8], {0}
    90f0:	fb160000 	blx	5890fa <__Stack_Size+0x588cfa>
    90f4:	0100001c 	tsteq	r0, ip, lsl r0
    90f8:	01090363 	tsteq	r9, r3, ror #6
    90fc:	51010000 	mrspl	r0, (UNDEF: 1)
    9100:	0f011500 	svceq	0x00011500
    9104:	0100002a 	tsteq	r0, sl, lsr #32
    9108:	30010384 	andcc	r0, r1, r4, lsl #7
    910c:	48080061 	stmdami	r8, {r0, r5, r6}
    9110:	02080061 	andeq	r0, r8, #97	; 0x61
    9114:	2401007d 	strcs	r0, [r1], #-125	; 0x7d
    9118:	17000007 	strne	r0, [r0, -r7]
    911c:	00002b5b 	andeq	r2, r0, fp, asr fp
    9120:	79038401 	stmdbvc	r3, {r0, sl, pc}
    9124:	d2000000 	andle	r0, r0, #0
    9128:	1600004c 	strne	r0, [r0], -ip, asr #32
    912c:	00001cfb 	strdeq	r1, [r0], -fp
    9130:	09038401 	stmdbeq	r3, {r0, sl, pc}
    9134:	01000001 	tsteq	r0, r1
    9138:	01150051 	tsteq	r5, r1, asr r0
    913c:	00002bad 	andeq	r2, r0, sp, lsr #23
    9140:	01039c01 	tsteq	r3, r1, lsl #24
    9144:	08006148 	stmdaeq	r0, {r3, r6, r8, sp, lr}
    9148:	08006154 	stmdaeq	r0, {r2, r4, r6, r8, sp, lr}
    914c:	01007d02 	tsteq	r0, r2, lsl #26
    9150:	0000074d 	andeq	r0, r0, sp, asr #14
    9154:	001cfb16 	andseq	pc, ip, r6, lsl fp	; <UNPREDICTABLE>
    9158:	039c0100 	orrseq	r0, ip, #0
    915c:	00000109 	andeq	r0, r0, r9, lsl #2
    9160:	15005001 	strne	r5, [r0, #-1]
    9164:	002ce501 	eoreq	lr, ip, r1, lsl #10
    9168:	03ac0100 			; <UNDEFINED> instruction: 0x03ac0100
    916c:	00615401 	rsbeq	r5, r1, r1, lsl #8
    9170:	00616008 	rsbeq	r6, r1, r8
    9174:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    9178:	00077601 	andeq	r7, r7, r1, lsl #12
    917c:	1cfb1600 	ldclne	6, cr1, [fp]
    9180:	ac010000 	stcge	0, cr0, [r1], {-0}
    9184:	00010903 	andeq	r0, r1, r3, lsl #18
    9188:	00500100 	subseq	r0, r0, r0, lsl #2
    918c:	2b0f0115 	blcs	3c95e8 <__Stack_Size+0x3c91e8>
    9190:	c1010000 	mrsgt	r0, (UNDEF: 1)
    9194:	61600103 	cmnvs	r0, r3, lsl #2
    9198:	616c0800 	cmnvs	ip, r0, lsl #16
    919c:	7d020800 	stcvc	8, cr0, [r2, #-0]
    91a0:	079f0100 	ldreq	r0, [pc, r0, lsl #2]
    91a4:	0b160000 	bleq	5891ac <__Stack_Size+0x588dac>
    91a8:	0100002d 	tsteq	r0, sp, lsr #32
    91ac:	008f03c1 	addeq	r0, pc, r1, asr #7
    91b0:	50010000 	andpl	r0, r1, r0
    91b4:	77011d00 	strvc	r1, [r1, -r0, lsl #26]
    91b8:	01000012 	tsteq	r0, r2, lsl r0
    91bc:	de0103dd 	mcrle	3, 0, r0, cr1, cr13, {6}
    91c0:	6c000000 	stcvs	0, cr0, [r0], {-0}
    91c4:	94080061 	strls	r0, [r8], #-97	; 0x61
    91c8:	02080061 	andeq	r0, r8, #97	; 0x61
    91cc:	fe01007d 	mcr2	0, 0, r0, cr1, cr13, {3}
    91d0:	17000007 	strne	r0, [r0, -r7]
    91d4:	00002bd1 	ldrdeq	r2, [r0], -r1
    91d8:	8f03dd01 	svchi	0x0003dd01
    91dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    91e0:	1b00004d 	blne	931c <__Stack_Size+0x8f1c>
    91e4:	00706d74 	rsbseq	r6, r0, r4, ror sp
    91e8:	7903df01 	stmdbvc	r3, {r0, r8, r9, sl, fp, ip, lr, pc}
    91ec:	2d000000 	stccs	0, cr0, [r0, #-0]
    91f0:	1800004d 	stmdane	r0, {r0, r2, r3, r6}
    91f4:	00002b8c 	andeq	r2, r0, ip, lsl #23
    91f8:	7903e001 	stmdbvc	r3, {r0, sp, lr, pc}
    91fc:	87000000 	strhi	r0, [r0, -r0]
    9200:	1800004d 	stmdane	r0, {r0, r2, r3, r6}
    9204:	00001e4f 	andeq	r1, r0, pc, asr #28
    9208:	de03e101 	mvfles	f6, f1
    920c:	bd000000 	stclt	0, cr0, [r0, #-0]
    9210:	0000004d 	andeq	r0, r0, sp, asr #32
    9214:	16c3011e 			; <UNDEFINED> instruction: 0x16c3011e
    9218:	c6010000 	strgt	r0, [r1], -r0
    921c:	00012901 	andeq	r2, r1, r1, lsl #18
    9220:	00619400 	rsbeq	r9, r1, r0, lsl #8
    9224:	0061be08 	rsbeq	fp, r1, r8, lsl #28
    9228:	004de808 	subeq	lr, sp, r8, lsl #16
    922c:	086e0100 	stmdaeq	lr!, {r8}^
    9230:	9e140000 	cdpls	0, 1, cr0, cr4, cr0, {0}
    9234:	0100002b 	tsteq	r0, fp, lsr #32
    9238:	0000a9c8 	andeq	sl, r0, r8, asr #19
    923c:	004e0800 	subeq	r0, lr, r0, lsl #16
    9240:	1d301400 	cfldrsne	mvf1, [r0, #-0]
    9244:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    9248:	00000129 	andeq	r0, r0, r9, lsr #2
    924c:	00004e27 	andeq	r4, r0, r7, lsr #28
    9250:	002c1214 	eoreq	r1, ip, r4, lsl r2
    9254:	deca0100 	pollee	f0, f2, f0
    9258:	4c000000 	stcmi	0, cr0, [r0], {-0}
    925c:	1f00004e 	svcne	0x0000004e
    9260:	080061a0 	stmdaeq	r0, {r5, r7, r8, sp, lr}
    9264:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    9268:	0000085d 	andeq	r0, r0, sp, asr r8
    926c:	02500120 	subseq	r0, r0, #8
    9270:	21003108 	tstcs	r0, r8, lsl #2
    9274:	080061b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, sp, lr}
    9278:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    927c:	02500120 	subseq	r0, r0, #8
    9280:	00003108 	andeq	r3, r0, r8, lsl #2
    9284:	2bf90122 	blcs	ffe49714 <SCS_BASE+0x1fe3b714>
    9288:	10010000 	andne	r0, r1, r0
    928c:	61be0104 			; <UNDEFINED> instruction: 0x61be0104
    9290:	61d00800 	bicsvs	r0, r0, r0, lsl #16
    9294:	7d020800 	stcvc	8, cr0, [r2, #-0]
    9298:	011d0100 	tsteq	sp, r0, lsl #2
    929c:	00002a92 	muleq	r0, r2, sl
    92a0:	01042401 	tsteq	r4, r1, lsl #8
    92a4:	000000e9 	andeq	r0, r0, r9, ror #1
    92a8:	080061d0 	stmdaeq	r0, {r4, r6, r7, r8, sp, lr}
    92ac:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
    92b0:	01007d02 	tsteq	r0, r2, lsl #26
    92b4:	000008c3 	andeq	r0, r0, r3, asr #17
    92b8:	002d1317 	eoreq	r1, sp, r7, lsl r3
    92bc:	04240100 	strteq	r0, [r4], #-256	; 0x100
    92c0:	0000008f 	andeq	r0, r0, pc, lsl #1
    92c4:	00004e5f 	andeq	r4, r0, pc, asr lr
    92c8:	001e4f18 	andseq	r4, lr, r8, lsl pc
    92cc:	04260100 	strteq	r0, [r6], #-256	; 0x100
    92d0:	000000e9 	andeq	r0, r0, r9, ror #1
    92d4:	00004e80 	andeq	r4, r0, r0, lsl #29
    92d8:	74011500 	strvc	r1, [r1], #-1280	; 0x500
    92dc:	0100002a 	tsteq	r0, sl, lsr #32
    92e0:	e4010447 	str	r0, [r1], #-1095	; 0x447
    92e4:	f0080061 			; <UNDEFINED> instruction: 0xf0080061
    92e8:	02080061 	andeq	r0, r8, #97	; 0x61
    92ec:	ec01007d 	stc	0, cr0, [r1], {125}	; 0x7d
    92f0:	16000008 	strne	r0, [r0], -r8
    92f4:	00002d13 	andeq	r2, r0, r3, lsl sp
    92f8:	8f044701 	svchi	0x00044701
    92fc:	01000000 	mrseq	r0, (UNDEF: 0)
    9300:	99230050 	stmdbls	r3!, {r4, r6}
    9304:	fc000000 	stc2	0, cr0, [r0], {-0}
    9308:	24000008 	strcs	r0, [r0], #-8
    930c:	00000064 	andeq	r0, r0, r4, rrx
    9310:	9225000f 	eorls	r0, r5, #15
    9314:	0100002c 	tsteq	r0, ip, lsr #32
    9318:	00090d6f 	andeq	r0, r9, pc, ror #26
    931c:	a2030500 	andge	r0, r3, #0
    9320:	05080067 	streq	r0, [r8, #-103]	; 0x67
    9324:	000008ec 	andeq	r0, r0, ip, ror #17
    9328:	00009923 	andeq	r9, r0, r3, lsr #18
    932c:	00092200 	andeq	r2, r9, r0, lsl #4
    9330:	00642400 	rsbeq	r2, r4, r0, lsl #8
    9334:	00030000 	andeq	r0, r3, r0
    9338:	002d4625 	eoreq	r4, sp, r5, lsr #12
    933c:	33700100 	cmncc	r0, #0
    9340:	05000009 	streq	r0, [r0, #-9]
    9344:	0067b203 	rsbeq	fp, r7, r3, lsl #4
    9348:	09120508 	ldmdbeq	r2, {r3, r8, sl}
    934c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    9350:	02000002 	andeq	r0, r0, #2
    9354:	0015d700 	andseq	sp, r5, r0, lsl #14
    9358:	11010400 	tstne	r1, r0, lsl #8
    935c:	01000002 	tsteq	r0, r2
    9360:	00002da0 	andeq	r2, r0, r0, lsr #27
    9364:	0000018b 	andeq	r0, r0, fp, lsl #3
    9368:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
    936c:	0800627c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, lr}
    9370:	0000172f 	andeq	r1, r0, pc, lsr #14
    9374:	d3070402 	movwle	r0, #29698	; 0x7402
    9378:	02000000 	andeq	r0, r0, #0
    937c:	015b0601 	cmpeq	fp, r1, lsl #12
    9380:	01020000 	mrseq	r0, (UNDEF: 2)
    9384:	00015908 	andeq	r5, r1, r8, lsl #18
    9388:	05020200 	streq	r0, [r2, #-512]	; 0x200
    938c:	00000025 	andeq	r0, r0, r5, lsr #32
    9390:	c4070202 	strgt	r0, [r7], #-514	; 0x202
    9394:	03000001 	movweq	r0, #1
    9398:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    939c:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    93a0:	0000bb05 	andeq	fp, r0, r5, lsl #22
    93a4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    93a8:	000000c9 	andeq	r0, r0, r9, asr #1
    93ac:	c0050402 	andgt	r0, r5, r2, lsl #8
    93b0:	02000000 	andeq	r0, r0, #0
    93b4:	002f0704 	eoreq	r0, pc, r4, lsl #14
    93b8:	04020000 	streq	r0, [r2], #-0
    93bc:	0000ce07 	andeq	ip, r0, r7, lsl #28
    93c0:	08010200 	stmdaeq	r1, {r9}
    93c4:	00000162 	andeq	r0, r0, r2, ror #2
    93c8:	32337504 	eorscc	r7, r3, #16777216	; 0x1000000
    93cc:	6b270200 	blvs	9c9bd4 <__Stack_Size+0x9c97d4>
    93d0:	04000000 	streq	r0, [r0], #-0
    93d4:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    93d8:	00003329 	andeq	r3, r0, r9, lsr #6
    93dc:	0d7d0500 	cfldr64eq	mvdx0, [sp, #-0]
    93e0:	2f020000 	svccs	0x00020000
    93e4:	00000099 	muleq	r0, r9, r0
    93e8:	00006b06 	andeq	r6, r0, r6, lsl #22
    93ec:	282a0500 	stmdacs	sl!, {r8, sl}
    93f0:	33020000 	movwcc	r0, #8192	; 0x2000
    93f4:	000000a9 	andeq	r0, r0, r9, lsr #1
    93f8:	00009907 	andeq	r9, r0, r7, lsl #18
    93fc:	02010800 	andeq	r0, r1, #0
    9400:	0000c339 	andeq	ip, r0, r9, lsr r3
    9404:	0b590900 	bleq	164b80c <__Stack_Size+0x164b40c>
    9408:	0a000000 	beq	9410 <__Stack_Size+0x9010>
    940c:	00544553 	subseq	r4, r4, r3, asr r5
    9410:	7e050001 	cdpvc	0, 0, cr0, cr5, cr1, {0}
    9414:	02000012 	andeq	r0, r0, #18
    9418:	0000ae39 	andeq	sl, r0, r9, lsr lr
    941c:	02010800 	andeq	r0, r1, #0
    9420:	0000e33b 	andeq	lr, r0, fp, lsr r3
    9424:	15170900 	ldrne	r0, [r7, #-2304]	; 0x900
    9428:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    942c:	00001935 	andeq	r1, r0, r5, lsr r9
    9430:	ee050001 	cdp	0, 0, cr0, cr5, cr1, {0}
    9434:	02000015 	andeq	r0, r0, #21
    9438:	0000ce3b 	andeq	ip, r0, fp, lsr lr
    943c:	03100b00 	tsteq	r0, #0
    9440:	01340202 	teqeq	r4, r2, lsl #4
    9444:	c60c0000 	strgt	r0, [ip], -r0
    9448:	0300002d 	movweq	r0, #45	; 0x2d
    944c:	008e0204 	addeq	r0, lr, r4, lsl #4
    9450:	23020000 	movwcs	r0, #8192	; 0x2000
    9454:	0c180c00 	ldceq	12, cr0, [r8], {-0}
    9458:	05030000 	streq	r0, [r3, #-0]
    945c:	00008e02 	andeq	r8, r0, r2, lsl #28
    9460:	04230200 	strteq	r0, [r3], #-512	; 0x200
    9464:	4c41560d 	mcrrmi	6, 0, r5, r1, cr13
    9468:	02060300 	andeq	r0, r6, #0
    946c:	0000008e 	andeq	r0, r0, lr, lsl #1
    9470:	0c082302 	stceq	3, cr2, [r8], {2}
    9474:	00002d9a 	muleq	r0, sl, sp
    9478:	9e020703 	cdpls	7, 0, cr0, cr2, cr3, {0}
    947c:	02000000 	andeq	r0, r0, #0
    9480:	0e000c23 	cdpeq	12, 0, cr0, cr0, cr3, {1}
    9484:	00002de3 	andeq	r2, r0, r3, ror #27
    9488:	ee020803 	cdp	8, 0, cr0, cr2, cr3, {0}
    948c:	0f000000 	svceq	0x00000000
    9490:	002dcb01 	eoreq	ip, sp, r1, lsl #22
    9494:	012b0100 	teqeq	fp, r0, lsl #2
    9498:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
    949c:	08006208 	stmdaeq	r0, {r3, r9, sp, lr}
    94a0:	01007d02 	tsteq	r0, r2, lsl #26
    94a4:	00000167 	andeq	r0, r0, r7, ror #2
    94a8:	002df310 	eoreq	pc, sp, r0, lsl r3	; <UNPREDICTABLE>
    94ac:	792b0100 	stmdbvc	fp!, {r8}
    94b0:	01000000 	mrseq	r0, (UNDEF: 0)
    94b4:	010f0050 	qaddeq	r0, r0, pc	; <UNPREDICTABLE>
    94b8:	00000d3c 	andeq	r0, r0, ip, lsr sp
    94bc:	08014201 	stmdaeq	r1, {r0, r9, lr}
    94c0:	14080062 	strne	r0, [r8], #-98	; 0x62
    94c4:	02080062 	andeq	r0, r8, #98	; 0x62
    94c8:	8e01007d 	mcrhi	0, 0, r0, cr1, cr13, {3}
    94cc:	10000001 	andne	r0, r0, r1
    94d0:	00000d47 	andeq	r0, r0, r7, asr #26
    94d4:	00794201 	rsbseq	r4, r9, r1, lsl #4
    94d8:	50010000 	andpl	r0, r1, r0
    94dc:	46010f00 	strmi	r0, [r1], -r0, lsl #30
    94e0:	01000013 	tsteq	r0, r3, lsl r0
    94e4:	62140155 	andsvs	r0, r4, #1073741845	; 0x40000015
    94e8:	623c0800 	eorsvs	r0, ip, #0
    94ec:	7d020800 	stcvc	8, cr0, [r2, #-0]
    94f0:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
    94f4:	54110000 	ldrpl	r0, [r1], #-0
    94f8:	0100002d 	tsteq	r0, sp, lsr #32
    94fc:	00007955 	andeq	r7, r0, r5, asr r9
    9500:	004ebf00 	subeq	fp, lr, r0, lsl #30
    9504:	010f0000 	mrseq	r0, CPSR
    9508:	00001740 	andeq	r1, r0, r0, asr #14
    950c:	3c017001 	stccc	0, cr7, [r1], {1}
    9510:	54080062 	strpl	r0, [r8], #-98	; 0x62
    9514:	02080062 	andeq	r0, r8, #98	; 0x62
    9518:	e001007d 	and	r0, r1, sp, ror r0
    951c:	11000001 	tstne	r0, r1
    9520:	00001cfb 	strdeq	r1, [r0], -fp
    9524:	00e37001 	rsceq	r7, r3, r1
    9528:	4efa0000 	cdpmi	0, 15, cr0, cr10, cr0, {0}
    952c:	12000000 	andne	r0, r0, #0
    9530:	002d6401 	eoreq	r6, sp, r1, lsl #8
    9534:	01860100 	orreq	r0, r6, r0, lsl #2
    9538:	00000079 	andeq	r0, r0, r9, ror r0
    953c:	08006254 	stmdaeq	r0, {r2, r4, r6, r9, sp, lr}
    9540:	08006260 	stmdaeq	r0, {r5, r6, r9, sp, lr}
    9544:	01007d02 	tsteq	r0, r2, lsl #26
    9548:	2d770113 	ldfcse	f0, [r7, #-76]!	; 0xffffffb4
    954c:	96010000 	strls	r0, [r1], -r0
    9550:	0000c301 	andeq	ip, r0, r1, lsl #6
    9554:	00626000 	rsbeq	r6, r2, r0
    9558:	00627c08 	rsbeq	r7, r2, r8, lsl #24
    955c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    9560:	2d8d1101 	stfcss	f1, [sp, #4]
    9564:	96010000 	strls	r0, [r1], -r0
    9568:	00000084 	andeq	r0, r0, r4, lsl #1
    956c:	00004f34 	andeq	r4, r0, r4, lsr pc
    9570:	002b8c14 	eoreq	r8, fp, r4, lsl ip
    9574:	79980100 	ldmibvc	r8, {r8}
    9578:	55000000 	strpl	r0, [r0, #-0]
    957c:	1500004f 	strne	r0, [r0, #-79]	; 0x4f
    9580:	00706d74 	rsbseq	r6, r0, r4, ror sp
    9584:	00799801 	rsbseq	r9, r9, r1, lsl #16
    9588:	4f740000 	svcmi	0x00740000
    958c:	4f140000 	svcmi	0x00140000
    9590:	0100001e 	tsteq	r0, lr, lsl r0
    9594:	0000c399 	muleq	r0, r9, r3
    9598:	004f8e00 	subeq	r8, pc, r0, lsl #28
    959c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    95a0:	0200000b 	andeq	r0, r0, #11
    95a4:	00170a00 	andseq	r0, r7, r0, lsl #20
    95a8:	11010400 	tstne	r1, r0, lsl #8
    95ac:	01000002 	tsteq	r0, r2
    95b0:	00002e64 	andeq	r2, r0, r4, ror #28
    95b4:	0000018b 	andeq	r0, r0, fp, lsl #3
    95b8:	0800627c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, lr}
    95bc:	080065c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp, lr}
    95c0:	000017e4 	andeq	r1, r0, r4, ror #15
    95c4:	d3070402 	movwle	r0, #29698	; 0x7402
    95c8:	02000000 	andeq	r0, r0, #0
    95cc:	015b0601 	cmpeq	fp, r1, lsl #12
    95d0:	01020000 	mrseq	r0, (UNDEF: 2)
    95d4:	00015908 	andeq	r5, r1, r8, lsl #18
    95d8:	05020200 	streq	r0, [r2, #-512]	; 0x200
    95dc:	00000025 	andeq	r0, r0, r5, lsr #32
    95e0:	c4070202 	strgt	r0, [r7], #-514	; 0x202
    95e4:	03000001 	movweq	r0, #1
    95e8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    95ec:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
    95f0:	0000bb05 	andeq	fp, r0, r5, lsl #22
    95f4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    95f8:	000000c9 	andeq	r0, r0, r9, asr #1
    95fc:	c0050402 	andgt	r0, r5, r2, lsl #8
    9600:	02000000 	andeq	r0, r0, #0
    9604:	002f0704 	eoreq	r0, pc, r4, lsl #14
    9608:	04020000 	streq	r0, [r2], #-0
    960c:	0000ce07 	andeq	ip, r0, r7, lsl #28
    9610:	08010200 	stmdaeq	r1, {r9}
    9614:	00000162 	andeq	r0, r0, r2, ror #2
    9618:	32337504 	eorscc	r7, r3, #16777216	; 0x1000000
    961c:	6b270200 	blvs	9c9e24 <__Stack_Size+0x9c9a24>
    9620:	04000000 	streq	r0, [r0], #-0
    9624:	00363175 	eorseq	r3, r6, r5, ror r1
    9628:	00412802 	subeq	r2, r1, r2, lsl #16
    962c:	75040000 	strvc	r0, [r4, #-0]
    9630:	29020038 	stmdbcs	r2, {r3, r4, r5}
    9634:	00000033 	andeq	r0, r0, r3, lsr r0
    9638:	000d7d05 	andeq	r7, sp, r5, lsl #26
    963c:	a42f0200 	strtge	r0, [pc], #-512	; 9644 <__Stack_Size+0x9244>
    9640:	06000000 	streq	r0, [r0], -r0
    9644:	0000006b 	andeq	r0, r0, fp, rrx
    9648:	000bbc05 	andeq	fp, fp, r5, lsl #24
    964c:	b4300200 	ldrtlt	r0, [r0], #-512	; 0x200
    9650:	06000000 	streq	r0, [r0], -r0
    9654:	00000041 	andeq	r0, r0, r1, asr #32
    9658:	39020107 	stmdbcc	r2, {r0, r1, r2, r8}
    965c:	000000ce 	andeq	r0, r0, lr, asr #1
    9660:	000b5908 	andeq	r5, fp, r8, lsl #18
    9664:	53090000 	movwpl	r0, #36864	; 0x9000
    9668:	01005445 	tsteq	r0, r5, asr #8
    966c:	127e0500 	rsbsne	r0, lr, #0
    9670:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    9674:	000000b9 	strheq	r0, [r0], -r9
    9678:	002a9905 	eoreq	r9, sl, r5, lsl #18
    967c:	b9390200 	ldmdblt	r9!, {r9}
    9680:	07000000 	streq	r0, [r0, -r0]
    9684:	f93b0201 			; <UNDEFINED> instruction: 0xf93b0201
    9688:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    968c:	00001517 	andeq	r1, r0, r7, lsl r5
    9690:	19350800 	ldmdbne	r5!, {fp}
    9694:	00010000 	andeq	r0, r1, r0
    9698:	0015ee05 	andseq	lr, r5, r5, lsl #28
    969c:	e43b0200 	ldrt	r0, [fp], #-512	; 0x200
    96a0:	0a000000 	beq	96a8 <__Stack_Size+0x92a8>
    96a4:	0238031c 	eorseq	r0, r8, #1879048192	; 0x70000000
    96a8:	000001de 	ldrdeq	r0, [r0], -lr
    96ac:	0052530b 	subseq	r5, r2, fp, lsl #6
    96b0:	a9023a03 	stmdbge	r2, {r0, r1, r9, fp, ip, sp}
    96b4:	02000000 	andeq	r0, r0, #0
    96b8:	8d0c0023 	stchi	0, cr0, [ip, #-140]	; 0xffffff74
    96bc:	0300000c 	movweq	r0, #12
    96c0:	0084023b 	addeq	r0, r4, fp, lsr r2
    96c4:	23020000 	movwcs	r0, #8192	; 0x2000
    96c8:	52440b02 	subpl	r0, r4, #2048	; 0x800
    96cc:	023c0300 	eorseq	r0, ip, #0
    96d0:	000000a9 	andeq	r0, r0, r9, lsr #1
    96d4:	0c042302 	stceq	3, cr2, [r4], {2}
    96d8:	00000c97 	muleq	r0, r7, ip
    96dc:	84023d03 	strhi	r3, [r2], #-3331	; 0xd03
    96e0:	02000000 	andeq	r0, r0, #0
    96e4:	420b0623 	andmi	r0, fp, #36700160	; 0x2300000
    96e8:	03005252 	movweq	r5, #594	; 0x252
    96ec:	00a9023e 	adceq	r0, r9, lr, lsr r2
    96f0:	23020000 	movwcs	r0, #8192	; 0x2000
    96f4:	0d660c08 	stcleq	12, cr0, [r6, #-32]!	; 0xffffffe0
    96f8:	3f030000 	svccc	0x00030000
    96fc:	00008402 	andeq	r8, r0, r2, lsl #8
    9700:	0a230200 	beq	8c9f08 <__Stack_Size+0x8c9b08>
    9704:	3152430b 	cmpcc	r2, fp, lsl #6
    9708:	02400300 	subeq	r0, r0, #0
    970c:	000000a9 	andeq	r0, r0, r9, lsr #1
    9710:	0c0c2302 	stceq	3, cr2, [ip], {2}
    9714:	00000ca1 	andeq	r0, r0, r1, lsr #25
    9718:	84024103 	strhi	r4, [r2], #-259	; 0x103
    971c:	02000000 	andeq	r0, r0, #0
    9720:	430b0e23 	movwmi	r0, #48675	; 0xbe23
    9724:	03003252 	movweq	r3, #594	; 0x252
    9728:	00a90242 	adceq	r0, r9, r2, asr #4
    972c:	23020000 	movwcs	r0, #8192	; 0x2000
    9730:	0cab0c10 	stceq	12, cr0, [fp], #64	; 0x40
    9734:	43030000 	movwmi	r0, #12288	; 0x3000
    9738:	00008402 	andeq	r8, r0, r2, lsl #8
    973c:	12230200 	eorne	r0, r3, #0
    9740:	3352430b 	cmpcc	r2, #738197504	; 0x2c000000
    9744:	02440300 	subeq	r0, r4, #0
    9748:	000000a9 	andeq	r0, r0, r9, lsr #1
    974c:	0c142302 	ldceq	3, cr2, [r4], {2}
    9750:	00000cb5 			; <UNDEFINED> instruction: 0x00000cb5
    9754:	84024503 	strhi	r4, [r2], #-1283	; 0x503
    9758:	02000000 	andeq	r0, r0, #0
    975c:	720c1623 	andvc	r1, ip, #36700160	; 0x2300000
    9760:	03000012 	movweq	r0, #18
    9764:	00a90246 	adceq	r0, r9, r6, asr #4
    9768:	23020000 	movwcs	r0, #8192	; 0x2000
    976c:	0cbf0c18 	ldceq	12, cr0, [pc], #96	; 97d4 <__Stack_Size+0x93d4>
    9770:	47030000 	strmi	r0, [r3, -r0]
    9774:	00008402 	andeq	r8, r0, r2, lsl #8
    9778:	1a230200 	bne	8c9f80 <__Stack_Size+0x8c9b80>
    977c:	0e5a0d00 	cdpeq	13, 5, cr0, cr10, cr0, {0}
    9780:	48030000 	stmdami	r3, {}	; <UNPREDICTABLE>
    9784:	00010402 	andeq	r0, r1, r2, lsl #8
    9788:	04100e00 	ldreq	r0, [r0], #-3584	; 0xe00
    978c:	0002471a 	andeq	r4, r2, sl, lsl r7
    9790:	100a0f00 	andne	r0, sl, r0, lsl #30
    9794:	1c040000 	stcne	0, cr0, [r4], {-0}
    9798:	00000079 	andeq	r0, r0, r9, ror r0
    979c:	0f002302 	svceq	0x00002302
    97a0:	00000d13 	andeq	r0, r0, r3, lsl sp
    97a4:	00841d04 	addeq	r1, r4, r4, lsl #26
    97a8:	23020000 	movwcs	r0, #8192	; 0x2000
    97ac:	11950f04 	orrsne	r0, r5, r4, lsl #30
    97b0:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    97b4:	00000084 	andeq	r0, r0, r4, lsl #1
    97b8:	0f062302 	svceq	0x00062302
    97bc:	00000d70 	andeq	r0, r0, r0, ror sp
    97c0:	00841f04 	addeq	r1, r4, r4, lsl #30
    97c4:	23020000 	movwcs	r0, #8192	; 0x2000
    97c8:	10240f08 	eorne	r0, r4, r8, lsl #30
    97cc:	20040000 	andcs	r0, r4, r0
    97d0:	00000084 	andeq	r0, r0, r4, lsl #1
    97d4:	0f0a2302 	svceq	0x000a2302
    97d8:	00001a8c 	andeq	r1, r0, ip, lsl #21
    97dc:	00842104 	addeq	r2, r4, r4, lsl #2
    97e0:	23020000 	movwcs	r0, #8192	; 0x2000
    97e4:	8305000c 	movwhi	r0, #20492	; 0x500c
    97e8:	04000017 	streq	r0, [r0], #-23
    97ec:	0001ea22 	andeq	lr, r1, r2, lsr #20
    97f0:	04080e00 	streq	r0, [r8], #-3584	; 0xe00
    97f4:	00029325 	andeq	r9, r2, r5, lsr #6
    97f8:	30020f00 	andcc	r0, r2, r0, lsl #30
    97fc:	27040000 	strcs	r0, [r4, -r0]
    9800:	00000084 	andeq	r0, r0, r4, lsl #1
    9804:	0f002302 	svceq	0x00002302
    9808:	0000309e 	muleq	r0, lr, r0
    980c:	00842804 	addeq	r2, r4, r4, lsl #16
    9810:	23020000 	movwcs	r0, #8192	; 0x2000
    9814:	2e140f02 	cdpcs	15, 1, cr0, cr4, cr2, {0}
    9818:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    981c:	00000084 	andeq	r0, r0, r4, lsl #1
    9820:	0f042302 	svceq	0x00042302
    9824:	000030a9 	andeq	r3, r0, r9, lsr #1
    9828:	00842a04 	addeq	r2, r4, r4, lsl #20
    982c:	23020000 	movwcs	r0, #8192	; 0x2000
    9830:	4d050006 	stcmi	0, cr0, [r5, #-24]	; 0xffffffe8
    9834:	0400002e 	streq	r0, [r0], #-46	; 0x2e
    9838:	0002522b 	andeq	r5, r2, fp, lsr #4
    983c:	05140e00 	ldreq	r0, [r4, #-3584]	; 0xe00
    9840:	0002ed19 	andeq	lr, r2, r9, lsl sp
    9844:	2c1c0f00 	ldccs	15, cr0, [ip], {-0}
    9848:	1b050000 	blne	149850 <__Stack_Size+0x149450>
    984c:	00000079 	andeq	r0, r0, r9, ror r0
    9850:	0f002302 	svceq	0x00002302
    9854:	00002af8 	strdeq	r2, [r0], -r8
    9858:	00791c05 	rsbseq	r1, r9, r5, lsl #24
    985c:	23020000 	movwcs	r0, #8192	; 0x2000
    9860:	2c740f04 	ldclcs	15, cr0, [r4], #-16
    9864:	1d050000 	stcne	0, cr0, [r5, #-0]
    9868:	00000079 	andeq	r0, r0, r9, ror r0
    986c:	0f082302 	svceq	0x00082302
    9870:	00002c38 	andeq	r2, r0, r8, lsr ip
    9874:	00791e05 	rsbseq	r1, r9, r5, lsl #28
    9878:	23020000 	movwcs	r0, #8192	; 0x2000
    987c:	2bc00f0c 	blcs	ff00d4b4 <SCS_BASE+0x1efff4b4>
    9880:	1f050000 	svcne	0x00050000
    9884:	00000079 	andeq	r0, r0, r9, ror r0
    9888:	00102302 	andseq	r2, r0, r2, lsl #6
    988c:	002ac005 	eoreq	ip, sl, r5
    9890:	9e200500 	cfsh64ls	mvdx0, mvdx0, #0
    9894:	10000002 	andne	r0, r0, r2
    9898:	001a2901 	andseq	r2, sl, r1, lsl #18
    989c:	015a0100 	cmpeq	sl, r0, lsl #2
    98a0:	0800627c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, lr}
    98a4:	08006310 	stmdaeq	r0, {r4, r8, r9, sp, lr}
    98a8:	00004fb7 			; <UNDEFINED> instruction: 0x00004fb7
    98ac:	0003cf01 	andeq	ip, r3, r1, lsl #30
    98b0:	2fb41100 	svccs	0x00b41100
    98b4:	5a010000 	bpl	498bc <__Stack_Size+0x494bc>
    98b8:	000003cf 	andeq	r0, r0, pc, asr #7
    98bc:	00004fd7 	ldrdeq	r4, [r0], -r7
    98c0:	0062a012 	rsbeq	sl, r2, r2, lsl r0
    98c4:	000abc08 	andeq	fp, sl, r8, lsl #24
    98c8:	00033b00 	andeq	r3, r3, r0, lsl #22
    98cc:	51011300 	mrspl	r1, SP_irq
    98d0:	01133101 	tsteq	r3, r1, lsl #2
    98d4:	3e400350 	mcrcc	3, 2, r0, cr0, cr0, {2}
    98d8:	be120024 	cdplt	0, 1, cr0, cr2, cr4, {1}
    98dc:	d6080062 	strle	r0, [r8], -r2, rrx
    98e0:	5500000a 	strpl	r0, [r0, #-10]
    98e4:	13000003 	movwne	r0, #3
    98e8:	31015101 	tstcc	r1, r1, lsl #2
    98ec:	03500113 	cmpeq	r0, #-1073741820	; 0xc0000004
    98f0:	0040000a 	subeq	r0, r0, sl
    98f4:	0062cc14 	rsbeq	ip, r2, r4, lsl ip
    98f8:	0ad60108 	beq	ff589d20 <SCS_BASE+0x1f57bd20>
    98fc:	03700000 	cmneq	r0, #0
    9900:	01130000 	tsteq	r3, r0
    9904:	13300151 	teqne	r0, #1073741844	; 0x40000014
    9908:	0a035001 	beq	dd914 <__Stack_Size+0xdd514>
    990c:	12004000 	andne	r4, r0, #0
    9910:	080062d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sp, lr}
    9914:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
    9918:	0000038a 	andeq	r0, r0, sl, lsl #7
    991c:	01510113 	cmpeq	r1, r3, lsl r1
    9920:	50011331 	andpl	r1, r1, r1, lsr r3
    9924:	243d4003 	ldrtcs	r4, [sp], #-3
    9928:	62e61200 	rscvs	r1, r6, #0
    992c:	0abc0800 	beq	fef0b934 <SCS_BASE+0x1eefd934>
    9930:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
    9934:	01130000 	tsteq	r3, r0
    9938:	13310151 	teqne	r1, #1073741844	; 0x40000014
    993c:	40035001 	andmi	r5, r3, r1
    9940:	1200243f 	andne	r2, r0, #1056964608	; 0x3f000000
    9944:	080062f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sp, lr}
    9948:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
    994c:	000003be 			; <UNDEFINED> instruction: 0x000003be
    9950:	01510113 	cmpeq	r1, r3, lsl r1
    9954:	50011331 	andpl	r1, r1, r1, lsr r3
    9958:	24404003 	strbcs	r4, [r0], #-3
    995c:	63041500 	movwvs	r1, #17664	; 0x4500
    9960:	bc010800 	stclt	8, cr0, [r1], {-0}
    9964:	1300000a 	movwne	r0, #10
    9968:	30015101 	andcc	r5, r1, r1, lsl #2
    996c:	04160000 	ldreq	r0, [r6], #-0
    9970:	000001de 	ldrdeq	r0, [r0], -lr
    9974:	0ebd0110 	mrceq	1, 5, r0, cr13, cr0, {0}
    9978:	8c010000 	stchi	0, cr0, [r1], {-0}
    997c:	00631001 	rsbeq	r1, r3, r1
    9980:	00639808 	rsbeq	r9, r3, r8, lsl #16
    9984:	00506708 	subseq	r6, r0, r8, lsl #14
    9988:	04770100 	ldrbteq	r0, [r7], #-256	; 0x100
    998c:	b4110000 	ldrlt	r0, [r1], #-0
    9990:	0100002f 	tsteq	r0, pc, lsr #32
    9994:	0003cf8c 	andeq	ip, r3, ip, lsl #31
    9998:	00509300 	subseq	r9, r0, r0, lsl #6
    999c:	2fbb1100 	svccs	0x00bb1100
    99a0:	8c010000 	stchi	0, cr0, [r1], {-0}
    99a4:	00000477 	andeq	r0, r0, r7, ror r4
    99a8:	000050b1 	strheq	r5, [r0], -r1
    99ac:	001d6417 	andseq	r6, sp, r7, lsl r4
    99b0:	798e0100 	stmibvc	lr, {r8}
    99b4:	cf000000 	svcgt	0x00000000
    99b8:	17000050 	smlsdne	r0, r0, r0, r0
    99bc:	00002ece 	andeq	r2, r0, lr, asr #29
    99c0:	00798e01 	rsbseq	r8, r9, r1, lsl #28
    99c4:	517b0000 	cmnpl	fp, r0
    99c8:	05170000 	ldreq	r0, [r7, #-0]
    99cc:	0100002e 	tsteq	r0, lr, lsr #32
    99d0:	0000798f 	andeq	r7, r0, pc, lsl #19
    99d4:	0051ca00 	subseq	ip, r1, r0, lsl #20
    99d8:	30b71700 	adcscc	r1, r7, r0, lsl #14
    99dc:	90010000 	andls	r0, r1, r0
    99e0:	00000079 	andeq	r0, r0, r9, ror r0
    99e4:	00005227 	andeq	r5, r0, r7, lsr #4
    99e8:	002f6417 	eoreq	r6, pc, r7, lsl r4	; <UNPREDICTABLE>
    99ec:	79910100 	ldmibvc	r1, {r8}
    99f0:	93000000 	movwls	r0, #0
    99f4:	18000050 	stmdane	r0, {r4, r6}
    99f8:	00002f6f 	andeq	r2, r0, pc, ror #30
    99fc:	02ed9201 	rsceq	r9, sp, #268435456	; 0x10000000
    9a00:	91020000 	mrsls	r0, (UNDEF: 2)
    9a04:	635a195c 	cmpvs	sl, #1507328	; 0x170000
    9a08:	0af00800 	beq	ffc0ba10 <SCS_BASE+0x1fbfda10>
    9a0c:	01130000 	tsteq	r3, r0
    9a10:	5c910250 	lfmpl	f0, 4, [r1], {80}	; 0x50
    9a14:	04160000 	ldreq	r0, [r6], #-0
    9a18:	00000247 	andeq	r0, r0, r7, asr #4
    9a1c:	08e0011a 	stmiaeq	r0!, {r1, r3, r4, r8}^
    9a20:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    9a24:	00639801 	rsbeq	r9, r3, r1, lsl #16
    9a28:	0063ae08 	rsbeq	sl, r3, r8, lsl #28
    9a2c:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    9a30:	0004a401 	andeq	sl, r4, r1, lsl #8
    9a34:	2fbb1b00 	svccs	0x00bb1b00
    9a38:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    9a3c:	00000477 	andeq	r0, r0, r7, ror r4
    9a40:	10005001 	andne	r5, r0, r1
    9a44:	00306b01 	eorseq	r6, r0, r1, lsl #22
    9a48:	01ff0100 	mvnseq	r0, r0, lsl #2
    9a4c:	080063ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sp, lr}
    9a50:	080063ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sp, lr}
    9a54:	00005323 	andeq	r5, r0, r3, lsr #6
    9a58:	0004eb01 	andeq	lr, r4, r1, lsl #22
    9a5c:	2fb41b00 	svccs	0x00b41b00
    9a60:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    9a64:	000003cf 	andeq	r0, r0, pc, asr #7
    9a68:	2b115001 	blcs	45da74 <__Stack_Size+0x45d674>
    9a6c:	0100002f 	tsteq	r0, pc, lsr #32
    9a70:	0004ebff 	strdeq	lr, [r4], -pc	; <UNPREDICTABLE>
    9a74:	00534300 	subseq	r4, r3, r0, lsl #6
    9a78:	1d641c00 	stclne	12, cr1, [r4, #-0]
    9a7c:	01010000 	mrseq	r0, (UNDEF: 1)
    9a80:	00007901 	andeq	r7, r0, r1, lsl #18
    9a84:	00536400 	subseq	r6, r3, r0, lsl #8
    9a88:	04160000 	ldreq	r0, [r6], #-0
    9a8c:	00000293 	muleq	r0, r3, r2
    9a90:	2f4e011d 	svccs	0x004e011d
    9a94:	23010000 	movwcs	r0, #4096	; 0x1000
    9a98:	63ce0101 	bicvs	r0, lr, #1073741824	; 0x40000000
    9a9c:	63da0800 	bicsvs	r0, sl, #0
    9aa0:	7d020800 	stcvc	8, cr0, [r2, #-0]
    9aa4:	051a0100 	ldreq	r0, [sl, #-256]	; 0x100
    9aa8:	2b1e0000 	blcs	789ab0 <__Stack_Size+0x7896b0>
    9aac:	0100002f 	tsteq	r0, pc, lsr #32
    9ab0:	04eb0123 	strbteq	r0, [fp], #291	; 0x123
    9ab4:	50010000 	andpl	r0, r1, r0
    9ab8:	06011d00 	streq	r1, [r1], -r0, lsl #26
    9abc:	01000017 	tsteq	r0, r7, lsl r0
    9ac0:	da010136 	ble	49fa0 <__Stack_Size+0x49ba0>
    9ac4:	f2080063 	vhadd.s8	q0, q4, <illegal reg q9.5>
    9ac8:	02080063 	andeq	r0, r8, #99	; 0x63
    9acc:	5301007d 	movwpl	r0, #4221	; 0x107d
    9ad0:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    9ad4:	00002fb4 			; <UNDEFINED> instruction: 0x00002fb4
    9ad8:	cf013601 	svcgt	0x00013601
    9adc:	01000003 	tsteq	r0, r3
    9ae0:	1cfb1f50 	ldclne	15, cr1, [fp], #320	; 0x140
    9ae4:	36010000 	strcc	r0, [r1], -r0
    9ae8:	0000f901 	andeq	pc, r0, r1, lsl #18
    9aec:	00539e00 	subseq	r9, r3, r0, lsl #28
    9af0:	01200000 	teqeq	r0, r0
    9af4:	00000e3a 	andeq	r0, r0, sl, lsr lr
    9af8:	01015d01 	tsteq	r1, r1, lsl #26
    9afc:	080063f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sp, lr}
    9b00:	08006426 	stmdaeq	r0, {r1, r2, r5, sl, sp, lr}
    9b04:	000053d8 	ldrdeq	r5, [r0], -r8
    9b08:	0005dd01 	andeq	sp, r5, r1, lsl #26
    9b0c:	2fb41f00 	svccs	0x00b41f00
    9b10:	5d010000 	stcpl	0, cr0, [r1, #-0]
    9b14:	0003cf01 	andeq	ip, r3, r1, lsl #30
    9b18:	0053f800 	subseq	pc, r3, r0, lsl #16
    9b1c:	2eb61f00 	cdpcs	15, 11, cr1, cr6, cr0, {0}
    9b20:	5d010000 	stcpl	0, cr0, [r1, #-0]
    9b24:	00008401 	andeq	r8, r0, r1, lsl #8
    9b28:	00544900 	subseq	r4, r4, r0, lsl #18
    9b2c:	1cfb1f00 	ldclne	15, cr1, [fp]
    9b30:	5d010000 	stcpl	0, cr0, [r1, #-0]
    9b34:	0000f901 	andeq	pc, r0, r1, lsl #18
    9b38:	00546a00 	subseq	r6, r4, r0, lsl #20
    9b3c:	30c91c00 	sbccc	r1, r9, r0, lsl #24
    9b40:	5f010000 	svcpl	0x00010000
    9b44:	00007901 	andeq	r7, r0, r1, lsl #18
    9b48:	0054a400 	subseq	sl, r4, r0, lsl #8
    9b4c:	2fdb1c00 	svccs	0x00db1c00
    9b50:	5f010000 	svcpl	0x00010000
    9b54:	00007901 	andeq	r7, r0, r1, lsl #18
    9b58:	0054c300 	subseq	ip, r4, r0, lsl #6
    9b5c:	1f4d1c00 	svcne	0x004d1c00
    9b60:	5f010000 	svcpl	0x00010000
    9b64:	00007901 	andeq	r7, r0, r1, lsl #18
    9b68:	0054ea00 	subseq	lr, r4, r0, lsl #20
    9b6c:	2f642100 	svccs	0x00642100
    9b70:	60010000 	andvs	r0, r1, r0
    9b74:	00007901 	andeq	r7, r0, r1, lsl #18
    9b78:	00500100 	subseq	r0, r0, r0, lsl #2
    9b7c:	2ea9011d 	mcrcs	1, 5, r0, cr9, cr13, {0}
    9b80:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    9b84:	64260101 	strtvs	r0, [r6], #-257	; 0x101
    9b88:	64380800 	ldrtvs	r0, [r8], #-2048	; 0x800
    9b8c:	7d020800 	stcvc	8, cr0, [r2, #-0]
    9b90:	06240100 	strteq	r0, [r4], -r0, lsl #2
    9b94:	b41e0000 	ldrlt	r0, [lr], #-0
    9b98:	0100002f 	tsteq	r0, pc, lsr #32
    9b9c:	03cf0198 	biceq	r0, pc, #38	; 0x26
    9ba0:	50010000 	andpl	r0, r1, r0
    9ba4:	002f411f 	eoreq	r4, pc, pc, lsl r1	; <UNPREDICTABLE>
    9ba8:	01980100 	orrseq	r0, r8, r0, lsl #2
    9bac:	00000084 	andeq	r0, r0, r4, lsl #1
    9bb0:	00005509 	andeq	r5, r0, r9, lsl #10
    9bb4:	001cfb1e 	andseq	pc, ip, lr, lsl fp	; <UNPREDICTABLE>
    9bb8:	01980100 	orrseq	r0, r8, r0, lsl #2
    9bbc:	000000f9 	strdeq	r0, [r0], -r9
    9bc0:	1d005201 	sfmne	f5, 4, [r0, #-4]
    9bc4:	002f8001 	eoreq	r8, pc, r1
    9bc8:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
    9bcc:	00643801 	rsbeq	r3, r4, r1, lsl #16
    9bd0:	00644e08 	rsbeq	r4, r4, r8, lsl #28
    9bd4:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    9bd8:	00065d01 	andeq	r5, r6, r1, lsl #26
    9bdc:	2fb41e00 	svccs	0x00b41e00
    9be0:	b7010000 	strlt	r0, [r1, -r0]
    9be4:	0003cf01 	andeq	ip, r3, r1, lsl #30
    9be8:	1f500100 	svcne	0x00500100
    9bec:	00002fcc 	andeq	r2, r0, ip, asr #31
    9bf0:	8f01b701 	svchi	0x0001b701
    9bf4:	43000000 	movwmi	r0, #0
    9bf8:	00000055 	andeq	r0, r0, r5, asr r0
    9bfc:	307b011d 	rsbscc	r0, fp, sp, lsl r1
    9c00:	d0010000 	andle	r0, r1, r0
    9c04:	644e0101 	strbvs	r0, [lr], #-257	; 0x101
    9c08:	64640800 	strbtvs	r0, [r4], #-2048	; 0x800
    9c0c:	7d020800 	stcvc	8, cr0, [r2, #-0]
    9c10:	06960100 	ldreq	r0, [r6], r0, lsl #2
    9c14:	b41e0000 	ldrlt	r0, [lr], #-0
    9c18:	0100002f 	tsteq	r0, pc, lsr #32
    9c1c:	03cf01d0 	biceq	r0, pc, #52	; 0x34
    9c20:	50010000 	andpl	r0, r1, r0
    9c24:	002e9c1f 	eoreq	r9, lr, pc, lsl ip
    9c28:	01d00100 	bicseq	r0, r0, r0, lsl #2
    9c2c:	00000084 	andeq	r0, r0, r4, lsl #1
    9c30:	00005564 	andeq	r5, r0, r4, ror #10
    9c34:	0e011d00 	cdpeq	13, 0, cr1, cr1, cr0, {0}
    9c38:	01000030 	tsteq	r0, r0, lsr r0
    9c3c:	640101e5 	strvs	r0, [r1], #-485	; 0x1e5
    9c40:	7c080064 	stcvc	0, cr0, [r8], {100}	; 0x64
    9c44:	02080064 	andeq	r0, r8, #100	; 0x64
    9c48:	cf01007d 	svcgt	0x0001007d
    9c4c:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    9c50:	00002fb4 			; <UNDEFINED> instruction: 0x00002fb4
    9c54:	cf01e501 	svcgt	0x0001e501
    9c58:	01000003 	tsteq	r0, r3
    9c5c:	1cfb1f50 	ldclne	15, cr1, [fp], #320	; 0x140
    9c60:	e5010000 	str	r0, [r1, #-0]
    9c64:	0000f901 	andeq	pc, r0, r1, lsl #18
    9c68:	00558500 	subseq	r8, r5, r0, lsl #10
    9c6c:	011d0000 	tsteq	sp, r0
    9c70:	00002eff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    9c74:	01020501 	tsteq	r2, r1, lsl #10
    9c78:	0800647c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp, lr}
    9c7c:	08006492 	stmdaeq	r0, {r1, r4, r7, sl, sp, lr}
    9c80:	01007d02 	tsteq	r0, r2, lsl #26
    9c84:	00000708 	andeq	r0, r0, r8, lsl #14
    9c88:	002fb41e 	eoreq	fp, pc, lr, lsl r4	; <UNPREDICTABLE>
    9c8c:	02050100 	andeq	r0, r5, #0
    9c90:	000003cf 	andeq	r0, r0, pc, asr #7
    9c94:	321f5001 	andscc	r5, pc, #1
    9c98:	0100002e 	tsteq	r0, lr, lsr #32
    9c9c:	00840205 	addeq	r0, r4, r5, lsl #4
    9ca0:	55bf0000 	ldrpl	r0, [pc, #0]!	; 9ca8 <__Stack_Size+0x98a8>
    9ca4:	1d000000 	stcne	0, cr0, [r0, #-0]
    9ca8:	00303401 	eorseq	r3, r0, r1, lsl #8
    9cac:	021a0100 	andseq	r0, sl, #0
    9cb0:	00649201 	rsbeq	r9, r4, r1, lsl #4
    9cb4:	0064aa08 	rsbeq	sl, r4, r8, lsl #20
    9cb8:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    9cbc:	00074101 	andeq	r4, r7, r1, lsl #2
    9cc0:	2fb41e00 	svccs	0x00b41e00
    9cc4:	1a010000 	bne	49ccc <__Stack_Size+0x498cc>
    9cc8:	0003cf02 	andeq	ip, r3, r2, lsl #30
    9ccc:	1f500100 	svcne	0x00500100
    9cd0:	00001cfb 	strdeq	r1, [r0], -fp
    9cd4:	f9021a01 			; <UNDEFINED> instruction: 0xf9021a01
    9cd8:	e0000000 	and	r0, r0, r0
    9cdc:	00000055 	andeq	r0, r0, r5, asr r0
    9ce0:	0e1f011d 	mrceq	1, 0, r0, cr15, cr13, {0}
    9ce4:	36010000 	strcc	r0, [r1], -r0
    9ce8:	64aa0102 	strtvs	r0, [sl], #258	; 0x102
    9cec:	64b20800 	ldrtvs	r0, [r2], #2048	; 0x800
    9cf0:	7d020800 	stcvc	8, cr0, [r2, #-0]
    9cf4:	077a0100 	ldrbeq	r0, [sl, -r0, lsl #2]!
    9cf8:	b41e0000 	ldrlt	r0, [lr], #-0
    9cfc:	0100002f 	tsteq	r0, pc, lsr #32
    9d00:	03cf0236 	biceq	r0, pc, #1610612739	; 0x60000003
    9d04:	50010000 	andpl	r0, r1, r0
    9d08:	0021fc1f 	eoreq	pc, r1, pc, lsl ip	; <UNPREDICTABLE>
    9d0c:	02360100 	eorseq	r0, r6, #0
    9d10:	00000084 	andeq	r0, r0, r4, lsl #1
    9d14:	0000561a 	andeq	r5, r0, sl, lsl r6
    9d18:	2d012200 	sfmcs	f2, 4, [r1, #-0]
    9d1c:	01000013 	tsteq	r0, r3, lsl r0
    9d20:	84010249 	strhi	r0, [r1], #-585	; 0x249
    9d24:	b2000000 	andlt	r0, r0, #0
    9d28:	ba080064 	blt	209ec0 <__Stack_Size+0x209ac0>
    9d2c:	02080064 	andeq	r0, r8, #100	; 0x64
    9d30:	a901007d 	stmdbge	r1, {r0, r2, r3, r4, r5, r6}
    9d34:	1f000007 	svcne	0x00000007
    9d38:	00002fb4 			; <UNDEFINED> instruction: 0x00002fb4
    9d3c:	cf024901 	svcgt	0x00024901
    9d40:	3b000003 	blcc	9d54 <__Stack_Size+0x9954>
    9d44:	00000056 	andeq	r0, r0, r6, asr r0
    9d48:	2fa4011d 	svccs	0x00a4011d
    9d4c:	5b010000 	blpl	49d54 <__Stack_Size+0x49954>
    9d50:	64ba0102 	ldrtvs	r0, [sl], #258	; 0x102
    9d54:	64c60800 	strbvs	r0, [r6], #2048	; 0x800
    9d58:	7d020800 	stcvc	8, cr0, [r2, #-0]
    9d5c:	07d20100 	ldrbeq	r0, [r2, r0, lsl #2]
    9d60:	b41e0000 	ldrlt	r0, [lr], #-0
    9d64:	0100002f 	tsteq	r0, pc, lsr #32
    9d68:	03cf025b 	biceq	r0, pc, #-1342177275	; 0xb0000005
    9d6c:	50010000 	andpl	r0, r1, r0
    9d70:	91011d00 	tstls	r1, r0, lsl #26
    9d74:	0100002f 	tsteq	r0, pc, lsr #32
    9d78:	c601026e 	strgt	r0, [r1], -lr, ror #4
    9d7c:	d8080064 	stmdale	r8, {r2, r5, r6}
    9d80:	02080064 	andeq	r0, r8, #100	; 0x64
    9d84:	0b01007d 	bleq	49f80 <__Stack_Size+0x49b80>
    9d88:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    9d8c:	00002fb4 			; <UNDEFINED> instruction: 0x00002fb4
    9d90:	cf026e01 	svcgt	0x00026e01
    9d94:	01000003 	tsteq	r0, r3
    9d98:	2eef1f50 	mcrcs	15, 7, r1, cr15, cr0, {2}
    9d9c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    9da0:	00008f02 	andeq	r8, r0, r2, lsl #30
    9da4:	00565c00 	subseq	r5, r6, r0, lsl #24
    9da8:	011d0000 	tsteq	sp, r0
    9dac:	00002e1f 	andeq	r2, r0, pc, lsl lr
    9db0:	01028401 	tsteq	r2, r1, lsl #8
    9db4:	080064d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, sp, lr}
    9db8:	080064ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, sp, lr}
    9dbc:	01007d02 	tsteq	r0, r2, lsl #26
    9dc0:	00000844 	andeq	r0, r0, r4, asr #16
    9dc4:	002fb41e 	eoreq	fp, pc, lr, lsl r4	; <UNPREDICTABLE>
    9dc8:	02840100 	addeq	r0, r4, #0
    9dcc:	000003cf 	andeq	r0, r0, pc, asr #7
    9dd0:	8e1f5001 	cdphi	0, 1, cr5, cr15, cr1, {0}
    9dd4:	01000030 	tsteq	r0, r0, lsr r0
    9dd8:	008f0284 	addeq	r0, pc, r4, lsl #5
    9ddc:	567d0000 	ldrbtpl	r0, [sp], -r0
    9de0:	1d000000 	stcne	0, cr0, [r0, #-0]
    9de4:	00305801 	eorseq	r5, r0, r1, lsl #16
    9de8:	029a0100 	addseq	r0, sl, #0
    9dec:	0064ea01 	rsbeq	lr, r4, r1, lsl #20
    9df0:	00650208 	rsbeq	r0, r5, r8, lsl #4
    9df4:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    9df8:	00087d01 	andeq	r7, r8, r1, lsl #26
    9dfc:	2fb41e00 	svccs	0x00b41e00
    9e00:	9a010000 	bls	49e08 <__Stack_Size+0x49a08>
    9e04:	0003cf02 	andeq	ip, r3, r2, lsl #30
    9e08:	1f500100 	svcne	0x00500100
    9e0c:	00001cfb 	strdeq	r1, [r0], -fp
    9e10:	f9029a01 			; <UNDEFINED> instruction: 0xf9029a01
    9e14:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    9e18:	00000056 	andeq	r0, r0, r6, asr r0
    9e1c:	3041011d 	subcc	r0, r1, sp, lsl r1
    9e20:	b7010000 	strlt	r0, [r1, -r0]
    9e24:	65020102 	strvs	r0, [r2, #-258]	; 0x102
    9e28:	651a0800 	ldrvs	r0, [sl, #-2048]	; 0x800
    9e2c:	7d020800 	stcvc	8, cr0, [r2, #-0]
    9e30:	08b60100 	ldmeq	r6!, {r8}
    9e34:	b41e0000 	ldrlt	r0, [lr], #-0
    9e38:	0100002f 	tsteq	r0, pc, lsr #32
    9e3c:	03cf02b7 	biceq	r0, pc, #1879048203	; 0x7000000b
    9e40:	50010000 	andpl	r0, r1, r0
    9e44:	001cfb1f 	andseq	pc, ip, pc, lsl fp	; <UNPREDICTABLE>
    9e48:	02b70100 	adcseq	r0, r7, #0
    9e4c:	000000f9 	strdeq	r0, [r0], -r9
    9e50:	000056d8 	ldrdeq	r5, [r0], -r8
    9e54:	88011d00 	stmdahi	r1, {r8, sl, fp, ip}
    9e58:	0100002e 	tsteq	r0, lr, lsr #32
    9e5c:	1a0102d4 	bne	4a9b4 <__Stack_Size+0x4a5b4>
    9e60:	32080065 	andcc	r0, r8, #101	; 0x65
    9e64:	02080065 	andeq	r0, r8, #101	; 0x65
    9e68:	ef01007d 	svc	0x0001007d
    9e6c:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    9e70:	00002fb4 			; <UNDEFINED> instruction: 0x00002fb4
    9e74:	cf02d401 	svcgt	0x0002d401
    9e78:	01000003 	tsteq	r0, r3
    9e7c:	1cfb1f50 	ldclne	15, cr1, [fp], #320	; 0x140
    9e80:	d4010000 	strle	r0, [r1], #-0
    9e84:	0000f902 	andeq	pc, r0, r2, lsl #18
    9e88:	00571200 	subseq	r1, r7, r0, lsl #4
    9e8c:	011d0000 	tsteq	sp, r0
    9e90:	00002ff1 	strdeq	r2, [r0], -r1
    9e94:	0102f301 	tsteq	r2, r1, lsl #6
    9e98:	08006532 	stmdaeq	r0, {r1, r4, r5, r8, sl, sp, lr}
    9e9c:	08006548 	stmdaeq	r0, {r3, r6, r8, sl, sp, lr}
    9ea0:	01007d02 	tsteq	r0, r2, lsl #26
    9ea4:	00000928 	andeq	r0, r0, r8, lsr #18
    9ea8:	002fb41e 	eoreq	fp, pc, lr, lsl r4	; <UNPREDICTABLE>
    9eac:	02f30100 	rscseq	r0, r3, #0
    9eb0:	000003cf 	andeq	r0, r0, pc, asr #7
    9eb4:	bf1f5001 	svclt	0x001f5001
    9eb8:	0100002e 	tsteq	r0, lr, lsr #32
    9ebc:	008402f3 	strdeq	r0, [r4], r3
    9ec0:	574c0000 	strbpl	r0, [ip, -r0]
    9ec4:	1d000000 	stcne	0, cr0, [r0, #-0]
    9ec8:	00302601 	eorseq	r2, r0, r1, lsl #12
    9ecc:	03080100 	movweq	r0, #33024	; 0x8100
    9ed0:	00654801 	rsbeq	r4, r5, r1, lsl #16
    9ed4:	00656008 	rsbeq	r6, r5, r8
    9ed8:	007d0208 	rsbseq	r0, sp, r8, lsl #4
    9edc:	00096101 	andeq	r6, r9, r1, lsl #2
    9ee0:	2fb41e00 	svccs	0x00b41e00
    9ee4:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    9ee8:	0003cf03 	andeq	ip, r3, r3, lsl #30
    9eec:	1f500100 	svcne	0x00500100
    9ef0:	00001cfb 	strdeq	r1, [r0], -fp
    9ef4:	f9030801 			; <UNDEFINED> instruction: 0xf9030801
    9ef8:	6d000000 	stcvs	0, cr0, [r0, #-0]
    9efc:	00000057 	andeq	r0, r0, r7, asr r0
    9f00:	13100122 	tstne	r0, #-2147483640	; 0x80000008
    9f04:	30010000 	andcc	r0, r1, r0
    9f08:	00ce0103 	sbceq	r0, lr, r3, lsl #2
    9f0c:	65600000 	strbvs	r0, [r0, #-0]!
    9f10:	656c0800 	strbvs	r0, [ip, #-2048]!	; 0x800
    9f14:	7d020800 	stcvc	8, cr0, [r2, #-0]
    9f18:	09ae0100 	stmibeq	lr!, {r8}
    9f1c:	b41f0000 	ldrlt	r0, [pc], #-0	; 9f24 <__Stack_Size+0x9b24>
    9f20:	0100002f 	tsteq	r0, pc, lsr #32
    9f24:	03cf0330 	biceq	r0, pc, #-1073741824	; 0xc0000000
    9f28:	57a70000 	strpl	r0, [r7, r0]!
    9f2c:	201e0000 	andscs	r0, lr, r0
    9f30:	0100002f 	tsteq	r0, pc, lsr #32
    9f34:	00840330 	addeq	r0, r4, r0, lsr r3
    9f38:	51010000 	mrspl	r0, (UNDEF: 1)
    9f3c:	001e4f1c 	andseq	r4, lr, ip, lsl pc
    9f40:	03320100 	teqeq	r2, #0
    9f44:	000000ce 	andeq	r0, r0, lr, asr #1
    9f48:	000057c8 	andeq	r5, r0, r8, asr #15
    9f4c:	e1011d00 	tst	r1, r0, lsl #26
    9f50:	0100002f 	tsteq	r0, pc, lsr #32
    9f54:	6c010364 	stcvs	3, cr0, [r1], {100}	; 0x64
    9f58:	74080065 	strvc	r0, [r8], #-101	; 0x65
    9f5c:	02080065 	andeq	r0, r8, #101	; 0x65
    9f60:	e701007d 	smlsdx	r1, sp, r0, r0
    9f64:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
    9f68:	00002fb4 			; <UNDEFINED> instruction: 0x00002fb4
    9f6c:	cf036401 	svcgt	0x00036401
    9f70:	01000003 	tsteq	r0, r3
    9f74:	2f201f50 	svccs	0x00201f50
    9f78:	64010000 	strvs	r0, [r1], #-0
    9f7c:	00008403 	andeq	r8, r0, r3, lsl #8
    9f80:	0057f000 	subseq	pc, r7, r0
    9f84:	01230000 	teqeq	r3, r0
    9f88:	00000a98 	muleq	r0, r8, sl
    9f8c:	01038501 	tsteq	r3, r1, lsl #10
    9f90:	000000d9 	ldrdeq	r0, [r0], -r9
    9f94:	08006574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    9f98:	080065b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp, lr}
    9f9c:	00005811 	andeq	r5, r0, r1, lsl r8
    9fa0:	000a6701 	andeq	r6, sl, r1, lsl #14
    9fa4:	2fb41f00 	svccs	0x00b41f00
    9fa8:	85010000 	strhi	r0, [r1, #-0]
    9fac:	0003cf03 	andeq	ip, r3, r3, lsl #30
    9fb0:	00583100 	subseq	r3, r8, r0, lsl #2
    9fb4:	2eb61f00 	cdpcs	15, 11, cr1, cr6, cr0, {0}
    9fb8:	85010000 	strhi	r0, [r1, #-0]
    9fbc:	00008403 	andeq	r8, r0, r3, lsl #8
    9fc0:	00585200 	subseq	r5, r8, r0, lsl #4
    9fc4:	2fda1c00 	svccs	0x00da1c00
    9fc8:	87010000 	strhi	r0, [r1, -r0]
    9fcc:	00007903 	andeq	r7, r0, r3, lsl #18
    9fd0:	00587e00 	subseq	r7, r8, r0, lsl #28
    9fd4:	1f4d1c00 	svcne	0x004d1c00
    9fd8:	87010000 	strhi	r0, [r1, -r0]
    9fdc:	00007903 	andeq	r7, r0, r3, lsl #18
    9fe0:	0058df00 	subseq	sp, r8, r0, lsl #30
    9fe4:	30c91c00 	sbccc	r1, r9, r0, lsl #24
    9fe8:	87010000 	strhi	r0, [r1, -r0]
    9fec:	00007903 	andeq	r7, r0, r3, lsl #18
    9ff0:	00592700 	subseq	r2, r9, r0, lsl #14
    9ff4:	1e4f1c00 	cdpne	12, 4, cr1, cr15, cr0, {0}
    9ff8:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    9ffc:	0000d903 	andeq	sp, r0, r3, lsl #18
    a000:	00594600 	subseq	r4, r9, r0, lsl #12
    a004:	011d0000 	tsteq	sp, r0
    a008:	00002ed7 	ldrdeq	r2, [r0], -r7
    a00c:	0103d501 	tsteq	r3, r1, lsl #10
    a010:	080065b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp, lr}
    a014:	080065c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp, lr}
    a018:	01007d02 	tsteq	r0, r2, lsl #26
    a01c:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
    a020:	002fb41e 	eoreq	fp, pc, lr, lsl r4	; <UNPREDICTABLE>
    a024:	03d50100 	bicseq	r0, r5, #0
    a028:	000003cf 	andeq	r0, r0, pc, asr #7
    a02c:	b61f5001 	ldrlt	r5, [pc], -r1
    a030:	0100002e 	tsteq	r0, lr, lsr #32
    a034:	008403d5 	ldrdeq	r0, [r4], r5
    a038:	59650000 	stmdbpl	r5!, {}^	; <UNPREDICTABLE>
    a03c:	da1c0000 	ble	70a044 <__Stack_Size+0x709c44>
    a040:	0100002f 	tsteq	r0, pc, lsr #32
    a044:	008403d7 	ldrdeq	r0, [r4], r7
    a048:	59860000 	stmibpl	r6, {}	; <UNPREDICTABLE>
    a04c:	4d240000 	stcmi	0, cr0, [r4, #-0]
    a050:	0100001f 	tsteq	r0, pc, lsl r0
    a054:	008403d7 	ldrdeq	r0, [r4], r7
    a058:	25000000 	strcs	r0, [r0, #-0]
    a05c:	002a0f01 	eoreq	r0, sl, r1, lsl #30
    a060:	01150500 	tsteq	r5, r0, lsl #10
    a064:	0ad60101 	beq	ff58a470 <SCS_BASE+0x1f57c470>
    a068:	79260000 	stmdbvc	r6!, {}	; <UNPREDICTABLE>
    a06c:	26000000 	strcs	r0, [r0], -r0
    a070:	000000f9 	strdeq	r0, [r0], -r9
    a074:	28012500 	stmdacs	r1, {r8, sl, sp}
    a078:	0500001e 	streq	r0, [r0, #-30]
    a07c:	01010114 	tsteq	r1, r4, lsl r1
    a080:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    a084:	00007926 	andeq	r7, r0, r6, lsr #18
    a088:	00f92600 	rscseq	r2, r9, r0, lsl #12
    a08c:	25000000 	strcs	r0, [r0, #-0]
    a090:	002ca301 	eoreq	sl, ip, r1, lsl #6
    a094:	01100500 	tsteq	r0, r0, lsl #10
    a098:	0b050101 	bleq	14a4a4 <__Stack_Size+0x14a0a4>
    a09c:	05260000 	streq	r0, [r6, #-0]!
    a0a0:	0000000b 	andeq	r0, r0, fp
    a0a4:	02ed0416 	rsceq	r0, sp, #369098752	; 0x16000000
    a0a8:	71000000 	mrsvc	r0, (UNDEF: 0)
    a0ac:	02000000 	andeq	r0, r0, #0
    a0b0:	00195200 	andseq	r5, r9, r0, lsl #4
    a0b4:	d6010400 	strle	r0, [r1], -r0, lsl #8
    a0b8:	c4000019 	strgt	r0, [r0], #-25
    a0bc:	32080065 	andcc	r0, r8, #101	; 0x65
    a0c0:	73080066 	movwvc	r0, #32870	; 0x8066
    a0c4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    a0c8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    a0cc:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    a0d0:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    a0d4:	726f632f 	rsbvc	r6, pc, #-1140850688	; 0xbc000000
    a0d8:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    a0dc:	616d5f33 	cmnvs	sp, r3, lsr pc
    a0e0:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    a0e4:	552f0073 	strpl	r0, [pc, #-115]!	; a079 <__Stack_Size+0x9c79>
    a0e8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
    a0ec:	6d64412f 	stfvse	f4, [r4, #-188]!	; 0xffffff44
    a0f0:	442f6e69 	strtmi	r6, [pc], #-3689	; a0f8 <__Stack_Size+0x9cf8>
    a0f4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
    a0f8:	73746e65 	cmnvc	r4, #1616	; 0x650
    a0fc:	626f522f 	rsbvs	r5, pc, #-268435454	; 0xf0000002
    a100:	6369746f 	cmnvs	r9, #1862270976	; 0x6f000000
    a104:	4d432f73 	stclmi	15, cr2, [r3, #-460]	; 0xfffffe34
    a108:	20303335 	eorscs	r3, r0, r5, lsr r3
    a10c:	00343050 	eorseq	r3, r4, r0, asr r0
    a110:	20554e47 	subscs	r4, r5, r7, asr #28
    a114:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
    a118:	2e32322e 	cdpcs	2, 3, cr3, cr2, cr14, {1}
    a11c:	80010030 	andhi	r0, r1, r0, lsr r0
    a120:	00000141 	andeq	r0, r0, r1, asr #2
    a124:	19660002 	stmdbne	r6!, {r1}^
    a128:	01040000 	mrseq	r0, (UNDEF: 4)
    a12c:	00000211 	andeq	r0, r0, r1, lsl r2
    a130:	00310c01 	eorseq	r0, r1, r1, lsl #24
    a134:	00018b00 	andeq	r8, r1, r0, lsl #22
    a138:	00663400 	rsbeq	r3, r6, r0, lsl #8
    a13c:	00668408 	rsbeq	r8, r6, r8, lsl #8
    a140:	001a7a08 	andseq	r7, sl, r8, lsl #20
    a144:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a148:	000000d3 	ldrdeq	r0, [r0], -r3
    a14c:	5b060102 	blpl	18a55c <__Stack_Size+0x18a15c>
    a150:	02000001 	andeq	r0, r0, #1
    a154:	01590801 	cmpeq	r9, r1, lsl #16
    a158:	02020000 	andeq	r0, r2, #0
    a15c:	00002505 	andeq	r2, r0, r5, lsl #10
    a160:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a164:	000001c4 	andeq	r0, r0, r4, asr #3
    a168:	69050403 	stmdbvs	r5, {r0, r1, sl}
    a16c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    a170:	00bb0508 	adcseq	r0, fp, r8, lsl #10
    a174:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a178:	0000c907 	andeq	ip, r0, r7, lsl #18
    a17c:	05040200 	streq	r0, [r4, #-512]	; 0x200
    a180:	000000c0 	andeq	r0, r0, r0, asr #1
    a184:	2f070402 	svccs	0x00070402
    a188:	02000000 	andeq	r0, r0, #0
    a18c:	00ce0704 	sbceq	r0, lr, r4, lsl #14
    a190:	01040000 	mrseq	r0, (UNDEF: 4)
    a194:	00720405 	rsbseq	r0, r2, r5, lsl #8
    a198:	01020000 	mrseq	r0, (UNDEF: 2)
    a19c:	00016208 	andeq	r6, r1, r8, lsl #4
    a1a0:	e1010600 	tst	r1, r0, lsl #12
    a1a4:	01000030 	tsteq	r0, r0, lsr r0
    a1a8:	66340191 			; <UNDEFINED> instruction: 0x66340191
    a1ac:	66840800 	strvs	r0, [r4], r0, lsl #16
    a1b0:	59ad0800 	stmibpl	sp!, {fp}
    a1b4:	bf010000 	svclt	0x00010000
    a1b8:	07000000 	streq	r0, [r0, -r0]
    a1bc:	0000313e 	andeq	r3, r0, lr, lsr r1
    a1c0:	00bf9301 	adcseq	r9, pc, r1, lsl #6
    a1c4:	ef080000 	svc	0x00080000
    a1c8:	01000030 	tsteq	r0, r0, lsr r0
    a1cc:	0000bf93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    a1d0:	0059cd00 	subseq	ip, r9, r0, lsl #26
    a1d4:	66680900 	strbtvs	r0, [r8], -r0, lsl #18
    a1d8:	01360800 	teqeq	r6, r0, lsl #16
    a1dc:	05000000 	streq	r0, [r0, #-0]
    a1e0:	00006b04 	andeq	r6, r0, r4, lsl #22
    a1e4:	30f70a00 	rscscc	r0, r7, r0, lsl #20
    a1e8:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    a1ec:	0000006b 	andeq	r0, r0, fp, rrx
    a1f0:	da0a0101 	ble	28a5fc <__Stack_Size+0x28a1fc>
    a1f4:	01000030 	tsteq	r0, r0, lsr r0
    a1f8:	00006b1b 	andeq	r6, r0, fp, lsl fp
    a1fc:	0a010100 	beq	4a604 <__Stack_Size+0x4a204>
    a200:	00003105 	andeq	r3, r0, r5, lsl #2
    a204:	006b1d01 	rsbeq	r1, fp, r1, lsl #26
    a208:	01010000 	mrseq	r0, (UNDEF: 1)
    a20c:	0031450a 	eorseq	r4, r1, sl, lsl #10
    a210:	6b200100 	blvs	80a618 <__Stack_Size+0x80a218>
    a214:	01000000 	mrseq	r0, (UNDEF: 0)
    a218:	30ff0a01 	rscscc	r0, pc, r1, lsl #20
    a21c:	22010000 	andcs	r0, r1, #0
    a220:	0000006b 	andeq	r0, r0, fp, rrx
    a224:	d20b0101 	andle	r0, fp, #1073741824	; 0x40000000
    a228:	01000030 	tsteq	r0, r0, lsr r0
    a22c:	0c010125 	stfeqs	f0, [r1], {37}	; 0x25
    a230:	00000074 	andeq	r0, r0, r4, ror r0
    a234:	0000011f 	andeq	r0, r0, pc, lsl r1
    a238:	0000640d 	andeq	r6, r0, sp, lsl #8
    a23c:	0e004c00 	cdpeq	12, 0, cr4, cr0, cr0, {0}
    a240:	00003131 	andeq	r3, r0, r1, lsr r1
    a244:	01313901 	teqeq	r1, r1, lsl #18
    a248:	05010000 	streq	r0, [r1, #-0]
    a24c:	00300003 	eorseq	r0, r0, r3
    a250:	010f0f08 	tsteq	pc, r8, lsl #30
    a254:	01100000 	tsteq	r0, r0
    a258:	0000004c 	andeq	r0, r0, ip, asr #32
    a25c:	48012c01 	stmdami	r1, {r0, sl, fp, sp}
    a260:	01000000 	mrseq	r0, (UNDEF: 0)
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
	mDelay(50);
	end();
	return 0;
}

void blinky(uint8 level) {
       0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
	// Turn them all off first.
	SetLED(MANAGE, 0);
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
	SetLED(TXD, 0);
       c:	52011106 	andpl	r1, r1, #-2147483647	; 0x80000001
      10:	00061001 	andeq	r1, r6, r1
	SetLED(PROGRAM, 0);
      14:	00240200 	eoreq	r0, r4, r0, lsl #4
      18:	0b3e0b0b 	bleq	f82c4c <__Stack_Size+0xf8284c>
	SetLED(RXD, 0);
      1c:	00000e03 	andeq	r0, r0, r3, lsl #28
      20:	0b002403 	bleq	9034 <__Stack_Size+0x8c34>
	SetLED(PLAY, 0);
      24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      28:	04000008 	streq	r0, [r0], #-8
	SetLED(AUX, 0);
      2c:	0b0b000f 	bleq	2c0070 <__Stack_Size+0x2bfc70>
      30:	00001349 	andeq	r1, r0, r9, asr #6
	switch (level) {	// Turn them on.
      34:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
      38:	06000013 			; <UNDEFINED> instruction: 0x06000013
      3c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      40:	0b3b0b3a 	bleq	ec2d30 <__Stack_Size+0xec2930>
      44:	00001349 	andeq	r1, r0, r9, asr #6
      48:	0b010407 	bleq	4106c <__Stack_Size+0x40c6c>
      4c:	3b0b3a0b 	blcc	2ce880 <__Stack_Size+0x2ce480>
	SetLED(PROGRAM, 0);
	SetLED(RXD, 0);
	SetLED(PLAY, 0);
	SetLED(AUX, 0);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
      50:	0013010b 	andseq	r0, r3, fp, lsl #2
      54:	00280800 	eoreq	r0, r8, r0, lsl #16
      58:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
      5c:	04090000 	streq	r0, [r9], #-0
      60:	0b0e0301 	bleq	380c6c <__Stack_Size+0x38086c>
      64:	3b0b3a0b 	blcc	2ce898 <__Stack_Size+0x2ce498>
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      68:	00130105 	andseq	r0, r3, r5, lsl #2
		default: return;
	}
	mDelay(100);
      6c:	00280a00 	eoreq	r0, r8, r0, lsl #20
	switch (level) {	// Turn them on.
      70:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
      74:	160b0000 	strne	r0, [fp], -r0
      78:	3a0e0300 	bcc	380c80 <__Stack_Size+0x380880>
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      7c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      80:	0c000013 	stceq	0, cr0, [r0], {19}
      84:	0c3f012e 	ldfeqs	f0, [pc], #-184	; ffffffd4 <SCS_BASE+0x1fff1fd4>
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
		default: return;
	}
	mDelay(100);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
      88:	0b3a0e03 	bleq	e8389c <__Stack_Size+0xe8349c>
      8c:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
      90:	01111349 	tsteq	r1, r9, asr #6
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
      94:	06400112 			; <UNDEFINED> instruction: 0x06400112
      98:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
      9c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      a0:	08030034 	stmdaeq	r3, {r2, r4, r5}
		default: return;
	}
	mDelay(100);
      a4:	0b3b0b3a 	bleq	ec2d94 <__Stack_Size+0xec2994>
}
      a8:	06021349 	streq	r1, [r2], -r9, asr #6
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
		default: return;
	}
	mDelay(100);
      ac:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
      b0:	11000182 	smlabbne	r0, r2, r1, r0
      b4:	00133101 	andseq	r3, r3, r1, lsl #2
      b8:	82890f00 	addhi	r0, r9, #0
      bc:	01110101 	tsteq	r1, r1, lsl #2
      c0:	13011331 	movwne	r1, #4913	; 0x1331
      c4:	8a100000 	bhi	4000cc <__Stack_Size+0x3ffccc>
      c8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
      cc:	0a42910a 	beq	10a44fc <__Stack_Size+0x10a40fc>
      d0:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
      d4:	030c3f01 	movweq	r3, #52993	; 0xcf01
      d8:	3b0b3a0e 	blcc	2ce918 <__Stack_Size+0x2ce518>
      dc:	110c270b 	tstne	ip, fp, lsl #14
      e0:	40011201 	andmi	r1, r1, r1, lsl #4
      e4:	0c429706 	mcrreq	7, 0, r9, r2, cr6
      e8:	00001301 	andeq	r1, r0, r1, lsl #6
      ec:	03000512 	movweq	r0, #1298	; 0x512
      f0:	3b0b3a0e 	blcc	2ce930 <__Stack_Size+0x2ce530>
      f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
      f8:	13000006 	movwne	r0, #6
      fc:	01018289 	smlabbeq	r1, r9, r2, r8
     100:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     104:	0013310c 	andseq	r3, r3, ip, lsl #2
     108:	01011400 	tsteq	r1, r0, lsl #8
     10c:	13011349 	movwne	r1, #4937	; 0x1349
     110:	21150000 	tstcs	r5, r0
     114:	2f134900 	svccs	0x00134900
     118:	1600000b 	strne	r0, [r0], -fp
     11c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     120:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     124:	00001349 	andeq	r1, r0, r9, asr #6
     128:	03003417 	movweq	r3, #1047	; 0x417
     12c:	3b0b3a0e 	blcc	2ce96c <__Stack_Size+0x2ce56c>
     130:	02134905 	andseq	r4, r3, #81920	; 0x14000
     134:	1800000a 	stmdane	r0, {r1, r3}
     138:	13490035 	movtne	r0, #36917	; 0x9035
     13c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     140:	030c3f00 	movweq	r3, #52992	; 0xcf00
     144:	3b0b3a0e 	blcc	2ce984 <__Stack_Size+0x2ce584>
     148:	3c0c2705 	stccc	7, cr2, [ip], {5}
     14c:	1a00000c 	bne	184 <_Minimum_Stack_Size+0x84>
     150:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; a0 <_Minimum_Stack_Size-0x60>
     154:	0b3a0e03 	bleq	e83968 <__Stack_Size+0xe83568>
     158:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
     15c:	00000c3c 	andeq	r0, r0, ip, lsr ip
     160:	3f012e1b 	svccc	0x00012e1b
     164:	3a0e030c 	bcc	380d9c <__Stack_Size+0x38099c>
     168:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     16c:	010c3c0c 	tsteq	ip, ip, lsl #24
     170:	1c000013 	stcne	0, cr0, [r0], {19}
     174:	13490005 	movtne	r0, #36869	; 0x9005
     178:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     17c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     180:	3b0b3a0e 	blcc	2ce9c0 <__Stack_Size+0x2ce5c0>
     184:	3c0c270b 	stccc	7, cr2, [ip], {11}
     188:	0013010c 	andseq	r0, r3, ip, lsl #2
     18c:	012e1e00 	teqeq	lr, r0, lsl #28
     190:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     194:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     198:	13490c27 	movtne	r0, #39975	; 0x9c27
     19c:	13010c3c 	movwne	r0, #7228	; 0x1c3c
     1a0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     1a4:	030c3f00 	movweq	r3, #52992	; 0xcf00
     1a8:	3b0b3a08 	blcc	2ce9d0 <__Stack_Size+0x2ce5d0>
     1ac:	3c0c270b 	stccc	7, cr2, [ip], {11}
     1b0:	2000000c 	andcs	r0, r0, ip
     1b4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 104 <_Minimum_Stack_Size+0x4>
     1b8:	0b3a0e03 	bleq	e839cc <__Stack_Size+0xe835cc>
     1bc:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
     1c0:	00000c3c 	andeq	r0, r0, ip, lsr ip
     1c4:	01110100 	tsteq	r1, r0, lsl #2
     1c8:	0b130e25 	bleq	4c3a64 <__Stack_Size+0x4c3664>
     1cc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     1d0:	01120111 	tsteq	r2, r1, lsl r1
     1d4:	00000610 	andeq	r0, r0, r0, lsl r6
     1d8:	0b002402 	bleq	91e8 <__Stack_Size+0x8de8>
     1dc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     1e0:	0300000e 	movweq	r0, #14
     1e4:	0b0b0024 	bleq	2c027c <__Stack_Size+0x2bfe7c>
     1e8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     1ec:	16040000 	strne	r0, [r4], -r0
     1f0:	3a0e0300 	bcc	380df8 <__Stack_Size+0x3809f8>
     1f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1f8:	05000013 	streq	r0, [r0, #-19]
     1fc:	0b0b0104 	bleq	2c0614 <__Stack_Size+0x2c0214>
     200:	0b3b0b3a 	bleq	ec2ef0 <__Stack_Size+0xec2af0>
     204:	00001301 	andeq	r1, r0, r1, lsl #6
     208:	03002806 	movweq	r2, #2054	; 0x806
     20c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     210:	002e0700 	eoreq	r0, lr, r0, lsl #14
     214:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     218:	0b3b0b3a 	bleq	ec2f08 <__Stack_Size+0xec2b08>
     21c:	01110c27 	tsteq	r1, r7, lsr #24
     220:	0a400112 	beq	1000670 <__Stack_Size+0x1000270>
     224:	000c4297 	muleq	ip, r7, r2
     228:	012e0800 	teqeq	lr, r0, lsl #16
     22c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     230:	0b3b0b3a 	bleq	ec2f20 <__Stack_Size+0xec2b20>
     234:	01110c27 	tsteq	r1, r7, lsr #24
     238:	0a400112 	beq	1000688 <__Stack_Size+0x1000288>
     23c:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
     240:	09000013 	stmdbeq	r0, {r0, r1, r4}
     244:	00018289 	andeq	r8, r1, r9, lsl #5
     248:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     24c:	0013310c 	andseq	r3, r3, ip, lsl #2
     250:	002e0a00 	eoreq	r0, lr, r0, lsl #20
     254:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     258:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     25c:	01110c27 	tsteq	r1, r7, lsr #24
     260:	0a400112 	beq	10006b0 <__Stack_Size+0x10002b0>
     264:	000c4297 	muleq	ip, r7, r2
     268:	012e0b00 	teqeq	lr, r0, lsl #22
     26c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     270:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     274:	01110c27 	tsteq	r1, r7, lsr #24
     278:	0a400112 	beq	10006c8 <__Stack_Size+0x10002c8>
     27c:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
     280:	0c000013 	stceq	0, cr0, [r0], {19}
     284:	13490101 	movtne	r0, #37121	; 0x9101
     288:	00001301 	andeq	r1, r0, r1, lsl #6
     28c:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
     290:	000b2f13 	andeq	r2, fp, r3, lsl pc
     294:	00340e00 	eorseq	r0, r4, r0, lsl #28
     298:	0b3a0e03 	bleq	e83aac <__Stack_Size+0xe836ac>
     29c:	1349053b 	movtne	r0, #38203	; 0x953b
     2a0:	340f0000 	strcc	r0, [pc], #-0	; 2a8 <_Minimum_Stack_Size+0x1a8>
     2a4:	3a0e0300 	bcc	380eac <__Stack_Size+0x380aac>
     2a8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     2ac:	000a0213 	andeq	r0, sl, r3, lsl r2
     2b0:	00351000 	eorseq	r1, r5, r0
     2b4:	00001349 	andeq	r1, r0, r9, asr #6
     2b8:	3f002e11 	svccc	0x00002e11
     2bc:	3a0e030c 	bcc	380ef4 <__Stack_Size+0x380af4>
     2c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2c4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     2c8:	11010000 	mrsne	r0, (UNDEF: 1)
     2cc:	130e2501 	movwne	r2, #58625	; 0xe501
     2d0:	1b0e030b 	blne	380f04 <__Stack_Size+0x380b04>
     2d4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     2d8:	00061001 	andeq	r1, r6, r1
     2dc:	00240200 	eoreq	r0, r4, r0, lsl #4
     2e0:	0b3e0b0b 	bleq	f82f14 <__Stack_Size+0xf82b14>
     2e4:	00000e03 	andeq	r0, r0, r3, lsl #28
     2e8:	0b002403 	bleq	92fc <__Stack_Size+0x8efc>
     2ec:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     2f0:	04000008 	streq	r0, [r0], #-8
     2f4:	0b0b000f 	bleq	2c0338 <__Stack_Size+0x2bff38>
     2f8:	00001349 	andeq	r1, r0, r9, asr #6
     2fc:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
     300:	06000013 			; <UNDEFINED> instruction: 0x06000013
     304:	08030016 	stmdaeq	r3, {r1, r2, r4}
     308:	0b3b0b3a 	bleq	ec2ff8 <__Stack_Size+0xec2bf8>
     30c:	00001349 	andeq	r1, r0, r9, asr #6
     310:	03001607 	movweq	r1, #1543	; 0x607
     314:	3b0b3a0e 	blcc	2ceb54 <__Stack_Size+0x2ce754>
     318:	0013490b 	andseq	r4, r3, fp, lsl #18
     31c:	00350800 	eorseq	r0, r5, r0, lsl #16
     320:	00001349 	andeq	r1, r0, r9, asr #6
     324:	0b010409 	bleq	41350 <__Stack_Size+0x40f50>
     328:	3b0b3a0b 	blcc	2ceb5c <__Stack_Size+0x2ce75c>
     32c:	0013010b 	andseq	r0, r3, fp, lsl #2
     330:	00280a00 	eoreq	r0, r8, r0, lsl #20
     334:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     338:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
     33c:	1c080300 	stcne	3, cr0, [r8], {-0}
     340:	0c00000d 	stceq	0, cr0, [r0], {13}
     344:	0b0b0113 	bleq	2c0798 <__Stack_Size+0x2c0398>
     348:	0b3b0b3a 	bleq	ec3038 <__Stack_Size+0xec2c38>
     34c:	00001301 	andeq	r1, r0, r1, lsl #6
     350:	03000d0d 	movweq	r0, #3341	; 0xd0d
     354:	3b0b3a08 	blcc	2ceb7c <__Stack_Size+0x2ce77c>
     358:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     35c:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
     360:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     364:	0b3b0b3a 	bleq	ec3054 <__Stack_Size+0xec2c54>
     368:	0a381349 	beq	e05094 <__Stack_Size+0xe04c94>
     36c:	130f0000 	movwne	r0, #61440	; 0xf000
     370:	3a0b0b01 	bcc	2c2f7c <__Stack_Size+0x2c2b7c>
     374:	01053b0b 	tsteq	r5, fp, lsl #22
     378:	10000013 	andne	r0, r0, r3, lsl r0
     37c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     380:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     384:	0a381349 	beq	e050b0 <__Stack_Size+0xe04cb0>
     388:	0d110000 	ldceq	0, cr0, [r1, #-0]
     38c:	3a0e0300 	bcc	380f94 <__Stack_Size+0x380b94>
     390:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     394:	000a3813 	andeq	r3, sl, r3, lsl r8
     398:	00161200 	andseq	r1, r6, r0, lsl #4
     39c:	0b3a0e03 	bleq	e83bb0 <__Stack_Size+0xe837b0>
     3a0:	1349053b 	movtne	r0, #38203	; 0x953b
     3a4:	04130000 	ldreq	r0, [r3], #-0
     3a8:	0b0e0301 	bleq	380fb4 <__Stack_Size+0x380bb4>
     3ac:	3b0b3a0b 	blcc	2cebe0 <__Stack_Size+0x2ce7e0>
     3b0:	00130105 	andseq	r0, r3, r5, lsl #2
     3b4:	01131400 	tsteq	r3, r0, lsl #8
     3b8:	0b0b0e03 	bleq	2c3bcc <__Stack_Size+0x2c37cc>
     3bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     3c0:	00001301 	andeq	r1, r0, r1, lsl #6
     3c4:	3f012e15 	svccc	0x00012e15
     3c8:	3a0e030c 	bcc	381000 <__Stack_Size+0x380c00>
     3cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3d0:	010b200c 	tsteq	fp, ip
     3d4:	16000013 			; <UNDEFINED> instruction: 0x16000013
     3d8:	08030005 	stmdaeq	r3, {r0, r2}
     3dc:	0b3b0b3a 	bleq	ec30cc <__Stack_Size+0xec2ccc>
     3e0:	00001349 	andeq	r1, r0, r9, asr #6
     3e4:	03000517 	movweq	r0, #1303	; 0x517
     3e8:	3b0b3a0e 	blcc	2cec28 <__Stack_Size+0x2ce828>
     3ec:	0013490b 	andseq	r4, r3, fp, lsl #18
     3f0:	012e1800 	teqeq	lr, r0, lsl #16
     3f4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     3f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     3fc:	0b200c27 	bleq	8034a0 <__Stack_Size+0x8030a0>
     400:	00001301 	andeq	r1, r0, r1, lsl #6
     404:	03000519 	movweq	r0, #1305	; 0x519
     408:	3b0b3a08 	blcc	2cec30 <__Stack_Size+0x2ce830>
     40c:	00134905 	andseq	r4, r3, r5, lsl #18
     410:	00051a00 	andeq	r1, r5, r0, lsl #20
     414:	0b3a0e03 	bleq	e83c28 <__Stack_Size+0xe83828>
     418:	1349053b 	movtne	r0, #38203	; 0x953b
     41c:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
     420:	030c3f01 	movweq	r3, #52993	; 0xcf01
     424:	3b0b3a0e 	blcc	2cec64 <__Stack_Size+0x2ce864>
     428:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     42c:	010b2013 	tsteq	fp, r3, lsl r0
     430:	1c000013 	stcne	0, cr0, [r0], {19}
     434:	0000010b 	andeq	r0, r0, fp, lsl #2
     438:	0300341d 	movweq	r3, #1053	; 0x41d
     43c:	3b0b3a0e 	blcc	2cec7c <__Stack_Size+0x2ce87c>
     440:	00134905 	andseq	r4, r3, r5, lsl #18
     444:	00341e00 	eorseq	r1, r4, r0, lsl #28
     448:	0b3a0803 	bleq	e8245c <__Stack_Size+0xe8205c>
     44c:	1349053b 	movtne	r0, #38203	; 0x953b
     450:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     454:	030c3f00 	movweq	r3, #52992	; 0xcf00
     458:	3b0b3a0e 	blcc	2cec98 <__Stack_Size+0x2ce898>
     45c:	200c2705 	andcs	r2, ip, r5, lsl #14
     460:	2000000b 	andcs	r0, r0, fp
     464:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 3b4 <_Minimum_Stack_Size+0x2b4>
     468:	0b3a0e03 	bleq	e83c7c <__Stack_Size+0xe8387c>
     46c:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
     470:	0b201349 	bleq	80519c <__Stack_Size+0x804d9c>
     474:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     478:	11133101 	tstne	r3, r1, lsl #2
     47c:	40011201 	andmi	r1, r1, r1, lsl #4
     480:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
     484:	00001301 	andeq	r1, r0, r1, lsl #6
     488:	31000522 	tstcc	r0, r2, lsr #10
     48c:	00060213 	andeq	r0, r6, r3, lsl r2
     490:	00052300 	andeq	r2, r5, r0, lsl #6
     494:	00001331 	andeq	r1, r0, r1, lsr r3
     498:	01828924 	orreq	r8, r2, r4, lsr #18
     49c:	95011100 	strls	r1, [r1, #-256]	; 0x100
     4a0:	13310c42 	teqne	r1, #16896	; 0x4200
     4a4:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     4a8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     4ac:	3b0b3a0e 	blcc	2cecec <__Stack_Size+0x2ce8ec>
     4b0:	110c270b 	tstne	ip, fp, lsl #14
     4b4:	40011201 	andmi	r1, r1, r1, lsl #4
     4b8:	0c429706 	mcrreq	7, 0, r9, r2, cr6
     4bc:	00001301 	andeq	r1, r0, r1, lsl #6
     4c0:	03000526 	movweq	r0, #1318	; 0x526
     4c4:	3b0b3a0e 	blcc	2ced04 <__Stack_Size+0x2ce904>
     4c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4cc:	27000006 	strcs	r0, [r0, -r6]
     4d0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     4d4:	0b3b0b3a 	bleq	ec31c4 <__Stack_Size+0xec2dc4>
     4d8:	06021349 	streq	r1, [r2], -r9, asr #6
     4dc:	89280000 	stmdbhi	r8!, {}	; <UNPREDICTABLE>
     4e0:	11010182 	smlabbne	r1, r2, r1, r0
     4e4:	01133101 	tsteq	r3, r1, lsl #2
     4e8:	29000013 	stmdbcs	r0, {r0, r1, r4}
     4ec:	0001828a 	andeq	r8, r1, sl, lsl #5
     4f0:	42910a02 	addsmi	r0, r1, #8192	; 0x2000
     4f4:	2a00000a 	bcs	524 <__Stack_Size+0x124>
     4f8:	00018289 	andeq	r8, r1, r9, lsl #5
     4fc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     500:	892b0000 	stmdbhi	fp!, {}	; <UNPREDICTABLE>
     504:	11010182 	smlabbne	r1, r2, r1, r0
     508:	00133101 	andseq	r3, r3, r1, lsl #2
     50c:	012e2c00 	teqeq	lr, r0, lsl #24
     510:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     514:	0b3b0b3a 	bleq	ec3204 <__Stack_Size+0xec2e04>
     518:	01110c27 	tsteq	r1, r7, lsr #24
     51c:	0a400112 	beq	100096c <__Stack_Size+0x100056c>
     520:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
     524:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     528:	01018289 	smlabbeq	r1, r9, r2, r8
     52c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     530:	0013310c 	andseq	r3, r3, ip, lsl #2
     534:	012e2e00 	teqeq	lr, r0, lsl #28
     538:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     53c:	0b3b0b3a 	bleq	ec322c <__Stack_Size+0xec2e2c>
     540:	13490c27 	movtne	r0, #39975	; 0x9c27
     544:	01120111 	tsteq	r2, r1, lsl r1
     548:	42970a40 	addsmi	r0, r7, #262144	; 0x40000
     54c:	0013010c 	andseq	r0, r3, ip, lsl #2
     550:	002e2f00 	eoreq	r2, lr, r0, lsl #30
     554:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     558:	0b3b0b3a 	bleq	ec3248 <__Stack_Size+0xec2e48>
     55c:	01110c27 	tsteq	r1, r7, lsr #24
     560:	0a400112 	beq	10009b0 <__Stack_Size+0x10005b0>
     564:	000c4297 	muleq	ip, r7, r2
     568:	00053000 	andeq	r3, r5, r0
     56c:	0b3a0e03 	bleq	e83d80 <__Stack_Size+0xe83980>
     570:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     574:	00000a02 	andeq	r0, r0, r2, lsl #20
     578:	03000531 	movweq	r0, #1329	; 0x531
     57c:	3b0b3a08 	blcc	2ceda4 <__Stack_Size+0x2ce9a4>
     580:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     584:	3200000a 	andcc	r0, r0, #10
     588:	13310005 	teqne	r1, #5
     58c:	00000a02 	andeq	r0, r0, r2, lsl #20
     590:	3f012e33 	svccc	0x00012e33
     594:	3a0e030c 	bcc	3811cc <__Stack_Size+0x380dcc>
     598:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     59c:	1201110c 	andne	r1, r1, #3
     5a0:	97064001 	strls	r4, [r6, -r1]
     5a4:	13010c42 	movwne	r0, #7234	; 0x1c42
     5a8:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
     5ac:	030c3f01 	movweq	r3, #52993	; 0xcf01
     5b0:	3b0b3a0e 	blcc	2cedf0 <__Stack_Size+0x2ce9f0>
     5b4:	110c2705 	tstne	ip, r5, lsl #14
     5b8:	40011201 	andmi	r1, r1, r1, lsl #4
     5bc:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
     5c0:	00001301 	andeq	r1, r0, r1, lsl #6
     5c4:	03000535 	movweq	r0, #1333	; 0x535
     5c8:	3b0b3a0e 	blcc	2cee08 <__Stack_Size+0x2cea08>
     5cc:	02134905 	andseq	r4, r3, #81920	; 0x14000
     5d0:	36000006 	strcc	r0, [r0], -r6
     5d4:	13310034 	teqne	r1, #52	; 0x34
     5d8:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
     5dc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     5e0:	3b0b3a0e 	blcc	2cee20 <__Stack_Size+0x2cea20>
     5e4:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     5e8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5ec:	97064001 	strls	r4, [r6, -r1]
     5f0:	13010c42 	movwne	r0, #7234	; 0x1c42
     5f4:	1d380000 	ldcne	0, cr0, [r8, #-0]
     5f8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     5fc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     600:	0105590b 	tsteq	r5, fp, lsl #18
     604:	39000013 	stmdbcc	r0, {r0, r1, r4}
     608:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     60c:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
     610:	11133101 	tstne	r3, r1, lsl #2
     614:	40011201 	andmi	r1, r1, r1, lsl #4
     618:	0c429706 	mcrreq	7, 0, r9, r2, cr6
     61c:	00001301 	andeq	r1, r0, r1, lsl #6
     620:	11010b3b 	tstne	r1, fp, lsr fp
     624:	01011201 	tsteq	r1, r1, lsl #4
     628:	3c000013 	stccc	0, cr0, [r0], {19}
     62c:	13310034 	teqne	r1, #52	; 0x34
     630:	00000602 	andeq	r0, r0, r2, lsl #12
     634:	0300343d 	movweq	r3, #1085	; 0x43d
     638:	3b0b3a0e 	blcc	2cee78 <__Stack_Size+0x2cea78>
     63c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     640:	3e000006 	cdpcc	0, 0, cr0, cr0, cr6, {0}
     644:	13310005 	teqne	r1, #5
     648:	00000b1c 	andeq	r0, r0, ip, lsl fp
     64c:	31011d3f 	tstcc	r1, pc, lsr sp
     650:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     654:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     658:	40000005 	andmi	r0, r0, r5
     65c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 5ac <__Stack_Size+0x1ac>
     660:	0b3a0e03 	bleq	e83e74 <__Stack_Size+0xe83a74>
     664:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     668:	01120111 	tsteq	r2, r1, lsl r1
     66c:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
     670:	0013010c 	andseq	r0, r3, ip, lsl #2
     674:	00344100 	eorseq	r4, r4, r0, lsl #2
     678:	0b3a0e03 	bleq	e83e8c <__Stack_Size+0xe83a8c>
     67c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     680:	00000602 	andeq	r0, r0, r2, lsl #12
     684:	31011d42 	tstcc	r1, r2, asr #26
     688:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     68c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     690:	4300000b 	movwmi	r0, #11
     694:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     698:	0b3b0b3a 	bleq	ec3388 <__Stack_Size+0xec2f88>
     69c:	0b1c1349 	bleq	7053c8 <__Stack_Size+0x704fc8>
     6a0:	1d440000 	stclne	0, cr0, [r4, #-0]
     6a4:	11133101 	tstne	r3, r1, lsl #2
     6a8:	58011201 	stmdapl	r1, {r0, r9, ip}
     6ac:	010b590b 	tsteq	fp, fp, lsl #18
     6b0:	45000013 	strmi	r0, [r0, #-19]
     6b4:	13310005 	teqne	r1, #5
     6b8:	0000051c 	andeq	r0, r0, ip, lsl r5
     6bc:	31011d46 	tstcc	r1, r6, asr #26
     6c0:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     6c4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     6c8:	0013010b 	andseq	r0, r3, fp, lsl #2
     6cc:	00344700 	eorseq	r4, r4, r0, lsl #14
     6d0:	0b3a0e03 	bleq	e83ee4 <__Stack_Size+0xe83ae4>
     6d4:	1349053b 	movtne	r0, #38203	; 0x953b
     6d8:	00000a02 	andeq	r0, r0, r2, lsl #20
     6dc:	31011d48 	tstcc	r1, r8, asr #26
     6e0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6e4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     6e8:	00130105 	andseq	r0, r3, r5, lsl #2
     6ec:	00344900 	eorseq	r4, r4, r0, lsl #18
     6f0:	0b3a0803 	bleq	e82704 <__Stack_Size+0xe82304>
     6f4:	1349053b 	movtne	r0, #38203	; 0x953b
     6f8:	00000602 	andeq	r0, r0, r2, lsl #12
     6fc:	0300054a 	movweq	r0, #1354	; 0x54a
     700:	3b0b3a0e 	blcc	2cef40 <__Stack_Size+0x2ceb40>
     704:	02134905 	andseq	r4, r3, #81920	; 0x14000
     708:	4b00000a 	blmi	738 <__Stack_Size+0x338>
     70c:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 65c <__Stack_Size+0x25c>
     710:	0b3a0e03 	bleq	e83f24 <__Stack_Size+0xe83b24>
     714:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
     718:	01111349 	tsteq	r1, r9, asr #6
     71c:	0a400112 	beq	1000b6c <__Stack_Size+0x100076c>
     720:	000c4297 	muleq	ip, r7, r2
     724:	002e4c00 	eoreq	r4, lr, r0, lsl #24
     728:	01111331 	tsteq	r1, r1, lsr r3
     72c:	0a400112 	beq	1000b7c <__Stack_Size+0x100077c>
     730:	000c4297 	muleq	ip, r7, r2
     734:	011d4d00 	tsteq	sp, r0, lsl #26
     738:	01111331 	tsteq	r1, r1, lsr r3
     73c:	0b580112 	bleq	1600b8c <__Stack_Size+0x160078c>
     740:	00000559 	andeq	r0, r0, r9, asr r5
     744:	3f012e4e 	svccc	0x00012e4e
     748:	3a0e030c 	bcc	381380 <__Stack_Size+0x380f80>
     74c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     750:	1113490c 	tstne	r3, ip, lsl #18
     754:	40011201 	andmi	r1, r1, r1, lsl #4
     758:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
     75c:	00001301 	andeq	r1, r0, r1, lsl #6
     760:	3100344f 	tstcc	r0, pc, asr #8
     764:	000a0213 	andeq	r0, sl, r3, lsl r2
     768:	010b5000 	mrseq	r5, (UNDEF: 11)
     76c:	01120111 	tsteq	r2, r1, lsl r1
     770:	05510000 	ldrbeq	r0, [r1, #-0]
     774:	3a080300 	bcc	20137c <__Stack_Size+0x200f7c>
     778:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     77c:	00060213 	andeq	r0, r6, r3, lsl r2
     780:	01015200 	mrseq	r5, R9_usr
     784:	13011349 	movwne	r1, #4937	; 0x1349
     788:	21530000 	cmpcs	r3, r0
     78c:	2f134900 	svccs	0x00134900
     790:	5400000b 	strpl	r0, [r0], #-11
     794:	1331001d 	teqne	r1, #29
     798:	01120111 	tsteq	r2, r1, lsl r1
     79c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
     7a0:	2e550000 	cdpcs	0, 5, cr0, cr5, cr0, {0}
     7a4:	030c3f00 	movweq	r3, #52992	; 0xcf00
     7a8:	3b0b3a0e 	blcc	2cefe8 <__Stack_Size+0x2cebe8>
     7ac:	110c2705 	tstne	ip, r5, lsl #14
     7b0:	40011201 	andmi	r1, r1, r1, lsl #4
     7b4:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
     7b8:	1d560000 	ldclne	0, cr0, [r6, #-0]
     7bc:	52133100 	andspl	r3, r3, #0
     7c0:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     7c4:	0005590b 	andeq	r5, r5, fp, lsl #18
     7c8:	00055700 	andeq	r5, r5, r0, lsl #14
     7cc:	0b3a0803 	bleq	e827e0 <__Stack_Size+0xe823e0>
     7d0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7d4:	00000602 	andeq	r0, r0, r2, lsl #12
     7d8:	03003458 	movweq	r3, #1112	; 0x458
     7dc:	3b0b3a0e 	blcc	2cf01c <__Stack_Size+0x2cec1c>
     7e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     7e4:	5900000a 	stmdbpl	r0, {r1, r3}
     7e8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 738 <__Stack_Size+0x338>
     7ec:	0b3a0803 	bleq	e82800 <__Stack_Size+0xe82400>
     7f0:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
     7f4:	01120111 	tsteq	r2, r1, lsl r1
     7f8:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
     7fc:	0013010c 	andseq	r0, r3, ip, lsl #2
     800:	012e5a00 	teqeq	lr, r0, lsl #20
     804:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     808:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     80c:	01120111 	tsteq	r2, r1, lsl r1
     810:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
     814:	0013010c 	andseq	r0, r3, ip, lsl #2
     818:	00345b00 	eorseq	r5, r4, r0, lsl #22
     81c:	0b3a0803 	bleq	e82830 <__Stack_Size+0xe82430>
     820:	1349053b 	movtne	r0, #38203	; 0x953b
     824:	00000a02 	andeq	r0, r0, r2, lsl #20
     828:	0182895c 	orreq	r8, r2, ip, asr r9
     82c:	95011101 	strls	r1, [r1, #-257]	; 0x101
     830:	13310c42 	teqne	r1, #16896	; 0x4200
     834:	00001301 	andeq	r1, r0, r1, lsl #6
     838:	0300345d 	movweq	r3, #1117	; 0x45d
     83c:	3b0b3a0e 	blcc	2cf07c <__Stack_Size+0x2cec7c>
     840:	3f13490b 	svccc	0x0013490b
     844:	000a020c 	andeq	r0, sl, ip, lsl #4
     848:	00345e00 	eorseq	r5, r4, r0, lsl #28
     84c:	0b3a0e03 	bleq	e84060 <__Stack_Size+0xe83c60>
     850:	1349053b 	movtne	r0, #38203	; 0x953b
     854:	0a020c3f 	beq	83958 <__Stack_Size+0x83558>
     858:	2e5f0000 	cdpcs	0, 5, cr0, cr15, cr0, {0}
     85c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     860:	3b0b3a0e 	blcc	2cf0a0 <__Stack_Size+0x2ceca0>
     864:	3c0c270b 	stccc	7, cr2, [ip], {11}
     868:	0013010c 	andseq	r0, r3, ip, lsl #2
     86c:	00056000 	andeq	r6, r5, r0
     870:	00001349 	andeq	r1, r0, r9, asr #6
     874:	3f012e61 	svccc	0x00012e61
     878:	3a0e030c 	bcc	3814b0 <__Stack_Size+0x3810b0>
     87c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     880:	3c13490c 	ldccc	9, cr4, [r3], {12}
     884:	0013010c 	andseq	r0, r3, ip, lsl #2
     888:	012e6200 	teqeq	lr, r0, lsl #4
     88c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     890:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     894:	0c3c0c27 	ldceq	12, cr0, [ip], #-156	; 0xffffff64
     898:	00001301 	andeq	r1, r0, r1, lsl #6
     89c:	3f012e63 	svccc	0x00012e63
     8a0:	3a0e030c 	bcc	3814d8 <__Stack_Size+0x3810d8>
     8a4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     8a8:	3c13490c 	ldccc	9, cr4, [r3], {12}
     8ac:	0013010c 	andseq	r0, r3, ip, lsl #2
     8b0:	002e6400 	eoreq	r6, lr, r0, lsl #8
     8b4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     8b8:	0b3b0b3a 	bleq	ec35a8 <__Stack_Size+0xec31a8>
     8bc:	0c3c0c27 	ldceq	12, cr0, [ip], #-156	; 0xffffff64
     8c0:	2e650000 	cdpcs	0, 6, cr0, cr5, cr0, {0}
     8c4:	030c3f00 	movweq	r3, #52992	; 0xcf00
     8c8:	3b0b3a0e 	blcc	2cf108 <__Stack_Size+0x2ced08>
     8cc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     8d0:	000c3c13 	andeq	r3, ip, r3, lsl ip
     8d4:	002e6600 	eoreq	r6, lr, r0, lsl #12
     8d8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     8dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8e0:	13490c27 	movtne	r0, #39975	; 0x9c27
     8e4:	00000c3c 	andeq	r0, r0, ip, lsr ip
     8e8:	3f012e67 	svccc	0x00012e67
     8ec:	3a0e030c 	bcc	381524 <__Stack_Size+0x381124>
     8f0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     8f4:	3c13490c 	ldccc	9, cr4, [r3], {12}
     8f8:	0000000c 	andeq	r0, r0, ip
     8fc:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     900:	030b130e 	movweq	r1, #45838	; 0xb30e
     904:	110e1b0e 	tstne	lr, lr, lsl #22
     908:	10011201 	andne	r1, r1, r1, lsl #4
     90c:	02000006 	andeq	r0, r0, #6
     910:	0b0b0024 	bleq	2c09a8 <__Stack_Size+0x2c05a8>
     914:	0e030b3e 	vmoveq.16	d3[0], r0
     918:	24030000 	strcs	r0, [r3], #-0
     91c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     920:	0008030b 	andeq	r0, r8, fp, lsl #6
     924:	00160400 	andseq	r0, r6, r0, lsl #8
     928:	0b3a0803 	bleq	e8293c <__Stack_Size+0xe8253c>
     92c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     930:	16050000 	strne	r0, [r5], -r0
     934:	3a0e0300 	bcc	38153c <__Stack_Size+0x38113c>
     938:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     93c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     940:	13490035 	movtne	r0, #36917	; 0x9035
     944:	04070000 	streq	r0, [r7], #-0
     948:	3a0b0b01 	bcc	2c3554 <__Stack_Size+0x2c3154>
     94c:	010b3b0b 	tsteq	fp, fp, lsl #22
     950:	08000013 	stmdaeq	r0, {r0, r1, r4}
     954:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     958:	00000d1c 	andeq	r0, r0, ip, lsl sp
     95c:	03002809 	movweq	r2, #2057	; 0x809
     960:	000d1c08 	andeq	r1, sp, r8, lsl #24
     964:	01130a00 	tsteq	r3, r0, lsl #20
     968:	0b3a0b0b 	bleq	e8359c <__Stack_Size+0xe8319c>
     96c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     970:	0d0b0000 	stceq	0, cr0, [fp, #-0]
     974:	3a080300 	bcc	20157c <__Stack_Size+0x20117c>
     978:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     97c:	000a3813 	andeq	r3, sl, r3, lsl r8
     980:	000d0c00 	andeq	r0, sp, r0, lsl #24
     984:	0b3a0e03 	bleq	e84198 <__Stack_Size+0xe83d98>
     988:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     98c:	00000a38 	andeq	r0, r0, r8, lsr sl
     990:	3f012e0d 	svccc	0x00012e0d
     994:	3a0e030c 	bcc	3815cc <__Stack_Size+0x3811cc>
     998:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     99c:	1201110c 	andne	r1, r1, #3
     9a0:	97064001 	strls	r4, [r6, -r1]
     9a4:	13010c42 	movwne	r0, #7234	; 0x1c42
     9a8:	050e0000 	streq	r0, [lr, #-0]
     9ac:	3a0e0300 	bcc	3815b4 <__Stack_Size+0x3811b4>
     9b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9b4:	00060213 	andeq	r0, r6, r3, lsl r2
     9b8:	82890f00 	addhi	r0, r9, #0
     9bc:	01110101 	tsteq	r1, r1, lsl #2
     9c0:	13011331 	movwne	r1, #4913	; 0x1331
     9c4:	8a100000 	bhi	4009cc <__Stack_Size+0x4005cc>
     9c8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     9cc:	0a42910a 	beq	10a4dfc <__Stack_Size+0x10a49fc>
     9d0:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
     9d4:	11010182 	smlabbne	r1, r2, r1, r0
     9d8:	0c429501 	cfstr64eq	mvdx9, [r2], {1}
     9dc:	00001331 	andeq	r1, r0, r1, lsr r3
     9e0:	0b000f12 	bleq	4630 <__Stack_Size+0x4230>
     9e4:	0013490b 	andseq	r4, r3, fp, lsl #18
     9e8:	00051300 	andeq	r1, r5, r0, lsl #6
     9ec:	0b3a0e03 	bleq	e84200 <__Stack_Size+0xe83e00>
     9f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     9f4:	00000a02 	andeq	r0, r0, r2, lsl #20
     9f8:	03003414 	movweq	r3, #1044	; 0x414
     9fc:	3b0b3a0e 	blcc	2cf23c <__Stack_Size+0x2cee3c>
     a00:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     a04:	15000006 	strne	r0, [r0, #-6]
     a08:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 958 <__Stack_Size+0x558>
     a0c:	0b3a0e03 	bleq	e84220 <__Stack_Size+0xe83e20>
     a10:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
     a14:	01120111 	tsteq	r2, r1, lsl r1
     a18:	42970a40 	addsmi	r0, r7, #262144	; 0x40000
     a1c:	0013010c 	andseq	r0, r3, ip, lsl #2
     a20:	012e1600 	teqeq	lr, r0, lsl #12
     a24:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     a28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a2c:	01110c27 	tsteq	r1, r7, lsr #24
     a30:	0a400112 	beq	1000e80 <__Stack_Size+0x1000a80>
     a34:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
     a38:	17000013 	smladne	r0, r3, r0, r0
     a3c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     a40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a44:	0a021349 	beq	85770 <__Stack_Size+0x85370>
     a48:	05180000 	ldreq	r0, [r8, #-0]
     a4c:	3a0e0300 	bcc	381654 <__Stack_Size+0x381254>
     a50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a54:	00060213 	andeq	r0, r6, r3, lsl r2
     a58:	00341900 	eorseq	r1, r4, r0, lsl #18
     a5c:	0b3a0e03 	bleq	e84270 <__Stack_Size+0xe83e70>
     a60:	1349053b 	movtne	r0, #38203	; 0x953b
     a64:	00000602 	andeq	r0, r0, r2, lsl #12
     a68:	3f012e1a 	svccc	0x00012e1a
     a6c:	3a0e030c 	bcc	3816a4 <__Stack_Size+0x3812a4>
     a70:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a74:	1113490c 	tstne	r3, ip, lsl #18
     a78:	40011201 	andmi	r1, r1, r1, lsl #4
     a7c:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
     a80:	00001301 	andeq	r1, r0, r1, lsl #6
     a84:	3f012e1b 	svccc	0x00012e1b
     a88:	3a0e030c 	bcc	3816c0 <__Stack_Size+0x3812c0>
     a8c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a90:	1201110c 	andne	r1, r1, #3
     a94:	97064001 	strls	r4, [r6, -r1]
     a98:	13010c42 	movwne	r0, #7234	; 0x1c42
     a9c:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     aa0:	030c3f00 	movweq	r3, #52992	; 0xcf00
     aa4:	3b0b3a0e 	blcc	2cf2e4 <__Stack_Size+0x2ceee4>
     aa8:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     aac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ab0:	970a4001 	strls	r4, [sl, -r1]
     ab4:	00000c42 	andeq	r0, r0, r2, asr #24
     ab8:	3f012e1d 	svccc	0x00012e1d
     abc:	3a0e030c 	bcc	3816f4 <__Stack_Size+0x3812f4>
     ac0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     ac4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     ac8:	00051e00 	andeq	r1, r5, r0, lsl #28
     acc:	00001349 	andeq	r1, r0, r9, asr #6
     ad0:	01110100 	tsteq	r1, r0, lsl #2
     ad4:	0b130e25 	bleq	4c4370 <__Stack_Size+0x4c3f70>
     ad8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     adc:	01120111 	tsteq	r2, r1, lsl r1
     ae0:	00000610 	andeq	r0, r0, r0, lsl r6
     ae4:	0b002402 	bleq	9af4 <__Stack_Size+0x96f4>
     ae8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     aec:	0300000e 	movweq	r0, #14
     af0:	0b0b0024 	bleq	2c0b88 <__Stack_Size+0x2c0788>
     af4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     af8:	16040000 	strne	r0, [r4], -r0
     afc:	3a080300 	bcc	201704 <__Stack_Size+0x201304>
     b00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b04:	05000013 	streq	r0, [r0, #-19]
     b08:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     b0c:	0b3b0b3a 	bleq	ec37fc <__Stack_Size+0xec33fc>
     b10:	00001349 	andeq	r1, r0, r9, asr #6
     b14:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
     b18:	07000013 	smladeq	r0, r3, r0, r0
     b1c:	0b0b0104 	bleq	2c0f34 <__Stack_Size+0x2c0b34>
     b20:	0b3b0b3a 	bleq	ec3810 <__Stack_Size+0xec3410>
     b24:	00001301 	andeq	r1, r0, r1, lsl #6
     b28:	03002808 	movweq	r2, #2056	; 0x808
     b2c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     b30:	00280900 	eoreq	r0, r8, r0, lsl #18
     b34:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
     b38:	130a0000 	movwne	r0, #40960	; 0xa000
     b3c:	3a0b0b01 	bcc	2c3748 <__Stack_Size+0x2c3348>
     b40:	01053b0b 	tsteq	r5, fp, lsl #22
     b44:	0b000013 	bleq	b98 <__Stack_Size+0x798>
     b48:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     b4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b50:	0a381349 	beq	e0587c <__Stack_Size+0xe0547c>
     b54:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     b58:	3a0e0300 	bcc	381760 <__Stack_Size+0x381360>
     b5c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b60:	000a3813 	andeq	r3, sl, r3, lsl r8
     b64:	00160d00 	andseq	r0, r6, r0, lsl #26
     b68:	0b3a0e03 	bleq	e8437c <__Stack_Size+0xe83f7c>
     b6c:	1349053b 	movtne	r0, #38203	; 0x953b
     b70:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     b74:	030c3f01 	movweq	r3, #52993	; 0xcf01
     b78:	3b0b3a0e 	blcc	2cf3b8 <__Stack_Size+0x2cefb8>
     b7c:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     b80:	010b2013 	tsteq	fp, r3, lsl r0
     b84:	0f000013 	svceq	0x00000013
     b88:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b8c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     b90:	00001349 	andeq	r1, r0, r9, asr #6
     b94:	3f012e10 	svccc	0x00012e10
     b98:	3a0e030c 	bcc	3817d0 <__Stack_Size+0x3813d0>
     b9c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ba0:	1201110c 	andne	r1, r1, #3
     ba4:	970a4001 	strls	r4, [sl, -r1]
     ba8:	13010c42 	movwne	r0, #7234	; 0x1c42
     bac:	05110000 	ldreq	r0, [r1, #-0]
     bb0:	3a0e0300 	bcc	3817b8 <__Stack_Size+0x3813b8>
     bb4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bb8:	00060213 	andeq	r0, r6, r3, lsl r2
     bbc:	002e1200 	eoreq	r1, lr, r0, lsl #4
     bc0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bc4:	0b3b0b3a 	bleq	ec38b4 <__Stack_Size+0xec34b4>
     bc8:	01110c27 	tsteq	r1, r7, lsr #24
     bcc:	0a400112 	beq	100101c <__Stack_Size+0x1000c1c>
     bd0:	000c4297 	muleq	ip, r7, r2
     bd4:	002e1300 	eoreq	r1, lr, r0, lsl #6
     bd8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bdc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     be0:	13490c27 	movtne	r0, #39975	; 0x9c27
     be4:	01120111 	tsteq	r2, r1, lsl r1
     be8:	42970a40 	addsmi	r0, r7, #262144	; 0x40000
     bec:	1400000c 	strne	r0, [r0], #-12
     bf0:	0c3f012e 	ldfeqs	f0, [pc], #-184	; b40 <__Stack_Size+0x740>
     bf4:	0b3a0e03 	bleq	e84408 <__Stack_Size+0xe84008>
     bf8:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
     bfc:	01111349 	tsteq	r1, r9, asr #6
     c00:	0a400112 	beq	1001050 <__Stack_Size+0x1000c50>
     c04:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
     c08:	15000013 	strne	r0, [r0, #-19]
     c0c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     c10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c14:	06021349 	streq	r1, [r2], -r9, asr #6
     c18:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     c1c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     c20:	3b0b3a0e 	blcc	2cf460 <__Stack_Size+0x2cf060>
     c24:	110c2705 	tstne	ip, r5, lsl #14
     c28:	40011201 	andmi	r1, r1, r1, lsl #4
     c2c:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
     c30:	00001301 	andeq	r1, r0, r1, lsl #6
     c34:	03000517 	movweq	r0, #1303	; 0x517
     c38:	3b0b3a0e 	blcc	2cf478 <__Stack_Size+0x2cf078>
     c3c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     c40:	18000006 	stmdane	r0, {r1, r2}
     c44:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     c4c:	0a021349 	beq	85978 <__Stack_Size+0x85578>
     c50:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     c54:	11133101 	tstne	r3, r1, lsl #2
     c58:	40011201 	andmi	r1, r1, r1, lsl #4
     c5c:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
     c60:	00001301 	andeq	r1, r0, r1, lsl #6
     c64:	3100341a 	tstcc	r0, sl, lsl r4
     c68:	00060213 	andeq	r0, r6, r3, lsl r2
     c6c:	011d1b00 	tsteq	sp, r0, lsl #22
     c70:	01111331 	tsteq	r1, r1, lsr r3
     c74:	0b580112 	bleq	16010c4 <__Stack_Size+0x1600cc4>
     c78:	00000559 	andeq	r0, r0, r9, asr r5
     c7c:	11010b1c 	tstne	r1, ip, lsl fp
     c80:	00011201 	andeq	r1, r1, r1, lsl #4
     c84:	00341d00 	eorseq	r1, r4, r0, lsl #26
     c88:	00001331 	andeq	r1, r0, r1, lsr r3
     c8c:	03012e1e 	movweq	r2, #7710	; 0x1e1e
     c90:	3b0b3a0e 	blcc	2cf4d0 <__Stack_Size+0x2cf0d0>
     c94:	200c2705 	andcs	r2, ip, r5, lsl #14
     c98:	0013010b 	andseq	r0, r3, fp, lsl #2
     c9c:	00341f00 	eorseq	r1, r4, r0, lsl #30
     ca0:	0b3a0803 	bleq	e82cb4 <__Stack_Size+0xe828b4>
     ca4:	1349053b 	movtne	r0, #38203	; 0x953b
     ca8:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     cac:	030c3f01 	movweq	r3, #52993	; 0xcf01
     cb0:	3b0b3a0e 	blcc	2cf4f0 <__Stack_Size+0x2cf0f0>
     cb4:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     cb8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     cbc:	97064001 	strls	r4, [r6, -r1]
     cc0:	13010c42 	movwne	r0, #7234	; 0x1c42
     cc4:	1d210000 	stcne	0, cr0, [r1, #-0]
     cc8:	11133101 	tstne	r3, r1, lsl #2
     ccc:	58011201 	stmdapl	r1, {r0, r9, ip}
     cd0:	0105590b 	tsteq	r5, fp, lsl #18
     cd4:	22000013 	andcs	r0, r0, #19
     cd8:	00018289 	andeq	r8, r1, r9, lsl #5
     cdc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     ce0:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     ce4:	11010182 	smlabbne	r1, r2, r1, r0
     ce8:	01133101 	tsteq	r3, r1, lsl #2
     cec:	24000013 	strcs	r0, [r0], #-19
     cf0:	0001828a 	andeq	r8, r1, sl, lsl #5
     cf4:	42910a02 	addsmi	r0, r1, #8192	; 0x2000
     cf8:	2500000a 	strcs	r0, [r0, #-10]
     cfc:	01018289 	smlabbeq	r1, r9, r2, r8
     d00:	13310111 	teqne	r1, #1073741828	; 0x40000004
     d04:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     d08:	030c3f01 	movweq	r3, #52993	; 0xcf01
     d0c:	3b0b3a0e 	blcc	2cf54c <__Stack_Size+0x2cf14c>
     d10:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     d14:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d18:	97064001 	strls	r4, [r6, -r1]
     d1c:	13010c42 	movwne	r0, #7234	; 0x1c42
     d20:	34270000 	strtcc	r0, [r7], #-0
     d24:	3a0e0300 	bcc	38192c <__Stack_Size+0x38152c>
     d28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d2c:	00060213 	andeq	r0, r6, r3, lsl r2
     d30:	012e2800 	teqeq	lr, r0, lsl #16
     d34:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     d38:	0b3b0b3a 	bleq	ec3a28 <__Stack_Size+0xec3628>
     d3c:	13490c27 	movtne	r0, #39975	; 0x9c27
     d40:	01120111 	tsteq	r2, r1, lsl r1
     d44:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
     d48:	0000000c 	andeq	r0, r0, ip
     d4c:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     d50:	030b130e 	movweq	r1, #45838	; 0xb30e
     d54:	110e1b0e 	tstne	lr, lr, lsl #22
     d58:	10011201 	andne	r1, r1, r1, lsl #4
     d5c:	02000006 	andeq	r0, r0, #6
     d60:	0b0b0024 	bleq	2c0df8 <__Stack_Size+0x2c09f8>
     d64:	0e030b3e 	vmoveq.16	d3[0], r0
     d68:	24030000 	strcs	r0, [r3], #-0
     d6c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     d70:	0008030b 	andeq	r0, r8, fp, lsl #6
     d74:	00160400 	andseq	r0, r6, r0, lsl #8
     d78:	0b3a0803 	bleq	e82d8c <__Stack_Size+0xe8298c>
     d7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d80:	16050000 	strne	r0, [r5], -r0
     d84:	3a0e0300 	bcc	38198c <__Stack_Size+0x38158c>
     d88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d8c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     d90:	13490035 	movtne	r0, #36917	; 0x9035
     d94:	04070000 	streq	r0, [r7], #-0
     d98:	3a0b0b01 	bcc	2c39a4 <__Stack_Size+0x2c35a4>
     d9c:	010b3b0b 	tsteq	fp, fp, lsl #22
     da0:	08000013 	stmdaeq	r0, {r0, r1, r4}
     da4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     da8:	00000d1c 	andeq	r0, r0, ip, lsl sp
     dac:	0b011309 	bleq	459d8 <__Stack_Size+0x455d8>
     db0:	3b0b3a0b 	blcc	2cf5e4 <__Stack_Size+0x2cf1e4>
     db4:	00130105 	andseq	r0, r3, r5, lsl #2
     db8:	000d0a00 	andeq	r0, sp, r0, lsl #20
     dbc:	0b3a0803 	bleq	e82dd0 <__Stack_Size+0xe829d0>
     dc0:	1349053b 	movtne	r0, #38203	; 0x953b
     dc4:	00000a38 	andeq	r0, r0, r8, lsr sl
     dc8:	03000d0b 	movweq	r0, #3339	; 0xd0b
     dcc:	3b0b3a0e 	blcc	2cf60c <__Stack_Size+0x2cf20c>
     dd0:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     dd4:	0c00000a 	stceq	0, cr0, [r0], {10}
     dd8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     ddc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     de0:	00001349 	andeq	r1, r0, r9, asr #6
     de4:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
     de8:	00130113 	andseq	r0, r3, r3, lsl r1
     dec:	00210e00 	eoreq	r0, r1, r0, lsl #28
     df0:	0b2f1349 	bleq	bc5b1c <__Stack_Size+0xbc571c>
     df4:	130f0000 	movwne	r0, #61440	; 0xf000
     df8:	3a0b0b01 	bcc	2c3a04 <__Stack_Size+0x2c3604>
     dfc:	010b3b0b 	tsteq	fp, fp, lsl #22
     e00:	10000013 	andne	r0, r0, r3, lsl r0
     e04:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     e08:	0b3b0b3a 	bleq	ec3af8 <__Stack_Size+0xec36f8>
     e0c:	0a381349 	beq	e05b38 <__Stack_Size+0xe05738>
     e10:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     e14:	030c3f01 	movweq	r3, #52993	; 0xcf01
     e18:	3b0b3a0e 	blcc	2cf658 <__Stack_Size+0x2cf258>
     e1c:	110c270b 	tstne	ip, fp, lsl #14
     e20:	40011201 	andmi	r1, r1, r1, lsl #4
     e24:	0c429706 	mcrreq	7, 0, r9, r2, cr6
     e28:	00001301 	andeq	r1, r0, r1, lsl #6
     e2c:	03000512 	movweq	r0, #1298	; 0x512
     e30:	3b0b3a0e 	blcc	2cf670 <__Stack_Size+0x2cf270>
     e34:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e38:	13000006 	movwne	r0, #6
     e3c:	01018289 	smlabbeq	r1, r9, r2, r8
     e40:	13310111 	teqne	r1, #1073741828	; 0x40000004
     e44:	00001301 	andeq	r1, r0, r1, lsl #6
     e48:	01828a14 	orreq	r8, r2, r4, lsl sl
     e4c:	910a0200 	mrsls	r0, R10_fiq
     e50:	00000a42 	andeq	r0, r0, r2, asr #20
     e54:	01828915 	orreq	r8, r2, r5, lsl r9
     e58:	95011101 	strls	r1, [r1, #-257]	; 0x101
     e5c:	13310c42 	teqne	r1, #16896	; 0x4200
     e60:	0f160000 	svceq	0x00160000
     e64:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     e68:	17000013 	smladne	r0, r3, r0, r0
     e6c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     e70:	0b3b0b3a 	bleq	ec3b60 <__Stack_Size+0xec3760>
     e74:	0a021349 	beq	85ba0 <__Stack_Size+0x857a0>
     e78:	34180000 	ldrcc	r0, [r8], #-0
     e7c:	3a0e0300 	bcc	381a84 <__Stack_Size+0x381684>
     e80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e84:	00060213 	andeq	r0, r6, r3, lsl r2
     e88:	00341900 	eorseq	r1, r4, r0, lsl #18
     e8c:	0b3a0803 	bleq	e82ea0 <__Stack_Size+0xe82aa0>
     e90:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e94:	00000602 	andeq	r0, r0, r2, lsl #12
     e98:	3f012e1a 	svccc	0x00012e1a
     e9c:	3a0e030c 	bcc	381ad4 <__Stack_Size+0x3816d4>
     ea0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ea4:	1201110c 	andne	r1, r1, #3
     ea8:	970a4001 	strls	r4, [sl, -r1]
     eac:	13010c42 	movwne	r0, #7234	; 0x1c42
     eb0:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
     eb4:	030c3f01 	movweq	r3, #52993	; 0xcf01
     eb8:	3b0b3a0e 	blcc	2cf6f8 <__Stack_Size+0x2cf2f8>
     ebc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     ec0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ec4:	970a4001 	strls	r4, [sl, -r1]
     ec8:	13010c42 	movwne	r0, #7234	; 0x1c42
     ecc:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     ed0:	030c3f01 	movweq	r3, #52993	; 0xcf01
     ed4:	3b0b3a0e 	blcc	2cf714 <__Stack_Size+0x2cf314>
     ed8:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
     edc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ee0:	970a4001 	strls	r4, [sl, -r1]
     ee4:	13010c42 	movwne	r0, #7234	; 0x1c42
     ee8:	051d0000 	ldreq	r0, [sp, #-0]
     eec:	3a0e0300 	bcc	381af4 <__Stack_Size+0x3816f4>
     ef0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ef4:	00060213 	andeq	r0, r6, r3, lsl r2
     ef8:	00051e00 	andeq	r1, r5, r0, lsl #28
     efc:	0b3a0e03 	bleq	e84710 <__Stack_Size+0xe84310>
     f00:	1349053b 	movtne	r0, #38203	; 0x953b
     f04:	00000a02 	andeq	r0, r0, r2, lsl #20
     f08:	0300341f 	movweq	r3, #1055	; 0x41f
     f0c:	3b0b3a0e 	blcc	2cf74c <__Stack_Size+0x2cf34c>
     f10:	02134905 	andseq	r4, r3, #81920	; 0x14000
     f14:	20000006 	andcs	r0, r0, r6
     f18:	0c3f012e 	ldfeqs	f0, [pc], #-184	; e68 <__Stack_Size+0xa68>
     f1c:	0b3a0e03 	bleq	e84730 <__Stack_Size+0xe84330>
     f20:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
     f24:	01120111 	tsteq	r2, r1, lsl r1
     f28:	42970a40 	addsmi	r0, r7, #262144	; 0x40000
     f2c:	0013010c 	andseq	r0, r3, ip, lsl #2
     f30:	00342100 	eorseq	r2, r4, r0, lsl #2
     f34:	0b3a0803 	bleq	e82f48 <__Stack_Size+0xe82b48>
     f38:	1349053b 	movtne	r0, #38203	; 0x953b
     f3c:	00000602 	andeq	r0, r0, r2, lsl #12
     f40:	3f012e22 	svccc	0x00012e22
     f44:	3a0e030c 	bcc	381b7c <__Stack_Size+0x38177c>
     f48:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     f4c:	1201110c 	andne	r1, r1, #3
     f50:	97064001 	strls	r4, [r6, -r1]
     f54:	13010c42 	movwne	r0, #7234	; 0x1c42
     f58:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
     f5c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     f60:	3b0b3a0e 	blcc	2cf7a0 <__Stack_Size+0x2cf3a0>
     f64:	3c0c2705 	stccc	7, cr2, [ip], {5}
     f68:	2400000c 	strcs	r0, [r0], #-12
     f6c:	13490005 	movtne	r0, #36869	; 0x9005
     f70:	01000000 	mrseq	r0, (UNDEF: 0)
     f74:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     f78:	0e030b13 	vmoveq.32	d3[0], r0
     f7c:	01110e1b 	tsteq	r1, fp, lsl lr
     f80:	06100112 			; <UNDEFINED> instruction: 0x06100112
     f84:	24020000 	strcs	r0, [r2], #-0
     f88:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     f8c:	000e030b 	andeq	r0, lr, fp, lsl #6
     f90:	00240300 	eoreq	r0, r4, r0, lsl #6
     f94:	0b3e0b0b 	bleq	f83bc8 <__Stack_Size+0xf837c8>
     f98:	00000803 	andeq	r0, r0, r3, lsl #16
     f9c:	03001604 	movweq	r1, #1540	; 0x604
     fa0:	3b0b3a08 	blcc	2cf7c8 <__Stack_Size+0x2cf3c8>
     fa4:	0013490b 	andseq	r4, r3, fp, lsl #18
     fa8:	00160500 	andseq	r0, r6, r0, lsl #10
     fac:	0b3a0e03 	bleq	e847c0 <__Stack_Size+0xe843c0>
     fb0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     fb4:	35060000 	strcc	r0, [r6, #-0]
     fb8:	00134900 	andseq	r4, r3, r0, lsl #18
     fbc:	00260700 	eoreq	r0, r6, r0, lsl #14
     fc0:	00001349 	andeq	r1, r0, r9, asr #6
     fc4:	0b010408 	bleq	41fec <__Stack_Size+0x41bec>
     fc8:	3b0b3a0b 	blcc	2cf7fc <__Stack_Size+0x2cf3fc>
     fcc:	0013010b 	andseq	r0, r3, fp, lsl #2
     fd0:	00280900 	eoreq	r0, r8, r0, lsl #18
     fd4:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     fd8:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
     fdc:	1c080300 	stcne	3, cr0, [r8], {-0}
     fe0:	0b00000d 	bleq	101c <__Stack_Size+0xc1c>
     fe4:	050b0113 	streq	r0, [fp, #-275]	; 0x113
     fe8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     fec:	00001301 	andeq	r1, r0, r1, lsl #6
     ff0:	03000d0c 	movweq	r0, #3340	; 0xd0c
     ff4:	3b0b3a0e 	blcc	2cf834 <__Stack_Size+0x2cf434>
     ff8:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     ffc:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    1000:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1004:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1008:	0a381349 	beq	e05d34 <__Stack_Size+0xe05934>
    100c:	010e0000 	mrseq	r0, (UNDEF: 14)
    1010:	01134901 	tsteq	r3, r1, lsl #18
    1014:	0f000013 	svceq	0x00000013
    1018:	13490021 	movtne	r0, #36897	; 0x9021
    101c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1020:	03001610 	movweq	r1, #1552	; 0x610
    1024:	3b0b3a0e 	blcc	2cf864 <__Stack_Size+0x2cf464>
    1028:	00134905 	andseq	r4, r3, r5, lsl #18
    102c:	01131100 	tsteq	r3, r0, lsl #2
    1030:	0b3a0b0b 	bleq	e83c64 <__Stack_Size+0xe83864>
    1034:	1301053b 	movwne	r0, #5435	; 0x153b
    1038:	13120000 	tstne	r2, #0
    103c:	3a0b0b01 	bcc	2c3c48 <__Stack_Size+0x2c3848>
    1040:	010b3b0b 	tsteq	fp, fp, lsl #22
    1044:	13000013 	movwne	r0, #19
    1048:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    104c:	0b3b0b3a 	bleq	ec3d3c <__Stack_Size+0xec393c>
    1050:	0a381349 	beq	e05d7c <__Stack_Size+0xe0597c>
    1054:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    1058:	030c3f01 	movweq	r3, #52993	; 0xcf01
    105c:	3b0b3a0e 	blcc	2cf89c <__Stack_Size+0x2cf49c>
    1060:	110c270b 	tstne	ip, fp, lsl #14
    1064:	40011201 	andmi	r1, r1, r1, lsl #4
    1068:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
    106c:	00001301 	andeq	r1, r0, r1, lsl #6
    1070:	03003415 	movweq	r3, #1045	; 0x415
    1074:	3b0b3a0e 	blcc	2cf8b4 <__Stack_Size+0x2cf4b4>
    1078:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    107c:	16000006 	strne	r0, [r0], -r6
    1080:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1084:	0b3b0b3a 	bleq	ec3d74 <__Stack_Size+0xec3974>
    1088:	06021349 	streq	r1, [r2], -r9, asr #6
    108c:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    1090:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1094:	3b0b3a0e 	blcc	2cf8d4 <__Stack_Size+0x2cf4d4>
    1098:	110c270b 	tstne	ip, fp, lsl #14
    109c:	40011201 	andmi	r1, r1, r1, lsl #4
    10a0:	0c429706 	mcrreq	7, 0, r9, r2, cr6
    10a4:	00001301 	andeq	r1, r0, r1, lsl #6
    10a8:	0b000f18 	bleq	4d10 <__Stack_Size+0x4910>
    10ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    10b0:	00051900 	andeq	r1, r5, r0, lsl #18
    10b4:	0b3a0e03 	bleq	e848c8 <__Stack_Size+0xe844c8>
    10b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    10bc:	00000a02 	andeq	r0, r0, r2, lsl #20
    10c0:	0182891a 	orreq	r8, r2, sl, lsl r9
    10c4:	95011100 	strls	r1, [r1, #-256]	; 0x100
    10c8:	13310c42 	teqne	r1, #16896	; 0x4200
    10cc:	891b0000 	ldmdbhi	fp, {}	; <UNPREDICTABLE>
    10d0:	11010182 	smlabbne	r1, r2, r1, r0
    10d4:	0c429501 	cfstr64eq	mvdx9, [r2], {1}
    10d8:	00001331 	andeq	r1, r0, r1, lsr r3
    10dc:	01828a1c 	orreq	r8, r2, ip, lsl sl
    10e0:	910a0200 	mrsls	r0, R10_fiq
    10e4:	00000a42 	andeq	r0, r0, r2, asr #20
    10e8:	3f012e1d 	svccc	0x00012e1d
    10ec:	3a0e030c 	bcc	381d24 <__Stack_Size+0x381924>
    10f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10f4:	1113490c 	tstne	r3, ip, lsl #18
    10f8:	40011201 	andmi	r1, r1, r1, lsl #4
    10fc:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
    1100:	00001301 	andeq	r1, r0, r1, lsl #6
    1104:	3f002e1e 	svccc	0x00002e1e
    1108:	3a0e030c 	bcc	381d40 <__Stack_Size+0x381940>
    110c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1110:	1113490c 	tstne	r3, ip, lsl #18
    1114:	40011201 	andmi	r1, r1, r1, lsl #4
    1118:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
    111c:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    1120:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1124:	3b0b3a0e 	blcc	2cf964 <__Stack_Size+0x2cf564>
    1128:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    112c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1130:	970a4001 	strls	r4, [sl, -r1]
    1134:	13010c42 	movwne	r0, #7234	; 0x1c42
    1138:	05200000 	streq	r0, [r0, #-0]!
    113c:	3a0e0300 	bcc	381d44 <__Stack_Size+0x381944>
    1140:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1144:	00060213 	andeq	r0, r6, r3, lsl r2
    1148:	00342100 	eorseq	r2, r4, r0, lsl #2
    114c:	0b3a0e03 	bleq	e84960 <__Stack_Size+0xe84560>
    1150:	1349053b 	movtne	r0, #38203	; 0x953b
    1154:	00000602 	andeq	r0, r0, r2, lsl #12
    1158:	03003422 	movweq	r3, #1058	; 0x422
    115c:	3b0b3a08 	blcc	2cf984 <__Stack_Size+0x2cf584>
    1160:	02134905 	andseq	r4, r3, #81920	; 0x14000
    1164:	23000006 	movwcs	r0, #6
    1168:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 10b8 <__Stack_Size+0xcb8>
    116c:	0b3a0e03 	bleq	e84980 <__Stack_Size+0xe84580>
    1170:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    1174:	01120111 	tsteq	r2, r1, lsl r1
    1178:	42970a40 	addsmi	r0, r7, #262144	; 0x40000
    117c:	0013010c 	andseq	r0, r3, ip, lsl #2
    1180:	00052400 	andeq	r2, r5, r0, lsl #8
    1184:	0b3a0e03 	bleq	e84998 <__Stack_Size+0xe84598>
    1188:	1349053b 	movtne	r0, #38203	; 0x953b
    118c:	00000a02 	andeq	r0, r0, r2, lsl #20
    1190:	3f002e25 	svccc	0x00002e25
    1194:	3a0e030c 	bcc	381dcc <__Stack_Size+0x3819cc>
    1198:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    119c:	1201110c 	andne	r1, r1, #3
    11a0:	970a4001 	strls	r4, [sl, -r1]
    11a4:	00000c42 	andeq	r0, r0, r2, asr #24
    11a8:	3f012e26 	svccc	0x00012e26
    11ac:	3a0e030c 	bcc	381de4 <__Stack_Size+0x3819e4>
    11b0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    11b4:	1201110c 	andne	r1, r1, #3
    11b8:	97064001 	strls	r4, [r6, -r1]
    11bc:	13010c42 	movwne	r0, #7234	; 0x1c42
    11c0:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
    11c4:	030c3f00 	movweq	r3, #52992	; 0xcf00
    11c8:	3b0b3a0e 	blcc	2cfa08 <__Stack_Size+0x2cf608>
    11cc:	3c0c270b 	stccc	7, cr2, [ip], {11}
    11d0:	2800000c 	stmdacs	r0, {r2, r3}
    11d4:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1124 <__Stack_Size+0xd24>
    11d8:	0b3a0e03 	bleq	e849ec <__Stack_Size+0xe845ec>
    11dc:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    11e0:	13010c3c 	movwne	r0, #7228	; 0x1c3c
    11e4:	05290000 	streq	r0, [r9, #-0]!
    11e8:	00134900 	andseq	r4, r3, r0, lsl #18
    11ec:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    11f0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    11f4:	0b3b0b3a 	bleq	ec3ee4 <__Stack_Size+0xec3ae4>
    11f8:	13490c27 	movtne	r0, #39975	; 0x9c27
    11fc:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1200:	01110100 	tsteq	r1, r0, lsl #2
    1204:	0b130e25 	bleq	4c4aa0 <__Stack_Size+0x4c46a0>
    1208:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    120c:	01120111 	tsteq	r2, r1, lsl r1
    1210:	00000610 	andeq	r0, r0, r0, lsl r6
    1214:	0b002402 	bleq	a224 <__Stack_Size+0x9e24>
    1218:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    121c:	0300000e 	movweq	r0, #14
    1220:	0b0b0024 	bleq	2c12b8 <__Stack_Size+0x2c0eb8>
    1224:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1228:	16040000 	strne	r0, [r4], -r0
    122c:	3a080300 	bcc	201e34 <__Stack_Size+0x201a34>
    1230:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1234:	05000013 	streq	r0, [r0, #-19]
    1238:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    123c:	0b3b0b3a 	bleq	ec3f2c <__Stack_Size+0xec3b2c>
    1240:	00001349 	andeq	r1, r0, r9, asr #6
    1244:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1248:	07000013 	smladeq	r0, r3, r0, r0
    124c:	0b0b0104 	bleq	2c1664 <__Stack_Size+0x2c1264>
    1250:	0b3b0b3a 	bleq	ec3f40 <__Stack_Size+0xec3b40>
    1254:	00001301 	andeq	r1, r0, r1, lsl #6
    1258:	03002808 	movweq	r2, #2056	; 0x808
    125c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1260:	00280900 	eoreq	r0, r8, r0, lsl #18
    1264:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    1268:	130a0000 	movwne	r0, #40960	; 0xa000
    126c:	3a0b0b01 	bcc	2c3e78 <__Stack_Size+0x2c3a78>
    1270:	01053b0b 	tsteq	r5, fp, lsl #22
    1274:	0b000013 	bleq	12c8 <__Stack_Size+0xec8>
    1278:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    127c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1280:	0a381349 	beq	e05fac <__Stack_Size+0xe05bac>
    1284:	160c0000 	strne	r0, [ip], -r0
    1288:	3a0e0300 	bcc	381e90 <__Stack_Size+0x381a90>
    128c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1290:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1294:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 11e4 <__Stack_Size+0xde4>
    1298:	0b3a0e03 	bleq	e84aac <__Stack_Size+0xe846ac>
    129c:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    12a0:	01120111 	tsteq	r2, r1, lsl r1
    12a4:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
    12a8:	0013010c 	andseq	r0, r3, ip, lsl #2
    12ac:	82890e00 	addhi	r0, r9, #0
    12b0:	01110101 	tsteq	r1, r1, lsl #2
    12b4:	13011331 	movwne	r1, #4913	; 0x1331
    12b8:	8a0f0000 	bhi	3c12c0 <__Stack_Size+0x3c0ec0>
    12bc:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    12c0:	0a42910a 	beq	10a56f0 <__Stack_Size+0x10a52f0>
    12c4:	89100000 	ldmdbhi	r0, {}	; <UNPREDICTABLE>
    12c8:	11010182 	smlabbne	r1, r2, r1, r0
    12cc:	0c429501 	cfstr64eq	mvdx9, [r2], {1}
    12d0:	00001331 	andeq	r1, r0, r1, lsr r3
    12d4:	3f012e11 	svccc	0x00012e11
    12d8:	3a0e030c 	bcc	381f10 <__Stack_Size+0x381b10>
    12dc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    12e0:	1201110c 	andne	r1, r1, #3
    12e4:	970a4001 	strls	r4, [sl, -r1]
    12e8:	13010c42 	movwne	r0, #7234	; 0x1c42
    12ec:	05120000 	ldreq	r0, [r2, #-0]
    12f0:	3a0e0300 	bcc	381ef8 <__Stack_Size+0x381af8>
    12f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12f8:	000a0213 	andeq	r0, sl, r3, lsl r2
    12fc:	00051300 	andeq	r1, r5, r0, lsl #6
    1300:	0b3a0e03 	bleq	e84b14 <__Stack_Size+0xe84714>
    1304:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1308:	00000602 	andeq	r0, r0, r2, lsl #12
    130c:	03003414 	movweq	r3, #1044	; 0x414
    1310:	3b0b3a0e 	blcc	2cfb50 <__Stack_Size+0x2cf750>
    1314:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1318:	15000006 	strne	r0, [r0, #-6]
    131c:	00018289 	andeq	r8, r1, r9, lsl #5
    1320:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    1324:	0013310c 	andseq	r3, r3, ip, lsl #2
    1328:	012e1600 	teqeq	lr, r0, lsl #12
    132c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1330:	0b3b0b3a 	bleq	ec4020 <__Stack_Size+0xec3c20>
    1334:	13490c27 	movtne	r0, #39975	; 0x9c27
    1338:	01120111 	tsteq	r2, r1, lsl r1
    133c:	42970a40 	addsmi	r0, r7, #262144	; 0x40000
    1340:	0013010c 	andseq	r0, r3, ip, lsl #2
    1344:	012e1700 	teqeq	lr, r0, lsl #14
    1348:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    134c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1350:	01110c27 	tsteq	r1, r7, lsr #24
    1354:	0a400112 	beq	10017a4 <__Stack_Size+0x10013a4>
    1358:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
    135c:	18000013 	stmdane	r0, {r0, r1, r4}
    1360:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1364:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1368:	06021349 	streq	r1, [r2], -r9, asr #6
    136c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1370:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1374:	3b0b3a0e 	blcc	2cfbb4 <__Stack_Size+0x2cf7b4>
    1378:	3c0c2705 	stccc	7, cr2, [ip], {5}
    137c:	0013010c 	andseq	r0, r3, ip, lsl #2
    1380:	00051a00 	andeq	r1, r5, r0, lsl #20
    1384:	00001349 	andeq	r1, r0, r9, asr #6
    1388:	3f002e1b 	svccc	0x00002e1b
    138c:	3a0e030c 	bcc	381fc4 <__Stack_Size+0x381bc4>
    1390:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1394:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1398:	11010000 	mrsne	r0, (UNDEF: 1)
    139c:	130e2501 	movwne	r2, #58625	; 0xe501
    13a0:	1b0e030b 	blne	381fd4 <__Stack_Size+0x381bd4>
    13a4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    13a8:	00061001 	andeq	r1, r6, r1
    13ac:	00240200 	eoreq	r0, r4, r0, lsl #4
    13b0:	0b3e0b0b 	bleq	f83fe4 <__Stack_Size+0xf83be4>
    13b4:	00000e03 	andeq	r0, r0, r3, lsl #28
    13b8:	0b002403 	bleq	a3cc <__Stack_Size+0x9fcc>
    13bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    13c0:	04000008 	streq	r0, [r0], #-8
    13c4:	08030016 	stmdaeq	r3, {r1, r2, r4}
    13c8:	0b3b0b3a 	bleq	ec40b8 <__Stack_Size+0xec3cb8>
    13cc:	00001349 	andeq	r1, r0, r9, asr #6
    13d0:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    13d4:	06000013 			; <UNDEFINED> instruction: 0x06000013
    13d8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    13dc:	0b3b0b3a 	bleq	ec40cc <__Stack_Size+0xec3ccc>
    13e0:	00001349 	andeq	r1, r0, r9, asr #6
    13e4:	49003507 	stmdbmi	r0, {r0, r1, r2, r8, sl, ip, sp}
    13e8:	08000013 	stmdaeq	r0, {r0, r1, r4}
    13ec:	0b0b0104 	bleq	2c1804 <__Stack_Size+0x2c1404>
    13f0:	0b3b0b3a 	bleq	ec40e0 <__Stack_Size+0xec3ce0>
    13f4:	00001301 	andeq	r1, r0, r1, lsl #6
    13f8:	03002809 	movweq	r2, #2057	; 0x809
    13fc:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    1400:	00280a00 	eoreq	r0, r8, r0, lsl #20
    1404:	0d1c0803 	ldceq	8, cr0, [ip, #-12]
    1408:	130b0000 	movwne	r0, #45056	; 0xb000
    140c:	3a0b0b01 	bcc	2c4018 <__Stack_Size+0x2c3c18>
    1410:	01053b0b 	tsteq	r5, fp, lsl #22
    1414:	0c000013 	stceq	0, cr0, [r0], {19}
    1418:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    141c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1420:	0a381349 	beq	e0614c <__Stack_Size+0xe05d4c>
    1424:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    1428:	3a0e0300 	bcc	382030 <__Stack_Size+0x381c30>
    142c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1430:	000a3813 	andeq	r3, sl, r3, lsl r8
    1434:	00160e00 	andseq	r0, r6, r0, lsl #28
    1438:	0b3a0e03 	bleq	e84c4c <__Stack_Size+0xe8484c>
    143c:	1349053b 	movtne	r0, #38203	; 0x953b
    1440:	130f0000 	movwne	r0, #61440	; 0xf000
    1444:	3a0b0b01 	bcc	2c4050 <__Stack_Size+0x2c3c50>
    1448:	010b3b0b 	tsteq	fp, fp, lsl #22
    144c:	10000013 	andne	r0, r0, r3, lsl r0
    1450:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1454:	0b3b0b3a 	bleq	ec4144 <__Stack_Size+0xec3d44>
    1458:	0a381349 	beq	e06184 <__Stack_Size+0xe05d84>
    145c:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    1460:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1464:	3b0b3a0e 	blcc	2cfca4 <__Stack_Size+0x2cf8a4>
    1468:	110c270b 	tstne	ip, fp, lsl #14
    146c:	40011201 	andmi	r1, r1, r1, lsl #4
    1470:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
    1474:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
    1478:	030c3f01 	movweq	r3, #52993	; 0xcf01
    147c:	3b0b3a0e 	blcc	2cfcbc <__Stack_Size+0x2cf8bc>
    1480:	110c270b 	tstne	ip, fp, lsl #14
    1484:	40011201 	andmi	r1, r1, r1, lsl #4
    1488:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
    148c:	00001301 	andeq	r1, r0, r1, lsl #6
    1490:	03000513 	movweq	r0, #1299	; 0x513
    1494:	3b0b3a0e 	blcc	2cfcd4 <__Stack_Size+0x2cf8d4>
    1498:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    149c:	14000006 	strne	r0, [r0], #-6
    14a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    14a4:	0b3b0b3a 	bleq	ec4194 <__Stack_Size+0xec3d94>
    14a8:	06021349 	streq	r1, [r2], -r9, asr #6
    14ac:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    14b0:	030c3f01 	movweq	r3, #52993	; 0xcf01
    14b4:	3b0b3a0e 	blcc	2cfcf4 <__Stack_Size+0x2cf8f4>
    14b8:	110c2705 	tstne	ip, r5, lsl #14
    14bc:	40011201 	andmi	r1, r1, r1, lsl #4
    14c0:	0c42970a 	mcrreq	7, 0, r9, r2, cr10
    14c4:	00001301 	andeq	r1, r0, r1, lsl #6
    14c8:	03000516 	movweq	r0, #1302	; 0x516
    14cc:	3b0b3a0e 	blcc	2cfd0c <__Stack_Size+0x2cf90c>
    14d0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    14d4:	1700000a 	strne	r0, [r0, -sl]
    14d8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    14dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    14e0:	06021349 	streq	r1, [r2], -r9, asr #6
    14e4:	34180000 	ldrcc	r0, [r8], #-0
    14e8:	3a0e0300 	bcc	3820f0 <__Stack_Size+0x381cf0>
    14ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14f0:	00060213 	andeq	r0, r6, r3, lsl r2
    14f4:	002e1900 	eoreq	r1, lr, r0, lsl #18
    14f8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    14fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1500:	13490c27 	movtne	r0, #39975	; 0x9c27
    1504:	01120111 	tsteq	r2, r1, lsl r1
    1508:	42970a40 	addsmi	r0, r7, #262144	; 0x40000
    150c:	1a00000c 	bne	1544 <__Stack_Size+0x1144>
    1510:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1460 <__Stack_Size+0x1060>
    1514:	0b3a0e03 	bleq	e84d28 <__Stack_Size+0xe84928>
    1518:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    151c:	01120111 	tsteq	r2, r1, lsl r1
    1520:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
    1524:	0013010c 	andseq	r0, r3, ip, lsl #2
    1528:	00341b00 	eorseq	r1, r4, r0, lsl #22
    152c:	0b3a0803 	bleq	e83540 <__Stack_Size+0xe83140>
    1530:	1349053b 	movtne	r0, #38203	; 0x953b
    1534:	00000602 	andeq	r0, r0, r2, lsl #12
    1538:	0b000f1c 	bleq	51b0 <__Stack_Size+0x4db0>
    153c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1540:	012e1d00 	teqeq	lr, r0, lsl #26
    1544:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1548:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    154c:	13490c27 	movtne	r0, #39975	; 0x9c27
    1550:	01120111 	tsteq	r2, r1, lsl r1
    1554:	42970a40 	addsmi	r0, r7, #262144	; 0x40000
    1558:	0013010c 	andseq	r0, r3, ip, lsl #2
    155c:	012e1e00 	teqeq	lr, r0, lsl #28
    1560:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1564:	0b3b0b3a 	bleq	ec4254 <__Stack_Size+0xec3e54>
    1568:	13490c27 	movtne	r0, #39975	; 0x9c27
    156c:	01120111 	tsteq	r2, r1, lsl r1
    1570:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
    1574:	0013010c 	andseq	r0, r3, ip, lsl #2
    1578:	82891f00 	addhi	r1, r9, #0
    157c:	01110101 	tsteq	r1, r1, lsl #2
    1580:	13011331 	movwne	r1, #4913	; 0x1331
    1584:	8a200000 	bhi	80158c <__Stack_Size+0x80118c>
    1588:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    158c:	0a42910a 	beq	10a59bc <__Stack_Size+0x10a55bc>
    1590:	89210000 	stmdbhi	r1!, {}	; <UNPREDICTABLE>
    1594:	11010182 	smlabbne	r1, r2, r1, r0
    1598:	00133101 	andseq	r3, r3, r1, lsl #2
    159c:	002e2200 	eoreq	r2, lr, r0, lsl #4
    15a0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    15a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    15a8:	01110c27 	tsteq	r1, r7, lsr #24
    15ac:	0a400112 	beq	10019fc <__Stack_Size+0x10015fc>
    15b0:	000c4297 	muleq	ip, r7, r2
    15b4:	01012300 	mrseq	r2, SP_irq
    15b8:	13011349 	movwne	r1, #4937	; 0x1349
    15bc:	21240000 	teqcs	r4, r0
    15c0:	2f134900 	svccs	0x00134900
    15c4:	2500000b 	strcs	r0, [r0, #-11]
    15c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    15cc:	0b3b0b3a 	bleq	ec42bc <__Stack_Size+0xec3ebc>
    15d0:	0a021349 	beq	862fc <__Stack_Size+0x85efc>
    15d4:	01000000 	mrseq	r0, (UNDEF: 0)
    15d8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    15dc:	0e030b13 	vmoveq.32	d3[0], r0
    15e0:	01110e1b 	tsteq	r1, fp, lsl lr
    15e4:	06100112 			; <UNDEFINED> instruction: 0x06100112
    15e8:	24020000 	strcs	r0, [r2], #-0
    15ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    15f0:	000e030b 	andeq	r0, lr, fp, lsl #6
    15f4:	00240300 	eoreq	r0, r4, r0, lsl #6
    15f8:	0b3e0b0b 	bleq	f8422c <__Stack_Size+0xf83e2c>
    15fc:	00000803 	andeq	r0, r0, r3, lsl #16
    1600:	03001604 	movweq	r1, #1540	; 0x604
    1604:	3b0b3a08 	blcc	2cfe2c <__Stack_Size+0x2cfa2c>
    1608:	0013490b 	andseq	r4, r3, fp, lsl #18
    160c:	00160500 	andseq	r0, r6, r0, lsl #10
    1610:	0b3a0e03 	bleq	e84e24 <__Stack_Size+0xe84a24>
    1614:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1618:	35060000 	strcc	r0, [r6, #-0]
    161c:	00134900 	andseq	r4, r3, r0, lsl #18
    1620:	00260700 	eoreq	r0, r6, r0, lsl #14
    1624:	00001349 	andeq	r1, r0, r9, asr #6
    1628:	0b010408 	bleq	42650 <__Stack_Size+0x42250>
    162c:	3b0b3a0b 	blcc	2cfe60 <__Stack_Size+0x2cfa60>
    1630:	0013010b 	andseq	r0, r3, fp, lsl #2
    1634:	00280900 	eoreq	r0, r8, r0, lsl #18
    1638:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    163c:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
    1640:	1c080300 	stcne	3, cr0, [r8], {-0}
    1644:	0b00000d 	bleq	1680 <__Stack_Size+0x1280>
    1648:	0b0b0113 	bleq	2c1a9c <__Stack_Size+0x2c169c>
    164c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1650:	00001301 	andeq	r1, r0, r1, lsl #6
    1654:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1658:	3b0b3a0e 	blcc	2cfe98 <__Stack_Size+0x2cfa98>
    165c:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    1660:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    1664:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    1668:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    166c:	0a381349 	beq	e06398 <__Stack_Size+0xe05f98>
    1670:	160e0000 	strne	r0, [lr], -r0
    1674:	3a0e0300 	bcc	38227c <__Stack_Size+0x381e7c>
    1678:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    167c:	0f000013 	svceq	0x00000013
    1680:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 15d0 <__Stack_Size+0x11d0>
    1684:	0b3a0e03 	bleq	e84e98 <__Stack_Size+0xe84a98>
    1688:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    168c:	01120111 	tsteq	r2, r1, lsl r1
    1690:	42970a40 	addsmi	r0, r7, #262144	; 0x40000
    1694:	0013010c 	andseq	r0, r3, ip, lsl #2
    1698:	00051000 	andeq	r1, r5, r0
    169c:	0b3a0e03 	bleq	e84eb0 <__Stack_Size+0xe84ab0>
    16a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    16a4:	00000a02 	andeq	r0, r0, r2, lsl #20
    16a8:	03000511 	movweq	r0, #1297	; 0x511
    16ac:	3b0b3a0e 	blcc	2cfeec <__Stack_Size+0x2cfaec>
    16b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    16b4:	12000006 	andne	r0, r0, #6
    16b8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 1608 <__Stack_Size+0x1208>
    16bc:	0b3a0e03 	bleq	e84ed0 <__Stack_Size+0xe84ad0>
    16c0:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    16c4:	01111349 	tsteq	r1, r9, asr #6
    16c8:	0a400112 	beq	1001b18 <__Stack_Size+0x1001718>
    16cc:	000c4297 	muleq	ip, r7, r2
    16d0:	012e1300 	teqeq	lr, r0, lsl #6
    16d4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    16d8:	0b3b0b3a 	bleq	ec43c8 <__Stack_Size+0xec3fc8>
    16dc:	13490c27 	movtne	r0, #39975	; 0x9c27
    16e0:	01120111 	tsteq	r2, r1, lsl r1
    16e4:	42970a40 	addsmi	r0, r7, #262144	; 0x40000
    16e8:	1400000c 	strne	r0, [r0], #-12
    16ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    16f0:	0b3b0b3a 	bleq	ec43e0 <__Stack_Size+0xec3fe0>
    16f4:	06021349 	streq	r1, [r2], -r9, asr #6
    16f8:	34150000 	ldrcc	r0, [r5], #-0
    16fc:	3a080300 	bcc	202304 <__Stack_Size+0x201f04>
    1700:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1704:	00060213 	andeq	r0, r6, r3, lsl r2
    1708:	11010000 	mrsne	r0, (UNDEF: 1)
    170c:	130e2501 	movwne	r2, #58625	; 0xe501
    1710:	1b0e030b 	blne	382344 <__Stack_Size+0x381f44>
    1714:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1718:	00061001 	andeq	r1, r6, r1
    171c:	00240200 	eoreq	r0, r4, r0, lsl #4
    1720:	0b3e0b0b 	bleq	f84354 <__Stack_Size+0xf83f54>
    1724:	00000e03 	andeq	r0, r0, r3, lsl #28
    1728:	0b002403 	bleq	a73c <__Stack_Size+0xa33c>
    172c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1730:	04000008 	streq	r0, [r0], #-8
    1734:	08030016 	stmdaeq	r3, {r1, r2, r4}
    1738:	0b3b0b3a 	bleq	ec4428 <__Stack_Size+0xec4028>
    173c:	00001349 	andeq	r1, r0, r9, asr #6
    1740:	03001605 	movweq	r1, #1541	; 0x605
    1744:	3b0b3a0e 	blcc	2cff84 <__Stack_Size+0x2cfb84>
    1748:	0013490b 	andseq	r4, r3, fp, lsl #18
    174c:	00350600 	eorseq	r0, r5, r0, lsl #12
    1750:	00001349 	andeq	r1, r0, r9, asr #6
    1754:	0b010407 	bleq	42778 <__Stack_Size+0x42378>
    1758:	3b0b3a0b 	blcc	2cff8c <__Stack_Size+0x2cfb8c>
    175c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1760:	00280800 	eoreq	r0, r8, r0, lsl #16
    1764:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    1768:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
    176c:	1c080300 	stcne	3, cr0, [r8], {-0}
    1770:	0a00000d 	beq	17ac <__Stack_Size+0x13ac>
    1774:	0b0b0113 	bleq	2c1bc8 <__Stack_Size+0x2c17c8>
    1778:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    177c:	00001301 	andeq	r1, r0, r1, lsl #6
    1780:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1784:	3b0b3a08 	blcc	2cffac <__Stack_Size+0x2cfbac>
    1788:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
    178c:	0c00000a 	stceq	0, cr0, [r0], {10}
    1790:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1794:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1798:	0a381349 	beq	e064c4 <__Stack_Size+0xe060c4>
    179c:	160d0000 	strne	r0, [sp], -r0
    17a0:	3a0e0300 	bcc	3823a8 <__Stack_Size+0x381fa8>
    17a4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17a8:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    17ac:	0b0b0113 	bleq	2c1c00 <__Stack_Size+0x2c1800>
    17b0:	0b3b0b3a 	bleq	ec44a0 <__Stack_Size+0xec40a0>
    17b4:	00001301 	andeq	r1, r0, r1, lsl #6
    17b8:	03000d0f 	movweq	r0, #3343	; 0xd0f
    17bc:	3b0b3a0e 	blcc	2cfffc <__Stack_Size+0x2cfbfc>
    17c0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    17c4:	1000000a 	andne	r0, r0, sl
    17c8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1718 <__Stack_Size+0x1318>
    17cc:	0b3a0e03 	bleq	e84fe0 <__Stack_Size+0xe84be0>
    17d0:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    17d4:	01120111 	tsteq	r2, r1, lsl r1
    17d8:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
    17dc:	0013010c 	andseq	r0, r3, ip, lsl #2
    17e0:	00051100 	andeq	r1, r5, r0, lsl #2
    17e4:	0b3a0e03 	bleq	e84ff8 <__Stack_Size+0xe84bf8>
    17e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    17ec:	00000602 	andeq	r0, r0, r2, lsl #12
    17f0:	01828912 	orreq	r8, r2, r2, lsl r9
    17f4:	31011101 	tstcc	r1, r1, lsl #2
    17f8:	00130113 	andseq	r0, r3, r3, lsl r1
    17fc:	828a1300 	addhi	r1, sl, #0
    1800:	0a020001 	beq	8180c <__Stack_Size+0x8140c>
    1804:	000a4291 	muleq	sl, r1, r2
    1808:	82891400 	addhi	r1, r9, #0
    180c:	01110101 	tsteq	r1, r1, lsl #2
    1810:	310c4295 			; <UNDEFINED> instruction: 0x310c4295
    1814:	00130113 	andseq	r0, r3, r3, lsl r1
    1818:	82891500 	addhi	r1, r9, #0
    181c:	01110101 	tsteq	r1, r1, lsl #2
    1820:	310c4295 			; <UNDEFINED> instruction: 0x310c4295
    1824:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1828:	0b0b000f 	bleq	2c186c <__Stack_Size+0x2c146c>
    182c:	00001349 	andeq	r1, r0, r9, asr #6
    1830:	03003417 	movweq	r3, #1047	; 0x417
    1834:	3b0b3a0e 	blcc	2d0074 <__Stack_Size+0x2cfc74>
    1838:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    183c:	18000006 	stmdane	r0, {r1, r2}
    1840:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1844:	0b3b0b3a 	bleq	ec4534 <__Stack_Size+0xec4134>
    1848:	0a021349 	beq	86574 <__Stack_Size+0x86174>
    184c:	89190000 	ldmdbhi	r9, {}	; <UNPREDICTABLE>
    1850:	11010182 	smlabbne	r1, r2, r1, r0
    1854:	00133101 	andseq	r3, r3, r1, lsl #2
    1858:	012e1a00 	teqeq	lr, r0, lsl #20
    185c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1860:	0b3b0b3a 	bleq	ec4550 <__Stack_Size+0xec4150>
    1864:	01110c27 	tsteq	r1, r7, lsr #24
    1868:	0a400112 	beq	1001cb8 <__Stack_Size+0x10018b8>
    186c:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
    1870:	1b000013 	blne	18c4 <__Stack_Size+0x14c4>
    1874:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1878:	0b3b0b3a 	bleq	ec4568 <__Stack_Size+0xec4168>
    187c:	0a021349 	beq	865a8 <__Stack_Size+0x861a8>
    1880:	341c0000 	ldrcc	r0, [ip], #-0
    1884:	3a0e0300 	bcc	38248c <__Stack_Size+0x38208c>
    1888:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    188c:	00060213 	andeq	r0, r6, r3, lsl r2
    1890:	012e1d00 	teqeq	lr, r0, lsl #26
    1894:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1898:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    189c:	01110c27 	tsteq	r1, r7, lsr #24
    18a0:	0a400112 	beq	1001cf0 <__Stack_Size+0x10018f0>
    18a4:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
    18a8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    18ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    18b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    18b4:	0a021349 	beq	865e0 <__Stack_Size+0x861e0>
    18b8:	051f0000 	ldreq	r0, [pc, #-0]	; 18c0 <__Stack_Size+0x14c0>
    18bc:	3a0e0300 	bcc	3824c4 <__Stack_Size+0x3820c4>
    18c0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18c4:	00060213 	andeq	r0, r6, r3, lsl r2
    18c8:	012e2000 	teqeq	lr, r0
    18cc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    18d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    18d4:	01110c27 	tsteq	r1, r7, lsr #24
    18d8:	06400112 			; <UNDEFINED> instruction: 0x06400112
    18dc:	010c4297 			; <UNDEFINED> instruction: 0x010c4297
    18e0:	21000013 	tstcs	r0, r3, lsl r0
    18e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    18e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    18ec:	0a021349 	beq	86618 <__Stack_Size+0x86218>
    18f0:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    18f4:	030c3f01 	movweq	r3, #52993	; 0xcf01
    18f8:	3b0b3a0e 	blcc	2d0138 <__Stack_Size+0x2cfd38>
    18fc:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    1900:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1904:	970a4001 	strls	r4, [sl, -r1]
    1908:	13010c42 	movwne	r0, #7234	; 0x1c42
    190c:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    1910:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1914:	3b0b3a0e 	blcc	2d0154 <__Stack_Size+0x2cfd54>
    1918:	490c2705 	stmdbmi	ip, {r0, r2, r8, r9, sl, sp}
    191c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1920:	97064001 	strls	r4, [r6, -r1]
    1924:	13010c42 	movwne	r0, #7234	; 0x1c42
    1928:	34240000 	strtcc	r0, [r4], #-0
    192c:	3a0e0300 	bcc	382534 <__Stack_Size+0x382134>
    1930:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1934:	25000013 	strcs	r0, [r0, #-19]
    1938:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1888 <__Stack_Size+0x1488>
    193c:	0b3a0e03 	bleq	e85150 <__Stack_Size+0xe84d50>
    1940:	0c27053b 	cfstr32eq	mvfx0, [r7], #-236	; 0xffffff14
    1944:	13010c3c 	movwne	r0, #7228	; 0x1c3c
    1948:	05260000 	streq	r0, [r6, #-0]!
    194c:	00134900 	andseq	r4, r3, r0, lsl #18
    1950:	11010000 	mrsne	r0, (UNDEF: 1)
    1954:	11061000 	mrsne	r1, (UNDEF: 6)
    1958:	03011201 	movweq	r1, #4609	; 0x1201
    195c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    1960:	00051308 	andeq	r1, r5, r8, lsl #6
    1964:	11010000 	mrsne	r0, (UNDEF: 1)
    1968:	130e2501 	movwne	r2, #58625	; 0xe501
    196c:	1b0e030b 	blne	3825a0 <__Stack_Size+0x3821a0>
    1970:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
    1974:	00061001 	andeq	r1, r6, r1
    1978:	00240200 	eoreq	r0, r4, r0, lsl #4
    197c:	0b3e0b0b 	bleq	f845b0 <__Stack_Size+0xf841b0>
    1980:	00000e03 	andeq	r0, r0, r3, lsl #28
    1984:	0b002403 	bleq	a998 <__Stack_Size+0xa598>
    1988:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    198c:	04000008 	streq	r0, [r0], #-8
    1990:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
    1994:	0f050000 	svceq	0x00050000
    1998:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    199c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    19a0:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 18f0 <__Stack_Size+0x14f0>
    19a4:	0b3a0e03 	bleq	e851b8 <__Stack_Size+0xe84db8>
    19a8:	0c270b3b 	stceq	11, cr0, [r7], #-236	; 0xffffff14
    19ac:	01120111 	tsteq	r2, r1, lsl r1
    19b0:	42970640 	addsmi	r0, r7, #67108864	; 0x4000000
    19b4:	0013010c 	andseq	r0, r3, ip, lsl #2
    19b8:	00340700 	eorseq	r0, r4, r0, lsl #14
    19bc:	0b3a0e03 	bleq	e851d0 <__Stack_Size+0xe84dd0>
    19c0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    19c4:	34080000 	strcc	r0, [r8], #-0
    19c8:	3a0e0300 	bcc	3825d0 <__Stack_Size+0x3821d0>
    19cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19d0:	00060213 	andeq	r0, r6, r3, lsl r2
    19d4:	82890900 	addhi	r0, r9, #0
    19d8:	01110001 	tsteq	r1, r1
    19dc:	00001331 	andeq	r1, r0, r1, lsr r3
    19e0:	0300340a 	movweq	r3, #1034	; 0x40a
    19e4:	3b0b3a0e 	blcc	2d0224 <__Stack_Size+0x2cfe24>
    19e8:	3f13490b 	svccc	0x0013490b
    19ec:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    19f0:	00340b00 	eorseq	r0, r4, r0, lsl #22
    19f4:	0b3a0e03 	bleq	e85208 <__Stack_Size+0xe84e08>
    19f8:	0c3f0b3b 	ldceq	11, cr0, [pc], #-236	; 1914 <__Stack_Size+0x1514>
    19fc:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1a00:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    1a04:	00130113 	andseq	r0, r3, r3, lsl r1
    1a08:	00210d00 	eoreq	r0, r1, r0, lsl #26
    1a0c:	0b2f1349 	bleq	bc6738 <__Stack_Size+0xbc6338>
    1a10:	340e0000 	strcc	r0, [lr], #-0
    1a14:	3a0e0300 	bcc	38261c <__Stack_Size+0x38221c>
    1a18:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a1c:	020c3f13 	andeq	r3, ip, #76	; 0x4c
    1a20:	0f00000a 	svceq	0x0000000a
    1a24:	13490026 	movtne	r0, #36902	; 0x9026
    1a28:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    1a2c:	030c3f00 	movweq	r3, #52992	; 0xcf00
    1a30:	3b0b3a0e 	blcc	2d0270 <__Stack_Size+0x2cfe70>
    1a34:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1a38:	000c3c13 	andeq	r3, ip, r3, lsl ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
	mDelay(50);
	end();
	return 0;
}

void blinky(uint8 level) {
       0:	000000a7 	andeq	r0, r0, r7, lsr #1
       4:	00470002 	subeq	r0, r7, r2
	// Turn them all off first.
	SetLED(MANAGE, 0);
       8:	01020000 	mrseq	r0, (UNDEF: 2)
	SetLED(TXD, 0);
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
	SetLED(PROGRAM, 0);
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	41010000 	mrsmi	r0, (UNDEF: 1)
	SetLED(RXD, 0);
      1c:	732f5050 	teqvc	pc, #80	; 0x50
      20:	41006372 	tstmi	r0, r2, ror r3
	SetLED(PLAY, 0);
      24:	692f5050 	stmdbvs	pc!, {r4, r6, ip, lr}	; <UNPREDICTABLE>
      28:	0000636e 	andeq	r6, r0, lr, ror #6
	SetLED(AUX, 0);
      2c:	6e69616d 	powvsez	f6, f1, #5.0
      30:	0100632e 	tsteq	r0, lr, lsr #6
	switch (level) {	// Turn them on.
      34:	65440000 	strbvs	r0, [r4, #-0]
      38:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
      3c:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      40:	00682e73 	rsbeq	r2, r8, r3, ror lr
      44:	41000002 	tstmi	r0, r2
      48:	682e4950 	stmdavs	lr!, {r4, r6, r8, fp, lr}
      4c:	00000200 	andeq	r0, r0, r0, lsl #4
	SetLED(PROGRAM, 0);
	SetLED(RXD, 0);
	SetLED(PLAY, 0);
	SetLED(AUX, 0);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
      50:	02050000 	andeq	r0, r5, #0
      54:	08006684 	stmdaeq	r0, {r2, r7, r9, sl, sp, lr}
      58:	2f302117 	svccs	0x00302117
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
      5c:	02004b2f 	andeq	r4, r0, #48128	; 0xbc00
      60:	00210204 	eoreq	r0, r1, r4, lsl #4
      64:	1f020402 	svcne	0x00020402
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      68:	02040200 	andeq	r0, r4, #0
		default: return;
	}
	mDelay(100);
      6c:	04020021 	streq	r0, [r2], #-33	; 0x21
	switch (level) {	// Turn them on.
      70:	4b302d02 	blmi	c0b480 <__Stack_Size+0xc0b080>
      74:	4b3d673d 	blmi	f59d70 <__Stack_Size+0xf59970>
      78:	2f593d3d 	svccs	0x00593d3d
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      7c:	3d3e4b3d 	fldmdbxcc	lr!, {d4-d33}	;@ Deprecated
      80:	000e0230 	andeq	r0, lr, r0, lsr r2
      84:	05000101 	streq	r0, [r0, #-257]	; 0x101
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
		default: return;
	}
	mDelay(100);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
      88:	00000002 	andeq	r0, r0, r2
      8c:	011f0300 	tsteq	pc, r0, lsl #6
      90:	3d221e22 	stccc	14, cr1, [r2, #-136]!	; 0xffffff78
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
      94:	4b4b4b4b 	blmi	12d2dc8 <__Stack_Size+0x12d29c8>
      98:	6772694b 	ldrbvs	r6, [r2, -fp, asr #18]!
      9c:	693d3167 	ldmdbvs	sp!, {r0, r1, r2, r5, r6, r8, ip, sp}
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      a0:	3f596764 	svccc	0x00596764
		default: return;
	}
	mDelay(100);
      a4:	03022d21 	movweq	r2, #11553	; 0x2d21
}
      a8:	2d010100 	stfcss	f0, [r1, #-0]
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
		default: return;
	}
	mDelay(100);
      ac:	02000001 	andeq	r0, r0, #1
      b0:	00004600 	andeq	r4, r0, r0, lsl #12
      b4:	fb010200 	blx	408be <__Stack_Size+0x404be>
      b8:	01000d0e 	tsteq	r0, lr, lsl #26
      bc:	00010101 	andeq	r0, r1, r1, lsl #2
      c0:	00010000 	andeq	r0, r1, r0
      c4:	50410100 	subpl	r0, r1, r0, lsl #2
      c8:	72732f50 	rsbsvc	r2, r3, #320	; 0x140
      cc:	50410063 	subpl	r0, r1, r3, rrx
      d0:	6e692f50 	mcrvs	15, 3, r2, cr9, cr0, {2}
      d4:	73000063 	movwvc	r0, #99	; 0x63
      d8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
      dc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
      e0:	2e74695f 	mrccs	9, 3, r6, cr4, cr15, {2}
      e4:	00010063 	andeq	r0, r1, r3, rrx
      e8:	66654400 	strbtvs	r4, [r5], -r0, lsl #8
      ec:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
      f0:	736e6f69 	cmnvc	lr, #420	; 0x1a4
      f4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
      f8:	00000000 	andeq	r0, r0, r0
      fc:	31340205 	teqcc	r4, r5, lsl #4
     100:	2d030800 	stccs	8, cr0, [r3, #-0]
     104:	200a0301 	andcs	r0, sl, r1, lsl #6
     108:	03200d03 	teqeq	r0, #192	; 0xc0
     10c:	0c03200d 	stceq	0, cr2, [r3], {13}
     110:	200d0320 	andcs	r0, sp, r0, lsr #6
     114:	03200a03 	teqeq	r0, #12288	; 0x3000
     118:	0a03200a 	beq	c8148 <__Stack_Size+0xc7d48>
     11c:	03111420 	tsteq	r1, #536870912	; 0x20000000
     120:	0a032e0a 	beq	cb950 <__Stack_Size+0xcb550>
     124:	200a0320 	andcs	r0, sl, r0, lsr #6
     128:	03200a03 	teqeq	r0, #12288	; 0x3000
     12c:	0a03200a 	beq	c815c <__Stack_Size+0xc7d5c>
     130:	200a0320 	andcs	r0, sl, r0, lsr #6
     134:	03200a03 	teqeq	r0, #12288	; 0x3000
     138:	0a03200a 	beq	c8168 <__Stack_Size+0xc7d68>
     13c:	200a0320 	andcs	r0, sl, r0, lsr #6
     140:	03200a03 	teqeq	r0, #12288	; 0x3000
     144:	0a03200a 	beq	c8174 <__Stack_Size+0xc7d74>
     148:	200a0320 	andcs	r0, sl, r0, lsr #6
     14c:	03200a03 	teqeq	r0, #12288	; 0x3000
     150:	0a03200a 	beq	c8180 <__Stack_Size+0xc7d80>
     154:	200b0320 	andcs	r0, fp, r0, lsr #6
     158:	03200b03 	teqeq	r0, #3072	; 0xc00
     15c:	0a03200b 	beq	c8190 <__Stack_Size+0xc7d90>
     160:	200a0320 	andcs	r0, sl, r0, lsr #6
     164:	03200a03 	teqeq	r0, #12288	; 0x3000
     168:	0b03200a 	bleq	c8198 <__Stack_Size+0xc7d98>
     16c:	200b0320 	andcs	r0, fp, r0, lsr #6
     170:	03200a03 	teqeq	r0, #12288	; 0x3000
     174:	0b03200a 	bleq	c81a4 <__Stack_Size+0xc7da4>
     178:	200a0320 	andcs	r0, sl, r0, lsr #6
     17c:	03200a03 	teqeq	r0, #12288	; 0x3000
     180:	0a03200a 	beq	c81b0 <__Stack_Size+0xc7db0>
     184:	200a0320 	andcs	r0, sl, r0, lsr #6
     188:	03200a03 	teqeq	r0, #12288	; 0x3000
     18c:	0a03200a 	beq	c81bc <__Stack_Size+0xc7dbc>
     190:	03101620 	tsteq	r0, #33554432	; 0x2000000
     194:	0a032e0b 	beq	cb9c8 <__Stack_Size+0xcb5c8>
     198:	03101620 	tsteq	r0, #33554432	; 0x2000000
     19c:	0a032e0b 	beq	cb9d0 <__Stack_Size+0xcb5d0>
     1a0:	200a0320 	andcs	r0, sl, r0, lsr #6
     1a4:	03200a03 	teqeq	r0, #12288	; 0x3000
     1a8:	0b03200b 	bleq	c81dc <__Stack_Size+0xc7ddc>
     1ac:	200a0320 	andcs	r0, sl, r0, lsr #6
     1b0:	03200a03 	teqeq	r0, #12288	; 0x3000
     1b4:	0a03200a 	beq	c81e4 <__Stack_Size+0xc7de4>
     1b8:	200a0320 	andcs	r0, sl, r0, lsr #6
     1bc:	03200a03 	teqeq	r0, #12288	; 0x3000
     1c0:	0a03200a 	beq	c81f0 <__Stack_Size+0xc7df0>
     1c4:	200d0320 	andcs	r0, sp, r0, lsr #6
     1c8:	03200a03 	teqeq	r0, #12288	; 0x3000
     1cc:	0a03200a 	beq	c81fc <__Stack_Size+0xc7dfc>
     1d0:	200a0320 	andcs	r0, sl, r0, lsr #6
     1d4:	02200b03 	eoreq	r0, r0, #3072	; 0xc00
     1d8:	01010001 	tsteq	r1, r1
     1dc:	00000b1d 	andeq	r0, r0, sp, lsl fp
     1e0:	01210002 	teqeq	r1, r2
     1e4:	01020000 	mrseq	r0, (UNDEF: 2)
     1e8:	000d0efb 	strdeq	r0, [sp], -fp
     1ec:	01010101 	tsteq	r1, r1, lsl #2
     1f0:	01000000 	mrseq	r0, (UNDEF: 0)
     1f4:	41010000 	mrsmi	r0, (UNDEF: 1)
     1f8:	732f5050 	teqvc	pc, #80	; 0x50
     1fc:	73006372 	movwvc	r6, #882	; 0x372
     200:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     204:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     208:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     20c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     210:	50504100 	subspl	r4, r0, r0, lsl #2
     214:	636e692f 	cmnvs	lr, #770048	; 0xbc000
     218:	50410000 	subpl	r0, r1, r0
     21c:	00632e49 	rsbeq	r2, r3, r9, asr #28
     220:	73000001 	movwvc	r0, #1
     224:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     228:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     22c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     230:	00682e65 	rsbeq	r2, r8, r5, ror #28
     234:	73000002 	movwvc	r0, #2
     238:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     23c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     240:	70616d5f 	rsbvc	r6, r1, pc, asr sp
     244:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     248:	74730000 	ldrbtvc	r0, [r3], #-0
     24c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     250:	5f783031 	svcpl	0x00783031
     254:	2e636461 	cdpcs	4, 6, cr6, cr3, cr1, {3}
     258:	00020068 	andeq	r0, r2, r8, rrx
     25c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     260:	31663233 	cmncc	r6, r3, lsr r2
     264:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
     268:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
     26c:	00020068 	andeq	r0, r2, r8, rrx
     270:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     274:	31663233 	cmncc	r6, r3, lsr r2
     278:	6e5f7830 	mrcvs	8, 2, r7, cr15, cr0, {1}
     27c:	2e636976 	mcrcs	9, 3, r6, cr3, cr6, {3}
     280:	00020068 	andeq	r0, r2, r8, rrx
     284:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     288:	31663233 	cmncc	r6, r3, lsr r2
     28c:	755f7830 	ldrbvc	r7, [pc, #-2096]	; fffffa64 <SCS_BASE+0x1fff1a64>
     290:	74726173 	ldrbtvc	r6, [r2], #-371	; 0x173
     294:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     298:	65440000 	strbvs	r0, [r4, #-0]
     29c:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
     2a0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     2a4:	00682e73 	rsbeq	r2, r8, r3, ror lr
     2a8:	41000003 	tstmi	r0, r3
     2ac:	682e4950 	stmdavs	lr!, {r4, r6, r8, fp, lr}
     2b0:	00000300 	andeq	r0, r0, r0, lsl #6
     2b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     2b8:	30316632 	eorscc	r6, r1, r2, lsr r6
     2bc:	79735f78 	ldmdbvc	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     2c0:	63697473 	cmnvs	r9, #1929379840	; 0x73000000
     2c4:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     2c8:	73000002 	movwvc	r0, #2
     2cc:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     2d0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     2d4:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
     2d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     2dc:	74730000 	ldrbtvc	r0, [r3], #-0
     2e0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     2e4:	5f783031 	svcpl	0x00783031
     2e8:	2e727770 	mrccs	7, 3, r7, cr2, cr0, {3}
     2ec:	00020068 	andeq	r0, r2, r8, rrx
     2f0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     2f4:	31663233 	cmncc	r6, r3, lsr r2
     2f8:	665f7830 			; <UNDEFINED> instruction: 0x665f7830
     2fc:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     300:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     304:	00000000 	andeq	r0, r0, r0
     308:	31c40205 	biccc	r0, r4, r5, lsl #4
     30c:	94030800 	strls	r0, [r3], #-2048	; 0x800
     310:	69140105 	ldmdbvs	r4, {r0, r2, r8}
     314:	7bd2030f 	blvc	ff480f58 <SCS_BASE+0x1f472f58>
     318:	0200204a 	andeq	r2, r0, #74	; 0x4a
     31c:	3e230104 	sufccs	f0, f3, f4
     320:	00211f21 	eoreq	r1, r1, r1, lsr #30
     324:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     328:	04020067 	streq	r0, [r2], #-103	; 0x67
     32c:	00764b01 	rsbseq	r4, r6, r1, lsl #22
     330:	2f010402 	svccs	0x00010402
     334:	3c6d0378 	stclcc	3, cr0, [sp], #-480	; 0xfffffe20
     338:	03112113 	tsteq	r1, #-1073741820	; 0xc0000004
     33c:	4b132e18 	blmi	4cbba4 <__Stack_Size+0x4cb7a4>
     340:	2f2f4b2f 	svccs	0x002f4b2f
     344:	2034034e 	eorscs	r0, r4, lr, asr #6
     348:	1e212f13 	mcrne	15, 1, r2, cr1, cr3, {0}
     34c:	1e212221 	cdpne	2, 2, cr2, cr1, cr1, {1}
     350:	1f1f2321 	svcne	0x001f2321
     354:	21211e23 	teqcs	r1, r3, lsr #28
     358:	21212121 	teqcs	r1, r1, lsr #2
     35c:	5a22211d 	bpl	8887d8 <__Stack_Size+0x8883d8>
     360:	5a212f13 	bpl	84bfb4 <__Stack_Size+0x84bbb4>
     364:	5a212f13 	bpl	84bfb8 <__Stack_Size+0x84bbb8>
     368:	5a212f13 	bpl	84bfbc <__Stack_Size+0x84bbbc>
     36c:	5c212f13 	stcpl	15, cr2, [r1], #-76	; 0xffffffb4
     370:	28201a03 	stmdacs	r0!, {r0, r1, r9, fp, ip}
     374:	4b592101 	blmi	1648780 <__Stack_Size+0x1648380>
     378:	4b4b4b4b 	blmi	12d30ac <__Stack_Size+0x12d2cac>
     37c:	214c2d2f 	cmpcs	ip, pc, lsr #26
     380:	4b4b4b59 	blmi	12d30ec <__Stack_Size+0x12d2cec>
     384:	2d2f4b4b 	fstmdbxcs	pc!, {d4-d40}	;@ Deprecated
     388:	0f24134c 	svceq	0x0024134c
     38c:	be031131 	mcrlt	1, 0, r1, cr3, cr1, {1}
     390:	1f032e02 	svcne	0x00032e02
     394:	112f1320 	teqne	pc, r0, lsr #6
     398:	134a1e03 	movtne	r1, #44547	; 0xae03
     39c:	11672d24 	cmnne	r7, r4, lsr #26
     3a0:	0377215a 	cmneq	r7, #-2147483626	; 0x80000016
     3a4:	2d30821a 	lfmcs	f0, 1, [r0, #-104]!	; 0xffffff98
     3a8:	300f3121 	andcc	r3, pc, r1, lsr #2
     3ac:	f903112f 			; <UNDEFINED> instruction: 0xf903112f
     3b0:	3d215800 	stccc	8, cr5, [r1, #-0]
     3b4:	325a3d52 	subscc	r3, sl, #5248	; 0x1480
     3b8:	0402003e 	streq	r0, [r2], #-62	; 0x3e
     3bc:	034b3001 	movteq	r3, #45057	; 0xb001
     3c0:	3d133c67 	ldccc	12, cr3, [r3, #-412]	; 0xfffffe64
     3c4:	7ac80311 	bvc	ff201010 <SCS_BASE+0x1f1f3010>
     3c8:	0311142e 	tsteq	r1, #771751936	; 0x2e000000
     3cc:	032e04c5 	teqeq	lr, #-989855744	; 0xc5000000
     3d0:	6f030111 	svcvs	0x00030111
     3d4:	11032020 	tstne	r3, r0, lsr #32
     3d8:	4b4b3e20 	blmi	12cfc60 <__Stack_Size+0x12cf860>
     3dc:	0903303d 	stmdbeq	r3, {r0, r2, r3, r4, r5, ip, sp}
     3e0:	4b4b4c3c 	blmi	12d34d8 <__Stack_Size+0x12d30d8>
     3e4:	3d4b303d 	stclcc	0, cr3, [fp, #-244]	; 0xffffff0c
     3e8:	033d4b31 	teqeq	sp, #50176	; 0xc400
     3ec:	70032010 	andvc	r2, r3, r0, lsl r0
     3f0:	0d03302e 	stceq	0, cr3, [r3, #-184]	; 0xffffff48
     3f4:	3c730320 	ldclcc	3, cr0, [r3], #-128	; 0xffffff80
     3f8:	4b3d6723 	blmi	f5a08c <__Stack_Size+0xf59c8c>
     3fc:	221e3e3d 	andscs	r3, lr, #976	; 0x3d0
     400:	41034059 	qaddmi	r4, r9, r3
     404:	02002190 	andeq	r2, r0, #36	; 0x24
     408:	2e060104 	adfcss	f0, f6, f4
     40c:	4b4b3006 	blmi	12cc42c <__Stack_Size+0x12cc02c>
     410:	3d4b223d 	sfmcc	f2, 2, [fp, #-244]	; 0xffffff0c
     414:	033d4b31 	teqeq	sp, #50176	; 0xc400
     418:	50032030 	andpl	r2, r3, r0, lsr r0
     41c:	2e30032e 	cdpcs	3, 3, cr0, cr0, cr14, {1}
     420:	7fb9039f 	svcvc	0x00b9039f
     424:	00c90320 	sbceq	r0, r9, r0, lsr #6
     428:	7fb70320 	svcvc	0x00b70320
     42c:	00ca032e 	sbceq	r0, sl, lr, lsr #6
     430:	03231d2e 	teqeq	r3, #2944	; 0xb80
     434:	03207fb6 	teqeq	r0, #728	; 0x2d8
     438:	4b5800ca 	blmi	1600768 <__Stack_Size+0x1600368>
     43c:	211f3d3d 	tstcs	pc, sp, lsr sp	; <UNPREDICTABLE>
     440:	bb034c3d 	bllt	d353c <__Stack_Size+0xd313c>
     444:	0325587a 	teqeq	r5, #7995392	; 0x7a0000
     448:	035805e9 	cmpeq	r8, #977272832	; 0x3a400000
     44c:	3d4a7a9b 	vstrcc	s15, [sl, #-620]	; 0xfffffd94
     450:	21224b4b 	teqcs	r2, fp, asr #22
     454:	0021233d 	eoreq	r2, r1, sp, lsr r3
     458:	06010402 	streq	r0, [r1], -r2, lsl #8
     45c:	2f2f0620 	svccs	0x002f0620
     460:	01040200 	mrseq	r0, R12_usr
     464:	31062e06 	tstcc	r6, r6, lsl #28
     468:	018b0334 	orreq	r0, fp, r4, lsr r3
     46c:	49322058 	ldmdbmi	r2!, {r3, r4, r6, sp}
     470:	04020030 	streq	r0, [r2], #-48	; 0x30
     474:	02003e02 	andeq	r3, r0, #32
     478:	039d0204 	orrseq	r0, sp, #1073741824	; 0x40000000
     47c:	032e04be 	teqeq	lr, #-1107296256	; 0xbe000000
     480:	2d3c7bc6 	vldmdbcs	ip!, {d7-<overflow reg d41>}
     484:	21747003 	cmncs	r4, r3
     488:	04c9032f 	strbeq	r0, [r9], #815	; 0x32f
     48c:	7bb9032e 	blvc	fee4114c <SCS_BASE+0x1ee3314c>
     490:	04c7033c 	strbeq	r0, [r7], #828	; 0x33c
     494:	7bbb032e 	blvc	feec1154 <SCS_BASE+0x1eeb3154>
     498:	04c50320 	strbeq	r0, [r5], #800	; 0x320
     49c:	7419032e 	ldrvc	r0, [r9], #-814	; 0x32e
     4a0:	4e4f3d13 	mcrmi	13, 2, r3, cr15, cr3, {0}
     4a4:	13691040 	cmnne	r9, #64	; 0x40
     4a8:	404e4f3d 	submi	r4, lr, sp, lsr pc
     4ac:	7eb90310 	mrcvc	3, 5, r0, cr9, cr0, {0}
     4b0:	0b032066 	bleq	c8650 <__Stack_Size+0xc8250>
     4b4:	04020020 	streq	r0, [r2], #-32
     4b8:	4b3d2f01 	blmi	f4c0c4 <__Stack_Size+0xf4bcc4>
     4bc:	674c4b3d 	smlaldxvs	r4, ip, sp, fp
     4c0:	03112f13 	tsteq	r1, #76	; 0x4c
     4c4:	132e01b6 	teqne	lr, #-2147483603	; 0x8000002d
     4c8:	5a3d523d 	bpl	f54dc4 <__Stack_Size+0xf549c4>
     4cc:	69104032 	ldmdbvs	r0, {r1, r4, r5, lr}
     4d0:	3d523d13 	ldclcc	13, cr3, [r2, #-76]	; 0xffffffb4
     4d4:	1040325a 	subne	r3, r0, sl, asr r2
     4d8:	20661503 	rsbcs	r1, r6, r3, lsl #10
     4dc:	1f263d22 	svcne	0x00263d22
     4e0:	1b2f241c 	blne	bc9558 <__Stack_Size+0xbc9158>
     4e4:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
     4e8:	2e7f8003 	cdpcs	0, 7, cr8, cr15, cr3, {0}
     4ec:	4a018203 	bmi	60d00 <__Stack_Size+0x60900>
     4f0:	674c674b 	strbvs	r6, [ip, -fp, asr #14]
     4f4:	4c112f14 	ldcmi	15, cr2, [r1], {20}
     4f8:	04020001 	streq	r0, [r2], #-1
     4fc:	02002402 	andeq	r2, r0, #33554432	; 0x2000000
     500:	00490204 	subeq	r0, r9, r4, lsl #4
     504:	2f020402 	svccs	0x00020402
     508:	02040200 	andeq	r0, r4, #0
     50c:	682f222d 	stmdavs	pc!, {r0, r2, r3, r5, r9, sp}	; <UNPREDICTABLE>
     510:	02003020 	andeq	r3, r0, #32
     514:	20060104 	andcs	r0, r6, r4, lsl #2
     518:	4b4c3e06 	blmi	130fd38 <__Stack_Size+0x130f938>
     51c:	01040200 	mrseq	r0, R12_usr
     520:	694c684b 	stmdbvs	ip, {r0, r1, r3, r6, fp, sp, lr}^
     524:	001e2275 	andseq	r2, lr, r5, ror r2
     528:	30010402 	andcc	r0, r1, r2, lsl #8
     52c:	59ad912f 	stmibpl	sp!, {r0, r1, r2, r3, r5, r8, ip, pc}
     530:	20090354 	andcs	r0, r9, r4, asr r3
     534:	112f133d 	teqne	pc, sp, lsr r3	; <UNPREDICTABLE>
     538:	83321330 	teqhi	r2, #-1073741824	; 0xc0000000
     53c:	1d3f6722 	ldcne	7, cr6, [pc, #-136]!	; 4bc <__Stack_Size+0xbc>
     540:	212d3d23 	teqcs	sp, r3, lsr #26
     544:	3d68211f 	stfcce	f2, [r8, #-124]!	; 0xffffff84
     548:	6767913e 			; <UNDEFINED> instruction: 0x6767913e
     54c:	21900903 	orrscs	r0, r0, r3, lsl #18
     550:	3d2d2176 	stfccs	f2, [sp, #-472]!	; 0xfffffe28
     554:	1475212f 	ldrbtne	r2, [r5], #-303	; 0x12f
     558:	5b243011 	blpl	90c5a4 <__Stack_Size+0x90c1a4>
     55c:	4b3d3d2d 	blmi	f4fa18 <__Stack_Size+0xf4f618>
     560:	2f2f5e6a 	svccs	0x002f5e6a
     564:	03222f75 	teqeq	r2, #468	; 0x1d4
     568:	16032e6a 	strne	r2, [r3], -sl, ror #28
     56c:	002f2f20 	eoreq	r2, pc, r0, lsr #30
     570:	06010402 	streq	r0, [r1], -r2, lsl #8
     574:	04020020 	streq	r0, [r2], #-32
     578:	003d0602 	eorseq	r0, sp, r2, lsl #12
     57c:	3b020402 	blcc	8158c <__Stack_Size+0x8118c>
     580:	02040200 	andeq	r0, r4, #0
     584:	04020021 	streq	r0, [r2], #-33	; 0x21
     588:	21302d02 	teqcs	r0, r2, lsl #26
     58c:	2f2d211f 	svccs	0x002d211f
     590:	1f213075 	svcne	0x00213075
     594:	832f3d4b 	teqhi	pc, #4800	; 0x12c0
     598:	034b223d 	movteq	r2, #45629	; 0xb23d
     59c:	03747fad 	cmneq	r4, #692	; 0x2b4
     5a0:	ae3c00d6 	mrcge	0, 1, r0, cr12, cr6, {6}
     5a4:	212d6823 	teqcs	sp, r3, lsr #16
     5a8:	3d213d1f 	stccc	13, cr3, [r1, #-124]!	; 0xffffff84
     5ac:	1f214b31 	svcne	0x00214b31
     5b0:	2fad302f 	svccs	0x00ad302f
     5b4:	59212f1f 	stmdbpl	r1!, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}
     5b8:	01040200 	mrseq	r0, R12_usr
     5bc:	3d062006 	stccc	0, cr2, [r6, #-24]	; 0xffffffe8
     5c0:	0200414b 	andeq	r4, r0, #-1073741806	; 0xc0000012
     5c4:	20060104 	andcs	r0, r6, r4, lsl #2
     5c8:	02003d06 	andeq	r3, r0, #384	; 0x180
     5cc:	66060104 	strvs	r0, [r6], -r4, lsl #2
     5d0:	003a4d06 	eorseq	r4, sl, r6, lsl #26
     5d4:	06010402 	streq	r0, [r1], -r2, lsl #8
     5d8:	0056063c 	subseq	r0, r6, ip, lsr r6
     5dc:	41010402 	tstmi	r1, r2, lsl #8
     5e0:	02040200 	andeq	r0, r4, #0
     5e4:	9f064a06 	svcls	0x00064a06
     5e8:	2f675d31 	svccs	0x00675d31
     5ec:	222f2f1f 	eorcs	r2, pc, #124	; 0x7c
     5f0:	212f1f4b 	teqcs	pc, fp, asr #30
     5f4:	2f1f2f67 	svccs	0x001f2f67
     5f8:	03245921 	teqeq	r4, #540672	; 0x84000
     5fc:	3403204c 	strcc	r2, [r3], #-76	; 0x4c
     600:	04020020 	streq	r0, [r2], #-32
     604:	003c0601 	eorseq	r0, ip, r1, lsl #12
     608:	3c020402 	cfstrscc	mvf0, [r2], {2}
     60c:	213b8406 	teqcs	fp, r6, lsl #8
     610:	0359403d 	cmpeq	r9, #61	; 0x3d
     614:	3d139010 	ldccc	0, cr9, [r3, #-64]	; 0xffffffc0
     618:	1368135a 	cmnne	r8, #1744830465	; 0x68000001
     61c:	13841368 	orrne	r1, r4, #-1610612735	; 0xa0000001
     620:	4b761369 	blmi	1d853cc <__Stack_Size+0x1d84fcc>
     624:	13672448 	cmnne	r7, #1207959552	; 0x48000000
     628:	67224976 			; <UNDEFINED> instruction: 0x67224976
     62c:	22577613 	subscs	r7, r7, #19922944	; 0x1300000
     630:	34301659 	ldrtcc	r1, [r0], #-1625	; 0x659
     634:	03152f15 	tsteq	r5, #84	; 0x54
     638:	132e00c6 	teqne	lr, #198	; 0xc6
     63c:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     640:	02005d01 	andeq	r5, r0, #64	; 0x40
     644:	00c40104 	sbceq	r0, r4, r4, lsl #2
     648:	3d020402 	cfstrscc	mvf0, [r2, #-8]
     64c:	02040200 	andeq	r0, r4, #0
     650:	0402003b 	streq	r0, [r2], #-59	; 0x3b
     654:	02002102 	andeq	r2, r0, #-2147483648	; 0x80000000
     658:	032d0204 	teqeq	sp, #1073741824	; 0x40000000
     65c:	22667ef5 	rsbcs	r7, r6, #3920	; 0xf50
     660:	2f30592f 	svccs	0x0030592f
     664:	00d3033e 	sbcseq	r0, r3, lr, lsr r3
     668:	020020ac 	andeq	r2, r0, #172	; 0xac
     66c:	5a5a0104 	bpl	1680a84 <__Stack_Size+0x1680684>
     670:	2f2f1c23 	svccs	0x002f1c23
     674:	2f2f2f2f 	svccs	0x002f2f2f
     678:	e7033d4b 	str	r3, [r3, -fp, asr #26]
     67c:	2121667a 	teqcs	r1, sl, ror r6
     680:	211f2f1f 	tstcs	pc, pc, lsl pc	; <UNPREDICTABLE>
     684:	73033e30 	movwvc	r3, #15920	; 0x3e30
     688:	2122209e 			; <UNDEFINED> instruction: 0x2122209e
     68c:	01040200 	mrseq	r0, R12_usr
     690:	2f063c06 	svccs	0x00063c06
     694:	322c301e 	eorcc	r3, ip, #30
     698:	22207303 	eorcs	r7, r0, #201326592	; 0xc000000
     69c:	02040200 	andeq	r0, r4, #0
     6a0:	04020021 	streq	r0, [r2], #-33	; 0x21
     6a4:	02001f02 	andeq	r1, r0, #8
     6a8:	00210204 	eoreq	r0, r1, r4, lsl #4
     6ac:	2d020402 	cfstrscs	mvf0, [r2, #-8]
     6b0:	02040200 	andeq	r0, r4, #0
     6b4:	04020021 	streq	r0, [r2], #-33	; 0x21
     6b8:	03312d02 	teqeq	r1, #128	; 0x80
     6bc:	00227474 	eoreq	r7, r2, r4, ror r4
     6c0:	21020402 	tstcs	r2, r2, lsl #8
     6c4:	02040200 	andeq	r0, r4, #0
     6c8:	0402001f 	streq	r0, [r2], #-31
     6cc:	02002102 	andeq	r2, r0, #-2147483648	; 0x80000000
     6d0:	002d0204 	eoreq	r0, sp, r4, lsl #4
     6d4:	21020402 	tstcs	r2, r2, lsl #8
     6d8:	02040200 	andeq	r0, r4, #0
     6dc:	7203312d 	andvc	r3, r3, #1073741835	; 0x4000000b
     6e0:	0e321474 	mrceq	4, 1, r1, cr2, cr4, {3}
     6e4:	2c33132c 	ldccs	3, cr1, [r3], #-176	; 0xffffff50
     6e8:	76031022 	strvc	r1, [r3], -r2, lsr #32
     6ec:	1f21132e 	svcne	0x0021132e
     6f0:	03112321 	tsteq	r1, #-2080374784	; 0x84000000
     6f4:	202e05ba 			; <UNDEFINED> instruction: 0x202e05ba
     6f8:	01040200 	mrseq	r0, R12_usr
     6fc:	1d235a4c 	vstmdbne	r3!, {s10-s85}
     700:	302a2f30 	eorcc	r2, sl, r0, lsr pc
     704:	034b2f31 	movteq	r2, #48945	; 0xbf31
     708:	30747fbf 	ldrhtcc	r7, [r4], #-255	; 0xffffff01
     70c:	6600c003 	strvs	ip, [r0], -r3
     710:	58590322 	ldmdapl	r9, {r1, r5, r8, r9}^
     714:	04020020 	streq	r0, [r2], #-32
     718:	225a4c01 	subscs	r4, sl, #256	; 0x100
     71c:	2f301d21 	svccs	0x00301d21
     720:	2f31302a 	svccs	0x0031302a
     724:	223b764b 	eorscs	r7, fp, #78643200	; 0x4b00000
     728:	667aa703 	ldrbtvs	sl, [sl], -r3, lsl #14
     72c:	03211f21 	teqeq	r1, #132	; 0x84
     730:	037405b0 	cmneq	r4, #738197504	; 0x2c000000
     734:	292e7ad1 	stmdbcs	lr!, {r0, r4, r6, r7, r9, fp, ip, sp, lr}
     738:	03211f21 	teqeq	r1, #132	; 0x84
     73c:	037405b3 	cmneq	r4, #750780416	; 0x2cc00000
     740:	292e7ace 	stmdbcs	lr!, {r1, r2, r3, r6, r7, r9, fp, ip, sp, lr}
     744:	03211f21 	teqeq	r1, #132	; 0x84
     748:	037405b6 	cmneq	r4, #763363328	; 0x2d800000
     74c:	032e7acb 	teqeq	lr, #831488	; 0xcb000
     750:	22202e67 	eorcs	r2, r0, #1648	; 0x670
     754:	3c02d003 	stccc	0, cr13, [r2], {3}
     758:	4a7db203 	bmi	1f6cf6c <__Stack_Size+0x1f6cb6c>
     75c:	4a0a0342 	bmi	28146c <__Stack_Size+0x28106c>
     760:	03211f21 	teqeq	r1, #132	; 0x84
     764:	037405b9 	cmneq	r4, #775946240	; 0x2e400000
     768:	292e7ac8 	stmdbcs	lr!, {r3, r6, r7, r9, fp, ip, sp, lr}
     76c:	03211f21 	teqeq	r1, #132	; 0x84
     770:	037405bc 	cmneq	r4, #788529152	; 0x2f000000
     774:	292e7ac5 	stmdbcs	lr!, {r0, r2, r6, r7, r9, fp, ip, sp, lr}
     778:	2a112113 	bcs	448bcc <__Stack_Size+0x4487cc>
     77c:	03112113 	tsteq	r1, #-1073741820	; 0xc0000004
     780:	21132e71 	tstcs	r3, r1, ror lr
     784:	21132a11 	tstcs	r3, r1, lsl sl
     788:	21132a11 	tstcs	r3, r1, lsl sl
     78c:	21132a11 	tstcs	r3, r1, lsl sl
     790:	05e90311 	strbeq	r0, [r9, #785]!	; 0x311
     794:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     798:	21852f01 	orrcs	r2, r5, r1, lsl #30
     79c:	312c2f1f 	teqcc	ip, pc, lsl pc
     7a0:	2e7cee03 	cdpcs	14, 7, cr14, cr12, cr3, {0}
     7a4:	4a039403 	bmi	e57b8 <__Stack_Size+0xe53b8>
     7a8:	034a4303 	movteq	r4, #41731	; 0xa303
     7ac:	c5033c3f 	strgt	r3, [r3, #-3135]	; 0xc3f
     7b0:	43207400 	teqmi	r0, #0
     7b4:	032d2f59 	teqeq	sp, #356	; 0x164
     7b8:	22202e17 	eorcs	r2, r0, #368	; 0x170
     7bc:	1c1f263d 	ldcne	6, cr2, [pc], {61}	; 0x3d
     7c0:	2f1b2f24 	svccs	0x001b2f24
     7c4:	03302f2f 	teqeq	r0, #188	; 0xbc
     7c8:	032e7bfd 	teqeq	lr, #259072	; 0x3f400
     7cc:	4c4a0486 	cfstrdmi	mvd0, [sl], {134}	; 0x86
     7d0:	14594e68 	ldrbne	r4, [r9], #-3688	; 0xe68
     7d4:	144c112f 	strbne	r1, [ip], #-303	; 0x12f
     7d8:	1330112f 	teqne	r0, #-1073741813	; 0xc000000b
     7dc:	4c208332 	stcmi	3, cr8, [r0], #-200	; 0xffffff38
     7e0:	01040200 	mrseq	r0, R12_usr
     7e4:	2d2f674b 	stccs	7, cr6, [pc, #-300]!	; 6c0 <__Stack_Size+0x2c0>
     7e8:	9f92135a 	svcls	0x0092135a
     7ec:	3d254759 	stccc	7, cr4, [r5, #-356]!	; 0xfffffe9c
     7f0:	1e679213 	mcrne	2, 3, r9, cr7, cr3, {0}
     7f4:	75223d23 	strvc	r3, [r2, #-3363]!	; 0xd23
     7f8:	4b5a3d4b 	blmi	168fd2c <__Stack_Size+0x168f92c>
     7fc:	2f2d2f60 	svccs	0x002d2f60
     800:	3d68211f 	stfcce	f2, [r8, #-124]!	; 0xffffff84
     804:	5967913e 	stmdbpl	r7!, {r1, r2, r3, r4, r5, r8, ip, pc}^
     808:	762d2f4b 	strtvc	r2, [sp], -fp, asr #30
     80c:	21684b13 	cmncs	r8, r3, lsl fp
     810:	672f2f91 			; <UNDEFINED> instruction: 0x672f2f91
     814:	302c232d 	eorcc	r2, ip, sp, lsr #6
     818:	11143d67 	tstne	r4, r7, ror #26
     81c:	4b312133 	blmi	c48cf0 <__Stack_Size+0xc488f0>
     820:	13301114 	teqne	r0, #5
     824:	2121201f 	teqcs	r1, pc, lsl r0
     828:	2f31223d 	svccs	0x0031223d
     82c:	02002120 	andeq	r2, r0, #8
     830:	2f210104 	svccs	0x00210104
     834:	9e032f4c 	cdpls	15, 0, cr2, cr3, cr12, {2}
     838:	0200207f 	andeq	r2, r0, #127	; 0x7f
     83c:	e5030104 	str	r0, [r3, #-260]	; 0x104
     840:	3e3d4a00 	vaddcc.f32	s8, s26, s0
     844:	02003d30 	andeq	r3, r0, #3072	; 0xc00
     848:	7a030204 	bvc	c1060 <__Stack_Size+0xc0c60>
     84c:	21255a20 	teqcs	r5, r0, lsr #20
     850:	92032120 	andls	r2, r3, #8
     854:	0200207f 	andeq	r2, r0, #127	; 0x7f
     858:	f1030104 			; <UNDEFINED> instruction: 0xf1030104
     85c:	003d4a00 	eorseq	r4, sp, r0, lsl #20
     860:	49020402 	stmdbmi	r2, {r1, sl}
     864:	2130215a 	teqcs	r0, sl, asr r1
     868:	312f2f23 	teqcc	pc, r3, lsr #30
     86c:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     870:	03361b01 	teqeq	r6, #1024	; 0x400
     874:	17033c6c 	strne	r3, [r3, -ip, ror #24]
     878:	2d132f2e 	ldccs	15, cr2, [r3, #-184]	; 0xffffff48
     87c:	3d2f2120 	stfccs	f2, [pc, #-128]!	; 804 <__Stack_Size+0x404>
     880:	3d4b3d4b 	stclcc	13, cr3, [fp, #-300]	; 0xfffffed4
     884:	3d4b3d4b 	stclcc	13, cr3, [fp, #-300]	; 0xfffffed4
     888:	3d4b3d4b 	stclcc	13, cr3, [fp, #-300]	; 0xfffffed4
     88c:	032b234b 	teqeq	fp, #738197505	; 0x2c000001
     890:	3c0878a3 	stccc	8, cr7, [r8], {163}	; 0xa3
     894:	4a090322 	bmi	241524 <__Stack_Size+0x241124>
     898:	032e7703 	teqeq	lr, #786432	; 0xc0000
     89c:	77032009 	strvc	r2, [r3, -r9]
     8a0:	4a09033c 	bmi	241598 <__Stack_Size+0x241198>
     8a4:	0402004b 	streq	r0, [r2], #-75	; 0x4b
     8a8:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
     8ac:	00750204 	rsbseq	r0, r5, r4, lsl #4
     8b0:	39020402 	stmdbcc	r2, {r1, sl}
     8b4:	02040200 	andeq	r0, r4, #0
     8b8:	2002a503 	andcs	sl, r2, r3, lsl #10
     8bc:	02040200 	andeq	r0, r4, #0
     8c0:	4a7ddb03 	bmi	1f774d4 <__Stack_Size+0x1f770d4>
     8c4:	032e1103 	teqeq	lr, #-1073741824	; 0xc0000000
     8c8:	143c07e6 	ldrtne	r0, [ip], #-2022	; 0x7e6
     8cc:	75840311 	strvc	r0, [r4, #785]	; 0x311
     8d0:	201f212e 	andscs	r2, pc, lr, lsr #2
     8d4:	7803c221 	stmdavc	r3, {r0, r5, r9, lr, pc}
     8d8:	2f672820 	svccs	0x00672820
     8dc:	0af4033b 	beq	ffd015d0 <SCS_BASE+0x1fcf35d0>
     8e0:	03212058 	teqeq	r1, #88	; 0x58
     8e4:	033c7aaa 	teqeq	ip, #696320	; 0xaa000
     8e8:	034a05d8 	movteq	r0, #42456	; 0xa5d8
     8ec:	034a7aa8 	movteq	r7, #43688	; 0xaaa8
     8f0:	034a05db 	movteq	r0, #42459	; 0xa5db
     8f4:	00587588 	subseq	r7, r8, r8, lsl #11
     8f8:	21010402 	tstcs	r1, r2, lsl #8
     8fc:	02003d59 	andeq	r3, r0, #5696	; 0x1640
     900:	1a030104 	bne	c0d18 <__Stack_Size+0xc0918>
     904:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     908:	05800301 	streq	r0, [r0, #769]	; 0x301
     90c:	04020058 	streq	r0, [r2], #-88	; 0x58
     910:	7b820301 	blvc	fe08151c <SCS_BASE+0x1e07351c>
     914:	0402003c 	streq	r0, [r2], #-60	; 0x3c
     918:	04fe0301 	ldrbteq	r0, [lr], #769	; 0x301
     91c:	05dc0358 	ldrbeq	r0, [ip, #856]	; 0x358
     920:	a30321ba 	movwge	r2, #12730	; 0x31ba
     924:	e0033c7a 	and	r3, r3, sl, ror ip
     928:	50034a05 	andpl	r4, r3, r5, lsl #20
     92c:	75a3212e 	strvc	r2, [r3, #302]!	; 0x12e
     930:	032f2f67 	teqeq	pc, #412	; 0x19c
     934:	69032017 	stmdbvs	r3, {r0, r1, r2, r4, sp}
     938:	1c03373c 	stcne	7, cr3, [r3], {60}	; 0x3c
     93c:	7dee032e 	stclvc	3, cr0, [lr, #184]!	; 0xb8
     940:	005b2eac 	subseq	r2, fp, ip, lsr #29
     944:	06010402 	streq	r0, [r1], -r2, lsl #8
     948:	04020058 	streq	r0, [r2], #-88	; 0x58
     94c:	5a3e0601 	bpl	f82158 <__Stack_Size+0xf81d58>
     950:	b903243f 	stmdblt	r3, {r0, r1, r2, r3, r4, r5, sl, sp}
     954:	0331207f 	teqeq	r1, #127	; 0x7f
     958:	322000c0 	eorcc	r0, r0, #192	; 0xc0
     95c:	40033029 	andmi	r3, r3, r9, lsr #32
     960:	00c4032e 	sbceq	r0, r4, lr, lsr #6
     964:	2d2f2f2e 	stccs	15, cr2, [pc, #-184]!	; 8b4 <__Stack_Size+0x4b4>
     968:	827a9e03 	rsbshi	r9, sl, #48	; 0x30
     96c:	22212d13 	eorcs	r2, r1, #1216	; 0x4c0
     970:	99031030 	stmdbls	r3, {r4, r5, ip}
     974:	2d213c7f 	stccs	12, cr3, [r1, #-508]!	; 0xfffffe04
     978:	683d2f21 	ldmdavs	sp!, {r0, r5, r8, r9, sl, fp, sp}
     97c:	683df43d 	ldmdavs	sp!, {r0, r2, r3, r4, r5, sl, ip, sp, lr, pc}
     980:	683d683d 	ldmdavs	sp!, {r0, r2, r3, r4, r5, fp, sp, lr}
     984:	d73d683d 			; <UNDEFINED> instruction: 0xd73d683d
     988:	f264032d 	vcgt.s32	d16, d4, d29
     98c:	04020022 	streq	r0, [r2], #-34	; 0x22
     990:	02002102 	andeq	r2, r0, #-2147483648	; 0x80000000
     994:	001f0204 	andseq	r0, pc, r4, lsl #4
     998:	21020402 	tstcs	r2, r2, lsl #8
     99c:	02040200 	andeq	r0, r4, #0
     9a0:	0402002d 	streq	r0, [r2], #-45	; 0x2d
     9a4:	02fc0302 	rscseq	r0, ip, #134217728	; 0x8000000
     9a8:	04020020 	streq	r0, [r2], #-32
     9ac:	7d840302 	stcvc	3, cr0, [r4, #8]
     9b0:	4303324a 	movwmi	r3, #12874	; 0x324a
     9b4:	068c0320 	streq	r0, [ip], r0, lsr #6
     9b8:	79fa0320 	ldmibvc	sl!, {r5, r8, r9}^
     9bc:	4b34594a 	blmi	d16eec <__Stack_Size+0xd16aec>
     9c0:	4b4b4b2f 	blmi	12d3684 <__Stack_Size+0x12d3284>
     9c4:	4b2f4b2f 	blmi	bd3688 <__Stack_Size+0xbd3288>
     9c8:	76683233 			; <UNDEFINED> instruction: 0x76683233
     9cc:	302b6a2c 	eorcc	r6, fp, ip, lsr #20
     9d0:	33302f30 	teqcc	r0, #192	; 0xc0
     9d4:	033c7003 	teqeq	ip, #3
     9d8:	2d214a15 	vstmdbcs	r1!, {s8-s28}
     9dc:	027f9703 	rsbseq	r9, pc, #786432	; 0xc0000
     9e0:	1f210123 	svcne	0x00210123
     9e4:	04020021 	streq	r0, [r2], #-33	; 0x21
     9e8:	03592101 	cmpeq	r9, #1073741824	; 0x40000000
     9ec:	262e06c6 	strtcs	r0, [lr], -r6, asr #13
     9f0:	03207a03 	teqeq	r0, #12288	; 0x3000
     9f4:	032e79bf 	teqeq	lr, #3129344	; 0x2fc000
     9f8:	032006c7 	teqeq	r0, #208666624	; 0xc700000
     9fc:	c2032e77 	andgt	r2, r3, #1904	; 0x770
     a00:	3d2f2e79 	stccc	14, cr2, [pc, #-484]!	; 824 <__Stack_Size+0x424>
     a04:	b6032f3d 			; <UNDEFINED> instruction: 0xb6032f3d
     a08:	cb032e06 	blgt	cc228 <__Stack_Size+0xcbe28>
     a0c:	b5034a79 	strlt	r4, [r3, #-2681]	; 0xa79
     a10:	cc034a06 	stcgt	10, cr4, [r3], {6}
     a14:	b4033c79 	strlt	r3, [r3], #-3193	; 0xc79
     a18:	cc032e06 	stcgt	14, cr2, [r3], {6}
     a1c:	dd033c79 	stcle	12, cr3, [r3, #-484]	; 0xfffffe1c
     a20:	a6032e03 	strge	r2, [r3], -r3, lsl #28
     a24:	da032e7c 	ble	cc41c <__Stack_Size+0xcc01c>
     a28:	a2032003 	andge	r2, r3, #3
     a2c:	b5032e7c 	strlt	r2, [r3, #-3708]	; 0xe7c
     a30:	d1032e06 	tstle	r3, r6, lsl #28
     a34:	af033c79 	svcge	0x00033c79
     a38:	d1032e06 	tstle	r3, r6, lsl #28
     a3c:	302f4a79 	eorcc	r4, pc, r9, ror sl	; <UNPREDICTABLE>
     a40:	2c324c2f 	ldccs	12, cr4, [r2], #-188	; 0xffffff44
     a44:	20d64c03 	sbcscs	r4, r6, r3, lsl #24
     a48:	04020024 	streq	r0, [r2], #-36	; 0x24
     a4c:	3d593d01 	ldclcc	13, cr3, [r9, #-4]
     a50:	06da032f 	ldrbeq	r0, [sl], pc, lsr #6
     a54:	7a03263c 	bvc	ca34c <__Stack_Size+0xc9f4c>
     a58:	79aa0320 	stmibvc	sl!, {r5, r8, r9}
     a5c:	06dc032e 	ldrbeq	r0, [ip], lr, lsr #6
     a60:	2e770320 	cdpcs	3, 7, cr0, cr7, cr0, {1}
     a64:	2e79ad03 	cdpcs	13, 7, cr10, cr9, cr3, {0}
     a68:	3d2f3330 	stccc	3, cr3, [pc, #-192]!	; 9b0 <__Stack_Size+0x5b0>
     a6c:	032c222f 	teqeq	ip, #-268435454	; 0xf0000002
     a70:	22120863 	andscs	r0, r2, #6488064	; 0x630000
     a74:	02040200 	andeq	r0, r4, #0
     a78:	04020021 	streq	r0, [r2], #-33	; 0x21
     a7c:	02001f02 	andeq	r1, r0, #8
     a80:	00210204 	eoreq	r0, r1, r4, lsl #4
     a84:	2d020402 	cfstrscs	mvf0, [r2, #-8]
     a88:	02040200 	andeq	r0, r4, #0
     a8c:	04020022 	streq	r0, [r2], #-34	; 0x22
     a90:	03323a02 	teqeq	r2, #8192	; 0x2000
     a94:	3f214a6f 	svccc	0x00214a6f
     a98:	8f03304b 	svchi	0x0003304b
     a9c:	f4033c04 			; <UNDEFINED> instruction: 0xf4033c04
     aa0:	8c032e7b 	stchi	14, cr2, [r3], {123}	; 0x7b
     aa4:	e1032e04 	tst	r3, r4, lsl #28
     aa8:	11149005 	tstne	r4, r5
     aac:	30111430 	andscc	r1, r1, r0, lsr r4
     ab0:	02001f21 	andeq	r1, r0, #132	; 0x84
     ab4:	00250204 	eoreq	r0, r5, r4, lsl #4
     ab8:	2f020402 	svccs	0x00020402
     abc:	02040200 	andeq	r0, r4, #0
     ac0:	04020031 	streq	r0, [r2], #-49	; 0x31
     ac4:	02005902 	andeq	r5, r0, #32768	; 0x8000
     ac8:	7a030204 	bvc	c12e0 <__Stack_Size+0xc0ee0>
     acc:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     ad0:	02002602 	andeq	r2, r0, #2097152	; 0x200000
     ad4:	7a030204 	bvc	c12ec <__Stack_Size+0xc0eec>
     ad8:	573e282e 	ldrpl	r2, [lr, -lr, lsr #16]!
     adc:	3e3c0903 	cdpcc	9, 3, cr0, cr12, cr3, {0}
     ae0:	03206803 	teqeq	r0, #196608	; 0x30000
     ae4:	2c3d4a10 	ldccs	10, cr4, [sp], #-64	; 0xffffffc0
     ae8:	6679e203 	ldrbtvs	lr, [r9], -r3, lsl #4
     aec:	3d3d304b 	ldccc	0, cr3, [sp, #-300]!	; 0xfffffed4
     af0:	67592f3f 	smmlarvs	r9, pc, pc, r2	; <UNPREDICTABLE>
     af4:	3d3d6759 	ldccc	7, cr6, [sp, #-356]!	; 0xfffffe9c
     af8:	99032b23 	stmdbls	r3, {r0, r1, r5, r8, r9, fp, sp}
     afc:	0328ba06 	teqeq	r8, #24576	; 0x6000
     b00:	27212078 			; <UNDEFINED> instruction: 0x27212078
     b04:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     b08:	02002302 	andeq	r2, r0, #134217728	; 0x8000000
     b0c:	002f0204 	eoreq	r0, pc, r4, lsl #4
     b10:	03020402 	movweq	r0, #9218	; 0x2402
     b14:	02002e73 	andeq	r2, r0, #1840	; 0x730
     b18:	10030204 	andne	r0, r3, r4, lsl #4
     b1c:	04020020 	streq	r0, [r2], #-32
     b20:	3c700302 	ldclcc	3, cr0, [r0], #-8
     b24:	02040200 	andeq	r0, r4, #0
     b28:	00201003 	eoreq	r1, r0, r3
     b2c:	3d020402 	cfstrscc	mvf0, [r2, #-8]
     b30:	02040200 	andeq	r0, r4, #0
     b34:	00207a03 	eoreq	r7, r0, r3, lsl #20
     b38:	26020402 	strcs	r0, [r2], -r2, lsl #8
     b3c:	02040200 	andeq	r0, r4, #0
     b40:	282e7a03 	stmdacs	lr!, {r0, r1, r9, fp, ip, sp, lr}
     b44:	0903574c 	stmdbeq	r3, {r2, r3, r6, r8, r9, sl, ip, lr}
     b48:	61033e3c 	tstvs	r3, ip, lsr lr
     b4c:	4a17032e 	bmi	5c180c <__Stack_Size+0x5c140c>
     b50:	0a032c3d 	beq	cbc4c <__Stack_Size+0xcb84c>
     b54:	1f212266 	svcne	0x00212266
     b58:	2d301e31 	ldccs	14, cr1, [r0, #-196]!	; 0xffffff3c
     b5c:	1f301e22 	svcne	0x00301e22
     b60:	2d4b3d3e 	stclcs	13, cr3, [fp, #-248]	; 0xffffff08
     b64:	2d4b3d3e 	stclcs	13, cr3, [fp, #-248]	; 0xffffff08
     b68:	2d4b3d3e 	stclcs	13, cr3, [fp, #-248]	; 0xffffff08
     b6c:	213e3d3e 	teqcs	lr, lr, lsr sp
     b70:	311f2122 	tstcc	pc, r2, lsr #2
     b74:	222d301e 	eorcs	r3, sp, #30
     b78:	3e1f301e 	mrccc	0, 0, r3, cr15, cr14, {0}
     b7c:	3e2d4b3d 	vmovcc.16	d13[2], r4
     b80:	f2033e3d 			; <UNDEFINED> instruction: 0xf2033e3d
     b84:	3f212075 	svccc	0x00212075
     b88:	1f211f22 	svcne	0x00211f22
     b8c:	3e3e3d2f 	cdpcc	13, 3, cr3, cr14, cr15, {1}
     b90:	03332ca2 	teqeq	r3, #41472	; 0xa200
     b94:	12033c72 	andne	r3, r3, #29184	; 0x7200
     b98:	032d213c 	teqeq	sp, #15
     b9c:	14f20be5 	ldrbtne	r0, [r2], #3045	; 0xbe5
     ba0:	1f21221e 	svcne	0x0021221e
     ba4:	3d213d2f 	stccc	13, cr3, [r1, #-188]!	; 0xffffff44
     ba8:	2f1f2f4d 	svccs	0x001f2f4d
     bac:	213d8832 	teqcs	sp, r2, lsr r8
     bb0:	2f4d3d4b 	svccs	0x004d3d4b
     bb4:	213d2f1f 	teqcs	sp, pc, lsl pc
     bb8:	1f2f4d3d 	svcne	0x002f4d3d
     bbc:	3d213d2f 	stccc	13, cr3, [r1, #-188]!	; 0xffffff44
     bc0:	2f1f2f4d 	svccs	0x001f2f4d
     bc4:	033d213d 	teqeq	sp, #1073741839	; 0x4000000f
     bc8:	4c3e4a0e 	ldcmi	10, cr4, [lr], #-56	; 0xffffffc8
     bcc:	265b2c22 	ldrbcs	r2, [fp], -r2, lsr #24
     bd0:	23763e42 	cmncs	r6, #1056	; 0x420
     bd4:	1f2f4c30 	svcne	0x002f4c30
     bd8:	201a0321 	andscs	r0, sl, r1, lsr #6
     bdc:	215e5c5b 	cmpcs	lr, fp, asr ip
     be0:	2e5b032d 	cdpcs	3, 5, cr0, cr11, cr13, {1}
     be4:	3e3e3e3e 	mrccc	14, 1, r3, cr14, cr14, {1}
     be8:	0200684c 	andeq	r6, r0, #4980736	; 0x4c0000
     bec:	5b3e0104 	blpl	f81004 <__Stack_Size+0xf80c04>
     bf0:	01040200 	mrseq	r0, R12_usr
     bf4:	5814033e 	ldmdapl	r4, {r1, r2, r3, r4, r5, r8, r9}
     bf8:	224d6927 	subcs	r6, sp, #638976	; 0x9c000
     bfc:	2f1c241d 	svccs	0x001c241d
     c00:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
     c04:	2f2f1d40 	svccs	0x002f1d40
     c08:	2222302f 	eorcs	r3, r2, #47	; 0x2f
     c0c:	2f2f2f1c 	svccs	0x002f2f1c
     c10:	36212f2f 	strtcc	r2, [r1], -pc, lsr #30
     c14:	321d231b 	andscc	r2, sp, #1811939328	; 0x6c000000
     c18:	2f2b311e 	svccs	0x002b311e
     c1c:	4d2f2f2f 	stcmi	15, cr2, [pc, #-188]!	; b68 <__Stack_Size+0x768>
     c20:	2f2f2f2c 	svccs	0x002f2f2c
     c24:	1d302f3d 	ldcne	15, cr2, [r0, #-244]!	; 0xffffff0c
     c28:	33302f2f 	teqcc	r0, #188	; 0xbc
     c2c:	2f2e7903 	svccs	0x002e7903
     c30:	2b31302f 	blcs	c4ccf4 <__Stack_Size+0xc4c8f4>
     c34:	2f2f2f2f 	svccs	0x002f2f2f
     c38:	2f2a303f 	svccs	0x002a303f
     c3c:	3f4c2f2f 	svccc	0x004c2f2f
     c40:	312f2f2a 	teqcc	pc, sl, lsr #30
     c44:	2f2f2f39 	svccs	0x002f2f39
     c48:	0341222f 	movteq	r2, #4655	; 0x122f
     c4c:	2f2f2e79 	svccs	0x002f2e79
     c50:	2f3a4d30 	svccs	0x003a4d30
     c54:	3a3f2f2f 	bcc	fcc918 <__Stack_Size+0xfcc518>
     c58:	312f2f2f 	teqcc	pc, pc, lsr #30
     c5c:	2f2f2f39 	svccs	0x002f2f39
     c60:	2f39312f 	svccs	0x0039312f
     c64:	3e2f2f2f 	cdpcc	15, 2, cr2, cr15, cr15, {1}
     c68:	3a312f3b 	bcc	c4c95c <__Stack_Size+0xc4c55c>
     c6c:	4c2f2f2f 	stcmi	15, cr2, [pc], #-188	; bb8 <__Stack_Size+0x7b8>
     c70:	3a322f3b 	bcc	c8c964 <__Stack_Size+0xc8c564>
     c74:	4b2f2f2f 	blmi	bcc938 <__Stack_Size+0xbcc538>
     c78:	3e30834b 	cdpcc	3, 3, cr8, cr0, cr11, {2}
     c7c:	2d311e25 	ldccs	14, cr1, [r1, #-148]!	; 0xffffff6c
     c80:	302f2129 	eorcc	r2, pc, r9, lsr #2
     c84:	212f231f 	teqcs	pc, pc, lsl r3	; <UNPREDICTABLE>
     c88:	1f22302f 	svcne	0x0022302f
     c8c:	2f221d21 	svccs	0x00221d21
     c90:	4b6b6c31 	blmi	1adbd5c <__Stack_Size+0x1adb95c>
     c94:	0402004d 	streq	r0, [r2], #-77	; 0x4d
     c98:	00593d01 	subseq	r3, r9, r1, lsl #26
     c9c:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     ca0:	0402005b 	streq	r0, [r2], #-91	; 0x5b
     ca4:	00593d01 	subseq	r3, r9, r1, lsl #26
     ca8:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     cac:	034b4b5a 	movteq	r4, #47962	; 0xbb5a
     cb0:	23667dc2 	cmncs	r6, #12416	; 0x3080
     cb4:	032e0c03 	teqeq	lr, #768	; 0x300
     cb8:	2f2f2074 	svccs	0x002f2074
     cbc:	032f2f2f 	teqeq	pc, #188	; 0xbc
     cc0:	032e77f0 	teqeq	lr, #62914560	; 0x3c00000
     cc4:	033c0897 	teqeq	ip, #9895936	; 0x970000
     cc8:	ef034a7a 	svc	0x00034a7a
     ccc:	91032e77 	tstls	r3, r7, ror lr
     cd0:	ef032008 	svc	0x00032008
     cd4:	9d032e77 	stcls	14, cr2, [r3, #-476]	; 0xfffffe24
     cd8:	02002e08 	andeq	r2, r0, #128	; 0x80
     cdc:	58060104 	stmdapl	r6, {r2, r8}
     ce0:	4b593f06 	blmi	1650900 <__Stack_Size+0x1650500>
     ce4:	db032f5a 	blle	cca54 <__Stack_Size+0xcc654>
     ce8:	a6034a77 			; <UNDEFINED> instruction: 0xa6034a77
     cec:	da032008 	ble	c8d14 <__Stack_Size+0xc8914>
     cf0:	ac032e77 	stcge	14, cr2, [r3], {119}	; 0x77
     cf4:	2d216608 	stccs	6, cr6, [r1, #-32]!	; 0xffffffe0
     cf8:	01000c02 	tsteq	r0, r2, lsl #24
     cfc:	00022701 	andeq	r2, r2, r1, lsl #14
     d00:	97000200 	strls	r0, [r0, -r0, lsl #4]
     d04:	02000000 	andeq	r0, r0, #0
     d08:	0d0efb01 	vstreq	d15, [lr, #-4]
     d0c:	01010100 	mrseq	r0, (UNDEF: 17)
     d10:	00000001 	andeq	r0, r0, r1
     d14:	01000001 	tsteq	r0, r1
     d18:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     d1c:	30316632 	eorscc	r6, r1, r2, lsr r6
     d20:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d24:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
     d28:	74730063 	ldrbtvc	r0, [r3], #-99	; 0x63
     d2c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     d30:	5f783031 	svcpl	0x00783031
     d34:	2f62696c 	svccs	0x0062696c
     d38:	00636e69 	rsbeq	r6, r3, r9, ror #28
     d3c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     d40:	31663233 	cmncc	r6, r3, lsr r2
     d44:	615f7830 	cmpvs	pc, r0, lsr r8	; <UNPREDICTABLE>
     d48:	632e6364 	teqvs	lr, #-1879048191	; 0x90000001
     d4c:	00000100 	andeq	r0, r0, r0, lsl #2
     d50:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     d54:	30316632 	eorscc	r6, r1, r2, lsr r6
     d58:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d5c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     d60:	00000200 	andeq	r0, r0, r0, lsl #4
     d64:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     d68:	30316632 	eorscc	r6, r1, r2, lsr r6
     d6c:	616d5f78 	smcvs	54776	; 0xd5f8
     d70:	00682e70 	rsbeq	r2, r8, r0, ror lr
     d74:	73000002 	movwvc	r0, #2
     d78:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     d7c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     d80:	6364615f 	cmnvs	r4, #-1073741801	; 0xc0000017
     d84:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     d88:	74730000 	ldrbtvc	r0, [r3], #-0
     d8c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     d90:	5f783031 	svcpl	0x00783031
     d94:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
     d98:	00020068 	andeq	r0, r2, r8, rrx
     d9c:	05000000 	streq	r0, [r0, #-0]
     da0:	00509002 	subseq	r9, r0, r2
     da4:	01820308 	orreq	r0, r2, r8, lsl #6
     da8:	5ab02401 	bpl	fec09db4 <SCS_BASE+0x1ebfbdb4>
     dac:	5a415a41 	bpl	10576b8 <__Stack_Size+0x10572b8>
     db0:	2e7a0342 	cdpcs	3, 7, cr0, cr10, cr2, {2}
     db4:	03661403 	cmneq	r6, #50331648	; 0x3000000
     db8:	7103010f 	tstvc	r3, pc, lsl #2
     dbc:	20110320 	andscs	r0, r1, r0, lsr #6
     dc0:	5a321c32 	bpl	c87e90 <__Stack_Size+0xc87a90>
     dc4:	03200b03 	teqeq	r0, #3072	; 0xc00
     dc8:	1b272e79 	blne	9cc7b4 <__Stack_Size+0x9cc3b4>
     dcc:	311f2133 	tstcc	pc, r3, lsr r1	; <UNPREDICTABLE>
     dd0:	1b200903 	blne	8031e4 <__Stack_Size+0x802de4>
     dd4:	3e321d25 	cdpcc	13, 3, cr1, cr2, cr5, {1}
     dd8:	154a0c03 	strbne	r0, [sl, #-3075]	; 0xc03
     ddc:	03200f03 	teqeq	r0, #12
     de0:	23232071 	teqcs	r3, #113	; 0x71
     de4:	03232323 	teqeq	r3, #-1946157056	; 0x8c000000
     de8:	1d1a2e0d 	ldcne	14, cr2, [sl, #-52]	; 0xffffffcc
     dec:	0f034123 	svceq	0x00034123
     df0:	231d1a4a 	tstcs	sp, #303104	; 0x4a000
     df4:	4a140341 	bmi	501b00 <__Stack_Size+0x501700>
     df8:	25010903 	strcs	r0, [r1, #-2307]	; 0x903
     dfc:	0333231d 	teqeq	r3, #1946157056	; 0x74000000
     e00:	03174a0c 	tsteq	r7, #49152	; 0xc000
     e04:	0319580b 	tsteq	r9, #720896	; 0xb0000
     e08:	0a03200d 	beq	c8e44 <__Stack_Size+0xc8a44>
     e0c:	0b03173c 	bleq	c6b04 <__Stack_Size+0xc6704>
     e10:	0d031958 	stceq	9, cr1, [r3, #-352]	; 0xfffffea0
     e14:	3c0c0320 	stccc	3, cr0, [ip], {32}
     e18:	1c010903 	stcne	9, cr0, [r1], {3}
     e1c:	0c034224 	sfmeq	f4, 4, [r3], {36}	; 0x24
     e20:	0d03194a 	stceq	9, cr1, [r3, #-296]	; 0xfffffed8
     e24:	3c0d0320 	stccc	3, cr0, [sp], {32}
     e28:	24010903 	strcs	r0, [r1], #-2307	; 0x903
     e2c:	0330311e 	teqeq	r0, #-2147483641	; 0x80000007
     e30:	1d1a2e0f 	ldcne	14, cr2, [sl, #-60]	; 0xffffffc4
     e34:	2e034123 	adfcssp	f4, f3, f3
     e38:	010a034a 	tsteq	sl, sl, asr #6
     e3c:	03207603 	teqeq	r0, #3145728	; 0x300000
     e40:	5c253c0a 	stcpl	12, cr3, [r5], #-40	; 0xffffffd8
     e44:	242e7a03 	strtcs	r7, [lr], #-2563	; 0xa03
     e48:	4e352232 	mrcmi	2, 1, r2, cr5, cr2, {1}
     e4c:	242e7a03 	strtcs	r7, [lr], #-2563	; 0xa03
     e50:	4f233032 	svcmi	0x00233032
     e54:	2e7a035c 	mrccs	3, 3, r0, cr10, cr12, {2}
     e58:	31303224 	teqcc	r0, r4, lsr #4
     e5c:	7a035c33 	bvc	d7f30 <__Stack_Size+0xd7b30>
     e60:	3032242e 	eorscc	r2, r2, lr, lsr #8
     e64:	7a035c36 	bvc	d7f44 <__Stack_Size+0xd7b44>
     e68:	2232242e 	eorscs	r2, r2, #771751936	; 0x2e000000
     e6c:	1a2e0f03 	bne	b84a80 <__Stack_Size+0xb84680>
     e70:	0341231d 	movteq	r2, #4893	; 0x131d
     e74:	21174a0c 	tstcs	r7, ip, lsl #20
     e78:	142e0903 	strtne	r0, [lr], #-2307	; 0x903
     e7c:	3c0e032f 	stccc	3, cr0, [lr], {47}	; 0x2f
     e80:	41231d1a 	teqmi	r3, sl, lsl sp
     e84:	1a4a1003 	bne	1284e98 <__Stack_Size+0x1284a98>
     e88:	0341231d 	movteq	r2, #4893	; 0x131d
     e8c:	221a4a2b 	andscs	r4, sl, #176128	; 0x2b000
     e90:	0f032230 	svceq	0x00032230
     e94:	231d1a2e 	tstcs	sp, #188416	; 0x2e000
     e98:	4a100341 	bmi	401ba4 <__Stack_Size+0x4017a4>
     e9c:	1c010903 	stcne	9, cr0, [r1], {3}
     ea0:	0c034224 	sfmeq	f4, 4, [r3], {36}	; 0x24
     ea4:	0d03194a 	stceq	9, cr1, [r3, #-296]	; 0xfffffed8
     ea8:	3c2c0320 	stccc	3, cr0, [ip], #-128	; 0xffffff80
     eac:	03010a03 	movweq	r0, #6659	; 0x1a03
     eb0:	0a032076 	beq	c9090 <__Stack_Size+0xc8c90>
     eb4:	035c253c 	cmpeq	ip, #251658240	; 0xf000000
     eb8:	32242e7a 	eorcc	r2, r4, #1952	; 0x7a0
     ebc:	034e3522 	movteq	r3, #58658	; 0xe522
     ec0:	32242e7a 	eorcc	r2, r4, #1952	; 0x7a0
     ec4:	30222530 	eorcc	r2, r2, r0, lsr r5
     ec8:	22322c86 	eorscs	r2, r2, #34304	; 0x8600
     ecc:	032e0d03 	teqeq	lr, #192	; 0xc0
     ed0:	1e240109 	sufnes	f0, f4, #1.0
     ed4:	14033031 	strne	r3, [r3], #-49	; 0x31
     ed8:	1103192e 	tstne	r3, lr, lsr #18
     edc:	032f182e 	teqeq	pc, #3014656	; 0x2e0000
     ee0:	221a2e1b 	andscs	r2, sl, #432	; 0x1b0
     ee4:	1003224c 	andne	r2, r3, ip, asr #4
     ee8:	0322192e 	teqeq	r2, #753664	; 0xb8000
     eec:	221a2e20 	andscs	r2, sl, #512	; 0x200
     ef0:	0c032230 	sfmeq	f2, 4, [r3], {48}	; 0x30
     ef4:	231d272e 	tstcs	sp, #12058624	; 0xb80000
     ef8:	74130341 	ldrvc	r0, [r3], #-833	; 0x341
     efc:	2e0d031a 	mcrcs	3, 0, r0, cr13, cr10, {0}
     f00:	184a1103 	stmdane	sl, {r0, r1, r8, ip}^
     f04:	033c1003 	teqeq	ip, #3
     f08:	0023010c 	eoreq	r0, r3, ip, lsl #2
     f0c:	47010402 	strmi	r0, [r1, -r2, lsl #8]
     f10:	01040200 	mrseq	r0, R12_usr
     f14:	04020023 	streq	r0, [r2], #-35	; 0x23
     f18:	0a032301 	beq	c9b24 <__Stack_Size+0xc9724>
     f1c:	200f033c 	andcs	r0, pc, ip, lsr r3	; <UNPREDICTABLE>
     f20:	02010b03 	andeq	r0, r1, #3072	; 0xc00
     f24:	01010004 	tsteq	r1, r4
     f28:	00000210 	andeq	r0, r0, r0, lsl r2
     f2c:	00880002 	addeq	r0, r8, r2
     f30:	01020000 	mrseq	r0, (UNDEF: 2)
     f34:	000d0efb 	strdeq	r0, [sp], -fp
     f38:	01010101 	tsteq	r1, r1, lsl #2
     f3c:	01000000 	mrseq	r0, (UNDEF: 0)
     f40:	73010000 	movwvc	r0, #4096	; 0x1000
     f44:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     f48:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     f4c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     f50:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     f54:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     f58:	31663233 	cmncc	r6, r3, lsr r2
     f5c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
     f60:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
     f64:	0000636e 	andeq	r6, r0, lr, ror #6
     f68:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     f6c:	30316632 	eorscc	r6, r1, r2, lsr r6
     f70:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
     f74:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
     f78:	00010063 	andeq	r0, r1, r3, rrx
     f7c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     f80:	31663233 	cmncc	r6, r3, lsr r2
     f84:	745f7830 	ldrbvc	r7, [pc], #-2096	; f8c <__Stack_Size+0xb8c>
     f88:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     f8c:	00020068 	andeq	r0, r2, r8, rrx
     f90:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     f94:	31663233 	cmncc	r6, r3, lsr r2
     f98:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; ee0 <__Stack_Size+0xae0>
     f9c:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
     fa0:	00000200 	andeq	r0, r0, r0, lsl #4
     fa4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     fa8:	30316632 	eorscc	r6, r1, r2, lsr r6
     fac:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
     fb0:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
     fb4:	00020068 	andeq	r0, r2, r8, rrx
     fb8:	05000000 	streq	r0, [r0, #-0]
     fbc:	0053d802 	subseq	sp, r3, r2, lsl #16
     fc0:	00d60308 	sbcseq	r0, r6, r8, lsl #6
     fc4:	03591701 	cmpeq	r9, #262144	; 0x40000
     fc8:	5917740e 	ldmdbpl	r7, {r1, r2, r3, sl, ip, sp, lr}
     fcc:	17740e03 	ldrbne	r0, [r4, -r3, lsl #28]!
     fd0:	740c0359 	strvc	r0, [ip], #-857	; 0x359
     fd4:	212d2f14 	teqcs	sp, r4, lsl pc
     fd8:	14740b03 	ldrbtne	r0, [r4], #-2819	; 0xb03
     fdc:	8203f603 	andhi	pc, r3, #3145728	; 0x300000
     fe0:	0a032f14 	beq	ccc38 <__Stack_Size+0xcc838>
     fe4:	032f144a 	teqeq	pc, #1241513984	; 0x4a000000
     fe8:	03154a0b 	tsteq	r5, #45056	; 0xb000
     fec:	0a032e09 	beq	cc818 <__Stack_Size+0xcc418>
     ff0:	0a031566 	beq	c6590 <__Stack_Size+0xc6190>
     ff4:	660e032e 	strvs	r0, [lr], -lr, lsr #6
     ff8:	33231d28 	teqcc	r3, #2560	; 0xa00
     ffc:	18741203 	ldmdane	r4!, {r0, r1, r9, ip}^
    1000:	2941263e 	stmdbcs	r1, {r1, r2, r3, r4, r5, r9, sl, sp}^
    1004:	033c1003 	teqeq	ip, #3
    1008:	03174a0f 	tsteq	r7, #61440	; 0xf000
    100c:	5015660c 	andspl	r6, r5, ip, lsl #12
    1010:	74033e42 	strvc	r3, [r3], #-3650	; 0xe42
    1014:	1003344a 	andne	r3, r3, sl, asr #8
    1018:	3c0c0320 	stccc	3, cr0, [ip], {32}
    101c:	02002420 	andeq	r2, r0, #536870912	; 0x20000000
    1020:	00310104 	eorseq	r0, r1, r4, lsl #2
    1024:	06020402 	streq	r0, [r2], -r2, lsl #8
    1028:	1903062e 	stmdbne	r3, {r1, r2, r3, r5, r9, sl}
    102c:	68033020 	stmdavs	r3, {r5, ip, sp}
    1030:	5d332f74 	ldcpl	15, cr2, [r3, #-464]!	; 0xfffffe30
    1034:	207def03 	rsbscs	lr, sp, r3, lsl #30
    1038:	03200903 	teqeq	r0, #49152	; 0xc000
    103c:	0a032e77 	beq	cca20 <__Stack_Size+0xcc620>
    1040:	23212d20 	teqcs	r1, #2048	; 0x800
    1044:	03207303 	teqeq	r0, #201326592	; 0xc000000
    1048:	31302e0d 	teqcc	r0, sp, lsl #28
    104c:	1e304822 	cdpne	8, 3, cr4, cr0, cr2, {1}
    1050:	30231d25 	eorcc	r1, r3, r5, lsr #26
    1054:	8e035d31 	mcrhi	13, 0, r5, cr3, cr1, {1}
    1058:	2620747f 			; <UNDEFINED> instruction: 0x2620747f
    105c:	2d2f314c 	stfcss	f3, [pc, #-304]!	; f34 <__Stack_Size+0xb34>
    1060:	4d4b2221 	sfmmi	f2, 2, [fp, #-132]	; 0xffffff7c
    1064:	5a5b314c 	bpl	16cd59c <__Stack_Size+0x16cd19c>
    1068:	4c323222 	lfmmi	f3, 4, [r2], #-136	; 0xffffff78
    106c:	032e5803 	teqeq	lr, #196608	; 0x30000
    1070:	31792e2b 	cmncc	r9, fp, lsr #28
    1074:	7ef8035e 	mrcvc	3, 7, r0, cr8, cr14, {2}
    1078:	0f032074 	svceq	0x00032074
    107c:	2f313e20 	svccs	0x00313e20
    1080:	7303212d 	movwvc	r2, #12589	; 0x312d
    1084:	200e0320 	andcs	r0, lr, r0, lsr #6
    1088:	03207303 	teqeq	r0, #201326592	; 0xc000000
    108c:	1e30200d 	cdpne	0, 3, cr2, cr0, cr13, {0}
    1090:	20720322 	rsbscs	r0, r2, r2, lsr #6
    1094:	372e1503 	strcc	r1, [lr, -r3, lsl #10]!
    1098:	30231d23 	eorcc	r1, r3, r3, lsr #26
    109c:	231d233e 	tstcs	sp, #-134217728	; 0xf8000000
    10a0:	2e640331 	mcrcs	3, 3, r0, cr4, cr1, {1}
    10a4:	302e1c03 	eorcc	r1, lr, r3, lsl #24
    10a8:	5d033f31 	stcpl	15, cr3, [r3, #-196]	; 0xffffff3c
    10ac:	2023032e 	eorcs	r0, r3, lr, lsr #6
    10b0:	231d234c 	tstcs	sp, #805306369	; 0x30000001
    10b4:	036b3131 	cmneq	fp, #1073741836	; 0x4000000c
    10b8:	20827f90 	umullcs	r7, r2, r0, pc	; <UNPREDICTABLE>
    10bc:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    10c0:	2f313026 	svccs	0x00313026
    10c4:	2423212d 	strtcs	r2, [r3], #-301	; 0x12d
    10c8:	30233d1c 	eorcc	r3, r3, ip, lsl sp
    10cc:	bb035d31 	bllt	d8598 <__Stack_Size+0xd8198>
    10d0:	2720587f 			; <UNDEFINED> instruction: 0x2720587f
    10d4:	27207903 	strcs	r7, [r0, -r3, lsl #18]!
    10d8:	1e5c3130 	mrcne	1, 2, r3, cr12, cr0, {1}
    10dc:	5d313022 	ldcpl	0, cr3, [r1, #-136]!	; 0xffffff78
    10e0:	4a7fab03 	bmi	1febcf4 <__Stack_Size+0x1feb8f4>
    10e4:	79032720 	stmdbvc	r3, {r5, r8, r9, sl, sp}
    10e8:	32302720 	eorscc	r2, r0, #8388608	; 0x800000
    10ec:	1d4f1e22 	stclne	14, cr1, [pc, #-136]	; 106c <__Stack_Size+0xc6c>
    10f0:	31323023 	teqcc	r2, r3, lsr #32
    10f4:	2e63033e 	mcrcs	3, 3, r0, cr3, cr14, {1}
    10f8:	5e2e2803 	cdppl	8, 2, cr2, cr14, cr3, {0}
    10fc:	4a7f9303 	bmi	1fe5d10 <__Stack_Size+0x1fe5910>
    1100:	2f314c24 	svccs	0x00314c24
    1104:	4b23212d 	blmi	8c95c0 <__Stack_Size+0x8c91c0>
    1108:	5b314c4d 	blpl	c54244 <__Stack_Size+0xc53e44>
    110c:	1d311d23 	ldcne	13, cr1, [r1, #-140]!	; 0xffffff74
    1110:	033e2323 	teqeq	lr, #-1946157056	; 0x8c000000
    1114:	2c032e5f 	stccs	14, cr2, [r3], {95}	; 0x5f
    1118:	ab035e2e 	blge	d89d8 <__Stack_Size+0xd85d8>
    111c:	4c24747f 	cfstrsmi	mvf7, [r4], #-508	; 0xfffffe04
    1120:	2b235931 	blcs	8d75ec <__Stack_Size+0x8d71ec>
    1124:	5d31303f 	ldcpl	0, cr3, [r1, #-252]!	; 0xffffff04
    1128:	203c4203 	eorscs	r4, ip, r3, lsl #4
    112c:	59314c27 	ldmdbpl	r1!, {r0, r1, r2, r5, sl, fp, lr}
    1130:	3f2b2321 	svccc	0x002b2321
    1134:	025d3130 	subseq	r3, sp, #12
    1138:	01010003 	tsteq	r1, r3
    113c:	00000184 	andeq	r0, r0, r4, lsl #3
    1140:	00990002 	addseq	r0, r9, r2
    1144:	01020000 	mrseq	r0, (UNDEF: 2)
    1148:	000d0efb 	strdeq	r0, [sp], -fp
    114c:	01010101 	tsteq	r1, r1, lsl #2
    1150:	01000000 	mrseq	r0, (UNDEF: 0)
    1154:	73010000 	movwvc	r0, #4096	; 0x1000
    1158:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    115c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1160:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1164:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1168:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    116c:	31663233 	cmncc	r6, r3, lsr r2
    1170:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    1174:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    1178:	0000636e 	andeq	r6, r0, lr, ror #6
    117c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1180:	30316632 	eorscc	r6, r1, r2, lsr r6
    1184:	70675f78 	rsbvc	r5, r7, r8, ror pc
    1188:	632e6f69 	teqvs	lr, #420	; 0x1a4
    118c:	00000100 	andeq	r0, r0, r0, lsl #2
    1190:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1194:	30316632 	eorscc	r6, r1, r2, lsr r6
    1198:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    119c:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    11a0:	00000200 	andeq	r0, r0, r0, lsl #4
    11a4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    11a8:	30316632 	eorscc	r6, r1, r2, lsr r6
    11ac:	616d5f78 	smcvs	54776	; 0xd5f8
    11b0:	00682e70 	rsbeq	r2, r8, r0, ror lr
    11b4:	73000002 	movwvc	r0, #2
    11b8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    11bc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    11c0:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    11c4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    11c8:	73000002 	movwvc	r0, #2
    11cc:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    11d0:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    11d4:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    11d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	58580205 	ldmdapl	r8, {r0, r2, r9}^
    11e4:	33030800 	movwcc	r0, #14336	; 0x3800
    11e8:	4bf52401 	blmi	ffd4a1f4 <SCS_BASE+0x1fd3c1f4>
    11ec:	ac17032a 	ldcge	3, cr0, [r7], {42}	; 0x2a
    11f0:	2e70034b 	cdpcs	3, 7, cr0, cr0, cr11, {2}
    11f4:	324b324b 	subcc	r3, fp, #-1342177276	; 0xb0000004
    11f8:	2e09034b 	cdpcs	3, 0, cr0, cr9, cr11, {2}
    11fc:	4259324b 	subsmi	r3, r9, #-1342177276	; 0xb0000004
    1200:	032e7a03 	teqeq	lr, #12288	; 0x3000
    1204:	2d138212 	lfmcs	f0, 1, [r3, #-72]	; 0xffffffb8
    1208:	2d2f2f21 	stccs	15, cr2, [pc, #-132]!	; 118c <__Stack_Size+0xd8c>
    120c:	032e0f03 	teqeq	lr, #12
    1210:	7603010a 	strvc	r0, [r3], -sl, lsl #2
    1214:	200c0320 	andcs	r0, ip, r0, lsr #6
    1218:	74033325 	strvc	r3, [r3], #-805	; 0x325
    121c:	3e333520 	cfabs64cc	mvdx3, mvdx3
    1220:	303e2222 	eorscc	r2, lr, r2, lsr #4
    1224:	2b4e2230 	blcs	1389aec <__Stack_Size+0x13896ec>
    1228:	22311d34 	eorscs	r1, r1, #3328	; 0xd00
    122c:	66032233 			; <UNDEFINED> instruction: 0x66032233
    1230:	3c1f032e 	ldccc	3, cr0, [pc], {46}	; 0x2e
    1234:	03213025 	teqeq	r1, #37	; 0x25
    1238:	03207fbe 	teqeq	r0, #760	; 0x2f8
    123c:	3e2e00c4 	cdpcc	0, 2, cr0, cr14, cr4, {6}
    1240:	4e22302f 	cdpmi	0, 2, cr3, cr2, cr15, {1}
    1244:	311d342b 	tstcc	sp, fp, lsr #8
    1248:	03223122 	teqeq	r2, #-2147483640	; 0x80000008
    124c:	1b032e69 	blne	ccbf8 <__Stack_Size+0xcc7f8>
    1250:	2e0d033c 	mcrcs	3, 0, r0, cr13, cr12, {1}
    1254:	1e212f14 	mcrne	15, 1, r2, cr1, cr4, {0}
    1258:	0d032121 	stfeqs	f2, [r3, #-132]	; 0xffffff7c
    125c:	0903192e 	stmdbeq	r3, {r1, r2, r3, r5, r8, fp, ip}
    1260:	4a0a032e 	bmi	281f20 <__Stack_Size+0x281b20>
    1264:	0c032116 	stfeqs	f2, [r3], {22}
    1268:	0903192e 	stmdbeq	r3, {r1, r2, r3, r5, r8, fp, ip}
    126c:	4a0a032e 	bmi	281f2c <__Stack_Size+0x281b2c>
    1270:	0d032116 	stfeqs	f2, [r3, #-88]	; 0xffffffa8
    1274:	0d03172e 	stceq	7, cr1, [r3, #-184]	; 0xffffff48
    1278:	1103172e 	tstne	r3, lr, lsr #14
    127c:	3222182e 	eorcc	r1, r2, #3014656	; 0x2e0000
    1280:	162e0e03 	strtne	r0, [lr], -r3, lsl #28
    1284:	192e0e03 	stmdbne	lr!, {r0, r1, r9, sl, fp}
    1288:	22222230 	eorcs	r2, r2, #3
    128c:	2e100322 	cdpcs	3, 1, cr0, cr0, cr2, {1}
    1290:	20790319 	rsbscs	r0, r9, r9, lsl r3
    1294:	2f3d2227 	svccs	0x003d2227
    1298:	4a0c0330 	bmi	301f60 <__Stack_Size+0x301b60>
    129c:	66270316 			; <UNDEFINED> instruction: 0x66270316
    12a0:	23452527 	movtcs	r2, #21799	; 0x5527
    12a4:	2f1f2322 	svccs	0x001f2322
    12a8:	2e78034c 	cdpcs	3, 7, cr0, cr8, cr12, {2}
    12ac:	502e0a03 	eorpl	r0, lr, r3, lsl #20
    12b0:	5b223167 	blpl	88d854 <__Stack_Size+0x88d454>
    12b4:	19661003 	stmdbne	r6!, {r0, r1, ip}^
    12b8:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    12bc:	02912d4d 	addseq	r2, r1, #4928	; 0x1340
    12c0:	01010008 	tsteq	r1, r8
    12c4:	000001cf 	andeq	r0, r0, pc, asr #3
    12c8:	009a0002 	addseq	r0, sl, r2
    12cc:	01020000 	mrseq	r0, (UNDEF: 2)
    12d0:	000d0efb 	strdeq	r0, [sp], -fp
    12d4:	01010101 	tsteq	r1, r1, lsl #2
    12d8:	01000000 	mrseq	r0, (UNDEF: 0)
    12dc:	73010000 	movwvc	r0, #4096	; 0x1000
    12e0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    12e4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    12e8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    12ec:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    12f0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    12f4:	31663233 	cmncc	r6, r3, lsr r2
    12f8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    12fc:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    1300:	0000636e 	andeq	r6, r0, lr, ror #6
    1304:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1308:	30316632 	eorscc	r6, r1, r2, lsr r6
    130c:	766e5f78 	uqsub16vc	r5, lr, r8
    1310:	632e6369 	teqvs	lr, #-1543503871	; 0xa4000001
    1314:	00000100 	andeq	r0, r0, r0, lsl #2
    1318:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    131c:	30316632 	eorscc	r6, r1, r2, lsr r6
    1320:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1324:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1328:	00000200 	andeq	r0, r0, r0, lsl #4
    132c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1330:	30316632 	eorscc	r6, r1, r2, lsr r6
    1334:	616d5f78 	smcvs	54776	; 0xd5f8
    1338:	00682e70 	rsbeq	r2, r8, r0, ror lr
    133c:	73000002 	movwvc	r0, #2
    1340:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1344:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1348:	69766e5f 	ldmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    134c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    1350:	63000002 	movwvs	r0, #2
    1354:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
    1358:	5f336d78 	svcpl	0x00336d78
    135c:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
    1360:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1364:	00000002 	andeq	r0, r0, r2
    1368:	c0020500 	andgt	r0, r2, r0, lsl #10
    136c:	0308005a 	movweq	r0, #32858	; 0x805a
    1370:	21150124 	tstcs	r5, r4, lsr #2
    1374:	2f2f4b2d 	svccs	0x002f4b2d
    1378:	04020030 	streq	r0, [r2], #-48	; 0x30
    137c:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
    1380:	002c0204 	eoreq	r0, ip, r4, lsl #4
    1384:	22020402 	andcs	r0, r2, #33554432	; 0x2000000
    1388:	02040200 	andeq	r0, r4, #0
    138c:	0402001e 	streq	r0, [r2], #-30
    1390:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
    1394:	242c0204 	strtcs	r0, [ip], #-516	; 0x204
    1398:	154a0b03 	strbne	r0, [sl, #-2819]	; 0xb03
    139c:	03211e3e 	teqeq	r1, #992	; 0x3e0
    13a0:	77032009 	strvc	r2, [r3, -r9]
    13a4:	2121212e 	teqcs	r1, lr, lsr #2
    13a8:	21213e23 	teqcs	r1, r3, lsr #28
    13ac:	66170321 	ldrvs	r0, [r7], -r1, lsr #6
    13b0:	9e0e0317 	mcrls	3, 0, r0, cr14, cr7, {0}
    13b4:	03010a03 	movweq	r0, #6659	; 0x1a03
    13b8:	0a032076 	beq	c9598 <__Stack_Size+0xc9198>
    13bc:	1c242320 	stcne	3, cr2, [r4], #-128	; 0xffffff80
    13c0:	302f1f4c 	eorcc	r1, pc, ip, asr #30
    13c4:	231d232f 	tstcs	sp, #-1140850688	; 0xbc000000
    13c8:	2221222b 	eorcs	r2, r1, #-1342177278	; 0xb0000002
    13cc:	2d311d21 	ldccs	13, cr1, [r1, #-132]!	; 0xffffff7c
    13d0:	22212f4c 	eorcs	r2, r1, #304	; 0x130
    13d4:	42572f31 	subsmi	r2, r7, #196	; 0xc4
    13d8:	2d213b21 	fstmdbxcs	r1!, {d3-d18}	;@ Deprecated
    13dc:	14900e03 	ldrne	r0, [r0], #3587	; 0xe03
    13e0:	0321212f 	teqeq	r1, #-1073741813	; 0xc000000b
    13e4:	11142e0b 	tstne	r4, fp, lsl #28
    13e8:	142e0b03 	strtne	r0, [lr], #-2819	; 0xb03
    13ec:	2e0b0311 	mcrcs	3, 0, r0, cr11, cr1, {0}
    13f0:	0b031114 	bleq	c5848 <__Stack_Size+0xc5448>
    13f4:	0311142e 	tsteq	r1, #771751936	; 0x2e000000
    13f8:	21162e0d 	tstcs	r6, sp, lsl #28
    13fc:	2e0b0311 	mcrcs	3, 0, r0, cr11, cr1, {0}
    1400:	0b031114 	bleq	c5858 <__Stack_Size+0xc5458>
    1404:	032f132e 	teqeq	pc, #-1207959552	; 0xb8000000
    1408:	5a19580b 	bpl	65743c <__Stack_Size+0x65703c>
    140c:	03660903 	cmneq	r6, #49152	; 0xc000
    1410:	0316740a 	tsteq	r6, #167772160	; 0xa000000
    1414:	0316660b 	tsteq	r6, #11534336	; 0xb00000
    1418:	3d13d60c 	ldccc	6, cr13, [r3, #-48]	; 0xffffffd0
    141c:	19580b03 	ldmdbne	r8, {r0, r1, r8, r9, fp}^
    1420:	6609035a 			; <UNDEFINED> instruction: 0x6609035a
    1424:	13740b03 	cmnne	r4, #3072	; 0xc00
    1428:	4a10032f 	bmi	4020ec <__Stack_Size+0x401cec>
    142c:	9e0b0317 	mcrls	3, 0, r0, cr11, cr7, {0}
    1430:	820b0313 	andhi	r0, fp, #1275068416	; 0x4c000000
    1434:	82120313 	andshi	r0, r2, #1275068416	; 0x4c000000
    1438:	32221e27 	eorcc	r1, r2, #624	; 0x270
    143c:	19741303 	ldmdbne	r4!, {r0, r1, r8, r9, ip}^
    1440:	32221e6a 	eorcc	r1, r2, #1696	; 0x6a0
    1444:	03661a03 	cmneq	r6, #12288	; 0x3000
    1448:	77030109 	strvc	r0, [r3, -r9, lsl #2]
    144c:	20090320 	andcs	r0, r9, r0, lsr #6
    1450:	302f1f4c 	eorcc	r1, pc, ip, asr #30
    1454:	2f2f322f 	svccs	0x002f322f
    1458:	31242921 	teqcc	r4, r1, lsr #18
    145c:	82110375 	andshi	r0, r1, #-738197503	; 0xd4000001
    1460:	033e301a 	teqeq	lr, #26
    1464:	0f033c0b 	svceq	0x00033c0b
    1468:	03301966 	teqeq	r0, #1671168	; 0x198000
    146c:	30199e0f 	andscc	r9, r9, pc, lsl #28
    1470:	1aba1503 	bne	fee86884 <SCS_BASE+0x1ee78884>
    1474:	0b033e30 	bleq	d0d3c <__Stack_Size+0xd093c>
    1478:	9e11033c 	mrcls	3, 0, r0, cr1, cr12, {1}
    147c:	30223f19 	eorcc	r3, r2, r9, lsl pc
    1480:	362e7a03 	strtcc	r7, [lr], -r3, lsl #20
    1484:	3340224b 	movtcc	r2, #587	; 0x24b
    1488:	3c0f0323 	stccc	3, cr0, [pc], {35}	; 0x23
    148c:	30200903 	eorcc	r0, r0, r3, lsl #18
    1490:	04022332 	streq	r2, [r2], #-818	; 0x332
    1494:	f1010100 	setend	le
    1498:	02000000 	andeq	r0, r0, #0
    149c:	00009800 	andeq	r9, r0, r0, lsl #16
    14a0:	fb010200 	blx	41caa <__Stack_Size+0x418aa>
    14a4:	01000d0e 	tsteq	r0, lr, lsl #26
    14a8:	00010101 	andeq	r0, r1, r1, lsl #2
    14ac:	00010000 	andeq	r0, r1, r0
    14b0:	74730100 	ldrbtvc	r0, [r3], #-256	; 0x100
    14b4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    14b8:	5f783031 	svcpl	0x00783031
    14bc:	2f62696c 	svccs	0x0062696c
    14c0:	00637273 	rsbeq	r7, r3, r3, ror r2
    14c4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    14c8:	30316632 	eorscc	r6, r1, r2, lsr r6
    14cc:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    14d0:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    14d4:	73000063 	movwvc	r0, #99	; 0x63
    14d8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    14dc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    14e0:	7277705f 	rsbsvc	r7, r7, #95	; 0x5f
    14e4:	0100632e 	tsteq	r0, lr, lsr #6
    14e8:	74730000 	ldrbtvc	r0, [r3], #-0
    14ec:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    14f0:	5f783031 	svcpl	0x00783031
    14f4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    14f8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    14fc:	74730000 	ldrbtvc	r0, [r3], #-0
    1500:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1504:	5f783031 	svcpl	0x00783031
    1508:	2e70616d 	rpwcssz	f6, f0, #5.0
    150c:	00020068 	andeq	r0, r2, r8, rrx
    1510:	726f6300 	rsbvc	r6, pc, #0
    1514:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    1518:	616d5f33 	cmnvs	sp, r3, lsr pc
    151c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    1520:	00020068 	andeq	r0, r2, r8, rrx
    1524:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1528:	31663233 	cmncc	r6, r3, lsr r2
    152c:	725f7830 	subsvc	r7, pc, #3145728	; 0x300000
    1530:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1534:	00000200 	andeq	r0, r0, r0, lsl #4
    1538:	02050000 	andeq	r0, r5, #0
    153c:	08005df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip, lr}
    1540:	0100c303 	tsteq	r0, r3, lsl #6
    1544:	4b211f13 	blmi	849198 <__Stack_Size+0x848d98>
    1548:	0c032d3d 	stceq	13, cr2, [r3], {61}	; 0x3d
    154c:	0c03162e 	stceq	6, cr1, [r3], {46}	; 0x2e
    1550:	15031658 	strne	r1, [r3, #-1624]	; 0x658
    1554:	31311866 	teqcc	r1, r6, ror #16
    1558:	580c0323 	stmdapl	ip, {r0, r1, r5, r8, r9}
    155c:	66140316 			; <UNDEFINED> instruction: 0x66140316
    1560:	200f031a 	andcs	r0, pc, sl, lsl r3	; <UNPREDICTABLE>
    1564:	23207103 	teqcs	r0, #-1073741824	; 0xc0000000
    1568:	5b233131 	blpl	8cda34 <__Stack_Size+0x8cd634>
    156c:	03200a03 	teqeq	r0, #12288	; 0x3000
    1570:	10350179 	eorsne	r0, r5, r9, ror r1
    1574:	14660c03 	strbtne	r0, [r6], #-3075	; 0xc03
    1578:	115c4d5b 	cmpne	ip, fp, asr sp
    157c:	18660f03 	stmdane	r6!, {r0, r1, r8, r9, sl, fp}^
    1580:	033c0b03 	teqeq	ip, #3072	; 0xc00
    1584:	0216740d 	andseq	r7, r6, #218103808	; 0xd000000
    1588:	01010008 	tsteq	r1, r8
    158c:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    1590:	00840002 	addeq	r0, r4, r2
    1594:	01020000 	mrseq	r0, (UNDEF: 2)
    1598:	000d0efb 	strdeq	r0, [sp], -fp
    159c:	01010101 	tsteq	r1, r1, lsl #2
    15a0:	01000000 	mrseq	r0, (UNDEF: 0)
    15a4:	73010000 	movwvc	r0, #4096	; 0x1000
    15a8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    15ac:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    15b0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    15b4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    15b8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    15bc:	31663233 	cmncc	r6, r3, lsr r2
    15c0:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    15c4:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    15c8:	0000636e 	andeq	r6, r0, lr, ror #6
    15cc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    15d0:	30316632 	eorscc	r6, r1, r2, lsr r6
    15d4:	63725f78 	cmnvs	r2, #480	; 0x1e0
    15d8:	00632e63 	rsbeq	r2, r3, r3, ror #28
    15dc:	73000001 	movwvc	r0, #1
    15e0:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    15e4:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    15e8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    15ec:	00682e65 	rsbeq	r2, r8, r5, ror #28
    15f0:	73000002 	movwvc	r0, #2
    15f4:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    15f8:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    15fc:	70616d5f 	rsbvc	r6, r1, pc, asr sp
    1600:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1604:	74730000 	ldrbtvc	r0, [r3], #-0
    1608:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    160c:	5f783031 	svcpl	0x00783031
    1610:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
    1614:	00020068 	andeq	r0, r2, r8, rrx
    1618:	05000000 	streq	r0, [r0, #-0]
    161c:	005eb802 	subseq	fp, lr, r2, lsl #16
    1620:	00fc0308 	rscseq	r0, ip, r8, lsl #6
    1624:	4d5b1401 	cfldrdmi	mvd1, [fp, #-4]
    1628:	1d234d69 	stcne	13, cr4, [r3, #-420]!	; 0xfffffe5c
    162c:	6612033f 			; <UNDEFINED> instruction: 0x6612033f
    1630:	7a032618 	bvc	cae98 <__Stack_Size+0xcaa98>
    1634:	034d4d2e 	movteq	r4, #56622	; 0xdd2e
    1638:	41454a09 	cmpmi	r5, r9, lsl #20
    163c:	184a3503 	stmdane	sl, {r0, r1, r8, sl, ip, sp}^
    1640:	03313131 	teqeq	r1, #1073741836	; 0x4000000c
    1644:	03164a0e 	tsteq	r6, #57344	; 0xe000
    1648:	31196615 	tstcc	r9, r5, lsl r6
    164c:	0d033131 	stfeqs	f3, [r3, #-196]	; 0xffffff3c
    1650:	0f03164a 	svceq	0x0003164a
    1654:	31311866 	teqcc	r1, r6, ror #16
    1658:	580f0323 	stmdapl	pc, {r0, r1, r5, r8, r9}	; <UNPREDICTABLE>
    165c:	15032f13 	strne	r2, [r3, #-3859]	; 0xf13
    1660:	31311866 	teqcc	r1, r6, ror #16
    1664:	58120323 	ldmdapl	r2, {r0, r1, r5, r8, r9}
    1668:	23313118 	teqcs	r1, #6
    166c:	18581203 	ldmdane	r8, {r0, r1, r9, ip}^
    1670:	03313131 	teqeq	r1, #1073741836	; 0x4000000c
    1674:	1d284a14 	vstmdbne	r8!, {s8-s27}
    1678:	12033323 	andne	r3, r3, #-1946157056	; 0x8c000000
    167c:	11031674 	tstne	r3, r4, ror r6
    1680:	31311866 	teqcc	r1, r6, ror #16
    1684:	58100323 	ldmdapl	r0, {r0, r1, r5, r8, r9}
    1688:	7a033418 	bvc	ce6f0 <__Stack_Size+0xce2f0>
    168c:	03232320 	teqeq	r3, #-2147483648	; 0x80000000
    1690:	032f3c09 	teqeq	pc, #2304	; 0x900
    1694:	0321207a 	teqeq	r1, #122	; 0x7a
    1698:	03164a16 	tsteq	r6, #90112	; 0x16000
    169c:	03176612 	tsteq	r7, #18874368	; 0x1200000
    16a0:	0316820e 	tsteq	r6, #-536870912	; 0xe0000000
    16a4:	1c16660c 	ldcne	6, cr6, [r6], {12}
    16a8:	2f513e24 	svccs	0x00513e24
    16ac:	401e2324 	andsmi	r2, lr, r4, lsr #6
    16b0:	03323f35 	teqeq	r2, #212	; 0xd4
    16b4:	1e223c0c 	cdpne	12, 2, cr3, cr2, cr12, {0}
    16b8:	215b3221 	cmpcs	fp, r1, lsr #4
    16bc:	32214d32 	eorcc	r4, r1, #3200	; 0xc80
    16c0:	312f214d 	teqcc	pc, sp, asr #2
    16c4:	27ba1603 	ldrcs	r1, [sl, r3, lsl #12]!
    16c8:	0332221e 	teqeq	r2, #-536870911	; 0xe0000001
    16cc:	1e277416 	mcrne	4, 1, r7, cr7, cr6, {0}
    16d0:	17033222 	strne	r3, [r3, -r2, lsr #4]
    16d4:	221e2774 	andscs	r2, lr, #30408704	; 0x1d00000
    16d8:	74150332 	ldrvc	r0, [r5], #-818	; 0x332
    16dc:	32221e27 	eorcc	r1, r2, #624	; 0x270
    16e0:	27741603 	ldrbcs	r1, [r4, -r3, lsl #12]!
    16e4:	0332221e 	teqeq	r2, #-536870911	; 0xe0000001
    16e8:	0316740d 	tsteq	r6, #218103808	; 0xd000000
    16ec:	0316660c 	tsteq	r6, #12582912	; 0xc00000
    16f0:	03176611 	tsteq	r7, #17825792	; 0x1100000
    16f4:	09036617 	stmdbeq	r3, {r0, r1, r2, r4, r9, sl, sp, lr}
    16f8:	303e2201 	eorscc	r2, lr, r1, lsl #4
    16fc:	03263222 	teqeq	r6, #536870914	; 0x20000002
    1700:	c3034a0b 	movwgt	r4, #14859	; 0x3a0b
    1704:	00216679 	eoreq	r6, r1, r9, ror r6
    1708:	35010402 	strcc	r0, [r1, #-1026]	; 0x402
    170c:	01040200 	mrseq	r0, R12_usr
    1710:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    1714:	035b3d01 	cmpeq	fp, #64	; 0x40
    1718:	b3033c0a 	movwlt	r3, #15370	; 0x3c0a
    171c:	03144a06 	tsteq	r4, #24576	; 0x6000
    1720:	03199012 	tsteq	r9, #18
    1724:	11033c0b 	tstne	r3, fp, lsl #24
    1728:	06021874 			; <UNDEFINED> instruction: 0x06021874
    172c:	b1010100 	mrslt	r0, (UNDEF: 17)
    1730:	02000000 	andeq	r0, r0, #0
    1734:	00007500 	andeq	r7, r0, r0, lsl #10
    1738:	fb010200 	blx	41f42 <__Stack_Size+0x41b42>
    173c:	01000d0e 	tsteq	r0, lr, lsl #26
    1740:	00010101 	andeq	r0, r1, r1, lsl #2
    1744:	00010000 	andeq	r0, r1, r0
    1748:	74730100 	ldrbtvc	r0, [r3], #-256	; 0x100
    174c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1750:	5f783031 	svcpl	0x00783031
    1754:	2f62696c 	svccs	0x0062696c
    1758:	00637273 	rsbeq	r7, r3, r3, ror r2
    175c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1760:	30316632 	eorscc	r6, r1, r2, lsr r6
    1764:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1768:	6e692f62 	cdpvs	15, 6, cr2, cr9, cr2, {3}
    176c:	73000063 	movwvc	r0, #99	; 0x63
    1770:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1774:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1778:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    177c:	6b636974 	blvs	18dbd54 <__Stack_Size+0x18db954>
    1780:	0100632e 	tsteq	r0, lr, lsr #6
    1784:	74730000 	ldrbtvc	r0, [r3], #-0
    1788:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    178c:	5f783031 	svcpl	0x00783031
    1790:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1794:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1798:	74730000 	ldrbtvc	r0, [r3], #-0
    179c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    17a0:	5f783031 	svcpl	0x00783031
    17a4:	2e70616d 	rpwcssz	f6, f0, #5.0
    17a8:	00020068 	andeq	r0, r2, r8, rrx
    17ac:	05000000 	streq	r0, [r0, #-0]
    17b0:	0061f002 	rsbeq	pc, r1, r2
    17b4:	012b0308 	teqeq	fp, r8, lsl #6
    17b8:	034e2224 	movteq	r2, #57892	; 0xe224
    17bc:	0316660d 	tsteq	r6, #13631488	; 0xd00000
    17c0:	3e16660f 	cfmsub32cc	mvax0, mvfx6, mvfx6, mvfx15
    17c4:	035c304c 	cmpeq	ip, #76	; 0x4c
    17c8:	1e26660d 	cfmadda32ne	mvax0, mvax6, mvfx6, mvfx13
    17cc:	0c034022 	stceq	0, cr4, [r3], {34}	; 0x22
    17d0:	032f1366 	teqeq	pc, #-1744830463	; 0x98000001
    17d4:	0a034a0e 	beq	d4014 <__Stack_Size+0xd3c14>
    17d8:	23323020 	teqcs	r2, #32
    17dc:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
    17e0:	01010006 	tsteq	r1, r6
    17e4:	000001ee 	andeq	r0, r0, lr, ror #3
    17e8:	009b0002 	addseq	r0, fp, r2
    17ec:	01020000 	mrseq	r0, (UNDEF: 2)
    17f0:	000d0efb 	strdeq	r0, [sp], -fp
    17f4:	01010101 	tsteq	r1, r1, lsl #2
    17f8:	01000000 	mrseq	r0, (UNDEF: 0)
    17fc:	73010000 	movwvc	r0, #4096	; 0x1000
    1800:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    1804:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    1808:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    180c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1810:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1814:	31663233 	cmncc	r6, r3, lsr r2
    1818:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    181c:	692f6269 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sp, lr}	; <UNPREDICTABLE>
    1820:	0000636e 	andeq	r6, r0, lr, ror #6
    1824:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1828:	30316632 	eorscc	r6, r1, r2, lsr r6
    182c:	73755f78 	cmnvc	r5, #480	; 0x1e0
    1830:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1834:	00010063 	andeq	r0, r1, r3, rrx
    1838:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    183c:	31663233 	cmncc	r6, r3, lsr r2
    1840:	745f7830 	ldrbvc	r7, [pc], #-2096	; 1848 <__Stack_Size+0x1448>
    1844:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    1848:	00020068 	andeq	r0, r2, r8, rrx
    184c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1850:	31663233 	cmncc	r6, r3, lsr r2
    1854:	6d5f7830 	ldclvs	8, cr7, [pc, #-192]	; 179c <__Stack_Size+0x139c>
    1858:	682e7061 	stmdavs	lr!, {r0, r5, r6, ip, sp, lr}
    185c:	00000200 	andeq	r0, r0, r0, lsl #4
    1860:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1864:	30316632 	eorscc	r6, r1, r2, lsr r6
    1868:	73755f78 	cmnvc	r5, #480	; 0x1e0
    186c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1870:	00020068 	andeq	r0, r2, r8, rrx
    1874:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    1878:	31663233 	cmncc	r6, r3, lsr r2
    187c:	725f7830 	subsvc	r7, pc, #3145728	; 0x300000
    1880:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    1884:	00000200 	andeq	r0, r0, r0, lsl #4
    1888:	02050000 	andeq	r0, r5, #0
    188c:	0800627c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, lr}
    1890:	0100da03 	tsteq	r0, r3, lsl #20
    1894:	ba0d0324 	blt	34252c <__Stack_Size+0x34212c>
    1898:	3c720359 	ldclcc	3, cr0, [r2], #-356	; 0xfffffe9c
    189c:	1a035977 	bne	d7e80 <__Stack_Size+0xd7a80>
    18a0:	2e66033c 	mcrcs	3, 3, r0, cr6, cr12, {1}
    18a4:	09035932 	stmdbeq	r3, {r1, r4, r5, r8, fp, ip, lr}
    18a8:	5940593c 	stmdbpl	r0, {r2, r3, r4, r5, r8, fp, ip, lr}^
    18ac:	2e7a0342 	cdpcs	3, 7, cr0, cr10, cr2, {2}
    18b0:	03821603 	orreq	r1, r2, #3145728	; 0x300000
    18b4:	6b030115 	blvs	c1d10 <__Stack_Size+0xc1910>
    18b8:	3c1b0320 	ldccc	3, cr0, [fp], {32}
    18bc:	22207a03 	eorcs	r7, r0, #12288	; 0x3000
    18c0:	28232332 	stmdacs	r3!, {r1, r4, r5, r8, r9, sp}
    18c4:	342e7a03 	strtcc	r7, [lr], #-2563	; 0xa03
    18c8:	343c7a03 	ldrtcc	r7, [ip], #-2563	; 0xa03
    18cc:	34207a03 	strtcc	r7, [r0], #-2563	; 0xa03
    18d0:	03262332 	teqeq	r6, #-939524096	; 0xc8000000
    18d4:	0322207a 	teqeq	r2, #122	; 0x7a
    18d8:	36032e4e 	strcc	r2, [r3], -lr, asr #28
    18dc:	3d242320 	stccc	3, cr2, [r4, #-128]!	; 0xffffff80
    18e0:	03200a03 	teqeq	r0, #12288	; 0x3000
    18e4:	32222076 	eorcc	r2, r2, #118	; 0x76
    18e8:	3d4d5924 	stclcc	9, cr5, [sp, #-144]	; 0xffffff70
    18ec:	0b032f77 	bleq	cd6d0 <__Stack_Size+0xcd2d0>
    18f0:	321f154a 	andscc	r1, pc, #310378496	; 0x12800000
    18f4:	2121211c 	teqcs	r1, ip, lsl r1
    18f8:	10032121 	andne	r2, r3, r1, lsr #2
    18fc:	0115032e 	tsteq	r5, lr, lsr #6
    1900:	03206b03 	teqeq	r0, #3072	; 0xc00
    1904:	76032015 			; <UNDEFINED> instruction: 0x76032015
    1908:	200a0320 	andcs	r0, sl, r0, lsr #6
    190c:	033c7603 	teqeq	ip, #3145728	; 0x300000
    1910:	7803200a 	stmdavc	r3, {r1, r3, sp}
    1914:	0332352e 	teqeq	r2, #192937984	; 0xb800000
    1918:	2f142e0b 	svccs	0x00142e0b
    191c:	0e032121 	adfeqsp	f2, f3, f1
    1920:	221e192e 	andscs	r1, lr, #753664	; 0xb8000
    1924:	661e034d 	ldrvs	r0, [lr], -sp, asr #6
    1928:	03010d03 	movweq	r0, #7427	; 0x1d03
    192c:	12032e73 	andne	r2, r3, #1840	; 0x730
    1930:	301e3e20 	andscc	r3, lr, r0, lsr #28
    1934:	32303022 	eorscc	r3, r0, #34	; 0x22
    1938:	40221e24 	eormi	r1, r2, r4, lsr #28
    193c:	034a1503 	movteq	r1, #42243	; 0xa503
    1940:	242a010a 	strtcs	r0, [sl], #-266	; 0x10a
    1944:	4a0f0334 	bmi	3c261c <__Stack_Size+0x3c221c>
    1948:	11036818 	tstne	r3, r8, lsl r8
    194c:	03671758 	cmneq	r7, #23068672	; 0x1600000
    1950:	1d1a580f 	ldcne	8, cr5, [sl, #-60]	; 0xffffffc4
    1954:	13034f23 	movwne	r4, #16163	; 0x3f23
    1958:	03671766 	cmneq	r7, #26738688	; 0x1980000
    195c:	1d1a580f 	ldcne	8, cr5, [sl, #-60]	; 0xffffffc4
    1960:	0f034f23 	svceq	0x00034f23
    1964:	0d031866 	stceq	8, cr1, [r3, #-408]	; 0xfffffe68
    1968:	032f174a 	teqeq	pc, #19398656	; 0x1280000
    196c:	03172e0c 	tsteq	r7, #192	; 0xc0
    1970:	3e17660e 	cfmsub32cc	mvax0, mvfx6, mvfx7, mvfx14
    1974:	17660f03 	strbne	r0, [r6, -r3, lsl #30]!
    1978:	580f034c 	stmdapl	pc, {r2, r3, r6, r8, r9}	; <UNPREDICTABLE>
    197c:	4f231d1a 	svcmi	0x00231d1a
    1980:	1a661003 	bne	1985994 <__Stack_Size+0x1985594>
    1984:	034f231d 	movteq	r2, #62237	; 0xf31d
    1988:	1d1a6610 	ldcne	6, cr6, [sl, #-64]	; 0xffffffc0
    198c:	12034f23 	andne	r4, r3, #140	; 0x8c
    1990:	03671766 	cmneq	r7, #26738688	; 0x1980000
    1994:	1d1a580f 	ldcne	8, cr5, [sl, #-60]	; 0xffffffc4
    1998:	1b034f23 	blne	d562c <__Stack_Size+0xd522c>
    199c:	09031a66 	stmdbeq	r3, {r1, r2, r5, r6, r9, fp, ip}
    19a0:	4a23032e 	bmi	8c2660 <__Stack_Size+0x8c2260>
    19a4:	4a1b0318 	bmi	6c260c <__Stack_Size+0x6c220c>
    19a8:	33200a03 	teqcc	r0, #12288	; 0x3000
    19ac:	22301e3e 	eorscs	r1, r0, #992	; 0x3e0
    19b0:	34322230 	ldrtcc	r2, [r2], #-560	; 0x230
    19b4:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    19b8:	04020022 	streq	r0, [r2], #-34	; 0x22
    19bc:	02001d01 	andeq	r1, r0, #64	; 0x40
    19c0:	004d0104 	subeq	r0, sp, r4, lsl #2
    19c4:	22010402 	andcs	r0, r1, #33554432	; 0x2000000
    19c8:	2303244e 	movwcs	r2, #13390	; 0x344e
    19cc:	010a0320 	tsteq	sl, r0, lsr #6
    19d0:	0004024b 	andeq	r0, r4, fp, asr #4
    19d4:	00a00101 	adceq	r0, r0, r1, lsl #2
    19d8:	00020000 	andeq	r0, r2, r0
    19dc:	00000039 	andeq	r0, r0, r9, lsr r0
    19e0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    19e4:	0101000d 	tsteq	r1, sp
    19e8:	00000101 	andeq	r0, r0, r1, lsl #2
    19ec:	00000100 	andeq	r0, r0, r0, lsl #2
    19f0:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    19f4:	31663233 	cmncc	r6, r3, lsr r2
    19f8:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    19fc:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    1a00:	00006372 	andeq	r6, r0, r2, ror r3
    1a04:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
    1a08:	336d7865 	cmncc	sp, #6619136	; 0x650000
    1a0c:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
    1a10:	732e6f72 	teqvc	lr, #456	; 0x1c8
    1a14:	00000100 	andeq	r0, r0, r0, lsl #2
    1a18:	02050000 	andeq	r0, r5, #0
    1a1c:	080065c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, sp, lr}
    1a20:	21013403 	tstcs	r1, r3, lsl #8
    1a24:	21200b03 	teqcs	r0, r3, lsl #22
    1a28:	21200b03 	teqcs	r0, r3, lsl #22
    1a2c:	2f200b03 	svccs	0x00200b03
    1a30:	2f200b03 	svccs	0x00200b03
    1a34:	2f200b03 	svccs	0x00200b03
    1a38:	21200b03 	teqcs	r0, r3, lsl #22
    1a3c:	2f200b03 	svccs	0x00200b03
    1a40:	2f200b03 	svccs	0x00200b03
    1a44:	200a032f 	andcs	r0, sl, pc, lsr #6
    1a48:	200b032f 	andcs	r0, fp, pc, lsr #6
    1a4c:	200b032f 	andcs	r0, fp, pc, lsr #6
    1a50:	200b032f 	andcs	r0, fp, pc, lsr #6
    1a54:	200a032f 	andcs	r0, sl, pc, lsr #6
    1a58:	200b0321 	andcs	r0, fp, r1, lsr #6
    1a5c:	200b0321 	andcs	r0, fp, r1, lsr #6
    1a60:	200b0321 	andcs	r0, fp, r1, lsr #6
    1a64:	200b0321 	andcs	r0, fp, r1, lsr #6
    1a68:	200b032f 	andcs	r0, fp, pc, lsr #6
    1a6c:	200a032f 	andcs	r0, sl, pc, lsr #6
    1a70:	200b0321 	andcs	r0, fp, r1, lsr #6
    1a74:	00010221 	andeq	r0, r1, r1, lsr #4
    1a78:	00740101 	rsbseq	r0, r4, r1, lsl #2
    1a7c:	00020000 	andeq	r0, r2, r0
    1a80:	0000003b 	andeq	r0, r0, fp, lsr r0
    1a84:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1a88:	0101000d 	tsteq	r1, sp
    1a8c:	00000101 	andeq	r0, r0, r1, lsl #2
    1a90:	00000100 	andeq	r0, r0, r0, lsl #2
    1a94:	6d747301 	ldclvs	3, cr7, [r4, #-4]!
    1a98:	31663233 	cmncc	r6, r3, lsr r2
    1a9c:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    1aa0:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    1aa4:	00006372 	andeq	r6, r0, r2, ror r3
    1aa8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1aac:	30316632 	eorscc	r6, r1, r2, lsr r6
    1ab0:	65765f78 	ldrbvs	r5, [r6, #-3960]!	; 0xf78
    1ab4:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    1ab8:	0100632e 	tsteq	r0, lr, lsr #6
    1abc:	00000000 	andeq	r0, r0, r0
    1ac0:	66340205 	ldrtvs	r0, [r4], -r5, lsl #4
    1ac4:	91030800 	tstls	r3, r0, lsl #16
    1ac8:	005f0101 	subseq	r0, pc, r1, lsl #2
    1acc:	03010402 	movweq	r0, #5122	; 0x1402
    1ad0:	02002078 	andeq	r2, r0, #120	; 0x78
    1ad4:	00280104 	eoreq	r0, r8, r4, lsl #2
    1ad8:	03010402 	movweq	r0, #5122	; 0x1402
    1adc:	02002078 	andeq	r2, r0, #120	; 0x78
    1ae0:	30280104 	eorcc	r0, r8, r4, lsl #2
    1ae4:	04020056 	streq	r0, [r2], #-86	; 0x56
    1ae8:	503e2801 	eorspl	r2, lr, r1, lsl #16
    1aec:	000e022f 	andeq	r0, lr, pc, lsr #4
    1af0:	Address 0x0000000000001af0 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
	mDelay(50);
	end();
	return 0;
}

void blinky(uint8 level) {
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	// Turn them all off first.
	SetLED(MANAGE, 0);
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
	SetLED(TXD, 0);
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000014 	andeq	r0, r0, r4, lsl r0
	SetLED(PROGRAM, 0);
      14:	00000000 	andeq	r0, r0, r0
      18:	08006684 	stmdaeq	r0, {r2, r7, r9, sl, sp, lr}
	SetLED(RXD, 0);
      1c:	000000a0 	andeq	r0, r0, r0, lsr #1
      20:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
	SetLED(PLAY, 0);
      24:	00018e02 	andeq	r8, r1, r2, lsl #28
      28:	00000014 	andeq	r0, r0, r4, lsl r0
	...
	SetLED(AUX, 0);
	switch (level) {	// Turn them on.
      34:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
      38:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
      3c:	00018e02 	andeq	r8, r1, r2, lsl #28
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      40:	0000000c 	andeq	r0, r0, ip
      44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      48:	7c020001 	stcvc	0, cr0, [r2], {1}
      4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	SetLED(PROGRAM, 0);
	SetLED(RXD, 0);
	SetLED(PLAY, 0);
	SetLED(AUX, 0);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
      50:	0000000c 	andeq	r0, r0, ip
      54:	00000040 	andeq	r0, r0, r0, asr #32
      58:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
      5c:	00000002 	andeq	r0, r0, r2
      60:	0000000c 	andeq	r0, r0, ip
      64:	00000040 	andeq	r0, r0, r0, asr #32
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      68:	08003136 	stmdaeq	r0, {r1, r2, r4, r5, r8, ip, sp}
		default: return;
	}
	mDelay(100);
      6c:	00000002 	andeq	r0, r0, r2
	switch (level) {	// Turn them on.
      70:	0000000c 	andeq	r0, r0, ip
      74:	00000040 	andeq	r0, r0, r0, asr #32
      78:	08003138 	stmdaeq	r0, {r3, r4, r5, r8, ip, sp}
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      7c:	00000002 	andeq	r0, r0, r2
      80:	0000000c 	andeq	r0, r0, ip
      84:	00000040 	andeq	r0, r0, r0, asr #32
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
		default: return;
	}
	mDelay(100);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
      88:	0800313a 	stmdaeq	r0, {r1, r3, r4, r5, r8, ip, sp}
      8c:	00000002 	andeq	r0, r0, r2
      90:	0000000c 	andeq	r0, r0, ip
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
      94:	00000040 	andeq	r0, r0, r0, asr #32
      98:	0800313c 	stmdaeq	r0, {r2, r3, r4, r5, r8, ip, sp}
      9c:	00000002 	andeq	r0, r0, r2
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      a0:	0000000c 	andeq	r0, r0, ip
		default: return;
	}
	mDelay(100);
      a4:	00000040 	andeq	r0, r0, r0, asr #32
}
      a8:	0800313e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, ip, sp}
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
		default: return;
	}
	mDelay(100);
      ac:	00000002 	andeq	r0, r0, r2
      b0:	0000000c 	andeq	r0, r0, ip
      b4:	00000040 	andeq	r0, r0, r0, asr #32
      b8:	08003140 	stmdaeq	r0, {r6, r8, ip, sp}
      bc:	00000002 	andeq	r0, r0, r2
      c0:	0000000c 	andeq	r0, r0, ip
      c4:	00000040 	andeq	r0, r0, r0, asr #32
      c8:	08003142 	stmdaeq	r0, {r1, r6, r8, ip, sp}
      cc:	00000002 	andeq	r0, r0, r2
      d0:	0000000c 	andeq	r0, r0, ip
      d4:	00000040 	andeq	r0, r0, r0, asr #32
      d8:	08003144 	stmdaeq	r0, {r2, r6, r8, ip, sp}
      dc:	00000004 	andeq	r0, r0, r4
      e0:	0000000c 	andeq	r0, r0, ip
      e4:	00000040 	andeq	r0, r0, r0, asr #32
      e8:	08003148 	stmdaeq	r0, {r3, r6, r8, ip, sp}
      ec:	00000002 	andeq	r0, r0, r2
      f0:	0000000c 	andeq	r0, r0, ip
      f4:	00000040 	andeq	r0, r0, r0, asr #32
      f8:	0800314a 	stmdaeq	r0, {r1, r3, r6, r8, ip, sp}
      fc:	00000002 	andeq	r0, r0, r2
     100:	0000000c 	andeq	r0, r0, ip
     104:	00000040 	andeq	r0, r0, r0, asr #32
     108:	0800314c 	stmdaeq	r0, {r2, r3, r6, r8, ip, sp}
     10c:	00000002 	andeq	r0, r0, r2
     110:	0000000c 	andeq	r0, r0, ip
     114:	00000040 	andeq	r0, r0, r0, asr #32
     118:	0800314e 	stmdaeq	r0, {r1, r2, r3, r6, r8, ip, sp}
     11c:	00000002 	andeq	r0, r0, r2
     120:	0000000c 	andeq	r0, r0, ip
     124:	00000040 	andeq	r0, r0, r0, asr #32
     128:	08003150 	stmdaeq	r0, {r4, r6, r8, ip, sp}
     12c:	00000002 	andeq	r0, r0, r2
     130:	0000000c 	andeq	r0, r0, ip
     134:	00000040 	andeq	r0, r0, r0, asr #32
     138:	08003152 	stmdaeq	r0, {r1, r4, r6, r8, ip, sp}
     13c:	00000002 	andeq	r0, r0, r2
     140:	0000000c 	andeq	r0, r0, ip
     144:	00000040 	andeq	r0, r0, r0, asr #32
     148:	08003154 	stmdaeq	r0, {r2, r4, r6, r8, ip, sp}
     14c:	00000002 	andeq	r0, r0, r2
     150:	0000000c 	andeq	r0, r0, ip
     154:	00000040 	andeq	r0, r0, r0, asr #32
     158:	08003156 	stmdaeq	r0, {r1, r2, r4, r6, r8, ip, sp}
     15c:	00000002 	andeq	r0, r0, r2
     160:	0000000c 	andeq	r0, r0, ip
     164:	00000040 	andeq	r0, r0, r0, asr #32
     168:	08003158 	stmdaeq	r0, {r3, r4, r6, r8, ip, sp}
     16c:	00000002 	andeq	r0, r0, r2
     170:	0000000c 	andeq	r0, r0, ip
     174:	00000040 	andeq	r0, r0, r0, asr #32
     178:	0800315a 	stmdaeq	r0, {r1, r3, r4, r6, r8, ip, sp}
     17c:	00000002 	andeq	r0, r0, r2
     180:	0000000c 	andeq	r0, r0, ip
     184:	00000040 	andeq	r0, r0, r0, asr #32
     188:	0800315c 	stmdaeq	r0, {r2, r3, r4, r6, r8, ip, sp}
     18c:	00000002 	andeq	r0, r0, r2
     190:	0000000c 	andeq	r0, r0, ip
     194:	00000040 	andeq	r0, r0, r0, asr #32
     198:	0800315e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, ip, sp}
     19c:	00000002 	andeq	r0, r0, r2
     1a0:	0000000c 	andeq	r0, r0, ip
     1a4:	00000040 	andeq	r0, r0, r0, asr #32
     1a8:	08003160 	stmdaeq	r0, {r5, r6, r8, ip, sp}
     1ac:	00000002 	andeq	r0, r0, r2
     1b0:	0000000c 	andeq	r0, r0, ip
     1b4:	00000040 	andeq	r0, r0, r0, asr #32
     1b8:	08003162 	stmdaeq	r0, {r1, r5, r6, r8, ip, sp}
     1bc:	00000002 	andeq	r0, r0, r2
     1c0:	0000000c 	andeq	r0, r0, ip
     1c4:	00000040 	andeq	r0, r0, r0, asr #32
     1c8:	08003164 	stmdaeq	r0, {r2, r5, r6, r8, ip, sp}
     1cc:	00000002 	andeq	r0, r0, r2
     1d0:	0000000c 	andeq	r0, r0, ip
     1d4:	00000040 	andeq	r0, r0, r0, asr #32
     1d8:	08003166 	stmdaeq	r0, {r1, r2, r5, r6, r8, ip, sp}
     1dc:	00000002 	andeq	r0, r0, r2
     1e0:	0000000c 	andeq	r0, r0, ip
     1e4:	00000040 	andeq	r0, r0, r0, asr #32
     1e8:	08003168 	stmdaeq	r0, {r3, r5, r6, r8, ip, sp}
     1ec:	00000002 	andeq	r0, r0, r2
     1f0:	0000000c 	andeq	r0, r0, ip
     1f4:	00000040 	andeq	r0, r0, r0, asr #32
     1f8:	0800316a 	stmdaeq	r0, {r1, r3, r5, r6, r8, ip, sp}
     1fc:	00000002 	andeq	r0, r0, r2
     200:	0000000c 	andeq	r0, r0, ip
     204:	00000040 	andeq	r0, r0, r0, asr #32
     208:	0800316c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip, sp}
     20c:	00000002 	andeq	r0, r0, r2
     210:	0000000c 	andeq	r0, r0, ip
     214:	00000040 	andeq	r0, r0, r0, asr #32
     218:	0800316e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, ip, sp}
     21c:	00000002 	andeq	r0, r0, r2
     220:	0000000c 	andeq	r0, r0, ip
     224:	00000040 	andeq	r0, r0, r0, asr #32
     228:	08003170 	stmdaeq	r0, {r4, r5, r6, r8, ip, sp}
     22c:	00000002 	andeq	r0, r0, r2
     230:	0000000c 	andeq	r0, r0, ip
     234:	00000040 	andeq	r0, r0, r0, asr #32
     238:	08003172 	stmdaeq	r0, {r1, r4, r5, r6, r8, ip, sp}
     23c:	00000002 	andeq	r0, r0, r2
     240:	0000000c 	andeq	r0, r0, ip
     244:	00000040 	andeq	r0, r0, r0, asr #32
     248:	08003174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip, sp}
     24c:	00000002 	andeq	r0, r0, r2
     250:	0000000c 	andeq	r0, r0, ip
     254:	00000040 	andeq	r0, r0, r0, asr #32
     258:	08003176 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, ip, sp}
     25c:	00000002 	andeq	r0, r0, r2
     260:	0000000c 	andeq	r0, r0, ip
     264:	00000040 	andeq	r0, r0, r0, asr #32
     268:	08003178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, sp}
     26c:	00000002 	andeq	r0, r0, r2
     270:	0000000c 	andeq	r0, r0, ip
     274:	00000040 	andeq	r0, r0, r0, asr #32
     278:	0800317a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, sp}
     27c:	00000002 	andeq	r0, r0, r2
     280:	0000000c 	andeq	r0, r0, ip
     284:	00000040 	andeq	r0, r0, r0, asr #32
     288:	0800317c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip, sp}
     28c:	00000002 	andeq	r0, r0, r2
     290:	0000000c 	andeq	r0, r0, ip
     294:	00000040 	andeq	r0, r0, r0, asr #32
     298:	0800317e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, ip, sp}
     29c:	00000002 	andeq	r0, r0, r2
     2a0:	0000000c 	andeq	r0, r0, ip
     2a4:	00000040 	andeq	r0, r0, r0, asr #32
     2a8:	08003180 	stmdaeq	r0, {r7, r8, ip, sp}
     2ac:	00000002 	andeq	r0, r0, r2
     2b0:	0000000c 	andeq	r0, r0, ip
     2b4:	00000040 	andeq	r0, r0, r0, asr #32
     2b8:	08003182 	stmdaeq	r0, {r1, r7, r8, ip, sp}
     2bc:	00000002 	andeq	r0, r0, r2
     2c0:	0000000c 	andeq	r0, r0, ip
     2c4:	00000040 	andeq	r0, r0, r0, asr #32
     2c8:	08003184 	stmdaeq	r0, {r2, r7, r8, ip, sp}
     2cc:	00000002 	andeq	r0, r0, r2
     2d0:	0000000c 	andeq	r0, r0, ip
     2d4:	00000040 	andeq	r0, r0, r0, asr #32
     2d8:	08003186 	stmdaeq	r0, {r1, r2, r7, r8, ip, sp}
     2dc:	00000002 	andeq	r0, r0, r2
     2e0:	0000000c 	andeq	r0, r0, ip
     2e4:	00000040 	andeq	r0, r0, r0, asr #32
     2e8:	08003188 	stmdaeq	r0, {r3, r7, r8, ip, sp}
     2ec:	00000002 	andeq	r0, r0, r2
     2f0:	0000000c 	andeq	r0, r0, ip
     2f4:	00000040 	andeq	r0, r0, r0, asr #32
     2f8:	0800318a 	stmdaeq	r0, {r1, r3, r7, r8, ip, sp}
     2fc:	00000002 	andeq	r0, r0, r2
     300:	0000000c 	andeq	r0, r0, ip
     304:	00000040 	andeq	r0, r0, r0, asr #32
     308:	0800318c 	stmdaeq	r0, {r2, r3, r7, r8, ip, sp}
     30c:	00000002 	andeq	r0, r0, r2
     310:	0000000c 	andeq	r0, r0, ip
     314:	00000040 	andeq	r0, r0, r0, asr #32
     318:	0800318e 	stmdaeq	r0, {r1, r2, r3, r7, r8, ip, sp}
     31c:	00000002 	andeq	r0, r0, r2
     320:	0000000c 	andeq	r0, r0, ip
     324:	00000040 	andeq	r0, r0, r0, asr #32
     328:	08003190 	stmdaeq	r0, {r4, r7, r8, ip, sp}
     32c:	00000002 	andeq	r0, r0, r2
     330:	0000000c 	andeq	r0, r0, ip
     334:	00000040 	andeq	r0, r0, r0, asr #32
     338:	08003192 	stmdaeq	r0, {r1, r4, r7, r8, ip, sp}
     33c:	00000004 	andeq	r0, r0, r4
     340:	0000000c 	andeq	r0, r0, ip
     344:	00000040 	andeq	r0, r0, r0, asr #32
     348:	08003196 	stmdaeq	r0, {r1, r2, r4, r7, r8, ip, sp}
     34c:	00000002 	andeq	r0, r0, r2
     350:	0000000c 	andeq	r0, r0, ip
     354:	00000040 	andeq	r0, r0, r0, asr #32
     358:	08003198 	stmdaeq	r0, {r3, r4, r7, r8, ip, sp}
     35c:	00000004 	andeq	r0, r0, r4
     360:	0000000c 	andeq	r0, r0, ip
     364:	00000040 	andeq	r0, r0, r0, asr #32
     368:	0800319c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, sp}
     36c:	00000002 	andeq	r0, r0, r2
     370:	0000000c 	andeq	r0, r0, ip
     374:	00000040 	andeq	r0, r0, r0, asr #32
     378:	0800319e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, ip, sp}
     37c:	00000002 	andeq	r0, r0, r2
     380:	0000000c 	andeq	r0, r0, ip
     384:	00000040 	andeq	r0, r0, r0, asr #32
     388:	080031a0 	stmdaeq	r0, {r5, r7, r8, ip, sp}
     38c:	00000002 	andeq	r0, r0, r2
     390:	0000000c 	andeq	r0, r0, ip
     394:	00000040 	andeq	r0, r0, r0, asr #32
     398:	080031a2 	stmdaeq	r0, {r1, r5, r7, r8, ip, sp}
     39c:	00000002 	andeq	r0, r0, r2
     3a0:	0000000c 	andeq	r0, r0, ip
     3a4:	00000040 	andeq	r0, r0, r0, asr #32
     3a8:	080031a4 	stmdaeq	r0, {r2, r5, r7, r8, ip, sp}
     3ac:	00000002 	andeq	r0, r0, r2
     3b0:	0000000c 	andeq	r0, r0, ip
     3b4:	00000040 	andeq	r0, r0, r0, asr #32
     3b8:	080031a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, ip, sp}
     3bc:	00000002 	andeq	r0, r0, r2
     3c0:	0000000c 	andeq	r0, r0, ip
     3c4:	00000040 	andeq	r0, r0, r0, asr #32
     3c8:	080031a8 	stmdaeq	r0, {r3, r5, r7, r8, ip, sp}
     3cc:	00000002 	andeq	r0, r0, r2
     3d0:	0000000c 	andeq	r0, r0, ip
     3d4:	00000040 	andeq	r0, r0, r0, asr #32
     3d8:	080031aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, ip, sp}
     3dc:	00000002 	andeq	r0, r0, r2
     3e0:	0000000c 	andeq	r0, r0, ip
     3e4:	00000040 	andeq	r0, r0, r0, asr #32
     3e8:	080031ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, ip, sp}
     3ec:	00000002 	andeq	r0, r0, r2
     3f0:	0000000c 	andeq	r0, r0, ip
     3f4:	00000040 	andeq	r0, r0, r0, asr #32
     3f8:	080031ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, ip, sp}
     3fc:	00000002 	andeq	r0, r0, r2
     400:	0000000c 	andeq	r0, r0, ip
     404:	00000040 	andeq	r0, r0, r0, asr #32
     408:	080031b0 	stmdaeq	r0, {r4, r5, r7, r8, ip, sp}
     40c:	00000002 	andeq	r0, r0, r2
     410:	0000000c 	andeq	r0, r0, ip
     414:	00000040 	andeq	r0, r0, r0, asr #32
     418:	080031b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, ip, sp}
     41c:	00000002 	andeq	r0, r0, r2
     420:	0000000c 	andeq	r0, r0, ip
     424:	00000040 	andeq	r0, r0, r0, asr #32
     428:	080031b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, ip, sp}
     42c:	00000002 	andeq	r0, r0, r2
     430:	0000000c 	andeq	r0, r0, ip
     434:	00000040 	andeq	r0, r0, r0, asr #32
     438:	080031b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, ip, sp}
     43c:	00000002 	andeq	r0, r0, r2
     440:	0000000c 	andeq	r0, r0, ip
     444:	00000040 	andeq	r0, r0, r0, asr #32
     448:	080031b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, ip, sp}
     44c:	00000002 	andeq	r0, r0, r2
     450:	0000000c 	andeq	r0, r0, ip
     454:	00000040 	andeq	r0, r0, r0, asr #32
     458:	080031ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, ip, sp}
     45c:	00000002 	andeq	r0, r0, r2
     460:	0000000c 	andeq	r0, r0, ip
     464:	00000040 	andeq	r0, r0, r0, asr #32
     468:	080031bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip, sp}
     46c:	00000002 	andeq	r0, r0, r2
     470:	0000000c 	andeq	r0, r0, ip
     474:	00000040 	andeq	r0, r0, r0, asr #32
     478:	080031be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, ip, sp}
     47c:	00000002 	andeq	r0, r0, r2
     480:	0000000c 	andeq	r0, r0, ip
     484:	00000040 	andeq	r0, r0, r0, asr #32
     488:	080031c0 	stmdaeq	r0, {r6, r7, r8, ip, sp}
     48c:	00000002 	andeq	r0, r0, r2
     490:	0000000c 	andeq	r0, r0, ip
     494:	00000040 	andeq	r0, r0, r0, asr #32
     498:	080031c2 	stmdaeq	r0, {r1, r6, r7, r8, ip, sp}
     49c:	00000002 	andeq	r0, r0, r2
     4a0:	0000000c 	andeq	r0, r0, ip
     4a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     4a8:	7c020001 	stcvc	0, cr0, [r2], {1}
     4ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     4b0:	0000000c 	andeq	r0, r0, ip
     4b4:	000004a0 	andeq	r0, r0, r0, lsr #9
     4b8:	080031c4 	stmdaeq	r0, {r2, r6, r7, r8, ip, sp}
     4bc:	00000014 	andeq	r0, r0, r4, lsl r0
     4c0:	00000014 	andeq	r0, r0, r4, lsl r0
     4c4:	000004a0 	andeq	r0, r0, r0, lsr #9
     4c8:	080031d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip, sp}
     4cc:	00000050 	andeq	r0, r0, r0, asr r0
     4d0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     4d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d8:	0000000c 	andeq	r0, r0, ip
     4dc:	000004a0 	andeq	r0, r0, r0, lsr #9
     4e0:	08003228 	stmdaeq	r0, {r3, r5, r9, ip, sp}
     4e4:	00000006 	andeq	r0, r0, r6
     4e8:	0000000c 	andeq	r0, r0, ip
     4ec:	000004a0 	andeq	r0, r0, r0, lsr #9
     4f0:	0800322e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip, sp}
     4f4:	00000026 	andeq	r0, r0, r6, lsr #32
     4f8:	0000000c 	andeq	r0, r0, ip
     4fc:	000004a0 	andeq	r0, r0, r0, lsr #9
     500:	08003254 	stmdaeq	r0, {r2, r4, r6, r9, ip, sp}
     504:	00000038 	andeq	r0, r0, r8, lsr r0
     508:	0000000c 	andeq	r0, r0, ip
     50c:	000004a0 	andeq	r0, r0, r0, lsr #9
     510:	0800328c 	stmdaeq	r0, {r2, r3, r7, r9, ip, sp}
     514:	00000010 	andeq	r0, r0, r0, lsl r0
     518:	0000000c 	andeq	r0, r0, ip
     51c:	000004a0 	andeq	r0, r0, r0, lsr #9
     520:	0800329c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip, sp}
     524:	00000010 	andeq	r0, r0, r0, lsl r0
     528:	0000000c 	andeq	r0, r0, ip
     52c:	000004a0 	andeq	r0, r0, r0, lsr #9
     530:	080032ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip, sp}
     534:	00000010 	andeq	r0, r0, r0, lsl r0
     538:	0000000c 	andeq	r0, r0, ip
     53c:	000004a0 	andeq	r0, r0, r0, lsr #9
     540:	080032bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip, sp}
     544:	00000010 	andeq	r0, r0, r0, lsl r0
     548:	0000000c 	andeq	r0, r0, ip
     54c:	000004a0 	andeq	r0, r0, r0, lsr #9
     550:	080032cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, ip, sp}
     554:	00000002 	andeq	r0, r0, r2
     558:	0000000c 	andeq	r0, r0, ip
     55c:	000004a0 	andeq	r0, r0, r0, lsr #9
     560:	080032ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, ip, sp}
     564:	00000002 	andeq	r0, r0, r2
     568:	00000014 	andeq	r0, r0, r4, lsl r0
     56c:	000004a0 	andeq	r0, r0, r0, lsr #9
     570:	080032d0 	stmdaeq	r0, {r4, r6, r7, r9, ip, sp}
     574:	00000044 	andeq	r0, r0, r4, asr #32
     578:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     57c:	00018e02 	andeq	r8, r1, r2, lsl #28
     580:	00000014 	andeq	r0, r0, r4, lsl r0
     584:	000004a0 	andeq	r0, r0, r0, lsr #9
     588:	08003314 	stmdaeq	r0, {r2, r4, r8, r9, ip, sp}
     58c:	00000044 	andeq	r0, r0, r4, asr #32
     590:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     594:	00018e02 	andeq	r8, r1, r2, lsl #28
     598:	0000000c 	andeq	r0, r0, ip
     59c:	000004a0 	andeq	r0, r0, r0, lsr #9
     5a0:	08003358 	stmdaeq	r0, {r3, r4, r6, r8, r9, ip, sp}
     5a4:	0000000a 	andeq	r0, r0, sl
     5a8:	0000000c 	andeq	r0, r0, ip
     5ac:	000004a0 	andeq	r0, r0, r0, lsr #9
     5b0:	08003362 	stmdaeq	r0, {r1, r5, r6, r8, r9, ip, sp}
     5b4:	00000002 	andeq	r0, r0, r2
     5b8:	0000000c 	andeq	r0, r0, ip
     5bc:	000004a0 	andeq	r0, r0, r0, lsr #9
     5c0:	08003364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, sp}
     5c4:	0000000c 	andeq	r0, r0, ip
     5c8:	0000000c 	andeq	r0, r0, ip
     5cc:	000004a0 	andeq	r0, r0, r0, lsr #9
     5d0:	08003370 	stmdaeq	r0, {r4, r5, r6, r8, r9, ip, sp}
     5d4:	0000001c 	andeq	r0, r0, ip, lsl r0
     5d8:	00000014 	andeq	r0, r0, r4, lsl r0
     5dc:	000004a0 	andeq	r0, r0, r0, lsr #9
     5e0:	0800338c 	stmdaeq	r0, {r2, r3, r7, r8, r9, ip, sp}
     5e4:	00000020 	andeq	r0, r0, r0, lsr #32
     5e8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     5ec:	00018e02 	andeq	r8, r1, r2, lsl #28
     5f0:	0000000c 	andeq	r0, r0, ip
     5f4:	000004a0 	andeq	r0, r0, r0, lsr #9
     5f8:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
     5fc:	00000020 	andeq	r0, r0, r0, lsr #32
     600:	00000014 	andeq	r0, r0, r4, lsl r0
     604:	000004a0 	andeq	r0, r0, r0, lsr #9
     608:	080033cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, sp}
     60c:	0000003c 	andeq	r0, r0, ip, lsr r0
     610:	83080e41 	movwhi	r0, #36417	; 0x8e41
     614:	00018e02 	andeq	r8, r1, r2, lsl #28
     618:	0000000c 	andeq	r0, r0, ip
     61c:	000004a0 	andeq	r0, r0, r0, lsr #9
     620:	08003408 	stmdaeq	r0, {r3, sl, ip, sp}
     624:	0000000a 	andeq	r0, r0, sl
     628:	0000000c 	andeq	r0, r0, ip
     62c:	000004a0 	andeq	r0, r0, r0, lsr #9
     630:	08003412 	stmdaeq	r0, {r1, r4, sl, ip, sp}
     634:	00000004 	andeq	r0, r0, r4
     638:	00000014 	andeq	r0, r0, r4, lsl r0
     63c:	000004a0 	andeq	r0, r0, r0, lsr #9
     640:	08003416 	stmdaeq	r0, {r1, r2, r4, sl, ip, sp}
     644:	000000ce 	andeq	r0, r0, lr, asr #1
     648:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     64c:	00018e02 	andeq	r8, r1, r2, lsl #28
     650:	00000014 	andeq	r0, r0, r4, lsl r0
     654:	000004a0 	andeq	r0, r0, r0, lsr #9
     658:	080034e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, sp}
     65c:	00000060 	andeq	r0, r0, r0, rrx
     660:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     664:	00018e02 	andeq	r8, r1, r2, lsl #28
     668:	00000018 	andeq	r0, r0, r8, lsl r0
     66c:	000004a0 	andeq	r0, r0, r0, lsr #9
     670:	08003544 	stmdaeq	r0, {r2, r6, r8, sl, ip, sp}
     674:	0000004c 	andeq	r0, r0, ip, asr #32
     678:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     67c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     680:	00018e02 	andeq	r8, r1, r2, lsl #28
     684:	00000014 	andeq	r0, r0, r4, lsl r0
     688:	000004a0 	andeq	r0, r0, r0, lsr #9
     68c:	08003590 	stmdaeq	r0, {r4, r7, r8, sl, ip, sp}
     690:	00000034 	andeq	r0, r0, r4, lsr r0
     694:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     698:	00018e02 	andeq	r8, r1, r2, lsl #28
     69c:	00000018 	andeq	r0, r0, r8, lsl r0
     6a0:	000004a0 	andeq	r0, r0, r0, lsr #9
     6a4:	080035c4 	stmdaeq	r0, {r2, r6, r7, r8, sl, ip, sp}
     6a8:	00000024 	andeq	r0, r0, r4, lsr #32
     6ac:	83100e41 	tsthi	r0, #1040	; 0x410
     6b0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     6b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     6b8:	00000018 	andeq	r0, r0, r8, lsl r0
     6bc:	000004a0 	andeq	r0, r0, r0, lsr #9
     6c0:	080035e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, sl, ip, sp}
     6c4:	00000048 	andeq	r0, r0, r8, asr #32
     6c8:	83100e41 	tsthi	r0, #1040	; 0x410
     6cc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     6d0:	00018e02 	andeq	r8, r1, r2, lsl #28
     6d4:	00000014 	andeq	r0, r0, r4, lsl r0
     6d8:	000004a0 	andeq	r0, r0, r0, lsr #9
     6dc:	08003630 	stmdaeq	r0, {r4, r5, r9, sl, ip, sp}
     6e0:	00000028 	andeq	r0, r0, r8, lsr #32
     6e4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     6e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6ec:	0000000c 	andeq	r0, r0, ip
     6f0:	000004a0 	andeq	r0, r0, r0, lsr #9
     6f4:	08003658 	stmdaeq	r0, {r3, r4, r6, r9, sl, ip, sp}
     6f8:	00000028 	andeq	r0, r0, r8, lsr #32
     6fc:	0000000c 	andeq	r0, r0, ip
     700:	000004a0 	andeq	r0, r0, r0, lsr #9
     704:	08003680 	stmdaeq	r0, {r7, r9, sl, ip, sp}
     708:	00000028 	andeq	r0, r0, r8, lsr #32
     70c:	00000014 	andeq	r0, r0, r4, lsl r0
     710:	000004a0 	andeq	r0, r0, r0, lsr #9
     714:	080036a8 	stmdaeq	r0, {r3, r5, r7, r9, sl, ip, sp}
     718:	00000038 	andeq	r0, r0, r8, lsr r0
     71c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     720:	00018e02 	andeq	r8, r1, r2, lsl #28
     724:	0000000c 	andeq	r0, r0, ip
     728:	000004a0 	andeq	r0, r0, r0, lsr #9
     72c:	080036e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip, sp}
     730:	00000008 	andeq	r0, r0, r8
     734:	0000000c 	andeq	r0, r0, ip
     738:	000004a0 	andeq	r0, r0, r0, lsr #9
     73c:	080036e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip, sp}
     740:	00000034 	andeq	r0, r0, r4, lsr r0
     744:	0000000c 	andeq	r0, r0, ip
     748:	000004a0 	andeq	r0, r0, r0, lsr #9
     74c:	0800371c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, sp}
     750:	00000034 	andeq	r0, r0, r4, lsr r0
     754:	0000001c 	andeq	r0, r0, ip, lsl r0
     758:	000004a0 	andeq	r0, r0, r0, lsr #9
     75c:	08003750 	stmdaeq	r0, {r4, r6, r8, r9, sl, ip, sp}
     760:	0000005c 	andeq	r0, r0, ip, asr r0
     764:	80180e41 	andshi	r0, r8, r1, asr #28
     768:	82058106 	andhi	r8, r5, #-2147483647	; 0x80000001
     76c:	84038304 	strhi	r8, [r3], #-772	; 0x304
     770:	00018e02 	andeq	r8, r1, r2, lsl #28
     774:	0000000c 	andeq	r0, r0, ip
     778:	000004a0 	andeq	r0, r0, r0, lsr #9
     77c:	080037ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip, sp}
     780:	0000000c 	andeq	r0, r0, ip
     784:	0000000c 	andeq	r0, r0, ip
     788:	000004a0 	andeq	r0, r0, r0, lsr #9
     78c:	080037b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, ip, sp}
     790:	00000024 	andeq	r0, r0, r4, lsr #32
     794:	00000018 	andeq	r0, r0, r8, lsl r0
     798:	000004a0 	andeq	r0, r0, r0, lsr #9
     79c:	080037dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, ip, sp}
     7a0:	00000054 	andeq	r0, r0, r4, asr r0
     7a4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     7a8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     7ac:	00018e02 	andeq	r8, r1, r2, lsl #28
     7b0:	00000018 	andeq	r0, r0, r8, lsl r0
     7b4:	000004a0 	andeq	r0, r0, r0, lsr #9
     7b8:	08003830 	stmdaeq	r0, {r4, r5, fp, ip, sp}
     7bc:	00000050 	andeq	r0, r0, r0, asr r0
     7c0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     7c4:	86038504 	strhi	r8, [r3], -r4, lsl #10
     7c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     7cc:	0000000c 	andeq	r0, r0, ip
     7d0:	000004a0 	andeq	r0, r0, r0, lsr #9
     7d4:	08003880 	stmdaeq	r0, {r7, fp, ip, sp}
     7d8:	00000008 	andeq	r0, r0, r8
     7dc:	0000000c 	andeq	r0, r0, ip
     7e0:	000004a0 	andeq	r0, r0, r0, lsr #9
     7e4:	08003888 	stmdaeq	r0, {r3, r7, fp, ip, sp}
     7e8:	00000014 	andeq	r0, r0, r4, lsl r0
     7ec:	00000014 	andeq	r0, r0, r4, lsl r0
     7f0:	000004a0 	andeq	r0, r0, r0, lsr #9
     7f4:	0800389c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, sp}
     7f8:	0000007c 	andeq	r0, r0, ip, ror r0
     7fc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     800:	00018e02 	andeq	r8, r1, r2, lsl #28
     804:	00000014 	andeq	r0, r0, r4, lsl r0
     808:	000004a0 	andeq	r0, r0, r0, lsr #9
     80c:	08003918 	stmdaeq	r0, {r3, r4, r8, fp, ip, sp}
     810:	00000030 	andeq	r0, r0, r0, lsr r0
     814:	83080e41 	movwhi	r0, #36417	; 0x8e41
     818:	00018e02 	andeq	r8, r1, r2, lsl #28
     81c:	0000000c 	andeq	r0, r0, ip
     820:	000004a0 	andeq	r0, r0, r0, lsr #9
     824:	08003948 	stmdaeq	r0, {r3, r6, r8, fp, ip, sp}
     828:	00000004 	andeq	r0, r0, r4
     82c:	00000018 	andeq	r0, r0, r8, lsl r0
     830:	000004a0 	andeq	r0, r0, r0, lsr #9
     834:	0800394c 	stmdaeq	r0, {r2, r3, r6, r8, fp, ip, sp}
     838:	000000fc 	strdeq	r0, [r0], -ip
     83c:	83100e41 	tsthi	r0, #1040	; 0x410
     840:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     844:	00018e02 	andeq	r8, r1, r2, lsl #28
     848:	00000018 	andeq	r0, r0, r8, lsl r0
     84c:	000004a0 	andeq	r0, r0, r0, lsr #9
     850:	08003a48 	stmdaeq	r0, {r3, r6, r9, fp, ip, sp}
     854:	00000180 	andeq	r0, r0, r0, lsl #3
     858:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     85c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     860:	00018e02 	andeq	r8, r1, r2, lsl #28
     864:	0000000c 	andeq	r0, r0, ip
     868:	000004a0 	andeq	r0, r0, r0, lsr #9
     86c:	08003bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, sp}
     870:	00000010 	andeq	r0, r0, r0, lsl r0
     874:	0000000c 	andeq	r0, r0, ip
     878:	000004a0 	andeq	r0, r0, r0, lsr #9
     87c:	08003bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip, sp}
     880:	0000000c 	andeq	r0, r0, ip
     884:	0000000c 	andeq	r0, r0, ip
     888:	000004a0 	andeq	r0, r0, r0, lsr #9
     88c:	08003be4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, fp, ip, sp}
     890:	0000000c 	andeq	r0, r0, ip
     894:	0000000c 	andeq	r0, r0, ip
     898:	000004a0 	andeq	r0, r0, r0, lsr #9
     89c:	08003bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, ip, sp}
     8a0:	00000010 	andeq	r0, r0, r0, lsl r0
     8a4:	0000000c 	andeq	r0, r0, ip
     8a8:	000004a0 	andeq	r0, r0, r0, lsr #9
     8ac:	08003c00 	stmdaeq	r0, {sl, fp, ip, sp}
     8b0:	0000000c 	andeq	r0, r0, ip
     8b4:	0000000c 	andeq	r0, r0, ip
     8b8:	000004a0 	andeq	r0, r0, r0, lsr #9
     8bc:	08003c0c 	stmdaeq	r0, {r2, r3, sl, fp, ip, sp}
     8c0:	0000002c 	andeq	r0, r0, ip, lsr #32
     8c4:	0000000c 	andeq	r0, r0, ip
     8c8:	000004a0 	andeq	r0, r0, r0, lsr #9
     8cc:	08003c38 	stmdaeq	r0, {r3, r4, r5, sl, fp, ip, sp}
     8d0:	00000024 	andeq	r0, r0, r4, lsr #32
     8d4:	0000000c 	andeq	r0, r0, ip
     8d8:	000004a0 	andeq	r0, r0, r0, lsr #9
     8dc:	08003c5c 	stmdaeq	r0, {r2, r3, r4, r6, sl, fp, ip, sp}
     8e0:	00000024 	andeq	r0, r0, r4, lsr #32
     8e4:	0000000c 	andeq	r0, r0, ip
     8e8:	000004a0 	andeq	r0, r0, r0, lsr #9
     8ec:	08003c80 	stmdaeq	r0, {r7, sl, fp, ip, sp}
     8f0:	00000008 	andeq	r0, r0, r8
     8f4:	0000000c 	andeq	r0, r0, ip
     8f8:	000004a0 	andeq	r0, r0, r0, lsr #9
     8fc:	08003c88 	stmdaeq	r0, {r3, r7, sl, fp, ip, sp}
     900:	00000004 	andeq	r0, r0, r4
     904:	0000000c 	andeq	r0, r0, ip
     908:	000004a0 	andeq	r0, r0, r0, lsr #9
     90c:	08003c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, ip, sp}
     910:	00000004 	andeq	r0, r0, r4
     914:	0000000c 	andeq	r0, r0, ip
     918:	000004a0 	andeq	r0, r0, r0, lsr #9
     91c:	08003c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, sp}
     920:	00000048 	andeq	r0, r0, r8, asr #32
     924:	00000014 	andeq	r0, r0, r4, lsl r0
     928:	000004a0 	andeq	r0, r0, r0, lsr #9
     92c:	08003cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, ip, sp}
     930:	00000034 	andeq	r0, r0, r4, lsr r0
     934:	83080e41 	movwhi	r0, #36417	; 0x8e41
     938:	00018e02 	andeq	r8, r1, r2, lsl #28
     93c:	0000001c 	andeq	r0, r0, ip, lsl r0
     940:	000004a0 	andeq	r0, r0, r0, lsr #9
     944:	08003d0c 	stmdaeq	r0, {r2, r3, r8, sl, fp, ip, sp}
     948:	0000004c 	andeq	r0, r0, ip, asr #32
     94c:	83180e41 	tsthi	r8, #1040	; 0x410
     950:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     954:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     958:	00018e02 	andeq	r8, r1, r2, lsl #28
     95c:	00000014 	andeq	r0, r0, r4, lsl r0
     960:	000004a0 	andeq	r0, r0, r0, lsr #9
     964:	08003d58 	stmdaeq	r0, {r3, r4, r6, r8, sl, fp, ip, sp}
     968:	0000002c 	andeq	r0, r0, ip, lsr #32
     96c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     970:	00018e02 	andeq	r8, r1, r2, lsl #28
     974:	00000018 	andeq	r0, r0, r8, lsl r0
     978:	000004a0 	andeq	r0, r0, r0, lsr #9
     97c:	08003d84 	stmdaeq	r0, {r2, r7, r8, sl, fp, ip, sp}
     980:	00000020 	andeq	r0, r0, r0, lsr #32
     984:	83100e41 	tsthi	r0, #1040	; 0x410
     988:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     98c:	00018e02 	andeq	r8, r1, r2, lsl #28
     990:	00000014 	andeq	r0, r0, r4, lsl r0
     994:	000004a0 	andeq	r0, r0, r0, lsr #9
     998:	08003da4 	stmdaeq	r0, {r2, r5, r7, r8, sl, fp, ip, sp}
     99c:	00000024 	andeq	r0, r0, r4, lsr #32
     9a0:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     9a4:	00018e02 	andeq	r8, r1, r2, lsl #28
     9a8:	00000014 	andeq	r0, r0, r4, lsl r0
     9ac:	000004a0 	andeq	r0, r0, r0, lsr #9
     9b0:	08003dc8 	stmdaeq	r0, {r3, r6, r7, r8, sl, fp, ip, sp}
     9b4:	00000024 	andeq	r0, r0, r4, lsr #32
     9b8:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     9bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     9c0:	0000000c 	andeq	r0, r0, ip
     9c4:	000004a0 	andeq	r0, r0, r0, lsr #9
     9c8:	08003dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp, ip, sp}
     9cc:	00000008 	andeq	r0, r0, r8
     9d0:	0000000c 	andeq	r0, r0, ip
     9d4:	000004a0 	andeq	r0, r0, r0, lsr #9
     9d8:	08003df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp, ip, sp}
     9dc:	0000000e 	andeq	r0, r0, lr
     9e0:	0000000c 	andeq	r0, r0, ip
     9e4:	000004a0 	andeq	r0, r0, r0, lsr #9
     9e8:	08003e02 	stmdaeq	r0, {r1, r9, sl, fp, ip, sp}
     9ec:	0000000c 	andeq	r0, r0, ip
     9f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f4:	000004a0 	andeq	r0, r0, r0, lsr #9
     9f8:	08003e0e 	stmdaeq	r0, {r1, r2, r3, r9, sl, fp, ip, sp}
     9fc:	00000062 	andeq	r0, r0, r2, rrx
     a00:	83180e41 	tsthi	r8, #1040	; 0x410
     a04:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     a08:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     a0c:	00018e02 	andeq	r8, r1, r2, lsl #28
     a10:	0000001c 	andeq	r0, r0, ip, lsl r0
     a14:	000004a0 	andeq	r0, r0, r0, lsr #9
     a18:	08003e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, ip, sp}
     a1c:	0000005c 	andeq	r0, r0, ip, asr r0
     a20:	83180e41 	tsthi	r8, #1040	; 0x410
     a24:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
     a28:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     a2c:	00018e02 	andeq	r8, r1, r2, lsl #28
     a30:	00000018 	andeq	r0, r0, r8, lsl r0
     a34:	000004a0 	andeq	r0, r0, r0, lsr #9
     a38:	08003ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp, ip, sp}
     a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a40:	83100e41 	tsthi	r0, #1040	; 0x410
     a44:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     a48:	00018e02 	andeq	r8, r1, r2, lsl #28
     a4c:	00000018 	andeq	r0, r0, r8, lsl r0
     a50:	000004a0 	andeq	r0, r0, r0, lsr #9
     a54:	08003ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, ip, sp}
     a58:	0000001c 	andeq	r0, r0, ip, lsl r0
     a5c:	83100e41 	tsthi	r0, #1040	; 0x410
     a60:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     a64:	00018e02 	andeq	r8, r1, r2, lsl #28
     a68:	00000018 	andeq	r0, r0, r8, lsl r0
     a6c:	000004a0 	andeq	r0, r0, r0, lsr #9
     a70:	08003f04 	stmdaeq	r0, {r2, r8, r9, sl, fp, ip, sp}
     a74:	0000001c 	andeq	r0, r0, ip, lsl r0
     a78:	83100e41 	tsthi	r0, #1040	; 0x410
     a7c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     a80:	00018e02 	andeq	r8, r1, r2, lsl #28
     a84:	00000018 	andeq	r0, r0, r8, lsl r0
     a88:	000004a0 	andeq	r0, r0, r0, lsr #9
     a8c:	08003f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, ip, sp}
     a90:	00000020 	andeq	r0, r0, r0, lsr #32
     a94:	83100e41 	tsthi	r0, #1040	; 0x410
     a98:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     a9c:	00018e02 	andeq	r8, r1, r2, lsl #28
     aa0:	00000018 	andeq	r0, r0, r8, lsl r0
     aa4:	000004a0 	andeq	r0, r0, r0, lsr #9
     aa8:	08003f40 	stmdaeq	r0, {r6, r8, r9, sl, fp, ip, sp}
     aac:	0000001c 	andeq	r0, r0, ip, lsl r0
     ab0:	83100e41 	tsthi	r0, #1040	; 0x410
     ab4:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     ab8:	00018e02 	andeq	r8, r1, r2, lsl #28
     abc:	00000018 	andeq	r0, r0, r8, lsl r0
     ac0:	000004a0 	andeq	r0, r0, r0, lsr #9
     ac4:	08003f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, sp}
     ac8:	0000001c 	andeq	r0, r0, ip, lsl r0
     acc:	83100e41 	tsthi	r0, #1040	; 0x410
     ad0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     ad4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ad8:	0000000c 	andeq	r0, r0, ip
     adc:	000004a0 	andeq	r0, r0, r0, lsr #9
     ae0:	08003f78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sl, fp, ip, sp}
     ae4:	00000006 	andeq	r0, r0, r6
     ae8:	0000000c 	andeq	r0, r0, ip
     aec:	000004a0 	andeq	r0, r0, r0, lsr #9
     af0:	08003f7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp}
     af4:	00000006 	andeq	r0, r0, r6
     af8:	0000000c 	andeq	r0, r0, ip
     afc:	000004a0 	andeq	r0, r0, r0, lsr #9
     b00:	08003f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, ip, sp}
     b04:	00000006 	andeq	r0, r0, r6
     b08:	0000000c 	andeq	r0, r0, ip
     b0c:	000004a0 	andeq	r0, r0, r0, lsr #9
     b10:	08003f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp, ip, sp}
     b14:	00000006 	andeq	r0, r0, r6
     b18:	0000000c 	andeq	r0, r0, ip
     b1c:	000004a0 	andeq	r0, r0, r0, lsr #9
     b20:	08003f90 	stmdaeq	r0, {r4, r7, r8, r9, sl, fp, ip, sp}
     b24:	00000006 	andeq	r0, r0, r6
     b28:	0000000c 	andeq	r0, r0, ip
     b2c:	000004a0 	andeq	r0, r0, r0, lsr #9
     b30:	08003f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, ip, sp}
     b34:	00000006 	andeq	r0, r0, r6
     b38:	00000018 	andeq	r0, r0, r8, lsl r0
     b3c:	000004a0 	andeq	r0, r0, r0, lsr #9
     b40:	08003f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, sp}
     b44:	0000004c 	andeq	r0, r0, ip, asr #32
     b48:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     b4c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b50:	00018e02 	andeq	r8, r1, r2, lsl #28
     b54:	00000014 	andeq	r0, r0, r4, lsl r0
     b58:	000004a0 	andeq	r0, r0, r0, lsr #9
     b5c:	08003fe8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, sl, fp, ip, sp}
     b60:	0000001e 	andeq	r0, r0, lr, lsl r0
     b64:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     b68:	00018e02 	andeq	r8, r1, r2, lsl #28
     b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b70:	000004a0 	andeq	r0, r0, r0, lsr #9
     b74:	08004006 	stmdaeq	r0, {r1, r2, lr}
     b78:	0000005a 	andeq	r0, r0, sl, asr r0
     b7c:	80180e41 	andshi	r0, r8, r1, asr #28
     b80:	82058106 	andhi	r8, r5, #-2147483647	; 0x80000001
     b84:	84038304 	strhi	r8, [r3], #-772	; 0x304
     b88:	00018e02 	andeq	r8, r1, r2, lsl #28
     b8c:	0000000c 	andeq	r0, r0, ip
     b90:	000004a0 	andeq	r0, r0, r0, lsr #9
     b94:	08004060 	stmdaeq	r0, {r5, r6, lr}
     b98:	0000000c 	andeq	r0, r0, ip
     b9c:	0000000c 	andeq	r0, r0, ip
     ba0:	000004a0 	andeq	r0, r0, r0, lsr #9
     ba4:	0800406c 	stmdaeq	r0, {r2, r3, r5, r6, lr}
     ba8:	00000008 	andeq	r0, r0, r8
     bac:	0000000c 	andeq	r0, r0, ip
     bb0:	000004a0 	andeq	r0, r0, r0, lsr #9
     bb4:	08004074 	stmdaeq	r0, {r2, r4, r5, r6, lr}
     bb8:	00000014 	andeq	r0, r0, r4, lsl r0
     bbc:	00000014 	andeq	r0, r0, r4, lsl r0
     bc0:	000004a0 	andeq	r0, r0, r0, lsr #9
     bc4:	08004088 	stmdaeq	r0, {r3, r7, lr}
     bc8:	00000030 	andeq	r0, r0, r0, lsr r0
     bcc:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     bd0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bd4:	0000000c 	andeq	r0, r0, ip
     bd8:	000004a0 	andeq	r0, r0, r0, lsr #9
     bdc:	080040b8 	stmdaeq	r0, {r3, r4, r5, r7, lr}
     be0:	00000040 	andeq	r0, r0, r0, asr #32
     be4:	0000000c 	andeq	r0, r0, ip
     be8:	000004a0 	andeq	r0, r0, r0, lsr #9
     bec:	080040f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, lr}
     bf0:	00000028 	andeq	r0, r0, r8, lsr #32
     bf4:	00000018 	andeq	r0, r0, r8, lsl r0
     bf8:	000004a0 	andeq	r0, r0, r0, lsr #9
     bfc:	08004120 	stmdaeq	r0, {r5, r8, lr}
     c00:	000000a8 	andeq	r0, r0, r8, lsr #1
     c04:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     c08:	86038504 	strhi	r8, [r3], -r4, lsl #10
     c0c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c10:	0000000c 	andeq	r0, r0, ip
     c14:	000004a0 	andeq	r0, r0, r0, lsr #9
     c18:	080041c8 	stmdaeq	r0, {r3, r6, r7, r8, lr}
     c1c:	00000014 	andeq	r0, r0, r4, lsl r0
     c20:	00000014 	andeq	r0, r0, r4, lsl r0
     c24:	000004a0 	andeq	r0, r0, r0, lsr #9
     c28:	080041dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, lr}
     c2c:	00000048 	andeq	r0, r0, r8, asr #32
     c30:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c34:	00018e02 	andeq	r8, r1, r2, lsl #28
     c38:	0000000c 	andeq	r0, r0, ip
     c3c:	000004a0 	andeq	r0, r0, r0, lsr #9
     c40:	08004224 	stmdaeq	r0, {r2, r5, r9, lr}
     c44:	00000004 	andeq	r0, r0, r4
     c48:	00000014 	andeq	r0, r0, r4, lsl r0
     c4c:	000004a0 	andeq	r0, r0, r0, lsr #9
     c50:	08004228 	stmdaeq	r0, {r3, r5, r9, lr}
     c54:	0000000e 	andeq	r0, r0, lr
     c58:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c5c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c60:	0000000c 	andeq	r0, r0, ip
     c64:	000004a0 	andeq	r0, r0, r0, lsr #9
     c68:	08004236 	stmdaeq	r0, {r1, r2, r4, r5, r9, lr}
     c6c:	00000004 	andeq	r0, r0, r4
     c70:	00000014 	andeq	r0, r0, r4, lsl r0
     c74:	000004a0 	andeq	r0, r0, r0, lsr #9
     c78:	0800423a 	stmdaeq	r0, {r1, r3, r4, r5, r9, lr}
     c7c:	00000018 	andeq	r0, r0, r8, lsl r0
     c80:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     c84:	00018e02 	andeq	r8, r1, r2, lsl #28
     c88:	00000018 	andeq	r0, r0, r8, lsl r0
     c8c:	000004a0 	andeq	r0, r0, r0, lsr #9
     c90:	08004252 	stmdaeq	r0, {r1, r4, r6, r9, lr}
     c94:	00000016 	andeq	r0, r0, r6, lsl r0
     c98:	83100e41 	tsthi	r0, #1040	; 0x410
     c9c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     ca0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ca4:	00000014 	andeq	r0, r0, r4, lsl r0
     ca8:	000004a0 	andeq	r0, r0, r0, lsr #9
     cac:	08004268 	stmdaeq	r0, {r3, r5, r6, r9, lr}
     cb0:	00000030 	andeq	r0, r0, r0, lsr r0
     cb4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     cb8:	00018e02 	andeq	r8, r1, r2, lsl #28
     cbc:	00000018 	andeq	r0, r0, r8, lsl r0
     cc0:	000004a0 	andeq	r0, r0, r0, lsr #9
     cc4:	08004298 	stmdaeq	r0, {r3, r4, r7, r9, lr}
     cc8:	00000054 	andeq	r0, r0, r4, asr r0
     ccc:	83100e41 	tsthi	r0, #1040	; 0x410
     cd0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     cd4:	00018e02 	andeq	r8, r1, r2, lsl #28
     cd8:	00000014 	andeq	r0, r0, r4, lsl r0
     cdc:	000004a0 	andeq	r0, r0, r0, lsr #9
     ce0:	080042ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, lr}
     ce4:	0000009c 	muleq	r0, ip, r0
     ce8:	84080e43 	strhi	r0, [r8], #-3651	; 0xe43
     cec:	00018e02 	andeq	r8, r1, r2, lsl #28
     cf0:	0000001c 	andeq	r0, r0, ip, lsl r0
     cf4:	000004a0 	andeq	r0, r0, r0, lsr #9
     cf8:	08004388 	stmdaeq	r0, {r3, r7, r8, r9, lr}
     cfc:	00000050 	andeq	r0, r0, r0, asr r0
     d00:	80180e41 	andshi	r0, r8, r1, asr #28
     d04:	82058106 	andhi	r8, r5, #-2147483647	; 0x80000001
     d08:	84038304 	strhi	r8, [r3], #-772	; 0x304
     d0c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d10:	0000000c 	andeq	r0, r0, ip
     d14:	000004a0 	andeq	r0, r0, r0, lsr #9
     d18:	080043d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, lr}
     d1c:	00000004 	andeq	r0, r0, r4
     d20:	0000001c 	andeq	r0, r0, ip, lsl r0
     d24:	000004a0 	andeq	r0, r0, r0, lsr #9
     d28:	080043dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, lr}
     d2c:	00000044 	andeq	r0, r0, r4, asr #32
     d30:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     d34:	86038504 	strhi	r8, [r3], -r4, lsl #10
     d38:	42018e02 	andmi	r8, r1, #32
     d3c:	0000500e 	andeq	r5, r0, lr
     d40:	00000014 	andeq	r0, r0, r4, lsl r0
     d44:	000004a0 	andeq	r0, r0, r0, lsr #9
     d48:	08004420 	stmdaeq	r0, {r5, sl, lr}
     d4c:	0000002c 	andeq	r0, r0, ip, lsr #32
     d50:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     d54:	00018e02 	andeq	r8, r1, r2, lsl #28
     d58:	00000014 	andeq	r0, r0, r4, lsl r0
     d5c:	000004a0 	andeq	r0, r0, r0, lsr #9
     d60:	0800444c 	stmdaeq	r0, {r2, r3, r6, sl, lr}
     d64:	00000048 	andeq	r0, r0, r8, asr #32
     d68:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d6c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d70:	00000014 	andeq	r0, r0, r4, lsl r0
     d74:	000004a0 	andeq	r0, r0, r0, lsr #9
     d78:	08004494 	stmdaeq	r0, {r2, r4, r7, sl, lr}
     d7c:	00000014 	andeq	r0, r0, r4, lsl r0
     d80:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     d84:	00018e02 	andeq	r8, r1, r2, lsl #28
     d88:	0000001c 	andeq	r0, r0, ip, lsl r0
     d8c:	000004a0 	andeq	r0, r0, r0, lsr #9
     d90:	080044a8 	stmdaeq	r0, {r3, r5, r7, sl, lr}
     d94:	00000060 	andeq	r0, r0, r0, rrx
     d98:	80180e41 	andshi	r0, r8, r1, asr #28
     d9c:	82058106 	andhi	r8, r5, #-2147483647	; 0x80000001
     da0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     da4:	00018e02 	andeq	r8, r1, r2, lsl #28
     da8:	00000020 	andeq	r0, r0, r0, lsr #32
     dac:	000004a0 	andeq	r0, r0, r0, lsr #9
     db0:	08004508 	stmdaeq	r0, {r3, r8, sl, lr}
     db4:	00000068 	andeq	r0, r0, r8, rrx
     db8:	83200e42 	teqhi	r0, #1056	; 0x420
     dbc:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
     dc0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     dc4:	89038804 	stmdbhi	r3, {r2, fp, pc}
     dc8:	00018e02 	andeq	r8, r1, r2, lsl #28
     dcc:	0000000c 	andeq	r0, r0, ip
     dd0:	000004a0 	andeq	r0, r0, r0, lsr #9
     dd4:	08004570 	stmdaeq	r0, {r4, r5, r6, r8, sl, lr}
     dd8:	00000012 	andeq	r0, r0, r2, lsl r0
     ddc:	00000018 	andeq	r0, r0, r8, lsl r0
     de0:	000004a0 	andeq	r0, r0, r0, lsr #9
     de4:	08004582 	stmdaeq	r0, {r1, r7, r8, sl, lr}
     de8:	000000d2 	ldrdeq	r0, [r0], -r2
     dec:	83100e41 	tsthi	r0, #1040	; 0x410
     df0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     df4:	00018e02 	andeq	r8, r1, r2, lsl #28
     df8:	00000014 	andeq	r0, r0, r4, lsl r0
     dfc:	000004a0 	andeq	r0, r0, r0, lsr #9
     e00:	08004654 	stmdaeq	r0, {r2, r4, r6, r9, sl, lr}
     e04:	0000001c 	andeq	r0, r0, ip, lsl r0
     e08:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     e0c:	00018e02 	andeq	r8, r1, r2, lsl #28
     e10:	00000018 	andeq	r0, r0, r8, lsl r0
     e14:	000004a0 	andeq	r0, r0, r0, lsr #9
     e18:	08004670 	stmdaeq	r0, {r4, r5, r6, r9, sl, lr}
     e1c:	000000f8 	strdeq	r0, [r0], -r8
     e20:	83100e41 	tsthi	r0, #1040	; 0x410
     e24:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     e28:	00018e02 	andeq	r8, r1, r2, lsl #28
     e2c:	00000018 	andeq	r0, r0, r8, lsl r0
     e30:	000004a0 	andeq	r0, r0, r0, lsr #9
     e34:	08004768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, lr}
     e38:	000000bc 	strheq	r0, [r0], -ip
     e3c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
     e40:	86038504 	strhi	r8, [r3], -r4, lsl #10
     e44:	00018e02 	andeq	r8, r1, r2, lsl #28
     e48:	00000018 	andeq	r0, r0, r8, lsl r0
     e4c:	000004a0 	andeq	r0, r0, r0, lsr #9
     e50:	08004824 	stmdaeq	r0, {r2, r5, fp, lr}
     e54:	00000074 	andeq	r0, r0, r4, ror r0
     e58:	83100e41 	tsthi	r0, #1040	; 0x410
     e5c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     e60:	00018e02 	andeq	r8, r1, r2, lsl #28
     e64:	00000014 	andeq	r0, r0, r4, lsl r0
     e68:	000004a0 	andeq	r0, r0, r0, lsr #9
     e6c:	08004898 	stmdaeq	r0, {r3, r4, r7, fp, lr}
     e70:	00000020 	andeq	r0, r0, r0, lsr #32
     e74:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     e78:	00018e02 	andeq	r8, r1, r2, lsl #28
     e7c:	00000014 	andeq	r0, r0, r4, lsl r0
     e80:	000004a0 	andeq	r0, r0, r0, lsr #9
     e84:	080048b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, lr}
     e88:	00000034 	andeq	r0, r0, r4, lsr r0
     e8c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     e90:	00018e02 	andeq	r8, r1, r2, lsl #28
     e94:	0000000c 	andeq	r0, r0, ip
     e98:	000004a0 	andeq	r0, r0, r0, lsr #9
     e9c:	080048ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, lr}
     ea0:	00000004 	andeq	r0, r0, r4
     ea4:	0000000c 	andeq	r0, r0, ip
     ea8:	000004a0 	andeq	r0, r0, r0, lsr #9
     eac:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
     eb0:	00000004 	andeq	r0, r0, r4
     eb4:	0000001c 	andeq	r0, r0, ip, lsl r0
     eb8:	000004a0 	andeq	r0, r0, r0, lsr #9
     ebc:	080048f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, lr}
     ec0:	00000060 	andeq	r0, r0, r0, rrx
     ec4:	80180e41 	andshi	r0, r8, r1, asr #28
     ec8:	82058106 	andhi	r8, r5, #-2147483647	; 0x80000001
     ecc:	84038304 	strhi	r8, [r3], #-772	; 0x304
     ed0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ed4:	00000014 	andeq	r0, r0, r4, lsl r0
     ed8:	000004a0 	andeq	r0, r0, r0, lsr #9
     edc:	08004954 	stmdaeq	r0, {r2, r4, r6, r8, fp, lr}
     ee0:	00000078 	andeq	r0, r0, r8, ror r0
     ee4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     ee8:	00018e02 	andeq	r8, r1, r2, lsl #28
     eec:	00000018 	andeq	r0, r0, r8, lsl r0
     ef0:	000004a0 	andeq	r0, r0, r0, lsr #9
     ef4:	080049cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp, lr}
     ef8:	00000070 	andeq	r0, r0, r0, ror r0
     efc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
     f00:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     f04:	200e4201 	andcs	r4, lr, r1, lsl #4
     f08:	00000018 	andeq	r0, r0, r8, lsl r0
     f0c:	000004a0 	andeq	r0, r0, r0, lsr #9
     f10:	08004a3c 	stmdaeq	r0, {r2, r3, r4, r5, r9, fp, lr}
     f14:	0000007a 	andeq	r0, r0, sl, ror r0
     f18:	80100e41 	andshi	r0, r0, r1, asr #28
     f1c:	82038104 	andhi	r8, r3, #1
     f20:	00018e02 	andeq	r8, r1, r2, lsl #28
     f24:	00000018 	andeq	r0, r0, r8, lsl r0
     f28:	000004a0 	andeq	r0, r0, r0, lsr #9
     f2c:	08004ab6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, fp, lr}
     f30:	0000004a 	andeq	r0, r0, sl, asr #32
     f34:	80100e41 	andshi	r0, r0, r1, asr #28
     f38:	82038104 	andhi	r8, r3, #1
     f3c:	00018e02 	andeq	r8, r1, r2, lsl #28
     f40:	00000018 	andeq	r0, r0, r8, lsl r0
     f44:	000004a0 	andeq	r0, r0, r0, lsr #9
     f48:	08004b00 	stmdaeq	r0, {r8, r9, fp, lr}
     f4c:	00000074 	andeq	r0, r0, r4, ror r0
     f50:	83100e41 	tsthi	r0, #1040	; 0x410
     f54:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     f58:	00018e02 	andeq	r8, r1, r2, lsl #28
     f5c:	00000014 	andeq	r0, r0, r4, lsl r0
     f60:	000004a0 	andeq	r0, r0, r0, lsr #9
     f64:	08004b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, lr}
     f68:	000000dc 	ldrdeq	r0, [r0], -ip
     f6c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
     f70:	00018e02 	andeq	r8, r1, r2, lsl #28
     f74:	00000014 	andeq	r0, r0, r4, lsl r0
     f78:	000004a0 	andeq	r0, r0, r0, lsr #9
     f7c:	08004c50 	stmdaeq	r0, {r4, r6, sl, fp, lr}
     f80:	0000001c 	andeq	r0, r0, ip, lsl r0
     f84:	83080e41 	movwhi	r0, #36417	; 0x8e41
     f88:	00018e02 	andeq	r8, r1, r2, lsl #28
     f8c:	00000014 	andeq	r0, r0, r4, lsl r0
     f90:	000004a0 	andeq	r0, r0, r0, lsr #9
     f94:	08004c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, lr}
     f98:	0000008c 	andeq	r0, r0, ip, lsl #1
     f9c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
     fa0:	00018e02 	andeq	r8, r1, r2, lsl #28
     fa4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fa8:	000004a0 	andeq	r0, r0, r0, lsr #9
     fac:	08004cf8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, fp, lr}
     fb0:	00000066 	andeq	r0, r0, r6, rrx
     fb4:	80180e41 	andshi	r0, r8, r1, asr #28
     fb8:	82058106 	andhi	r8, r5, #-2147483647	; 0x80000001
     fbc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
     fc0:	00018e02 	andeq	r8, r1, r2, lsl #28
     fc4:	00000024 	andeq	r0, r0, r4, lsr #32
     fc8:	000004a0 	andeq	r0, r0, r0, lsr #9
     fcc:	08004d5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp, lr}
     fd0:	000001c2 	andeq	r0, r0, r2, asr #3
     fd4:	80280e42 	eorhi	r0, r8, r2, asr #28
     fd8:	8409810a 	strhi	r8, [r9], #-266	; 0x10a
     fdc:	86078508 	strhi	r8, [r7], -r8, lsl #10
     fe0:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     fe4:	8a038904 	bhi	e33fc <__Stack_Size+0xe2ffc>
     fe8:	00018e02 	andeq	r8, r1, r2, lsl #28
     fec:	00000018 	andeq	r0, r0, r8, lsl r0
     ff0:	000004a0 	andeq	r0, r0, r0, lsr #9
     ff4:	08004f20 	stmdaeq	r0, {r5, r8, r9, sl, fp, lr}
     ff8:	000000cc 	andeq	r0, r0, ip, asr #1
     ffc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    1000:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1004:	280e4101 	stmdacs	lr, {r0, r8, lr}
    1008:	00000018 	andeq	r0, r0, r8, lsl r0
    100c:	000004a0 	andeq	r0, r0, r0, lsr #9
    1010:	08004fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, lr}
    1014:	000000a4 	andeq	r0, r0, r4, lsr #1
    1018:	83100e41 	tsthi	r0, #1040	; 0x410
    101c:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    1020:	00018e02 	andeq	r8, r1, r2, lsl #28
    1024:	0000000c 	andeq	r0, r0, ip
    1028:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    102c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1030:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1034:	00000014 	andeq	r0, r0, r4, lsl r0
    1038:	00001024 	andeq	r1, r0, r4, lsr #32
    103c:	08005090 	stmdaeq	r0, {r4, r7, ip, lr}
    1040:	00000058 	andeq	r0, r0, r8, asr r0
    1044:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1048:	00018e02 	andeq	r8, r1, r2, lsl #28
    104c:	00000014 	andeq	r0, r0, r4, lsl r0
    1050:	00001024 	andeq	r1, r0, r4, lsr #32
    1054:	080050e8 	stmdaeq	r0, {r3, r5, r6, r7, ip, lr}
    1058:	00000048 	andeq	r0, r0, r8, asr #32
    105c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1060:	00018e02 	andeq	r8, r1, r2, lsl #28
    1064:	0000000c 	andeq	r0, r0, ip
    1068:	00001024 	andeq	r1, r0, r4, lsr #32
    106c:	08005130 	stmdaeq	r0, {r4, r5, r8, ip, lr}
    1070:	00000012 	andeq	r0, r0, r2, lsl r0
    1074:	0000000c 	andeq	r0, r0, ip
    1078:	00001024 	andeq	r1, r0, r4, lsr #32
    107c:	08005142 	stmdaeq	r0, {r1, r6, r8, ip, lr}
    1080:	00000012 	andeq	r0, r0, r2, lsl r0
    1084:	0000000c 	andeq	r0, r0, ip
    1088:	00001024 	andeq	r1, r0, r4, lsr #32
    108c:	08005154 	stmdaeq	r0, {r2, r4, r6, r8, ip, lr}
    1090:	00000012 	andeq	r0, r0, r2, lsl r0
    1094:	0000000c 	andeq	r0, r0, ip
    1098:	00001024 	andeq	r1, r0, r4, lsr #32
    109c:	08005166 	stmdaeq	r0, {r1, r2, r5, r6, r8, ip, lr}
    10a0:	00000012 	andeq	r0, r0, r2, lsl r0
    10a4:	0000000c 	andeq	r0, r0, ip
    10a8:	00001024 	andeq	r1, r0, r4, lsr #32
    10ac:	08005178 	stmdaeq	r0, {r3, r4, r5, r6, r8, ip, lr}
    10b0:	0000000a 	andeq	r0, r0, sl
    10b4:	0000000c 	andeq	r0, r0, ip
    10b8:	00001024 	andeq	r1, r0, r4, lsr #32
    10bc:	08005182 	stmdaeq	r0, {r1, r7, r8, ip, lr}
    10c0:	00000008 	andeq	r0, r0, r8
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	00001024 	andeq	r1, r0, r4, lsr #32
    10cc:	0800518a 	stmdaeq	r0, {r1, r3, r7, r8, ip, lr}
    10d0:	0000000a 	andeq	r0, r0, sl
    10d4:	0000000c 	andeq	r0, r0, ip
    10d8:	00001024 	andeq	r1, r0, r4, lsr #32
    10dc:	08005194 	stmdaeq	r0, {r2, r4, r7, r8, ip, lr}
    10e0:	00000008 	andeq	r0, r0, r8
    10e4:	0000000c 	andeq	r0, r0, ip
    10e8:	00001024 	andeq	r1, r0, r4, lsr #32
    10ec:	0800519c 	stmdaeq	r0, {r2, r3, r4, r7, r8, ip, lr}
    10f0:	00000012 	andeq	r0, r0, r2, lsl r0
    10f4:	0000000c 	andeq	r0, r0, ip
    10f8:	00001024 	andeq	r1, r0, r4, lsr #32
    10fc:	080051ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, ip, lr}
    1100:	00000008 	andeq	r0, r0, r8
    1104:	0000000c 	andeq	r0, r0, ip
    1108:	00001024 	andeq	r1, r0, r4, lsr #32
    110c:	080051b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, ip, lr}
    1110:	00000010 	andeq	r0, r0, r0, lsl r0
    1114:	0000000c 	andeq	r0, r0, ip
    1118:	00001024 	andeq	r1, r0, r4, lsr #32
    111c:	080051c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip, lr}
    1120:	00000012 	andeq	r0, r0, r2, lsl r0
    1124:	00000018 	andeq	r0, r0, r8, lsl r0
    1128:	00001024 	andeq	r1, r0, r4, lsr #32
    112c:	080051d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, ip, lr}
    1130:	0000009a 	muleq	r0, sl, r0
    1134:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    1138:	86038504 	strhi	r8, [r3], -r4, lsl #10
    113c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1140:	0000000c 	andeq	r0, r0, ip
    1144:	00001024 	andeq	r1, r0, r4, lsr #32
    1148:	08005272 	stmdaeq	r0, {r1, r4, r5, r6, r9, ip, lr}
    114c:	00000012 	andeq	r0, r0, r2, lsl r0
    1150:	0000000c 	andeq	r0, r0, ip
    1154:	00001024 	andeq	r1, r0, r4, lsr #32
    1158:	08005284 	stmdaeq	r0, {r2, r7, r9, ip, lr}
    115c:	00000006 	andeq	r0, r0, r6
    1160:	0000000c 	andeq	r0, r0, ip
    1164:	00001024 	andeq	r1, r0, r4, lsr #32
    1168:	0800528a 	stmdaeq	r0, {r1, r3, r7, r9, ip, lr}
    116c:	0000000a 	andeq	r0, r0, sl
    1170:	0000000c 	andeq	r0, r0, ip
    1174:	00001024 	andeq	r1, r0, r4, lsr #32
    1178:	08005294 	stmdaeq	r0, {r2, r4, r7, r9, ip, lr}
    117c:	00000012 	andeq	r0, r0, r2, lsl r0
    1180:	0000000c 	andeq	r0, r0, ip
    1184:	00001024 	andeq	r1, r0, r4, lsr #32
    1188:	080052a6 	stmdaeq	r0, {r1, r2, r5, r7, r9, ip, lr}
    118c:	00000012 	andeq	r0, r0, r2, lsl r0
    1190:	0000000c 	andeq	r0, r0, ip
    1194:	00001024 	andeq	r1, r0, r4, lsr #32
    1198:	080052b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, ip, lr}
    119c:	0000000c 	andeq	r0, r0, ip
    11a0:	0000000c 	andeq	r0, r0, ip
    11a4:	00001024 	andeq	r1, r0, r4, lsr #32
    11a8:	080052c4 	stmdaeq	r0, {r2, r6, r7, r9, ip, lr}
    11ac:	00000012 	andeq	r0, r0, r2, lsl r0
    11b0:	0000000c 	andeq	r0, r0, ip
    11b4:	00001024 	andeq	r1, r0, r4, lsr #32
    11b8:	080052d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, ip, lr}
    11bc:	00000012 	andeq	r0, r0, r2, lsl r0
    11c0:	0000000c 	andeq	r0, r0, ip
    11c4:	00001024 	andeq	r1, r0, r4, lsr #32
    11c8:	080052e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, ip, lr}
    11cc:	00000008 	andeq	r0, r0, r8
    11d0:	00000018 	andeq	r0, r0, r8, lsl r0
    11d4:	00001024 	andeq	r1, r0, r4, lsr #32
    11d8:	080052f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, lr}
    11dc:	00000060 	andeq	r0, r0, r0, rrx
    11e0:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    11e4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    11e8:	00018e02 	andeq	r8, r1, r2, lsl #28
    11ec:	0000000c 	andeq	r0, r0, ip
    11f0:	00001024 	andeq	r1, r0, r4, lsr #32
    11f4:	08005350 	stmdaeq	r0, {r4, r6, r8, r9, ip, lr}
    11f8:	00000010 	andeq	r0, r0, r0, lsl r0
    11fc:	0000000c 	andeq	r0, r0, ip
    1200:	00001024 	andeq	r1, r0, r4, lsr #32
    1204:	08005360 	stmdaeq	r0, {r5, r6, r8, r9, ip, lr}
    1208:	00000004 	andeq	r0, r0, r4
    120c:	0000000c 	andeq	r0, r0, ip
    1210:	00001024 	andeq	r1, r0, r4, lsr #32
    1214:	08005364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip, lr}
    1218:	00000008 	andeq	r0, r0, r8
    121c:	0000000c 	andeq	r0, r0, ip
    1220:	00001024 	andeq	r1, r0, r4, lsr #32
    1224:	0800536c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, ip, lr}
    1228:	00000010 	andeq	r0, r0, r0, lsl r0
    122c:	0000000c 	andeq	r0, r0, ip
    1230:	00001024 	andeq	r1, r0, r4, lsr #32
    1234:	0800537c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, lr}
    1238:	00000006 	andeq	r0, r0, r6
    123c:	0000000c 	andeq	r0, r0, ip
    1240:	00001024 	andeq	r1, r0, r4, lsr #32
    1244:	08005382 	stmdaeq	r0, {r1, r7, r8, r9, ip, lr}
    1248:	0000000c 	andeq	r0, r0, ip
    124c:	0000000c 	andeq	r0, r0, ip
    1250:	00001024 	andeq	r1, r0, r4, lsr #32
    1254:	0800538e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, ip, lr}
    1258:	0000001a 	andeq	r0, r0, sl, lsl r0
    125c:	0000000c 	andeq	r0, r0, ip
    1260:	00001024 	andeq	r1, r0, r4, lsr #32
    1264:	080053a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, lr}
    1268:	0000000c 	andeq	r0, r0, ip
    126c:	0000000c 	andeq	r0, r0, ip
    1270:	00001024 	andeq	r1, r0, r4, lsr #32
    1274:	080053b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip, lr}
    1278:	00000006 	andeq	r0, r0, r6
    127c:	0000000c 	andeq	r0, r0, ip
    1280:	00001024 	andeq	r1, r0, r4, lsr #32
    1284:	080053ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, r9, ip, lr}
    1288:	00000016 	andeq	r0, r0, r6, lsl r0
    128c:	0000000c 	andeq	r0, r0, ip
    1290:	00001024 	andeq	r1, r0, r4, lsr #32
    1294:	080053d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, ip, lr}
    1298:	00000008 	andeq	r0, r0, r8
    129c:	0000000c 	andeq	r0, r0, ip
    12a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12a4:	7c020001 	stcvc	0, cr0, [r2], {1}
    12a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12ac:	0000000c 	andeq	r0, r0, ip
    12b0:	0000129c 	muleq	r0, ip, r2
    12b4:	080053d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip, lr}
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
    12bc:	0000000c 	andeq	r0, r0, ip
    12c0:	0000129c 	muleq	r0, ip, r2
    12c4:	080053f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, lr}
    12c8:	00000018 	andeq	r0, r0, r8, lsl r0
    12cc:	0000000c 	andeq	r0, r0, ip
    12d0:	0000129c 	muleq	r0, ip, r2
    12d4:	08005408 	stmdaeq	r0, {r3, sl, ip, lr}
    12d8:	00000018 	andeq	r0, r0, r8, lsl r0
    12dc:	0000000c 	andeq	r0, r0, ip
    12e0:	0000129c 	muleq	r0, ip, r2
    12e4:	08005420 	stmdaeq	r0, {r5, sl, ip, lr}
    12e8:	00000018 	andeq	r0, r0, r8, lsl r0
    12ec:	0000000c 	andeq	r0, r0, ip
    12f0:	0000129c 	muleq	r0, ip, r2
    12f4:	08005438 	stmdaeq	r0, {r3, r4, r5, sl, ip, lr}
    12f8:	00000010 	andeq	r0, r0, r0, lsl r0
    12fc:	0000000c 	andeq	r0, r0, ip
    1300:	0000129c 	muleq	r0, ip, r2
    1304:	08005448 	stmdaeq	r0, {r3, r6, sl, ip, lr}
    1308:	0000000c 	andeq	r0, r0, ip
    130c:	0000000c 	andeq	r0, r0, ip
    1310:	0000129c 	muleq	r0, ip, r2
    1314:	08005454 	stmdaeq	r0, {r2, r4, r6, sl, ip, lr}
    1318:	0000000c 	andeq	r0, r0, ip
    131c:	0000000c 	andeq	r0, r0, ip
    1320:	0000129c 	muleq	r0, ip, r2
    1324:	08005460 	stmdaeq	r0, {r5, r6, sl, ip, lr}
    1328:	00000010 	andeq	r0, r0, r0, lsl r0
    132c:	0000000c 	andeq	r0, r0, ip
    1330:	0000129c 	muleq	r0, ip, r2
    1334:	08005470 	stmdaeq	r0, {r4, r5, r6, sl, ip, lr}
    1338:	00000010 	andeq	r0, r0, r0, lsl r0
    133c:	0000000c 	andeq	r0, r0, ip
    1340:	0000129c 	muleq	r0, ip, r2
    1344:	08005480 	stmdaeq	r0, {r7, sl, ip, lr}
    1348:	00000018 	andeq	r0, r0, r8, lsl r0
    134c:	0000000c 	andeq	r0, r0, ip
    1350:	0000129c 	muleq	r0, ip, r2
    1354:	08005498 	stmdaeq	r0, {r3, r4, r7, sl, ip, lr}
    1358:	00000020 	andeq	r0, r0, r0, lsr #32
    135c:	0000000c 	andeq	r0, r0, ip
    1360:	0000129c 	muleq	r0, ip, r2
    1364:	080054b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, lr}
    1368:	0000000c 	andeq	r0, r0, ip
    136c:	0000000c 	andeq	r0, r0, ip
    1370:	0000129c 	muleq	r0, ip, r2
    1374:	080054c4 	stmdaeq	r0, {r2, r6, r7, sl, ip, lr}
    1378:	00000028 	andeq	r0, r0, r8, lsr #32
    137c:	00000018 	andeq	r0, r0, r8, lsl r0
    1380:	0000129c 	muleq	r0, ip, r2
    1384:	080054ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, sl, ip, lr}
    1388:	00000034 	andeq	r0, r0, r4, lsr r0
    138c:	80100e41 	andshi	r0, r0, r1, asr #28
    1390:	84038104 	strhi	r8, [r3], #-260	; 0x104
    1394:	00018e02 	andeq	r8, r1, r2, lsl #28
    1398:	0000001c 	andeq	r0, r0, ip, lsl r0
    139c:	0000129c 	muleq	r0, ip, r2
    13a0:	08005520 	stmdaeq	r0, {r5, r8, sl, ip, lr}
    13a4:	00000054 	andeq	r0, r0, r4, asr r0
    13a8:	83180e41 	tsthi	r8, #1040	; 0x410
    13ac:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    13b0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    13b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    13b8:	00000018 	andeq	r0, r0, r8, lsl r0
    13bc:	0000129c 	muleq	r0, ip, r2
    13c0:	08005574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, ip, lr}
    13c4:	00000090 	muleq	r0, r0, r0
    13c8:	83100e41 	tsthi	r0, #1040	; 0x410
    13cc:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    13d0:	00018e02 	andeq	r8, r1, r2, lsl #28
    13d4:	00000014 	andeq	r0, r0, r4, lsl r0
    13d8:	0000129c 	muleq	r0, ip, r2
    13dc:	08005604 	stmdaeq	r0, {r2, r9, sl, ip, lr}
    13e0:	0000009c 	muleq	r0, ip, r0
    13e4:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    13e8:	00018e02 	andeq	r8, r1, r2, lsl #28
    13ec:	00000018 	andeq	r0, r0, r8, lsl r0
    13f0:	0000129c 	muleq	r0, ip, r2
    13f4:	080056a0 	stmdaeq	r0, {r5, r7, r9, sl, ip, lr}
    13f8:	00000044 	andeq	r0, r0, r4, asr #32
    13fc:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    1400:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1404:	00018e02 	andeq	r8, r1, r2, lsl #28
    1408:	00000018 	andeq	r0, r0, r8, lsl r0
    140c:	0000129c 	muleq	r0, ip, r2
    1410:	080056e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sl, ip, lr}
    1414:	00000038 	andeq	r0, r0, r8, lsr r0
    1418:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    141c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1420:	00018e02 	andeq	r8, r1, r2, lsl #28
    1424:	00000018 	andeq	r0, r0, r8, lsl r0
    1428:	0000129c 	muleq	r0, ip, r2
    142c:	0800571c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, lr}
    1430:	0000004c 	andeq	r0, r0, ip, asr #32
    1434:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    1438:	86038504 	strhi	r8, [r3], -r4, lsl #10
    143c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1440:	00000014 	andeq	r0, r0, r4, lsl r0
    1444:	0000129c 	muleq	r0, ip, r2
    1448:	08005768 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, ip, lr}
    144c:	00000074 	andeq	r0, r0, r4, ror r0
    1450:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1454:	00018e02 	andeq	r8, r1, r2, lsl #28
    1458:	00000014 	andeq	r0, r0, r4, lsl r0
    145c:	0000129c 	muleq	r0, ip, r2
    1460:	080057dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, ip, lr}
    1464:	0000003c 	andeq	r0, r0, ip, lsr r0
    1468:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    146c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1470:	00000018 	andeq	r0, r0, r8, lsl r0
    1474:	0000129c 	muleq	r0, ip, r2
    1478:	08005818 	stmdaeq	r0, {r3, r4, fp, ip, lr}
    147c:	00000040 	andeq	r0, r0, r0, asr #32
    1480:	83100e41 	tsthi	r0, #1040	; 0x410
    1484:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    1488:	00018e02 	andeq	r8, r1, r2, lsl #28
    148c:	0000000c 	andeq	r0, r0, ip
    1490:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1494:	7c020001 	stcvc	0, cr0, [r2], {1}
    1498:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    149c:	00000014 	andeq	r0, r0, r4, lsl r0
    14a0:	0000148c 	andeq	r1, r0, ip, lsl #9
    14a4:	08005858 	stmdaeq	r0, {r3, r4, r6, fp, ip, lr}
    14a8:	000000a4 	andeq	r0, r0, r4, lsr #1
    14ac:	83080e41 	movwhi	r0, #36417	; 0x8e41
    14b0:	00018e02 	andeq	r8, r1, r2, lsl #28
    14b4:	00000014 	andeq	r0, r0, r4, lsl r0
    14b8:	0000148c 	andeq	r1, r0, ip, lsl #9
    14bc:	080058fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, lr}
    14c0:	00000016 	andeq	r0, r0, r6, lsl r0
    14c4:	83080e43 	movwhi	r0, #36419	; 0x8e43
    14c8:	00018e02 	andeq	r8, r1, r2, lsl #28
    14cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    14d0:	0000148c 	andeq	r1, r0, ip, lsl #9
    14d4:	08005912 	stmdaeq	r0, {r1, r4, r8, fp, ip, lr}
    14d8:	000000a0 	andeq	r0, r0, r0, lsr #1
    14dc:	84140e42 	ldrhi	r0, [r4], #-3650	; 0xe42
    14e0:	86048505 	strhi	r8, [r4], -r5, lsl #10
    14e4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    14e8:	00000001 	andeq	r0, r0, r1
    14ec:	0000000c 	andeq	r0, r0, ip
    14f0:	0000148c 	andeq	r1, r0, ip, lsl #9
    14f4:	080059b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, fp, ip, lr}
    14f8:	00000010 	andeq	r0, r0, r0, lsl r0
    14fc:	0000000c 	andeq	r0, r0, ip
    1500:	0000148c 	andeq	r1, r0, ip, lsl #9
    1504:	080059c2 	stmdaeq	r0, {r1, r6, r7, r8, fp, ip, lr}
    1508:	0000000c 	andeq	r0, r0, ip
    150c:	0000000c 	andeq	r0, r0, ip
    1510:	0000148c 	andeq	r1, r0, ip, lsl #9
    1514:	080059ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip, lr}
    1518:	00000006 	andeq	r0, r0, r6
    151c:	0000000c 	andeq	r0, r0, ip
    1520:	0000148c 	andeq	r1, r0, ip, lsl #9
    1524:	080059d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, fp, ip, lr}
    1528:	0000000c 	andeq	r0, r0, ip
    152c:	0000000c 	andeq	r0, r0, ip
    1530:	0000148c 	andeq	r1, r0, ip, lsl #9
    1534:	080059e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, lr}
    1538:	00000006 	andeq	r0, r0, r6
    153c:	0000000c 	andeq	r0, r0, ip
    1540:	0000148c 	andeq	r1, r0, ip, lsl #9
    1544:	080059e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp, ip, lr}
    1548:	00000004 	andeq	r0, r0, r4
    154c:	0000000c 	andeq	r0, r0, ip
    1550:	0000148c 	andeq	r1, r0, ip, lsl #9
    1554:	080059ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, fp, ip, lr}
    1558:	00000004 	andeq	r0, r0, r4
    155c:	0000000c 	andeq	r0, r0, ip
    1560:	0000148c 	andeq	r1, r0, ip, lsl #9
    1564:	080059ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, ip, lr}
    1568:	0000000a 	andeq	r0, r0, sl
    156c:	0000000c 	andeq	r0, r0, ip
    1570:	0000148c 	andeq	r1, r0, ip, lsl #9
    1574:	080059f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, lr}
    1578:	00000004 	andeq	r0, r0, r4
    157c:	0000000c 	andeq	r0, r0, ip
    1580:	0000148c 	andeq	r1, r0, ip, lsl #9
    1584:	080059fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}
    1588:	00000010 	andeq	r0, r0, r0, lsl r0
    158c:	00000014 	andeq	r0, r0, r4, lsl r0
    1590:	0000148c 	andeq	r1, r0, ip, lsl #9
    1594:	08005a0c 	stmdaeq	r0, {r2, r3, r9, fp, ip, lr}
    1598:	0000001c 	andeq	r0, r0, ip, lsl r0
    159c:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    15a0:	00018e02 	andeq	r8, r1, r2, lsl #28
    15a4:	0000000c 	andeq	r0, r0, ip
    15a8:	0000148c 	andeq	r1, r0, ip, lsl #9
    15ac:	08005a28 	stmdaeq	r0, {r3, r5, r9, fp, ip, lr}
    15b0:	0000000c 	andeq	r0, r0, ip
    15b4:	00000018 	andeq	r0, r0, r8, lsl r0
    15b8:	0000148c 	andeq	r1, r0, ip, lsl #9
    15bc:	08005a34 	stmdaeq	r0, {r2, r4, r5, r9, fp, ip, lr}
    15c0:	00000058 	andeq	r0, r0, r8, asr r0
    15c4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    15c8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    15cc:	00000001 	andeq	r0, r0, r1
    15d0:	00000018 	andeq	r0, r0, r8, lsl r0
    15d4:	0000148c 	andeq	r1, r0, ip, lsl #9
    15d8:	08005a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp, ip, lr}
    15dc:	00000034 	andeq	r0, r0, r4, lsr r0
    15e0:	840c0e43 	strhi	r0, [ip], #-3651	; 0xe43
    15e4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    15e8:	00000001 	andeq	r0, r0, r1
    15ec:	0000000c 	andeq	r0, r0, ip
    15f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15f4:	7c020001 	stcvc	0, cr0, [r2], {1}
    15f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15fc:	0000000c 	andeq	r0, r0, ip
    1600:	000015ec 	andeq	r1, r0, ip, ror #11
    1604:	08005ac0 	stmdaeq	r0, {r6, r7, r9, fp, ip, lr}
    1608:	00000034 	andeq	r0, r0, r4, lsr r0
    160c:	0000000c 	andeq	r0, r0, ip
    1610:	000015ec 	andeq	r1, r0, ip, ror #11
    1614:	08005af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, ip, lr}
    1618:	00000030 	andeq	r0, r0, r0, lsr r0
    161c:	0000000c 	andeq	r0, r0, ip
    1620:	000015ec 	andeq	r1, r0, ip, ror #11
    1624:	08005b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, ip, lr}
    1628:	00000014 	andeq	r0, r0, r4, lsl r0
    162c:	00000018 	andeq	r0, r0, r8, lsl r0
    1630:	000015ec 	andeq	r1, r0, ip, ror #11
    1634:	08005b38 	stmdaeq	r0, {r3, r4, r5, r8, r9, fp, ip, lr}
    1638:	00000084 	andeq	r0, r0, r4, lsl #1
    163c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    1640:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1644:	00018e02 	andeq	r8, r1, r2, lsl #28
    1648:	0000000c 	andeq	r0, r0, ip
    164c:	000015ec 	andeq	r1, r0, ip, ror #11
    1650:	08005bbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, fp, ip, lr}
    1654:	0000000c 	andeq	r0, r0, ip
    1658:	0000000c 	andeq	r0, r0, ip
    165c:	000015ec 	andeq	r1, r0, ip, ror #11
    1660:	08005bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp, ip, lr}
    1664:	00000004 	andeq	r0, r0, r4
    1668:	0000000c 	andeq	r0, r0, ip
    166c:	000015ec 	andeq	r1, r0, ip, ror #11
    1670:	08005bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip, lr}
    1674:	00000004 	andeq	r0, r0, r4
    1678:	0000000c 	andeq	r0, r0, ip
    167c:	000015ec 	andeq	r1, r0, ip, ror #11
    1680:	08005bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp, ip, lr}
    1684:	00000004 	andeq	r0, r0, r4
    1688:	0000000c 	andeq	r0, r0, ip
    168c:	000015ec 	andeq	r1, r0, ip, ror #11
    1690:	08005bd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, r9, fp, ip, lr}
    1694:	00000004 	andeq	r0, r0, r4
    1698:	0000000c 	andeq	r0, r0, ip
    169c:	000015ec 	andeq	r1, r0, ip, ror #11
    16a0:	08005bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip, lr}
    16a4:	00000006 	andeq	r0, r0, r6
    16a8:	0000000c 	andeq	r0, r0, ip
    16ac:	000015ec 	andeq	r1, r0, ip, ror #11
    16b0:	08005bde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, fp, ip, lr}
    16b4:	00000004 	andeq	r0, r0, r4
    16b8:	0000000c 	andeq	r0, r0, ip
    16bc:	000015ec 	andeq	r1, r0, ip, ror #11
    16c0:	08005be2 	stmdaeq	r0, {r1, r5, r6, r7, r8, r9, fp, ip, lr}
    16c4:	0000000e 	andeq	r0, r0, lr
    16c8:	0000000c 	andeq	r0, r0, ip
    16cc:	000015ec 	andeq	r1, r0, ip, ror #11
    16d0:	08005bf0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, fp, ip, lr}
    16d4:	00000024 	andeq	r0, r0, r4, lsr #32
    16d8:	0000000c 	andeq	r0, r0, ip
    16dc:	000015ec 	andeq	r1, r0, ip, ror #11
    16e0:	08005c14 	stmdaeq	r0, {r2, r4, sl, fp, ip, lr}
    16e4:	0000000c 	andeq	r0, r0, ip
    16e8:	0000000c 	andeq	r0, r0, ip
    16ec:	000015ec 	andeq	r1, r0, ip, ror #11
    16f0:	08005c20 	stmdaeq	r0, {r5, sl, fp, ip, lr}
    16f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    16f8:	0000000c 	andeq	r0, r0, ip
    16fc:	000015ec 	andeq	r1, r0, ip, ror #11
    1700:	08005c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, ip, lr}
    1704:	00000010 	andeq	r0, r0, r0, lsl r0
    1708:	0000000c 	andeq	r0, r0, ip
    170c:	000015ec 	andeq	r1, r0, ip, ror #11
    1710:	08005c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, ip, lr}
    1714:	00000024 	andeq	r0, r0, r4, lsr #32
    1718:	0000000c 	andeq	r0, r0, ip
    171c:	000015ec 	andeq	r1, r0, ip, ror #11
    1720:	08005c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, ip, lr}
    1724:	0000000c 	andeq	r0, r0, ip
    1728:	0000000c 	andeq	r0, r0, ip
    172c:	000015ec 	andeq	r1, r0, ip, ror #11
    1730:	08005c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip, lr}
    1734:	00000014 	andeq	r0, r0, r4, lsl r0
    1738:	0000000c 	andeq	r0, r0, ip
    173c:	000015ec 	andeq	r1, r0, ip, ror #11
    1740:	08005c90 	stmdaeq	r0, {r4, r7, sl, fp, ip, lr}
    1744:	00000010 	andeq	r0, r0, r0, lsl r0
    1748:	0000000c 	andeq	r0, r0, ip
    174c:	000015ec 	andeq	r1, r0, ip, ror #11
    1750:	08005ca0 	stmdaeq	r0, {r5, r7, sl, fp, ip, lr}
    1754:	00000010 	andeq	r0, r0, r0, lsl r0
    1758:	0000000c 	andeq	r0, r0, ip
    175c:	000015ec 	andeq	r1, r0, ip, ror #11
    1760:	08005cb0 	stmdaeq	r0, {r4, r5, r7, sl, fp, ip, lr}
    1764:	00000018 	andeq	r0, r0, r8, lsl r0
    1768:	0000000c 	andeq	r0, r0, ip
    176c:	000015ec 	andeq	r1, r0, ip, ror #11
    1770:	08005cc8 	stmdaeq	r0, {r3, r6, r7, sl, fp, ip, lr}
    1774:	00000020 	andeq	r0, r0, r0, lsr #32
    1778:	00000018 	andeq	r0, r0, r8, lsl r0
    177c:	000015ec 	andeq	r1, r0, ip, ror #11
    1780:	08005ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, ip, lr}
    1784:	00000050 	andeq	r0, r0, r0, asr r0
    1788:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    178c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1790:	00018e02 	andeq	r8, r1, r2, lsl #28
    1794:	0000000c 	andeq	r0, r0, ip
    1798:	000015ec 	andeq	r1, r0, ip, ror #11
    179c:	08005d38 	stmdaeq	r0, {r3, r4, r5, r8, sl, fp, ip, lr}
    17a0:	0000001c 	andeq	r0, r0, ip, lsl r0
    17a4:	0000000c 	andeq	r0, r0, ip
    17a8:	000015ec 	andeq	r1, r0, ip, ror #11
    17ac:	08005d54 	stmdaeq	r0, {r2, r4, r6, r8, sl, fp, ip, lr}
    17b0:	00000018 	andeq	r0, r0, r8, lsl r0
    17b4:	0000000c 	andeq	r0, r0, ip
    17b8:	000015ec 	andeq	r1, r0, ip, ror #11
    17bc:	08005d6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, fp, ip, lr}
    17c0:	0000001c 	andeq	r0, r0, ip, lsl r0
    17c4:	0000000c 	andeq	r0, r0, ip
    17c8:	000015ec 	andeq	r1, r0, ip, ror #11
    17cc:	08005d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, ip, lr}
    17d0:	00000024 	andeq	r0, r0, r4, lsr #32
    17d4:	0000000c 	andeq	r0, r0, ip
    17d8:	000015ec 	andeq	r1, r0, ip, ror #11
    17dc:	08005dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, ip, lr}
    17e0:	00000030 	andeq	r0, r0, r0, lsr r0
    17e4:	0000000c 	andeq	r0, r0, ip
    17e8:	000015ec 	andeq	r1, r0, ip, ror #11
    17ec:	08005ddc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, sl, fp, ip, lr}
    17f0:	00000014 	andeq	r0, r0, r4, lsl r0
    17f4:	0000000c 	andeq	r0, r0, ip
    17f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17fc:	7c020001 	stcvc	0, cr0, [r2], {1}
    1800:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1804:	00000014 	andeq	r0, r0, r4, lsl r0
    1808:	000017f4 	strdeq	r1, [r0], -r4
    180c:	08005df0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sl, fp, ip, lr}
    1810:	0000001a 	andeq	r0, r0, sl, lsl r0
    1814:	83080e42 	movwhi	r0, #36418	; 0x8e42
    1818:	00018e02 	andeq	r8, r1, r2, lsl #28
    181c:	0000000c 	andeq	r0, r0, ip
    1820:	000017f4 	strdeq	r1, [r0], -r4
    1824:	08005e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp, ip, lr}
    1828:	0000000a 	andeq	r0, r0, sl
    182c:	0000000c 	andeq	r0, r0, ip
    1830:	000017f4 	strdeq	r1, [r0], -r4
    1834:	08005e14 	stmdaeq	r0, {r2, r4, r9, sl, fp, ip, lr}
    1838:	0000000c 	andeq	r0, r0, ip
    183c:	0000000c 	andeq	r0, r0, ip
    1840:	000017f4 	strdeq	r1, [r0], -r4
    1844:	08005e20 	stmdaeq	r0, {r5, r9, sl, fp, ip, lr}
    1848:	00000014 	andeq	r0, r0, r4, lsl r0
    184c:	0000000c 	andeq	r0, r0, ip
    1850:	000017f4 	strdeq	r1, [r0], -r4
    1854:	08005e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip, lr}
    1858:	0000000c 	andeq	r0, r0, ip
    185c:	0000000c 	andeq	r0, r0, ip
    1860:	000017f4 	strdeq	r1, [r0], -r4
    1864:	08005e40 	stmdaeq	r0, {r6, r9, sl, fp, ip, lr}
    1868:	0000002c 	andeq	r0, r0, ip, lsr #32
    186c:	0000000c 	andeq	r0, r0, ip
    1870:	000017f4 	strdeq	r1, [r0], -r4
    1874:	08005e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, lr}
    1878:	00000028 	andeq	r0, r0, r8, lsr #32
    187c:	0000000c 	andeq	r0, r0, ip
    1880:	000017f4 	strdeq	r1, [r0], -r4
    1884:	08005e94 	stmdaeq	r0, {r2, r4, r7, r9, sl, fp, ip, lr}
    1888:	00000014 	andeq	r0, r0, r4, lsl r0
    188c:	0000000c 	andeq	r0, r0, ip
    1890:	000017f4 	strdeq	r1, [r0], -r4
    1894:	08005ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp, ip, lr}
    1898:	00000010 	andeq	r0, r0, r0, lsl r0
    189c:	0000000c 	andeq	r0, r0, ip
    18a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18a4:	7c020001 	stcvc	0, cr0, [r2], {1}
    18a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18ac:	0000000c 	andeq	r0, r0, ip
    18b0:	0000189c 	muleq	r0, ip, r8
    18b4:	08005eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp, ip, lr}
    18b8:	0000003c 	andeq	r0, r0, ip, lsr r0
    18bc:	0000000c 	andeq	r0, r0, ip
    18c0:	0000189c 	muleq	r0, ip, r8
    18c4:	08005ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    18c8:	00000034 	andeq	r0, r0, r4, lsr r0
    18cc:	0000000c 	andeq	r0, r0, ip
    18d0:	0000189c 	muleq	r0, ip, r8
    18d4:	08005f28 	stmdaeq	r0, {r3, r5, r8, r9, sl, fp, ip, lr}
    18d8:	00000014 	andeq	r0, r0, r4, lsl r0
    18dc:	0000000c 	andeq	r0, r0, ip
    18e0:	0000189c 	muleq	r0, ip, r8
    18e4:	08005f3c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    18e8:	0000000c 	andeq	r0, r0, ip
    18ec:	0000000c 	andeq	r0, r0, ip
    18f0:	0000189c 	muleq	r0, ip, r8
    18f4:	08005f48 	stmdaeq	r0, {r3, r6, r8, r9, sl, fp, ip, lr}
    18f8:	00000014 	andeq	r0, r0, r4, lsl r0
    18fc:	0000000c 	andeq	r0, r0, ip
    1900:	0000189c 	muleq	r0, ip, r8
    1904:	08005f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    1908:	0000000c 	andeq	r0, r0, ip
    190c:	0000000c 	andeq	r0, r0, ip
    1910:	0000189c 	muleq	r0, ip, r8
    1914:	08005f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, ip, lr}
    1918:	00000014 	andeq	r0, r0, r4, lsl r0
    191c:	0000000c 	andeq	r0, r0, ip
    1920:	0000189c 	muleq	r0, ip, r8
    1924:	08005f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}
    1928:	00000010 	andeq	r0, r0, r0, lsl r0
    192c:	0000000c 	andeq	r0, r0, ip
    1930:	0000189c 	muleq	r0, ip, r8
    1934:	08005f8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, sl, fp, ip, lr}
    1938:	00000014 	andeq	r0, r0, r4, lsl r0
    193c:	0000000c 	andeq	r0, r0, ip
    1940:	0000189c 	muleq	r0, ip, r8
    1944:	08005fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp, ip, lr}
    1948:	00000014 	andeq	r0, r0, r4, lsl r0
    194c:	0000000c 	andeq	r0, r0, ip
    1950:	0000189c 	muleq	r0, ip, r8
    1954:	08005fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, lr}
    1958:	00000014 	andeq	r0, r0, r4, lsl r0
    195c:	0000000c 	andeq	r0, r0, ip
    1960:	0000189c 	muleq	r0, ip, r8
    1964:	08005fc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, sl, fp, ip, lr}
    1968:	00000018 	andeq	r0, r0, r8, lsl r0
    196c:	0000000c 	andeq	r0, r0, ip
    1970:	0000189c 	muleq	r0, ip, r8
    1974:	08005fe0 	stmdaeq	r0, {r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1978:	0000000c 	andeq	r0, r0, ip
    197c:	0000000c 	andeq	r0, r0, ip
    1980:	0000189c 	muleq	r0, ip, r8
    1984:	08005fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1988:	00000014 	andeq	r0, r0, r4, lsl r0
    198c:	0000000c 	andeq	r0, r0, ip
    1990:	0000189c 	muleq	r0, ip, r8
    1994:	08006000 	stmdaeq	r0, {sp, lr}
    1998:	00000020 	andeq	r0, r0, r0, lsr #32
    199c:	0000000c 	andeq	r0, r0, ip
    19a0:	0000189c 	muleq	r0, ip, r8
    19a4:	08006020 	stmdaeq	r0, {r5, sp, lr}
    19a8:	0000000c 	andeq	r0, r0, ip
    19ac:	0000000c 	andeq	r0, r0, ip
    19b0:	0000189c 	muleq	r0, ip, r8
    19b4:	0800602c 	stmdaeq	r0, {r2, r3, r5, sp, lr}
    19b8:	00000010 	andeq	r0, r0, r0, lsl r0
    19bc:	0000000c 	andeq	r0, r0, ip
    19c0:	0000189c 	muleq	r0, ip, r8
    19c4:	0800603c 	stmdaeq	r0, {r2, r3, r4, r5, sp, lr}
    19c8:	0000000c 	andeq	r0, r0, ip
    19cc:	00000014 	andeq	r0, r0, r4, lsl r0
    19d0:	0000189c 	muleq	r0, ip, r8
    19d4:	08006048 	stmdaeq	r0, {r3, r6, sp, lr}
    19d8:	00000088 	andeq	r0, r0, r8, lsl #1
    19dc:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    19e0:	00018e02 	andeq	r8, r1, r2, lsl #28
    19e4:	0000000c 	andeq	r0, r0, ip
    19e8:	0000189c 	muleq	r0, ip, r8
    19ec:	080060d0 	stmdaeq	r0, {r4, r6, r7, sp, lr}
    19f0:	00000018 	andeq	r0, r0, r8, lsl r0
    19f4:	0000000c 	andeq	r0, r0, ip
    19f8:	0000189c 	muleq	r0, ip, r8
    19fc:	080060e8 	stmdaeq	r0, {r3, r5, r6, r7, sp, lr}
    1a00:	00000018 	andeq	r0, r0, r8, lsl r0
    1a04:	0000000c 	andeq	r0, r0, ip
    1a08:	0000189c 	muleq	r0, ip, r8
    1a0c:	08006100 	stmdaeq	r0, {r8, sp, lr}
    1a10:	00000018 	andeq	r0, r0, r8, lsl r0
    1a14:	0000000c 	andeq	r0, r0, ip
    1a18:	0000189c 	muleq	r0, ip, r8
    1a1c:	08006118 	stmdaeq	r0, {r3, r4, r8, sp, lr}
    1a20:	00000018 	andeq	r0, r0, r8, lsl r0
    1a24:	0000000c 	andeq	r0, r0, ip
    1a28:	0000189c 	muleq	r0, ip, r8
    1a2c:	08006130 	stmdaeq	r0, {r4, r5, r8, sp, lr}
    1a30:	00000018 	andeq	r0, r0, r8, lsl r0
    1a34:	0000000c 	andeq	r0, r0, ip
    1a38:	0000189c 	muleq	r0, ip, r8
    1a3c:	08006148 	stmdaeq	r0, {r3, r6, r8, sp, lr}
    1a40:	0000000c 	andeq	r0, r0, ip
    1a44:	0000000c 	andeq	r0, r0, ip
    1a48:	0000189c 	muleq	r0, ip, r8
    1a4c:	08006154 	stmdaeq	r0, {r2, r4, r6, r8, sp, lr}
    1a50:	0000000c 	andeq	r0, r0, ip
    1a54:	0000000c 	andeq	r0, r0, ip
    1a58:	0000189c 	muleq	r0, ip, r8
    1a5c:	08006160 	stmdaeq	r0, {r5, r6, r8, sp, lr}
    1a60:	0000000c 	andeq	r0, r0, ip
    1a64:	0000000c 	andeq	r0, r0, ip
    1a68:	0000189c 	muleq	r0, ip, r8
    1a6c:	0800616c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sp, lr}
    1a70:	00000028 	andeq	r0, r0, r8, lsr #32
    1a74:	00000018 	andeq	r0, r0, r8, lsl r0
    1a78:	0000189c 	muleq	r0, ip, r8
    1a7c:	08006194 	stmdaeq	r0, {r2, r4, r7, r8, sp, lr}
    1a80:	0000002a 	andeq	r0, r0, sl, lsr #32
    1a84:	80100e41 	andshi	r0, r0, r1, asr #28
    1a88:	82038104 	andhi	r8, r3, #1
    1a8c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1a90:	0000000c 	andeq	r0, r0, ip
    1a94:	0000189c 	muleq	r0, ip, r8
    1a98:	080061be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, sp, lr}
    1a9c:	00000012 	andeq	r0, r0, r2, lsl r0
    1aa0:	0000000c 	andeq	r0, r0, ip
    1aa4:	0000189c 	muleq	r0, ip, r8
    1aa8:	080061d0 	stmdaeq	r0, {r4, r6, r7, r8, sp, lr}
    1aac:	00000014 	andeq	r0, r0, r4, lsl r0
    1ab0:	0000000c 	andeq	r0, r0, ip
    1ab4:	0000189c 	muleq	r0, ip, r8
    1ab8:	080061e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, sp, lr}
    1abc:	0000000c 	andeq	r0, r0, ip
    1ac0:	0000000c 	andeq	r0, r0, ip
    1ac4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1ac8:	7c020001 	stcvc	0, cr0, [r2], {1}
    1acc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1ad0:	0000000c 	andeq	r0, r0, ip
    1ad4:	00001ac0 	andeq	r1, r0, r0, asr #21
    1ad8:	080061f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, sp, lr}
    1adc:	00000018 	andeq	r0, r0, r8, lsl r0
    1ae0:	0000000c 	andeq	r0, r0, ip
    1ae4:	00001ac0 	andeq	r1, r0, r0, asr #21
    1ae8:	08006208 	stmdaeq	r0, {r3, r9, sp, lr}
    1aec:	0000000c 	andeq	r0, r0, ip
    1af0:	0000000c 	andeq	r0, r0, ip
    1af4:	00001ac0 	andeq	r1, r0, r0, asr #21
    1af8:	08006214 	stmdaeq	r0, {r2, r4, r9, sp, lr}
    1afc:	00000028 	andeq	r0, r0, r8, lsr #32
    1b00:	0000000c 	andeq	r0, r0, ip
    1b04:	00001ac0 	andeq	r1, r0, r0, asr #21
    1b08:	0800623c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp, lr}
    1b0c:	00000018 	andeq	r0, r0, r8, lsl r0
    1b10:	0000000c 	andeq	r0, r0, ip
    1b14:	00001ac0 	andeq	r1, r0, r0, asr #21
    1b18:	08006254 	stmdaeq	r0, {r2, r4, r6, r9, sp, lr}
    1b1c:	0000000c 	andeq	r0, r0, ip
    1b20:	0000000c 	andeq	r0, r0, ip
    1b24:	00001ac0 	andeq	r1, r0, r0, asr #21
    1b28:	08006260 	stmdaeq	r0, {r5, r6, r9, sp, lr}
    1b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1b30:	0000000c 	andeq	r0, r0, ip
    1b34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1b38:	7c020001 	stcvc	0, cr0, [r2], {1}
    1b3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1b40:	00000014 	andeq	r0, r0, r4, lsl r0
    1b44:	00001b30 	andeq	r1, r0, r0, lsr fp
    1b48:	0800627c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, lr}
    1b4c:	00000094 	muleq	r0, r4, r0
    1b50:	83080e41 	movwhi	r0, #36417	; 0x8e41
    1b54:	00018e02 	andeq	r8, r1, r2, lsl #28
    1b58:	00000018 	andeq	r0, r0, r8, lsl r0
    1b5c:	00001b30 	andeq	r1, r0, r0, lsr fp
    1b60:	08006310 	stmdaeq	r0, {r4, r8, r9, sp, lr}
    1b64:	00000088 	andeq	r0, r0, r8, lsl #1
    1b68:	840c0e42 	strhi	r0, [ip], #-3650	; 0xe42
    1b6c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1b70:	280e5e01 	stmdacs	lr, {r0, r9, sl, fp, ip, lr}
    1b74:	0000000c 	andeq	r0, r0, ip
    1b78:	00001b30 	andeq	r1, r0, r0, lsr fp
    1b7c:	08006398 	stmdaeq	r0, {r3, r4, r7, r8, r9, sp, lr}
    1b80:	00000016 	andeq	r0, r0, r6, lsl r0
    1b84:	00000014 	andeq	r0, r0, r4, lsl r0
    1b88:	00001b30 	andeq	r1, r0, r0, lsr fp
    1b8c:	080063ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sp, lr}
    1b90:	00000020 	andeq	r0, r0, r0, lsr #32
    1b94:	84080e42 	strhi	r0, [r8], #-3650	; 0xe42
    1b98:	00018e02 	andeq	r8, r1, r2, lsl #28
    1b9c:	0000000c 	andeq	r0, r0, ip
    1ba0:	00001b30 	andeq	r1, r0, r0, lsr fp
    1ba4:	080063ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sp, lr}
    1ba8:	0000000c 	andeq	r0, r0, ip
    1bac:	0000000c 	andeq	r0, r0, ip
    1bb0:	00001b30 	andeq	r1, r0, r0, lsr fp
    1bb4:	080063da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sp, lr}
    1bb8:	00000018 	andeq	r0, r0, r8, lsl r0
    1bbc:	00000014 	andeq	r0, r0, r4, lsl r0
    1bc0:	00001b30 	andeq	r1, r0, r0, lsr fp
    1bc4:	080063f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sp, lr}
    1bc8:	00000034 	andeq	r0, r0, r4, lsr r0
    1bcc:	84080e43 	strhi	r0, [r8], #-3651	; 0xe43
    1bd0:	00018e02 	andeq	r8, r1, r2, lsl #28
    1bd4:	0000000c 	andeq	r0, r0, ip
    1bd8:	00001b30 	andeq	r1, r0, r0, lsr fp
    1bdc:	08006426 	stmdaeq	r0, {r1, r2, r5, sl, sp, lr}
    1be0:	00000012 	andeq	r0, r0, r2, lsl r0
    1be4:	0000000c 	andeq	r0, r0, ip
    1be8:	00001b30 	andeq	r1, r0, r0, lsr fp
    1bec:	08006438 	stmdaeq	r0, {r3, r4, r5, sl, sp, lr}
    1bf0:	00000016 	andeq	r0, r0, r6, lsl r0
    1bf4:	0000000c 	andeq	r0, r0, ip
    1bf8:	00001b30 	andeq	r1, r0, r0, lsr fp
    1bfc:	0800644e 	stmdaeq	r0, {r1, r2, r3, r6, sl, sp, lr}
    1c00:	00000016 	andeq	r0, r0, r6, lsl r0
    1c04:	0000000c 	andeq	r0, r0, ip
    1c08:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c0c:	08006464 	stmdaeq	r0, {r2, r5, r6, sl, sp, lr}
    1c10:	00000018 	andeq	r0, r0, r8, lsl r0
    1c14:	0000000c 	andeq	r0, r0, ip
    1c18:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c1c:	0800647c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp, lr}
    1c20:	00000016 	andeq	r0, r0, r6, lsl r0
    1c24:	0000000c 	andeq	r0, r0, ip
    1c28:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c2c:	08006492 	stmdaeq	r0, {r1, r4, r7, sl, sp, lr}
    1c30:	00000018 	andeq	r0, r0, r8, lsl r0
    1c34:	0000000c 	andeq	r0, r0, ip
    1c38:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c3c:	080064aa 	stmdaeq	r0, {r1, r3, r5, r7, sl, sp, lr}
    1c40:	00000008 	andeq	r0, r0, r8
    1c44:	0000000c 	andeq	r0, r0, ip
    1c48:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c4c:	080064b2 	stmdaeq	r0, {r1, r4, r5, r7, sl, sp, lr}
    1c50:	00000008 	andeq	r0, r0, r8
    1c54:	0000000c 	andeq	r0, r0, ip
    1c58:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c5c:	080064ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, sl, sp, lr}
    1c60:	0000000c 	andeq	r0, r0, ip
    1c64:	0000000c 	andeq	r0, r0, ip
    1c68:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c6c:	080064c6 	stmdaeq	r0, {r1, r2, r6, r7, sl, sp, lr}
    1c70:	00000012 	andeq	r0, r0, r2, lsl r0
    1c74:	0000000c 	andeq	r0, r0, ip
    1c78:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c7c:	080064d8 	stmdaeq	r0, {r3, r4, r6, r7, sl, sp, lr}
    1c80:	00000012 	andeq	r0, r0, r2, lsl r0
    1c84:	0000000c 	andeq	r0, r0, ip
    1c88:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c8c:	080064ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, sp, lr}
    1c90:	00000018 	andeq	r0, r0, r8, lsl r0
    1c94:	0000000c 	andeq	r0, r0, ip
    1c98:	00001b30 	andeq	r1, r0, r0, lsr fp
    1c9c:	08006502 	stmdaeq	r0, {r1, r8, sl, sp, lr}
    1ca0:	00000018 	andeq	r0, r0, r8, lsl r0
    1ca4:	0000000c 	andeq	r0, r0, ip
    1ca8:	00001b30 	andeq	r1, r0, r0, lsr fp
    1cac:	0800651a 	stmdaeq	r0, {r1, r3, r4, r8, sl, sp, lr}
    1cb0:	00000018 	andeq	r0, r0, r8, lsl r0
    1cb4:	0000000c 	andeq	r0, r0, ip
    1cb8:	00001b30 	andeq	r1, r0, r0, lsr fp
    1cbc:	08006532 	stmdaeq	r0, {r1, r4, r5, r8, sl, sp, lr}
    1cc0:	00000016 	andeq	r0, r0, r6, lsl r0
    1cc4:	0000000c 	andeq	r0, r0, ip
    1cc8:	00001b30 	andeq	r1, r0, r0, lsr fp
    1ccc:	08006548 	stmdaeq	r0, {r3, r6, r8, sl, sp, lr}
    1cd0:	00000018 	andeq	r0, r0, r8, lsl r0
    1cd4:	0000000c 	andeq	r0, r0, ip
    1cd8:	00001b30 	andeq	r1, r0, r0, lsr fp
    1cdc:	08006560 	stmdaeq	r0, {r5, r6, r8, sl, sp, lr}
    1ce0:	0000000c 	andeq	r0, r0, ip
    1ce4:	0000000c 	andeq	r0, r0, ip
    1ce8:	00001b30 	andeq	r1, r0, r0, lsr fp
    1cec:	0800656c 	stmdaeq	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    1cf0:	00000008 	andeq	r0, r0, r8
    1cf4:	00000014 	andeq	r0, r0, r4, lsl r0
    1cf8:	00001b30 	andeq	r1, r0, r0, lsr fp
    1cfc:	08006574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    1d00:	00000040 	andeq	r0, r0, r0, asr #32
    1d04:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1d08:	00018e02 	andeq	r8, r1, r2, lsl #28
    1d0c:	0000000c 	andeq	r0, r0, ip
    1d10:	00001b30 	andeq	r1, r0, r0, lsr fp
    1d14:	080065b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, sl, sp, lr}
    1d18:	00000010 	andeq	r0, r0, r0, lsl r0
    1d1c:	0000000c 	andeq	r0, r0, ip
    1d20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1d24:	7c020001 	stcvc	0, cr0, [r2], {1}
    1d28:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1d2c:	00000018 	andeq	r0, r0, r8, lsl r0
    1d30:	00001d1c 	andeq	r1, r0, ip, lsl sp
    1d34:	08006634 	stmdaeq	r0, {r2, r4, r5, r9, sl, sp, lr}
    1d38:	00000050 	andeq	r0, r0, r0, asr r0
    1d3c:	000d0941 	andeq	r0, sp, r1, asr #18
    1d40:	8d080e44 	stchi	14, cr0, [r8, #-272]	; 0xfffffef0
    1d44:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_str:

00000000 <.debug_str>:
	mDelay(50);
	end();
	return 0;
}

void blinky(uint8 level) {
       0:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
       4:	36317574 			; <UNDEFINED> instruction: 0x36317574
	// Turn them all off first.
	SetLED(MANAGE, 0);
       8:	62670068 	rsbvs	r0, r7, #104	; 0x68
	SetLED(TXD, 0);
       c:	74736e49 	ldrbtvc	r6, [r3], #-3657	; 0xe49
      10:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
	SetLED(PROGRAM, 0);
      14:	506e6f69 	rsbpl	r6, lr, r9, ror #30
      18:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
	SetLED(RXD, 0);
      1c:	6c620074 	stclvs	0, cr0, [r2], #-464	; 0xfffffe30
      20:	796b6e69 	stmdbvc	fp!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
	SetLED(PLAY, 0);
      24:	6f687300 	svcvs	0x00687300
      28:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
	SetLED(AUX, 0);
      2c:	7300746e 	movwvc	r7, #1134	; 0x46e
      30:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xa69
	switch (level) {	// Turn them on.
      34:	00657079 	rsbeq	r7, r5, r9, ror r0
      38:	4c746553 	cfldr64mi	mvdx6, [r4], #-332	; 0xfffffeb4
      3c:	43004445 	movwmi	r4, #1093	; 0x445
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      40:	5f4d4d4f 	svcpl	0x004d4d4f
      44:	52455854 	subpl	r5, r5, #5505024	; 0x540000
      48:	00524f52 	subseq	r4, r2, r2, asr pc
      4c:	6e69616d 	powvsez	f6, f1, #5.0
	SetLED(PROGRAM, 0);
	SetLED(RXD, 0);
	SetLED(PLAY, 0);
	SetLED(AUX, 0);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
      50:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 58 <_Minimum_Stack_Size-0xa8>
      54:	554e5f4d 	strbpl	r5, [lr, #-3917]	; 0xf4d
      58:	535f4c4c 	cmppl	pc, #19456	; 0x4c00
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
      5c:	00455a49 	subeq	r5, r5, r9, asr #20
      60:	5f64656c 	svcpl	0x0064656c
      64:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      68:	6c786400 	cfldrdvs	mvd6, [r8], #-0
		default: return;
	}
	mDelay(100);
      6c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
	switch (level) {	// Turn them on.
      70:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
      74:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
      78:	73795300 	cmnvc	r9, #0
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      7c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
      80:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 88 <_Minimum_Stack_Size-0x78>
      84:	58525f4d 	ldmdapl	r2, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
		default: return;
	}
	mDelay(100);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
      88:	54494157 	strbpl	r4, [r9], #-343	; 0x157
      8c:	00474e49 	subeq	r4, r7, r9, asr #28
      90:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
      94:	5358525f 	cmppl	r8, #-268435451	; 0xf0000005
      98:	45434355 	strbmi	r4, [r3, #-853]	; 0x355
      9c:	67005353 	smlsdvs	r0, r3, r3, r5
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      a0:	47785262 	ldrbmi	r5, [r8, -r2, ror #4]!
		default: return;
	}
	mDelay(100);
      a4:	654c7465 	strbvs	r7, [ip, #-1125]	; 0x465
}
      a8:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
		default: return;
	}
	mDelay(100);
      ac:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; b4 <_Minimum_Stack_Size-0x4c>
      b0:	41425f4d 	cmpmi	r2, sp, asr #30
      b4:	4e495f44 	cdpmi	15, 4, cr5, cr9, cr4, {2}
      b8:	6c005453 	cfstrsvs	mvf5, [r0], {83}	; 0x53
      bc:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      c0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      c4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
      c8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
      cc:	6f6c2067 	svcvs	0x006c2067
      d0:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
      d4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      d8:	2064656e 	rsbcs	r6, r4, lr, ror #10
      dc:	00746e69 	rsbseq	r6, r4, r9, ror #28
      e0:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
      e4:	5358545f 	cmppl	r8, #1593835520	; 0x5f000000
      e8:	45434355 	strbmi	r4, [r3, #-853]	; 0x355
      ec:	67005353 	smlsdvs	r0, r3, r3, r5
      f0:	6d6f4362 	stclvs	3, cr4, [pc, #-392]!	; ffffff70 <SCS_BASE+0x1fff1f70>
      f4:	6174536d 	cmnvs	r4, sp, ror #6
      f8:	00737574 	rsbseq	r7, r3, r4, ror r5
      fc:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
     100:	4658525f 			; <UNDEFINED> instruction: 0x4658525f
     104:	004c4941 	subeq	r4, ip, r1, asr #18
     108:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
     10c:	4358525f 	cmpmi	r8, #-268435451	; 0xf0000005
     110:	4b434548 	blmi	10d1638 <__Stack_Size+0x10d1238>
     114:	004d5553 	subeq	r5, sp, r3, asr r5
     118:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
     11c:	5458525f 	ldrbpl	r5, [r8], #-607	; 0x25f
     120:	4f454d49 	svcmi	0x00454d49
     124:	67005455 	smlsdvs	r0, r5, r4, r5
     128:	50785262 	rsbspl	r5, r8, r2, ror #4
     12c:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
     130:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
     134:	00687467 	rsbeq	r7, r8, r7, ror #8
     138:	4d4d4f43 	stclmi	15, cr4, [sp, #-268]	; 0xfffffef4
     13c:	4c58525f 	lfmmi	f5, 2, [r8], {95}	; 0x5f
     140:	54474e45 	strbpl	r4, [r7], #-3653	; 0xe45
     144:	69750048 	ldmdbvs	r5!, {r3, r6}^
     148:	0038746e 	eorseq	r7, r8, lr, ror #8
     14c:	5f44454c 	svcpl	0x0044454c
     150:	446d0065 	strbtmi	r0, [sp], #-101	; 0x65
     154:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     158:	736e7500 	cmnvc	lr, #0
     15c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     160:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     164:	50007261 	andpl	r7, r0, r1, ror #4
     168:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     16c:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     170:	4c00676e 	stcmi	7, cr6, [r0], {110}	; 0x6e
     174:	745f4445 	ldrbvc	r4, [pc], #-1093	; 17c <_Minimum_Stack_Size+0x7c>
     178:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     17c:	544c5844 	strbpl	r5, [ip], #-2116	; 0x844
     180:	7571726f 	ldrbvc	r7, [r1, #-623]!	; 0x26f
     184:	61745365 	cmnvs	r4, r5, ror #6
     188:	2f006574 	svccs	0x00006574
     18c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     190:	64412f73 	strbvs	r2, [r1], #-3955	; 0xf73
     194:	2f6e696d 	svccs	0x006e696d
     198:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xf44
     19c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0x56d
     1a0:	6f522f73 	svcvs	0x00522f73
     1a4:	69746f62 	ldmdbvs	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
     1a8:	432f7363 	teqmi	pc, #-1946157055	; 0x8c000001
     1ac:	3033354d 	eorscc	r3, r3, sp, asr #10
     1b0:	34305020 	ldrtcc	r5, [r0], #-32
     1b4:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 1bc <_Minimum_Stack_Size+0xbc>
     1b8:	554e5f4d 	strbpl	r5, [lr, #-3917]	; 0xf4d
     1bc:	445f4c4c 	ldrbmi	r4, [pc], #-3148	; 1c4 <_Minimum_Stack_Size+0xc4>
     1c0:	00415441 	subeq	r5, r1, r1, asr #8
     1c4:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     1c8:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     1cc:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     1d0:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     1d4:	7000746e 	andvc	r7, r0, lr, ror #8
     1d8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     1dc:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     1e0:	64007375 	strvs	r7, [r0], #-885	; 0x375
     1e4:	725f6c78 	subsvc	r6, pc, #30720	; 0x7800
     1e8:	5f646165 	svcpl	0x00646165
     1ec:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xf77
     1f0:	574f5000 	strbpl	r5, [pc, -r0]
     1f4:	5f005245 	svcpl	0x00005245
     1f8:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; f8 <_Minimum_Stack_Size-0x8>
     1fc:	4f525000 	svcmi	0x00525000
     200:	4d415247 	sfmmi	f5, 2, [r1, #-284]	; 0xfffffee4
     204:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
     208:	00323374 	eorseq	r3, r2, r4, ror r3
     20c:	59414c50 	stmdbpl	r1, {r4, r6, sl, fp, lr}^
     210:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
     214:	34204320 	strtcc	r4, [r0], #-800	; 0x320
     218:	332e372e 	teqcc	lr, #12058624	; 0xb80000
     21c:	31303220 	teqcc	r0, r0, lsr #4
     220:	30323132 	eorscc	r3, r2, r2, lsr r1
     224:	72282037 	eorvc	r2, r8, #55	; 0x37
     228:	61656c65 	cmnvs	r5, r5, ror #24
     22c:	20296573 	eorcs	r6, r9, r3, ror r5
     230:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     234:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
     238:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     23c:	5f342d64 	svcpl	0x00342d64
     240:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
     244:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     248:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
     24c:	6f697369 	svcvs	0x00697369
     250:	3931206e 	ldmdbcc	r1!, {r1, r2, r3, r5, r6, sp}
     254:	35303334 	ldrcc	r3, [r0, #-820]!	; 0x334
     258:	6267005d 	rsbvs	r0, r7, #93	; 0x5d
     25c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     260:	61507375 	cmpvs	r0, r5, ror r3
     264:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
     268:	76656c00 	strbtvc	r6, [r5], -r0, lsl #24
     26c:	43006c65 	movwmi	r6, #3173	; 0xc65
     270:	5f4d4d4f 	svcpl	0x004d4d4f
     274:	41465854 	cmpmi	r6, r4, asr r8
     278:	50004c49 	andpl	r4, r0, r9, asr #24
     27c:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     280:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
     284:	4d4f4300 	stclmi	3, cr4, [pc, #-0]	; 28c <_Minimum_Stack_Size+0x18c>
     288:	41425f4d 	cmpmi	r2, sp, asr #30
     28c:	44495f44 	strbmi	r5, [r9], #-3908	; 0xf44
     290:	50504100 	subspl	r4, r0, r0, lsl #2
     294:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     298:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
     29c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     2a0:	75426967 	strbvc	r6, [r2, #-2407]	; 0x967
     2a4:	69735573 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, sl, ip, lr}^
     2a8:	7300676e 	movwvc	r6, #1902	; 0x76e
     2ac:	58447465 	stmdapl	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     2b0:	736f504c 	cmnvc	pc, #76	; 0x4c
     2b4:	6f697469 	svcvs	0x00697469
     2b8:	3249006e 	subcc	r0, r9, #110	; 0x6e
     2bc:	455f3143 	ldrbmi	r3, [pc, #-323]	; 181 <_Minimum_Stack_Size+0x81>
     2c0:	52495f52 	subpl	r5, r9, #328	; 0x148
     2c4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     2c8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     2cc:	414d4400 	cmpmi	sp, r0, lsl #8
     2d0:	68435f31 	stmdavs	r3, {r0, r4, r5, r8, r9, sl, fp, ip, lr}^
     2d4:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     2d8:	495f346c 	ldmdbmi	pc, {r2, r3, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
     2dc:	61485152 	cmpvs	r8, r2, asr r1
     2e0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     2e4:	78520072 	ldmdavc	r2, {r1, r4, r5, r6}^
     2e8:	58445f44 	stmdapl	r4, {r2, r6, r8, r9, sl, fp, ip, lr}^
     2ec:	6e495f4c 	cdpvs	15, 4, cr5, cr9, cr12, {2}
     2f0:	72726574 	rsbsvc	r6, r2, #486539264	; 0x1d000000
     2f4:	00747075 	rsbseq	r7, r4, r5, ror r0
     2f8:	67617355 			; <UNDEFINED> instruction: 0x67617355
     2fc:	75614665 	strbvc	r4, [r1, #-1637]!	; 0x665
     300:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     304:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
     308:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     30c:	31414d44 	cmpcc	r1, r4, asr #26
     310:	6168435f 	cmnvs	r8, pc, asr r3
     314:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     318:	52495f35 	subpl	r5, r9, #212	; 0xd4
     31c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     320:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     324:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     328:	52495f32 	subpl	r5, r9, #200	; 0xc8
     32c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     330:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     334:	43545200 	cmpmi	r4, #0
     338:	5152495f 	cmppl	r2, pc, asr r9
     33c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     340:	0072656c 	rsbseq	r6, r2, ip, ror #10
     344:	334d4954 	movtcc	r4, #55636	; 0xd954
     348:	5152495f 	cmppl	r2, pc, asr r9
     34c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     350:	0072656c 	rsbseq	r6, r2, ip, ror #10
     354:	434d5346 	movtmi	r5, #54086	; 0xd346
     358:	5152495f 	cmppl	r2, pc, asr r9
     35c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     360:	0072656c 	rsbseq	r6, r2, ip, ror #10
     364:	31433249 	cmpcc	r3, r9, asr #4
     368:	5f56455f 	svcpl	0x0056455f
     36c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     370:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     374:	54007265 	strpl	r7, [r0], #-613	; 0x265
     378:	5f344d49 	svcpl	0x00344d49
     37c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     380:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     384:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     388:	505f4478 	subspl	r4, pc, r8, ror r4	; <UNPREDICTABLE>
     38c:	495f5543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
     390:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     394:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     398:	42535500 	subsmi	r5, r3, #0
     39c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
     3a0:	495f7055 	ldmdbmi	pc, {r0, r2, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
     3a4:	61485152 	cmpvs	r8, r2, asr r1
     3a8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     3ac:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     3b0:	495f354d 	ldmdbmi	pc, {r0, r2, r3, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     3b4:	61485152 	cmpvs	r8, r2, asr r1
     3b8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     3bc:	50530072 	subspl	r0, r3, r2, ror r0
     3c0:	495f3149 	ldmdbmi	pc, {r0, r3, r6, r8, ip, sp}^	; <UNPREDICTABLE>
     3c4:	61485152 	cmpvs	r8, r2, asr r1
     3c8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     3cc:	75420072 	strbvc	r0, [r2, #-114]	; 0x72
     3d0:	75614673 	strbvc	r4, [r1, #-1651]!	; 0x673
     3d4:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     3d8:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
     3dc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     3e0:	32495053 	subcc	r5, r9, #83	; 0x53
     3e4:	5152495f 	cmppl	r2, pc, asr r9
     3e8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     3ec:	0072656c 	rsbseq	r6, r2, ip, ror #10
     3f0:	5f425355 	svcpl	0x00425355
     3f4:	435f5048 	cmpmi	pc, #72	; 0x48
     3f8:	545f4e41 	ldrbpl	r4, [pc], #-3649	; 400 <__Stack_Size>
     3fc:	52495f58 	subpl	r5, r9, #352	; 0x160
     400:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     404:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     408:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
     40c:	52495f33 	subpl	r5, r9, #204	; 0xcc
     410:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     414:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     418:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     41c:	43435f31 	movtmi	r5, #16177	; 0x3f31
     420:	5152495f 	cmppl	r2, pc, asr r9
     424:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     428:	0072656c 	rsbseq	r6, r2, ip, ror #10
     42c:	33434441 	movtcc	r4, #13377	; 0x3441
     430:	5152495f 	cmppl	r2, pc, asr r9
     434:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     438:	0072656c 	rsbseq	r6, r2, ip, ror #10
     43c:	31434441 	cmpcc	r3, r1, asr #8
     440:	495f325f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     444:	61485152 	cmpvs	r8, r2, asr r1
     448:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     44c:	41550072 	cmpmi	r5, r2, ror r0
     450:	5f355452 	svcpl	0x00355452
     454:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     458:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     45c:	44007265 	strmi	r7, [r0], #-613	; 0x265
     460:	5f32414d 	svcpl	0x0032414d
     464:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     468:	316c656e 	cmncc	ip, lr, ror #10
     46c:	5152495f 	cmppl	r2, pc, asr r9
     470:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     474:	0072656c 	rsbseq	r6, r2, ip, ror #10
     478:	32433249 	subcc	r3, r3, #-1879048188	; 0x90000004
     47c:	5f56455f 	svcpl	0x0056455f
     480:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     484:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     488:	49007265 	stmdbmi	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     48c:	445f5253 	ldrbmi	r5, [pc], #-595	; 494 <__Stack_Size+0x94>
     490:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     494:	7361425f 	cmnvc	r1, #-268435451	; 0xf0000005
     498:	4d440065 	stclmi	0, cr0, [r4, #-404]	; 0xfffffe6c
     49c:	435f3241 	cmpmi	pc, #268435460	; 0x10000004
     4a0:	6e6e6168 	powvsez	f6, f6, #0.0
     4a4:	5f326c65 	svcpl	0x00326c65
     4a8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     4ac:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     4b0:	45007265 	strmi	r7, [r0, #-613]	; 0x265
     4b4:	31495458 	cmpcc	r9, r8, asr r4
     4b8:	5152495f 	cmppl	r2, pc, asr r9
     4bc:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     4c0:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4c4:	32414d44 	subcc	r4, r1, #4352	; 0x1100
     4c8:	6168435f 	cmnvs	r8, pc, asr r3
     4cc:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     4d0:	52495f33 	subpl	r5, r9, #204	; 0xcc
     4d4:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     4d8:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     4dc:	44565000 	ldrbmi	r5, [r6], #-0
     4e0:	5152495f 	cmppl	r2, pc, asr r9
     4e4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     4e8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4ec:	4f494453 	svcmi	0x00494453
     4f0:	5152495f 	cmppl	r2, pc, asr r9
     4f4:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     4f8:	0072656c 	rsbseq	r6, r2, ip, ror #10
     4fc:	5f425355 	svcpl	0x00425355
     500:	435f504c 	cmpmi	pc, #76	; 0x4c
     504:	525f4e41 	subspl	r4, pc, #1040	; 0x410
     508:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
     50c:	61485152 	cmpvs	r8, r2, asr r1
     510:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     514:	56530072 			; <UNDEFINED> instruction: 0x56530072
     518:	6e614843 	cdpvs	8, 6, cr4, cr1, cr3, {2}
     51c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     520:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     524:	495f3349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, ip, sp}^	; <UNPREDICTABLE>
     528:	61485152 	cmpvs	r8, r2, asr r1
     52c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     530:	58450072 	stmdapl	r5, {r1, r4, r5, r6}^
     534:	5f394954 	svcpl	0x00394954
     538:	52495f35 	subpl	r5, r9, #212	; 0xd4
     53c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     540:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     544:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     548:	52545f38 	subspl	r5, r4, #224	; 0xe0
     54c:	4f435f47 	svcmi	0x00435f47
     550:	52495f4d 	subpl	r5, r9, #308	; 0x134
     554:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     558:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     55c:	4e414300 	cdpmi	3, 4, cr4, cr1, cr0, {0}
     560:	3158525f 	cmpcc	r8, pc, asr r2
     564:	5152495f 	cmppl	r2, pc, asr r9
     568:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     56c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     570:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
     574:	52495f34 	subpl	r5, r9, #208	; 0xd0
     578:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     57c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     580:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     584:	495f3049 	ldmdbmi	pc, {r0, r3, r6, ip, sp}^	; <UNPREDICTABLE>
     588:	61485152 	cmpvs	r8, r2, asr r1
     58c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     590:	49540072 	ldmdbmi	r4, {r1, r4, r5, r6}^
     594:	555f314d 	ldrbpl	r3, [pc, #-333]	; 44f <__Stack_Size+0x4f>
     598:	52495f50 	subpl	r5, r9, #320	; 0x140
     59c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     5a0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     5a4:	72614800 	rsbvc	r4, r1, #0
     5a8:	75614664 	strbvc	r4, [r1, #-1636]!	; 0x664
     5ac:	7845746c 	stmdavc	r5, {r2, r3, r5, r6, sl, ip, sp, lr}^
     5b0:	74706563 	ldrbtvc	r6, [r0], #-1379	; 0x563
     5b4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     5b8:	5f434352 	svcpl	0x00434352
     5bc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5c0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     5c4:	44007265 	strmi	r7, [r0], #-613	; 0x265
     5c8:	5f31414d 	svcpl	0x0031414d
     5cc:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     5d0:	366c656e 	strbtcc	r6, [ip], -lr, ror #10
     5d4:	5152495f 	cmppl	r2, pc, asr r9
     5d8:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     5dc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     5e0:	384d4954 	stmdacc	sp, {r2, r4, r6, r8, fp, lr}^
     5e4:	5f43435f 	svcpl	0x0043435f
     5e8:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     5ec:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     5f0:	41007265 	tstmi	r0, r5, ror #4
     5f4:	732f5050 	teqvc	pc, #80	; 0x50
     5f8:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
     5fc:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
     600:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
     604:	2e74695f 	mrccs	9, 3, r6, cr4, cr15, {2}
     608:	57570063 	ldrbpl	r0, [r7, -r3, rrx]
     60c:	495f4744 	ldmdbmi	pc, {r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
     610:	61485152 	cmpvs	r8, r2, asr r1
     614:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     618:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
     61c:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     620:	6e6e6168 	powvsez	f6, f6, #0.0
     624:	5f376c65 	svcpl	0x00376c65
     628:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     62c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     630:	54007265 	strpl	r7, [r0], #-613	; 0x265
     634:	5f384d49 	svcpl	0x00384d49
     638:	5f4b5242 	svcpl	0x004b5242
     63c:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     640:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     644:	46007265 	strmi	r7, [r0], -r5, ror #4
     648:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
     64c:	5152495f 	cmppl	r2, pc, asr r9
     650:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     654:	0072656c 	rsbseq	r6, r2, ip, ror #10
     658:	314d4954 	cmpcc	sp, r4, asr r9
     65c:	4b52425f 	blmi	1490fe0 <__Stack_Size+0x1490be0>
     660:	5152495f 	cmppl	r2, pc, asr r9
     664:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     668:	0072656c 	rsbseq	r6, r2, ip, ror #10
     66c:	54524155 	ldrbpl	r4, [r2], #-341	; 0x155
     670:	52495f34 	subpl	r5, r9, #208	; 0xd0
     674:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     678:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     67c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     680:	52495f36 	subpl	r5, r9, #216	; 0xd8
     684:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     688:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     68c:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     690:	52545f31 	subspl	r5, r4, #196	; 0xc4
     694:	4f435f47 	svcmi	0x00435f47
     698:	52495f4d 	subpl	r5, r9, #308	; 0x134
     69c:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     6a0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     6a4:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     6a8:	52495f37 	subpl	r5, r9, #220	; 0xdc
     6ac:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     6b0:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     6b4:	43324900 	teqmi	r2, #0
     6b8:	52455f32 	subpl	r5, r5, #200	; 0xc8
     6bc:	5152495f 	cmppl	r2, pc, asr r9
     6c0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     6c4:	0072656c 	rsbseq	r6, r2, ip, ror #10
     6c8:	75626544 	strbvc	r6, [r2, #-1348]!	; 0x544
     6cc:	6e6f4d67 	cdpvs	13, 6, cr4, cr15, cr7, {3}
     6d0:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
     6d4:	41535500 	cmpmi	r3, r0, lsl #10
     6d8:	5f315452 	svcpl	0x00315452
     6dc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     6e0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     6e4:	44007265 	strmi	r7, [r0], #-613	; 0x265
     6e8:	5f32414d 	svcpl	0x0032414d
     6ec:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     6f0:	346c656e 	strbtcc	r6, [ip], #-1390	; 0x56e
     6f4:	495f355f 	ldmdbmi	pc, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp}^	; <UNPREDICTABLE>
     6f8:	61485152 	cmpvs	r8, r2, asr r1
     6fc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     700:	65500072 	ldrbvs	r0, [r0, #-114]	; 0x72
     704:	5653646e 	ldrbpl	r6, [r3], -lr, ror #8
     708:	41540043 	cmpmi	r4, r3, asr #32
     70c:	5245504d 	subpl	r5, r5, #77	; 0x4d
     710:	5152495f 	cmppl	r2, pc, asr r9
     714:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     718:	0072656c 	rsbseq	r6, r2, ip, ror #10
     71c:	45494d4e 	strbmi	r4, [r9, #-3406]	; 0xd4e
     720:	70656378 	rsbvc	r6, r5, r8, ror r3
     724:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     728:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
     72c:	50555f38 	subspl	r5, r5, r8, lsr pc
     730:	5152495f 	cmppl	r2, pc, asr r9
     734:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     738:	0072656c 	rsbseq	r6, r2, ip, ror #10
     73c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     740:	495f3254 	ldmdbmi	pc, {r2, r4, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     744:	61485152 	cmpvs	r8, r2, asr r1
     748:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     74c:	53550072 	cmppl	r5, #114	; 0x72
     750:	33545241 	cmpcc	r4, #268435460	; 0x10000004
     754:	5152495f 	cmppl	r2, pc, asr r9
     758:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     75c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     760:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     764:	486b6369 	stmdami	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
     768:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     76c:	45007265 	strmi	r7, [r0, #-613]	; 0x265
     770:	31495458 	cmpcc	r9, r8, asr r4
     774:	30315f35 	eorscc	r5, r1, r5, lsr pc
     778:	5152495f 	cmppl	r2, pc, asr r9
     77c:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     780:	0072656c 	rsbseq	r6, r2, ip, ror #10
     784:	31414d44 	cmpcc	r1, r4, asr #26
     788:	6168435f 	cmnvs	r8, pc, asr r3
     78c:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     790:	52495f31 	subpl	r5, r9, #196	; 0xc4
     794:	6e614851 	mcrvs	8, 3, r4, cr1, cr1, {2}
     798:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
     79c:	54584500 	ldrbpl	r4, [r8], #-1280	; 0x500
     7a0:	495f3249 	ldmdbmi	pc, {r0, r3, r6, r9, ip, sp}^	; <UNPREDICTABLE>
     7a4:	61485152 	cmpvs	r8, r2, asr r1
     7a8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     7ac:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
     7b0:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     7b4:	6e6e6168 	powvsez	f6, f6, #0.0
     7b8:	5f326c65 	svcpl	0x00326c65
     7bc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     7c0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     7c4:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     7c8:	6c414354 	mcrrvs	3, 5, r4, r1, cr4
     7cc:	5f6d7261 	svcpl	0x006d7261
     7d0:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     7d4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     7d8:	43007265 	movwmi	r7, #613	; 0x265
     7dc:	535f4e41 	cmppl	pc, #1040	; 0x410
     7e0:	495f4543 	ldmdbmi	pc, {r0, r1, r6, r8, sl, lr}^	; <UNPREDICTABLE>
     7e4:	61485152 	cmpvs	r8, r2, asr r1
     7e8:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     7ec:	4d440072 	stclmi	0, cr0, [r4, #-456]	; 0xfffffe38
     7f0:	435f3141 	cmpmi	pc, #1073741840	; 0x40000010
     7f4:	6e6e6168 	powvsez	f6, f6, #0.0
     7f8:	5f336c65 	svcpl	0x00336c65
     7fc:	48515249 	ldmdami	r1, {r0, r3, r6, r9, ip, lr}^
     800:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     804:	4d007265 	sfmmi	f7, 4, [r0, #-404]	; 0xfffffe6c
     808:	614d6d65 	cmpvs	sp, r5, ror #26
     80c:	6567616e 	strbvs	r6, [r7, #-366]!	; 0x16e
     810:	65637845 	strbvs	r7, [r3, #-2117]!	; 0x845
     814:	6f697470 	svcvs	0x00697470
     818:	6145006e 	cmpvs	r5, lr, rrx
     81c:	75427973 	strbvc	r7, [r2, #-2419]	; 0x973
     820:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
     824:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     828:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
     82c:	7078725f 	rsbsvc	r7, r8, pc, asr r2
     830:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
     834:	72655f74 	rsbvc	r5, r5, #464	; 0x1d0
     838:	00726f72 	rsbseq	r6, r2, r2, ror pc
     83c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
     840:	69745f74 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     844:	756f656d 	strbvc	r6, [pc, #-1389]!	; 2df <_Minimum_Stack_Size+0x1df>
     848:	78645f74 	stmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     84c:	4c46006c 	mcrrmi	0, 6, r0, r6, cr12
     850:	5f485341 	svcpl	0x00485341
     854:	4c746553 	cfldr64mi	mvdx6, [r4], #-332	; 0xfffffeb4
     858:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
     85c:	73007963 	movwvc	r7, #2403	; 0x963
     860:	58447465 	stmdapl	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     864:	7261504c 	rsbvc	r5, r1, #76	; 0x4c
     868:	00736d61 	rsbseq	r6, r3, r1, ror #26
     86c:	4f495047 	svcmi	0x00495047
     870:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 878 <__Stack_Size+0x478>
     874:	50495f65 	subpl	r5, r9, r5, ror #30
     878:	564e0055 			; <UNDEFINED> instruction: 0x564e0055
     87c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     880:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     884:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     888:	656c006c 	strbvs	r0, [ip, #-108]!	; 0x6c
     88c:	49007364 	stmdbmi	r0, {r2, r5, r6, r8, r9, ip, sp, lr}
     890:	5f54534e 	svcpl	0x0054534e
     894:	44414552 	strbmi	r4, [r1], #-1362	; 0x552
     898:	4952475f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     89c:	65730044 	ldrbvs	r0, [r3, #-68]!	; 0x44
     8a0:	44454c74 	strbmi	r4, [r5], #-3188	; 0xc74
     8a4:	006e4f73 	rsbeq	r4, lr, r3, ror pc
     8a8:	31525153 	cmpcc	r2, r3, asr r1
     8ac:	52515300 	subspl	r5, r1, #0
     8b0:	51530032 	cmppl	r3, r2, lsr r0
     8b4:	70003352 	andvc	r3, r0, r2, asr r3
     8b8:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
     8bc:	76726553 			; <UNDEFINED> instruction: 0x76726553
     8c0:	666e496f 	strbtvs	r4, [lr], -pc, ror #18
     8c4:	4441006f 	strbmi	r0, [r1], #-111	; 0x6f
     8c8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     8cc:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     8d0:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     8d4:	00657275 	rsbeq	r7, r5, r5, ror r2
     8d8:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     8dc:	00444974 	subeq	r4, r4, r4, ror r9
     8e0:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     8e4:	74535f54 	ldrbvc	r5, [r3], #-3924	; 0xf54
     8e8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     8ec:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     8f0:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     8f4:	4c4c5844 	mcrrmi	8, 4, r5, ip, cr4
     8f8:	74534445 	ldrbvc	r4, [r3], #-1093	; 0x445
     8fc:	00657461 	rsbeq	r7, r5, r1, ror #8
     900:	5f6c7864 	svcpl	0x006c7864
     904:	61656c63 	cmnvs	r5, r3, ror #24
     908:	74735f72 	ldrbtvc	r5, [r3], #-3954	; 0xf72
     90c:	6b707461 	blvs	1c1da98 <__Stack_Size+0x1c1d698>
     910:	78640074 	stmdavc	r4!, {r2, r4, r5, r6}^
     914:	61635f6c 	cmnvs	r3, ip, ror #30
     918:	72757470 	rsbsvc	r7, r5, #1879048192	; 0x70000000
     91c:	65520065 	ldrbvs	r0, [r2, #-101]	; 0x65
     920:	746f6f42 	strbtvc	r6, [pc], #-3906	; 928 <__Stack_Size+0x528>
     924:	6f426f54 	svcvs	0x00426f54
     928:	6f4c746f 	svcvs	0x004c746f
     92c:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
     930:	50626700 	rsbpl	r6, r2, r0, lsl #14
     934:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
     938:	61655274 	smcvs	21796	; 0x5524
     93c:	696f5064 	stmdbvs	pc!, {r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
     940:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     944:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
     948:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
     94c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     950:	74636f00 	strbtvc	r6, [r3], #-3840	; 0xf00
     954:	00657661 	rsbeq	r7, r5, r1, ror #12
     958:	5f756370 	svcpl	0x00756370
     95c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     960:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     964:	6700657a 	smlsdxvs	r0, sl, r5, r6
     968:	6c65446c 	cfstrdvs	mvd4, [r5], #-432	; 0xfffffe50
     96c:	6f437961 	svcvs	0x00437961
     970:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
     974:	44410072 	strbmi	r0, [r1], #-114	; 0x72
     978:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xf43
     97c:	43747261 	cmnmi	r4, #268435462	; 0x10000006
     980:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
     984:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     988:	64006e6f 	strvs	r6, [r0], #-3695	; 0xe6f
     98c:	745f6c78 	ldrbvc	r6, [pc], #-3192	; 994 <__Stack_Size+0x594>
     990:	61705f78 	cmnvs	r0, r8, ror pc
     994:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
     998:	6c786400 	cfldrdvs	mvd6, [r8], #-0
     99c:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
     9a0:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xf5f
     9a4:	7864006e 	stmdavc	r4!, {r1, r2, r3, r5, r6}^
     9a8:	65735f6c 	ldrbvs	r5, [r3, #-3948]!	; 0xf6c
     9ac:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     9b0:	6b636170 	blvs	18d8f78 <__Stack_Size+0x18d8b78>
     9b4:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     9b8:	74730064 	ldrbtvc	r0, [r3], #-100	; 0x64
     9bc:	45007461 	strmi	r7, [r0, #-1121]	; 0x461
     9c0:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
     9c4:	49004135 	stmdbmi	r0, {r0, r2, r4, r5, r8, lr}
     9c8:	5f54534e 	svcpl	0x0054534e
     9cc:	5f574152 	svcpl	0x00574152
     9d0:	504d4153 	subpl	r4, sp, r3, asr r1
     9d4:	7700454c 	strvc	r4, [r0, -ip, asr #10]
     9d8:	006d754e 	rsbeq	r7, sp, lr, asr #10
     9dc:	4349564e 	movtmi	r5, #38478	; 0x964e
     9e0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     9e4:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
     9e8:	75746375 	ldrbvc	r6, [r4, #-885]!	; 0x375
     9ec:	73006572 	movwvc	r6, #1394	; 0x572
     9f0:	6c756f68 	ldclvs	15, cr6, [r5], #-416	; 0xfffffe60
     9f4:	00726564 	rsbseq	r6, r2, r4, ror #10
     9f8:	5f4c5844 	svcpl	0x004c5844
     9fc:	5f544b50 	svcpl	0x00544b50
     a00:	49004449 	stmdbmi	r0, {r0, r3, r6, sl, lr}
     a04:	5f54534e 	svcpl	0x0054534e
     a08:	504d4153 	subpl	r4, sp, r3, asr r1
     a0c:	465f454c 	ldrbmi	r4, [pc], -ip, asr #10
     a10:	00545341 	subseq	r5, r4, r1, asr #6
     a14:	4f495047 	svcmi	0x00495047
     a18:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     a1c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     a20:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     a24:	67006e6f 	strvs	r6, [r0, -pc, ror #28]
     a28:	58447465 	stmdapl	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     a2c:	7275434c 	rsbsvc	r4, r5, #805306369	; 0x30000001
     a30:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     a34:	64616f4c 	strbtvs	r6, [r1], #-3916	; 0xf4c
     a38:	524f5000 	subpl	r5, pc, #0
     a3c:	65670054 	strbvs	r0, [r7, #-84]!	; 0x54
     a40:	4c584474 	cfldrdmi	mvd4, [r8], {116}	; 0x74
     a44:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     a48:	4352006c 	cmpmi	r2, #108	; 0x6c
     a4c:	43505f43 	cmpmi	r0, #268	; 0x10c
     a50:	43314b4c 	teqmi	r1, #77824	; 0x13000
     a54:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     a58:	50470067 	subpl	r0, r7, r7, rrx
     a5c:	535f4f49 	cmppl	pc, #292	; 0x124
     a60:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
     a64:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     a68:	52495f43 	subpl	r5, r9, #268	; 0x10c
     a6c:	61684351 	cmnvs	r8, r1, asr r3
     a70:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     a74:	00646d43 	rsbeq	r6, r4, r3, asr #26
     a78:	736c6176 	cmnvc	ip, #-2147483619	; 0x8000001d
     a7c:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
     a80:	424c5844 	submi	r5, ip, #4456448	; 0x440000
     a84:	72647561 	rsbvc	r7, r4, #406847488	; 0x18400000
     a88:	00657461 	rsbeq	r7, r5, r1, ror #8
     a8c:	54534e49 	ldrbpl	r4, [r3], #-3657	; 0xe49
     a90:	5443415f 	strbpl	r4, [r3], #-351	; 0x15f
     a94:	004e4f49 	subeq	r4, lr, r9, asr #30
     a98:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     a9c:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xf54
     aa0:	53544974 	cmppl	r4, #1900544	; 0x1d0000
     aa4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     aa8:	58440073 	stmdapl	r4, {r0, r1, r4, r5, r6}^
     aac:	4b505f4c 	blmi	14187e4 <__Stack_Size+0x14183e4>
     ab0:	52455f54 	subpl	r5, r5, #336	; 0x150
     ab4:	50470052 	subpl	r0, r7, r2, asr r0
     ab8:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 99c <__Stack_Size+0x59c>
     abc:	5f65646f 	svcpl	0x0065646f
     ac0:	004e4941 	subeq	r4, lr, r1, asr #18
     ac4:	45544f4e 	ldrbmi	r4, [r4, #-3918]	; 0xf4e
     ac8:	0062415f 	rsbeq	r4, r2, pc, asr r1
     acc:	6c654475 	cfstrdvs	mvd4, [r5], #-468	; 0xfffffe2c
     ad0:	45007961 	strmi	r7, [r0, #-2401]	; 0x961
     ad4:	4c797361 	ldclmi	3, cr7, [r9], #-388	; 0xfffffe7c
     ad8:	4e004445 	cdpmi	4, 0, cr4, cr0, cr5, {2}
     adc:	5f45544f 	svcpl	0x0045544f
     ae0:	62007341 	andvs	r7, r0, #67108865	; 0x4000001
     ae4:	6b6e696c 	blvs	1b9b09c <__Stack_Size+0x1b9ac9c>
     ae8:	7344454c 	movtvc	r4, #17740	; 0x454c
     aec:	43435200 	movtmi	r5, #12800	; 0x3200
     af0:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
     af4:	0074696e 	rsbseq	r6, r4, lr, ror #18
     af8:	42525245 	subsmi	r5, r2, #1342177284	; 0x50000004
     afc:	4f5f5449 	svcmi	0x005f5449
     b00:	48524556 	ldmdami	r2, {r1, r2, r4, r6, r8, sl, lr}^
     b04:	00544145 	subseq	r4, r4, r5, asr #2
     b08:	4f495047 	svcmi	0x00495047
     b0c:	7274535f 	rsbsvc	r5, r4, #2080374785	; 0x7c000001
     b10:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
     b14:	0074696e 	rsbseq	r6, r4, lr, ror #18
     b18:	5f756370 	svcpl	0x00756370
     b1c:	5f747570 	svcpl	0x00747570
     b20:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
     b24:	41535500 	cmpmi	r3, r0, lsl #10
     b28:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     b2c:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     b30:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
     b34:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     b38:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
     b3c:	434c5844 	movtmi	r5, #51268	; 0xc844
     b40:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     b44:	7453746e 	ldrbvc	r7, [r3], #-1134	; 0x46e
     b48:	00657461 	rsbeq	r7, r5, r1, ror #8
     b4c:	54534e49 	ldrbpl	r4, [r3], #-3657	; 0xe49
     b50:	4749445f 	smlsldmi	r4, r9, pc, r4	; <UNPREDICTABLE>
     b54:	4c415449 	cfstrdmi	mvd5, [r1], {73}	; 0x49
     b58:	5345525f 	movtpl	r5, #21087	; 0x525f
     b5c:	47005445 	strmi	r5, [r0, -r5, asr #8]
     b60:	5f4f4950 	svcpl	0x004f4950
     b64:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     b68:	5f46415f 	svcpl	0x0046415f
     b6c:	4500444f 	strmi	r4, [r0, #-1103]	; 0x44f
     b70:	49425252 	stmdbmi	r2, {r1, r4, r6, r9, ip, lr}^
     b74:	48435f54 	stmdami	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     b78:	534b4345 	movtpl	r4, #45893	; 0xb345
     b7c:	67004d55 	smlsdvs	r0, r5, sp, r4
     b80:	6c784462 	cfldrdvs	mvd4, [r8], #-392	; 0xfffffe78
     b84:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
     b88:	4e490065 	cdpmi	0, 4, cr0, cr9, cr5, {3}
     b8c:	525f5453 	subspl	r5, pc, #1392508928	; 0x53000000
     b90:	575f4745 	ldrbpl	r4, [pc, -r5, asr #14]
     b94:	45544952 	ldrbmi	r4, [r4, #-2386]	; 0x952
     b98:	74614200 	strbtvc	r4, [r1], #-512	; 0x200
     b9c:	79726574 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     ba0:	6e6f4d5f 	mcrvs	13, 3, r4, cr15, cr15, {2}
     ba4:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
     ba8:	616c415f 	cmnvs	ip, pc, asr r1
     bac:	67006d72 	smlsdxvs	r0, r2, sp, r6
     bb0:	78447062 	stmdavc	r4, {r1, r5, r6, ip, sp, lr}^
     bb4:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
     bb8:	00726566 	rsbseq	r6, r2, r6, ror #10
     bbc:	36317576 			; <UNDEFINED> instruction: 0x36317576
     bc0:	544f4e00 	strbpl	r4, [pc], #-3584	; bc8 <__Stack_Size+0x7c8>
     bc4:	62425f45 	subvs	r5, r2, #276	; 0x114
     bc8:	61745300 	cmnvs	r4, r0, lsl #6
     bcc:	6f437472 	svcvs	0x00437472
     bd0:	64746e75 	ldrbtvs	r6, [r4], #-3701	; 0xe75
     bd4:	006e776f 	rsbeq	r7, lr, pc, ror #14
     bd8:	7a7a7562 	bvc	1e9e168 <__Stack_Size+0x1e9dd68>
     bdc:	6e5f6465 	cdpvs	4, 5, cr6, cr15, cr5, {3}
     be0:	5f65746f 	svcpl	0x0065746f
     be4:	78640065 	stmdavc	r4!, {r0, r2, r5, r6}^
     be8:	61685f6c 	cmnvs	r8, ip, ror #30
     bec:	6c635f6c 	stclvs	15, cr5, [r3], #-432	; 0xfffffe50
     bf0:	0065736f 	rsbeq	r7, r5, pc, ror #6
     bf4:	5f6c7864 	svcpl	0x006c7864
     bf8:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
     bfc:	79625f65 	stmdbvc	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     c00:	64006574 	strvs	r6, [r0], #-1396	; 0x574
     c04:	635f6c78 	cmpvs	pc, #30720	; 0x7800
     c08:	6b636568 	blvs	18da1b0 <__Stack_Size+0x18d9db0>
     c0c:	52524500 	subspl	r4, r2, #0
     c10:	5f544942 	svcpl	0x00544942
     c14:	5245564f 	subpl	r5, r5, #82837504	; 0x4f00000
     c18:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     c1c:	7a756200 	bvc	1d59424 <__Stack_Size+0x1d59024>
     c20:	5f64657a 	svcpl	0x0064657a
     c24:	65746f6e 	ldrbvs	r6, [r4, #-3950]!	; 0xf6e
     c28:	4700745f 	smlsdmi	r0, pc, r4, r7	; <UNPREDICTABLE>
     c2c:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
     c30:	47007261 	strmi	r7, [r0, -r1, ror #4]
     c34:	5f4f4950 	svcpl	0x004f4950
     c38:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     c3c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     c40:	00666544 	rsbeq	r6, r6, r4, asr #10
     c44:	6d7a6967 	ldclvs	9, cr6, [sl, #-412]!	; 0xfffffe64
     c48:	6e695f6f 	cdpvs	15, 6, cr5, cr9, cr15, {3}
     c4c:	56007469 	strpl	r7, [r0], -r9, ror #8
     c50:	45554c41 	ldrbmi	r4, [r5, #-3137]	; 0xc41
     c54:	43444100 	movtmi	r4, #16640	; 0x4100
     c58:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     c5c:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
     c60:	74617262 	strbtvc	r7, [r1], #-610	; 0x262
     c64:	536e6f69 	cmnpl	lr, #420	; 0x1a4
     c68:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     c6c:	65730073 	ldrbvs	r0, [r3, #-115]!	; 0x73
     c70:	44454c74 	strbmi	r4, [r5], #-3188	; 0xc74
     c74:	66664f73 	uqsub16vs	r4, r6, r3
     c78:	574f4400 	strbpl	r4, [pc, -r0, lsl #8]
     c7c:	6572004e 	ldrbvs	r0, [r2, #-78]!	; 0x4e
     c80:	65536461 	ldrbvs	r6, [r3, #-1121]	; 0x461
     c84:	6c616972 	stclvs	9, cr6, [r1], #-456	; 0xfffffe38
     c88:	656e694c 	strbvs	r6, [lr, #-2380]!	; 0x94c
     c8c:	53455200 	movtpl	r5, #20992	; 0x5200
     c90:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     c94:	52003044 	andpl	r3, r0, #68	; 0x44
     c98:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     c9c:	31444556 	cmpcc	r4, r6, asr r5
     ca0:	53455200 	movtpl	r5, #20992	; 0x5200
     ca4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     ca8:	52003344 	andpl	r3, r0, #268435457	; 0x10000001
     cac:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     cb0:	34444556 	strbcc	r4, [r4], #-1366	; 0x556
     cb4:	53455200 	movtpl	r5, #20992	; 0x5200
     cb8:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     cbc:	52003544 	andpl	r3, r0, #285212672	; 0x11000000
     cc0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     cc4:	36444556 			; <UNDEFINED> instruction: 0x36444556
     cc8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     ccc:	72505f43 	subsvc	r5, r0, #268	; 0x10c
     cd0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     cd4:	72477974 	subvc	r7, r7, #1900544	; 0x1d0000
     cd8:	4370756f 	cmnmi	r0, #465567744	; 0x1bc00000
     cdc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     ce0:	50470067 	subpl	r0, r7, r7, rrx
     ce4:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; bc8 <__Stack_Size+0x7c8>
     ce8:	5f65646f 	svcpl	0x0065646f
     cec:	505f4641 	subspl	r4, pc, r1, asr #12
     cf0:	78640050 	stmdavc	r4!, {r4, r6}^
     cf4:	65745f6c 	ldrbvs	r5, [r4, #-3948]!	; 0xf6c
     cf8:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
     cfc:	00657461 	rsbeq	r7, r5, r1, ror #8
     d00:	726f5045 	rsbvc	r5, pc, #69	; 0x45
     d04:	745f4474 	ldrbvc	r4, [pc], #-1140	; d0c <__Stack_Size+0x90c>
     d08:	534e4900 	movtpl	r4, #59648	; 0xe900
     d0c:	49505f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     d10:	5500474e 	strpl	r4, [r0, #-1870]	; 0x74e
     d14:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     d18:	726f575f 	rsbvc	r5, pc, #24903680	; 0x17c0000
     d1c:	6e654c64 	cdpvs	12, 6, cr4, cr5, cr4, {3}
     d20:	00687467 	rsbeq	r7, r8, r7, ror #8
     d24:	45544f4e 	ldrbmi	r4, [r4, #-3918]	; 0xf4e
     d28:	0073435f 	rsbseq	r4, r3, pc, asr r3
     d2c:	5f756370 	svcpl	0x00756370
     d30:	5f6c6168 	svcpl	0x006c6168
     d34:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
     d38:	0074756f 	rsbseq	r7, r4, pc, ror #10
     d3c:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
     d40:	5f6b6369 	svcpl	0x006b6369
     d44:	52746553 	rsbspl	r6, r4, #348127232	; 0x14c00000
     d48:	616f6c65 	cmnvs	pc, r5, ror #24
     d4c:	58440064 	stmdapl	r4, {r2, r5, r6}^
     d50:	54535f4c 	ldrbpl	r5, [r3], #-3916	; 0xf4c
     d54:	53555441 	cmppl	r5, #1090519040	; 0x41000000
     d58:	75614200 	strbvc	r4, [r1, #-512]!	; 0x200
     d5c:	74617264 	strbtvc	r7, [r1], #-612	; 0x264
     d60:	58445f65 	stmdapl	r4, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     d64:	4552004c 	ldrbmi	r0, [r2, #-76]	; 0x4c
     d68:	56524553 			; <UNDEFINED> instruction: 0x56524553
     d6c:	00324445 	eorseq	r4, r2, r5, asr #8
     d70:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     d74:	61505f54 	cmpvs	r0, r4, asr pc
     d78:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     d7c:	33757600 	cmncc	r5, #0
     d80:	4f4e0032 	svcmi	0x004e0032
     d84:	445f4554 	ldrbmi	r4, [pc], #-1364	; d8c <__Stack_Size+0x98c>
     d88:	4f4e0062 	svcmi	0x004e0062
     d8c:	445f4554 	ldrbmi	r4, [pc], #-1364	; d94 <__Stack_Size+0x994>
     d90:	43520073 	cmpmi	r2, #115	; 0x73
     d94:	43505f43 	cmpmi	r0, #268	; 0x10c
     d98:	43324b4c 	teqmi	r2, #77824	; 0x13000
     d9c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     da0:	44410067 	strbmi	r0, [r1], #-103	; 0x67
     da4:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
     da8:	616c7567 	cmnvs	ip, r7, ror #10
     dac:	61684372 	smcvs	33842	; 0x8432
     db0:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     db4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     db8:	67006769 	strvs	r6, [r0, -r9, ror #14]
     dbc:	63507062 	cmpvs	r0, #98	; 0x62
     dc0:	66754275 			; <UNDEFINED> instruction: 0x66754275
     dc4:	00726566 	rsbseq	r6, r2, r6, ror #10
     dc8:	4349564e 	movtmi	r5, #38478	; 0x964e
     dcc:	5152495f 	cmppl	r2, pc, asr r9
     dd0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     dd4:	506c656e 	rsbpl	r6, ip, lr, ror #10
     dd8:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
     ddc:	6f697470 	svcvs	0x00697470
     de0:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
     de4:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     de8:	50470079 	subpl	r0, r7, r9, ror r0
     dec:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; cd0 <__Stack_Size+0x8d0>
     df0:	5f65646f 	svcpl	0x0065646f
     df4:	5f74754f 	svcpl	0x0074754f
     df8:	6700444f 	strvs	r4, [r0, -pc, asr #8]
     dfc:	75635062 	strbvc	r5, [r3, #-98]!	; 0x62
     e00:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
     e04:	4f4e0065 	svcmi	0x004e0065
     e08:	455f4554 	ldrbmi	r4, [pc, #-1364]	; 8bc <__Stack_Size+0x4bc>
     e0c:	65730062 	ldrbvs	r0, [r3, #-98]!	; 0x62
     e10:	7a694774 	bvc	1a52be8 <__Stack_Size+0x1a527e8>
     e14:	69526f6d 	ldmdbvs	r2, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     e18:	4c746867 	ldclmi	8, cr6, [r4], #-412	; 0xfffffe64
     e1c:	55006765 	strpl	r6, [r0, #-1893]	; 0x765
     e20:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     e24:	6e65535f 	mcrvs	3, 3, r5, cr5, cr15, {2}
     e28:	74614464 	strbtvc	r4, [r1], #-1124	; 0x464
     e2c:	74730061 	ldrbtvc	r0, [r3], #-97	; 0x61
     e30:	75705f64 	ldrbvc	r5, [r0, #-3940]!	; 0xf64
     e34:	61686374 	smcvs	34356	; 0x8634
     e38:	53550072 	cmppl	r5, #114	; 0x72
     e3c:	5f545241 	svcpl	0x00545241
     e40:	6f435449 	svcvs	0x00435449
     e44:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     e48:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     e4c:	70535f4f 	subsvc	r5, r3, pc, asr #30
     e50:	5f646565 	svcpl	0x00646565
     e54:	484d3035 	stmdami	sp, {r0, r2, r4, r5, ip, sp}^
     e58:	5355007a 	cmppl	r5, #122	; 0x7a
     e5c:	5f545241 	svcpl	0x00545241
     e60:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     e64:	00666544 	rsbeq	r6, r6, r4, asr #10
     e68:	5f647473 	svcpl	0x00647473
     e6c:	73747570 	cmnvc	r4, #469762048	; 0x1c000000
     e70:	616c5000 	cmnvs	ip, r0
     e74:	746f4e79 	strbtvc	r4, [pc], #-3705	; e7c <__Stack_Size+0xa7c>
     e78:	4e490065 	cdpmi	0, 4, cr0, cr9, cr5, {3}
     e7c:	535f5453 	cmppl	pc, #1392508928	; 0x53000000
     e80:	45545359 	ldrbmi	r5, [r4, #-857]	; 0x359
     e84:	45525f4d 	ldrbmi	r5, [r2, #-3917]	; 0xf4d
     e88:	47004441 	strmi	r4, [r0, -r1, asr #8]
     e8c:	5f4f4950 	svcpl	0x004f4950
     e90:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     e94:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
     e98:	0050505f 	subseq	r5, r0, pc, asr r0
     e9c:	42525245 	subsmi	r5, r2, #1342177284	; 0x50000004
     ea0:	415f5449 	cmpmi	pc, r9, asr #8
     ea4:	454c474e 	strbmi	r4, [ip, #-1870]	; 0x74e
     ea8:	754e6200 	strbvc	r6, [lr, #-512]	; 0x200
     eac:	4352006d 	cmpmi	r2, #109	; 0x6d
     eb0:	43485f43 	movtmi	r5, #36675	; 0x8f43
     eb4:	6f434b4c 	svcvs	0x00434b4c
     eb8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ebc:	41535500 	cmpmi	r3, r0, lsl #10
     ec0:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     ec4:	0074696e 	rsbseq	r6, r4, lr, ror #18
     ec8:	54534e49 	ldrbpl	r4, [r3], #-3657	; 0xe49
     ecc:	5345525f 	movtpl	r5, #21087	; 0x525f
     ed0:	52005445 	andpl	r5, r0, #1157627904	; 0x45000000
     ed4:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     ed8:	6f434553 	svcvs	0x00434553
     edc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     ee0:	446c6700 	strbtmi	r6, [ip], #-1792	; 0x700
     ee4:	69546c78 	ldmdbvs	r4, {r3, r4, r5, r6, sl, fp, sp, lr}^
     ee8:	756f656d 	strbvc	r6, [pc, #-1389]!	; 983 <__Stack_Size+0x583>
     eec:	756f4374 	strbvc	r4, [pc, #-884]!	; b80 <__Stack_Size+0x780>
     ef0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     ef4:	43435200 	movtmi	r5, #12800	; 0x3200
     ef8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     efc:	43535953 	cmpmi	r3, #1359872	; 0x14c000
     f00:	6f534b4c 	svcvs	0x00534b4c
     f04:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
     f08:	43444100 	movtmi	r4, #16640	; 0x4100
     f0c:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
     f10:	696c4161 	stmdbvs	ip!, {r0, r5, r6, r8, lr}^
     f14:	4e006e67 	cdpmi	14, 0, cr6, cr0, cr7, {3}
     f18:	5f45544f 	svcpl	0x0045544f
     f1c:	73007346 	movwvc	r7, #838	; 0x346
     f20:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
     f24:	726f5468 	rsbvc	r5, pc, #1744830464	; 0x68000000
     f28:	00657571 	rsbeq	r7, r5, r1, ror r5
     f2c:	54534e49 	ldrbpl	r4, [r3], #-3657	; 0xe49
     f30:	5041435f 	subpl	r4, r1, pc, asr r3
     f34:	4952475f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, lr}^
     f38:	4e490044 	cdpmi	0, 4, cr0, cr9, cr4, {2}
     f3c:	535f5453 	cmppl	pc, #1392508928	; 0x53000000
     f40:	5f434e59 	svcpl	0x00434e59
     f44:	5f474552 	svcpl	0x00474552
     f48:	54495257 	strbpl	r5, [r9], #-599	; 0x257
     f4c:	65730045 	ldrbvs	r0, [r3, #-69]!	; 0x45
     f50:	726f5474 	rsbvc	r5, pc, #1946157056	; 0x74000000
     f54:	4f657571 	svcmi	0x00657571
     f58:	7864006e 	stmdavc	r4!, {r1, r2, r3, r5, r6}^
     f5c:	65735f6c 	ldrbvs	r5, [r3, #-3948]!	; 0xf6c
     f60:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     f64:	6b636170 	blvs	18d952c <__Stack_Size+0x18d912c>
     f68:	695f7465 	ldmdbvs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     f6c:	7274736e 	rsbsvc	r7, r4, #-1207959551	; 0xb8000001
     f70:	69746375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
     f74:	67006e6f 	strvs	r6, [r0, -pc, ror #28]
     f78:	7563506c 	strbvc	r5, [r3, #-108]!	; 0x6c
     f7c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
     f80:	4374756f 	cmnmi	r4, #465567744	; 0x1bc00000
     f84:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     f88:	73007265 	movwvc	r7, #613	; 0x265
     f8c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     f90:	756f635f 	strbvc	r6, [pc, #-863]!	; c39 <__Stack_Size+0x839>
     f94:	6f64746e 	svcvs	0x0064746e
     f98:	625f6e77 	subsvs	r6, pc, #1904	; 0x770
     f9c:	657a7a75 	ldrbvs	r7, [sl, #-2677]!	; 0xa75
     fa0:	44410072 	strbmi	r0, [r1], #-114	; 0x72
     fa4:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
     fa8:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
     fac:	49520066 	ldmdbmi	r2, {r1, r2, r5, r6}^
     fb0:	00544847 	subseq	r4, r4, r7, asr #16
     fb4:	45544f4e 	ldrbmi	r4, [r4, #-3918]	; 0xf4e
     fb8:	0062475f 	rsbeq	r4, r2, pc, asr r7
     fbc:	4f495047 	svcmi	0x00495047
     fc0:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
     fc4:	616d6552 	cmnvs	sp, r2, asr r5
     fc8:	6e6f4370 	mcrvs	3, 3, r4, cr15, cr0, {3}
     fcc:	00676966 	rsbeq	r6, r7, r6, ror #18
     fd0:	6e696c62 	cdpvs	12, 6, cr6, cr9, cr2, {3}
     fd4:	6c754d6b 	ldclvs	13, cr4, [r5], #-428	; 0xfffffe54
     fd8:	454c6974 	strbmi	r6, [ip, #-2420]	; 0x974
     fdc:	4e007344 	cdpmi	3, 0, cr7, cr0, cr4, {2}
     fe0:	5f45544f 	svcpl	0x0045544f
     fe4:	45007347 	strmi	r7, [r0, #-839]	; 0x347
     fe8:	49425252 	stmdbmi	r2, {r1, r4, r6, r9, ip, lr}^
     fec:	41525f54 	cmpmi	r2, r4, asr pc
     ff0:	0045474e 	subeq	r4, r5, lr, asr #14
     ff4:	7466656c 	strbtvc	r6, [r6], #-1388	; 0x56c
     ff8:	67696400 	strbvs	r6, [r9, -r0, lsl #8]!
     ffc:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    1000:	63526d75 	cmpvs	r2, #7488	; 0x1d40
    1004:	74794276 	ldrbtvc	r4, [r9], #-630	; 0x276
    1008:	53550065 	cmppl	r5, #101	; 0x65
    100c:	5f545241 	svcpl	0x00545241
    1010:	64756142 	ldrbtvs	r6, [r5], #-322	; 0x142
    1014:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0x152
    1018:	73614500 	cmnvc	r1, #0
    101c:	726f5079 	rsbvc	r5, pc, #121	; 0x79
    1020:	00735f74 	rsbseq	r5, r3, r4, ror pc
    1024:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1028:	6f4d5f54 	svcvs	0x004d5f54
    102c:	64006564 	strvs	r6, [r0], #-1380	; 0x564
    1030:	675f6c78 			; <UNDEFINED> instruction: 0x675f6c78
    1034:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
    1038:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
    103c:	4e490074 	mcrmi	0, 2, r0, cr9, cr4, {3}
    1040:	525f5453 	subspl	r5, pc, #1392508928	; 0x53000000
    1044:	49465f44 	stmdbmi	r6, {r2, r6, r8, r9, sl, fp, ip, lr}^
    1048:	5248544c 	subpl	r5, r8, #1275068416	; 0x4c000000
    104c:	625f6500 	subsvs	r6, pc, #0
    1050:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
    1054:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1058:	69725000 	ldmdbvs	r2!, {ip, lr}^
    105c:	6843746e 	stmdavs	r3, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1060:	64007261 	strvs	r7, [r0], #-609	; 0x261
    1064:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1068:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 1070 <__Stack_Size+0xc70>
    106c:	50470078 	subpl	r0, r7, r8, ror r0
    1070:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1074:	49646165 	stmdbmi	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    1078:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0x6e
    107c:	61746144 	cmnvs	r4, r4, asr #2
    1080:	00746942 	rsbseq	r6, r4, r2, asr #18
    1084:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1088:	72505f48 	subsvc	r5, r0, #288	; 0x120
    108c:	74656665 	strbtvc	r6, [r5], #-1637	; 0x665
    1090:	75426863 	strbvc	r6, [r2, #-2147]	; 0x863
    1094:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1098:	00646d43 	rsbeq	r6, r4, r3, asr #26
    109c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    10a0:	6c6c4174 	stfvse	f4, [ip], #-464	; 0xfffffe30
    10a4:	76726553 			; <UNDEFINED> instruction: 0x76726553
    10a8:	666e496f 	strbtvs	r4, [lr], -pc, ror #18
    10ac:	564e006f 	strbpl	r0, [lr], -pc, rrx
    10b0:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    10b4:	65567465 	ldrbvs	r7, [r6, #-1125]	; 0x465
    10b8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    10bc:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    10c0:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0x65
    10c4:	726f5474 	rsbvc	r5, pc, #1946157056	; 0x74000000
    10c8:	4f657571 	svcmi	0x00657571
    10cc:	52006666 	andpl	r6, r0, #106954752	; 0x6600000
    10d0:	415f4343 	cmpmi	pc, r3, asr #6
    10d4:	50324250 	eorspl	r4, r2, r0, asr r2
    10d8:	70697265 	rsbvc	r7, r9, r5, ror #4
    10dc:	6f6c4368 	svcvs	0x006c4368
    10e0:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    10e4:	72500064 	subsvc	r0, r0, #100	; 0x64
    10e8:	73746e69 	cmnvc	r4, #1680	; 0x690
    10ec:	00643233 	rsbeq	r3, r4, r3, lsr r2
    10f0:	5f434441 	svcpl	0x00434441
    10f4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    10f8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    10fc:	6f697461 	svcvs	0x00697461
    1100:	7250006e 	subsvc	r0, r0, #110	; 0x6e
    1104:	75746e69 	ldrbvc	r6, [r4, #-3689]!	; 0xe69
    1108:	00643233 	rsbeq	r3, r4, r3, lsr r2
    110c:	5f434352 	svcpl	0x00434352
    1110:	31425041 	cmpcc	r2, r1, asr #32
    1114:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1118:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    111c:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    1120:	6400646d 	strvs	r6, [r0], #-1133	; 0x46d
    1124:	725f6c78 	subsvc	r6, pc, #30720	; 0x7800
    1128:	5f646165 	svcpl	0x00646165
    112c:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0x962
    1130:	534e4900 	movtpl	r4, #59648	; 0xe900
    1134:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xf54
    1138:	445f4441 	ldrbmi	r4, [pc], #-1089	; 1140 <__Stack_Size+0xd40>
    113c:	00415441 	subeq	r5, r1, r1, asr #8
    1140:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0x96c
    1144:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    1148:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    114c:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
    1150:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1154:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    1158:	50626700 	rsbpl	r6, r2, r0, lsl #14
    115c:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    1160:	69725774 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, ip, lr}^
    1164:	6f506574 	svcvs	0x00506574
    1168:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
    116c:	4e6c0072 	mcrmi	0, 3, r0, cr12, cr2, {3}
    1170:	00536d75 	subseq	r6, r3, r5, ror sp
    1174:	52504d53 	subspl	r4, r0, #5312	; 0x14c0
    1178:	4d530031 	ldclmi	0, cr0, [r3, #-196]	; 0xffffff3c
    117c:	00325250 	eorseq	r5, r2, r0, asr r2
    1180:	5f434441 	svcpl	0x00434441
    1184:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1188:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    118c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1190:	656e6f74 	strbvs	r6, [lr, #-3956]!	; 0xf74
    1194:	41535500 	cmpmi	r3, r0, lsl #10
    1198:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    119c:	42706f74 	rsbsmi	r6, r0, #464	; 0x1d0
    11a0:	00737469 	rsbseq	r7, r3, r9, ror #8
    11a4:	524b434c 	subpl	r4, fp, #805306369	; 0x30000001
    11a8:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
    11ac:	6d7a6947 	ldclvs	9, cr6, [sl, #-284]!	; 0xfffffee4
    11b0:	66654c6f 	strbtvs	r4, [r5], -pc, ror #24
    11b4:	67654c74 			; <UNDEFINED> instruction: 0x67654c74
    11b8:	43444100 	movtmi	r4, #16640	; 0x4100
    11bc:	6163535f 	cmnvs	r3, pc, asr r3
    11c0:	6e6f436e 	cdpvs	3, 6, cr4, cr15, cr14, {3}
    11c4:	646f4d76 	strbtvs	r4, [pc], #-3446	; 11cc <__Stack_Size+0xdcc>
    11c8:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0x65
    11cc:	726f5474 	rsbvc	r5, pc, #1946157056	; 0x74000000
    11d0:	00657571 	rsbeq	r7, r5, r1, ror r5
    11d4:	44746567 	ldrbtmi	r6, [r4], #-1383	; 0x567
    11d8:	75434c58 	strbvc	r4, [r3, #-3160]	; 0xc58
    11dc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    11e0:	65705374 	ldrbvs	r5, [r0, #-884]!	; 0x374
    11e4:	41006465 	tstmi	r0, r5, ror #8
    11e8:	435f4344 	cmpmi	pc, #268435457	; 0x10000001
    11ec:	69746e6f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    11f0:	756f756e 	strbvc	r7, [pc, #-1390]!	; c8a <__Stack_Size+0x88a>
    11f4:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
    11f8:	646f4d76 	strbtvs	r4, [pc], #-3446	; 1200 <__Stack_Size+0xe00>
    11fc:	50450065 	subpl	r0, r5, r5, rrx
    1200:	4474726f 	ldrbtmi	r7, [r4], #-623	; 0x26f
    1204:	7200655f 	andvc	r6, r0, #398458880	; 0x17c00000
    1208:	74686769 	strbtvc	r6, [r8], #-1897	; 0x769
    120c:	656c6d00 	strbvs	r6, [ip, #-3328]!	; 0xd00
    1210:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1214:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    1218:	6f435f43 	svcvs	0x00435f43
    121c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1220:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
    1224:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1228:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    122c:	49005249 	stmdbmi	r0, {r0, r3, r6, r9, ip, lr}
    1230:	5f54534e 	svcpl	0x0054534e
    1234:	525f5257 	subspl	r5, pc, #1879048197	; 0x70000005
    1238:	48544745 	ldmdami	r4, {r0, r2, r6, r8, r9, sl, lr}^
    123c:	65730052 	ldrbvs	r0, [r3, #-82]!	; 0x52
    1240:	7a694774 	bvc	1a53018 <__Stack_Size+0x1a52c18>
    1244:	69526f6d 	ldmdbvs	r2, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1248:	41746867 	cmnmi	r4, r7, ror #16
    124c:	41006d72 	tstmi	r0, r2, ror sp
    1250:	732f5050 	teqvc	pc, #80	; 0x50
    1254:	412f6372 	teqmi	pc, r2, ror r3	; <UNPREDICTABLE>
    1258:	632e4950 	teqvs	lr, #1310720	; 0x140000
    125c:	43444100 	movtmi	r4, #16640	; 0x4100
    1260:	7365525f 	cmnvc	r5, #-268435451	; 0xf0000005
    1264:	61437465 	cmpvs	r3, r5, ror #8
    1268:	7262696c 	rsbvc	r6, r2, #1769472	; 0x1b0000
    126c:	6f697461 	svcvs	0x00697461
    1270:	5447006e 	strbpl	r0, [r7], #-110	; 0x6e
    1274:	52005250 	andpl	r5, r0, #5
    1278:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    127c:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    1280:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    1284:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1288:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
    128c:	434c5844 	movtmi	r5, #51268	; 0xc844
    1290:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1294:	6f56746e 	svcvs	0x0056746e
    1298:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    129c:	63700065 	cmnvs	r0, #101	; 0x65
    12a0:	61685f75 	smcvs	34293	; 0x85f5
    12a4:	6c635f6c 	stclvs	15, cr5, [r3], #-432	; 0xfffffe50
    12a8:	0065736f 	rsbeq	r7, r5, pc, ror #6
    12ac:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    12b0:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 10e8 <__Stack_Size+0xce8>
    12b4:	6174536d 	cmnvs	r4, sp, ror #6
    12b8:	00737574 	rsbseq	r7, r3, r4, ror r5
    12bc:	62726576 	rsbsvs	r6, r2, #494927872	; 0x1d800000
    12c0:	5f65736f 	svcpl	0x0065736f
    12c4:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
    12c8:	6c6c615f 	stfvse	f6, [ip], #-380	; 0xfffffe84
    12cc:	6c78645f 	cfldrdvs	mvd6, [r8], #-380	; 0xfffffe84
    12d0:	65526e00 	ldrbvs	r6, [r2, #-3584]	; 0xe00
    12d4:	4e006461 	cdpmi	4, 0, cr6, cr0, cr1, {3}
    12d8:	415f4d55 	cmpmi	pc, r5, asr sp	; <UNPREDICTABLE>
    12dc:	5f323158 	svcpl	0x00323158
    12e0:	56524553 			; <UNDEFINED> instruction: 0x56524553
    12e4:	7200534f 	andvc	r5, r0, #1006632961	; 0x3c000001
    12e8:	53646165 	cmnpl	r4, #1073741849	; 0x40000019
    12ec:	61697265 	cmnvs	r9, r5, ror #4
    12f0:	6168436c 	cmnvs	r8, ip, ror #6
    12f4:	78640072 	stmdavc	r4!, {r1, r4, r5, r6}^
    12f8:	61685f6c 	cmnvs	r8, ip, ror #30
    12fc:	69745f6c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1300:	756f656d 	strbvc	r6, [pc, #-1389]!	; d9b <__Stack_Size+0x99b>
    1304:	645f0074 	ldrbvs	r0, [pc], #-116	; 130c <__Stack_Size+0xf0c>
    1308:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    130c:	00736d5f 	rsbseq	r6, r3, pc, asr sp
    1310:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1314:	65475f54 	strbvs	r5, [r7, #-3924]	; 0xf54
    1318:	616c4674 	smcvs	50276	; 0xc464
    131c:	61745367 	cmnvs	r4, r7, ror #6
    1320:	00737574 	rsbseq	r7, r3, r4, ror r5
    1324:	5f647473 	svcpl	0x00647473
    1328:	73746567 	cmnvc	r4, #432013312	; 0x19c00000
    132c:	41535500 	cmpmi	r3, r0, lsl #10
    1330:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    1334:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1338:	61446576 	hvcvs	18006	; 0x4656
    133c:	42006174 	andmi	r6, r0, #29
    1340:	657a7a75 	ldrbvs	r7, [sl, #-2677]!	; 0xa75
    1344:	79530064 	ldmdbvc	r3, {r2, r5, r6}^
    1348:	63695473 	cmnvs	r9, #1929379840	; 0x73000000
    134c:	6f435f6b 	svcvs	0x00435f6b
    1350:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    1354:	646d4372 	strbtvs	r4, [sp], #-882	; 0x372
    1358:	75637000 	strbvc	r7, [r3, #-0]!
    135c:	7265745f 	rsbvc	r7, r5, #1593835520	; 0x5f000000
    1360:	616e696d 	cmnvs	lr, sp, ror #18
    1364:	73006574 	movwvc	r6, #1396	; 0x574
    1368:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    136c:	63700067 	cmnvs	r0, #103	; 0x67
    1370:	65705f75 	ldrbvs	r5, [r0, #-3957]!	; 0xf75
    1374:	715f6b65 	cmpvc	pc, r5, ror #22
    1378:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    137c:	43435200 	movtmi	r5, #12800	; 0x3200
    1380:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    1384:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
    1388:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    138c:	49006e6f 	stmdbmi	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    1390:	5f54534e 	svcpl	0x0054534e
    1394:	5f504143 	svcpl	0x00504143
    1398:	49474552 	stmdbmi	r7, {r1, r4, r6, r8, sl, lr}^
    139c:	41004e4f 	tstmi	r0, pc, asr #28
    13a0:	53323158 	teqpl	r2, #22
    13a4:	6f767265 	svcvs	0x00767265
    13a8:	65670073 	strbvs	r0, [r7, #-115]!	; 0x73
    13ac:	4c584474 	cfldrdmi	mvd4, [r8], {116}	; 0x74
    13b0:	71726f54 	cmnvc	r2, r4, asr pc
    13b4:	74536575 	ldrbvc	r6, [r3], #-1397	; 0x575
    13b8:	00657461 	rsbeq	r7, r5, r1, ror #8
    13bc:	5f434441 	svcpl	0x00434441
    13c0:	52746547 	rsbspl	r6, r4, #297795584	; 0x11c00000
    13c4:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    13c8:	696c6143 	stmdbvs	ip!, {r0, r1, r6, r8, sp, lr}^
    13cc:	74617262 	strbtvc	r7, [r1], #-610	; 0x262
    13d0:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    13d4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    13d8:	75620073 	strbvc	r0, [r2, #-115]!	; 0x73
    13dc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    13e0:	41535500 	cmpmi	r3, r0, lsl #10
    13e4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    13e8:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13ec:	61727567 	cmnvs	r2, r7, ror #10
    13f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    13f4:	4f504500 	svcmi	0x00504500
    13f8:	31315452 	teqcc	r1, r2, asr r4
    13fc:	74696200 	strbtvc	r6, [r9], #-512	; 0x200
    1400:	50450073 	subpl	r0, r5, r3, ror r0
    1404:	3154524f 	cmpcc	r4, pc, asr #4
    1408:	52450035 	subpl	r0, r5, #53	; 0x35
    140c:	54494252 	strbpl	r4, [r9], #-594	; 0x252
    1410:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
    1414:	45474154 	strbmi	r4, [r7, #-340]	; 0x154
    1418:	73795300 	cmnvc	r9, #0
    141c:	6b636954 	blvs	18db974 <__Stack_Size+0x18db574>
    1420:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
    1424:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
    1428:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    142c:	45006e6f 	strmi	r6, [r0, #-3695]	; 0xe6f
    1430:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    1434:	64004131 	strvs	r4, [r0], #-305	; 0x131
    1438:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    143c:	725f6c61 	subsvc	r6, pc, #24832	; 0x6100
    1440:	78640078 	stmdavc	r4!, {r3, r4, r5, r6}^
    1444:	69705f6c 	ldmdbvs	r0!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1448:	6400676e 	strvs	r6, [r0], #-1902	; 0x76e
    144c:	685f6c78 	ldmdavs	pc, {r3, r4, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1450:	635f6c61 	cmpvs	pc, #24832	; 0x6100
    1454:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    1458:	726f7000 	rsbvc	r7, pc, #0
    145c:	756e0074 	strbvc	r0, [lr, #-116]!	; 0x74
    1460:	6361506d 	cmnvs	r1, #109	; 0x6d
    1464:	0074656b 	rsbseq	r6, r4, fp, ror #10
    1468:	5f434441 	svcpl	0x00434441
    146c:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0x845
    1470:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1474:	67697254 			; <UNDEFINED> instruction: 0x67697254
    1478:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    147c:	4f504500 	svcmi	0x00504500
    1480:	31325452 	teqcc	r2, r2, asr r4
    1484:	52524500 	subspl	r4, r2, #0
    1488:	5f544942 	svcpl	0x00544942
    148c:	54534e49 	ldrbpl	r4, [r3], #-3657	; 0xe49
    1490:	54435552 	strbpl	r5, [r3], #-1362	; 0x552
    1494:	004e4f49 	subeq	r4, lr, r9, asr #30
    1498:	524f5045 	subpl	r5, pc, #69	; 0x45
    149c:	00353254 	eorseq	r3, r5, r4, asr r2
    14a0:	726f5045 	rsbvc	r5, pc, #69	; 0x45
    14a4:	655f4174 	ldrbvs	r4, [pc, #-372]	; 1338 <__Stack_Size+0xf38>
    14a8:	4f504500 	svcmi	0x00504500
    14ac:	41325452 	teqmi	r2, r2, asr r4
    14b0:	4c414600 	mcrrmi	6, 0, r4, r1, cr0
    14b4:	56004553 			; <UNDEFINED> instruction: 0x56004553
    14b8:	00535542 	subseq	r5, r3, r2, asr #10
    14bc:	726f5045 	rsbvc	r5, pc, #69	; 0x45
    14c0:	745f4174 	ldrbvc	r4, [pc], #-372	; 14c8 <__Stack_Size+0x10c8>
    14c4:	73614500 	cmnvc	r1, #0
    14c8:	726f5079 	rsbvc	r5, pc, #121	; 0x79
    14cc:	00745f74 	rsbseq	r5, r4, r4, ror pc
    14d0:	44746567 	ldrbtmi	r6, [r4], #-1383	; 0x567
    14d4:	69464c58 	stmdbvs	r6, {r3, r4, r6, sl, fp, lr}^
    14d8:	61776d72 	cmnvs	r7, r2, ror sp
    14dc:	4e006572 	cfrshl64mi	mvdx0, mvdx2, r6
    14e0:	5f434956 	svcpl	0x00434956
    14e4:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    14e8:	6e6e6168 	powvsez	f6, f6, #0.0
    14ec:	75536c65 	ldrbvc	r6, [r3, #-3173]	; 0xc65
    14f0:	69725062 	ldmdbvs	r2!, {r1, r5, r6, ip, lr}^
    14f4:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
    14f8:	4e490079 	mcrmi	0, 2, r0, cr9, cr9, {3}
    14fc:	535f5453 	cmppl	pc, #1392508928	; 0x53000000
    1500:	5f434e59 	svcpl	0x00434e59
    1504:	44414552 	strbmi	r4, [r1], #-1362	; 0x552
    1508:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    150c:	5f78725f 	svcpl	0x0078725f
    1510:	6b636170 	blvs	18d9ad8 <__Stack_Size+0x18d96d8>
    1514:	44007465 	strmi	r7, [r0], #-1125	; 0x465
    1518:	42415349 	submi	r5, r1, #603979777	; 0x24000001
    151c:	6b00454c 	blvs	12a54 <__Stack_Size+0x12654>
    1520:	0065656e 	rsbeq	r6, r5, lr, ror #10
    1524:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1528:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    152c:	75637000 	strbvc	r7, [r3, #-0]!
    1530:	656c635f 	strbvs	r6, [ip, #-863]!	; 0x35f
    1534:	715f7261 	cmpvc	pc, r1, ror #4
    1538:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0x575
    153c:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
    1540:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1544:	4500656e 	strmi	r6, [r0, #-1390]	; 0x56e
    1548:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    154c:	66003133 			; <UNDEFINED> instruction: 0x66003133
    1550:	00746f6f 	rsbseq	r6, r4, pc, ror #30
    1554:	54534e49 	ldrbpl	r4, [r3], #-3657	; 0xe49
    1558:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    155c:	445f4554 	ldrbmi	r4, [pc], #-1364	; 1564 <__Stack_Size+0x1164>
    1560:	00415441 	subeq	r5, r1, r1, asr #8
    1564:	32315841 	eorscc	r5, r1, #4259840	; 0x410000
    1568:	5344495f 	movtpl	r4, #18783	; 0x495f
    156c:	45534800 	ldrbmi	r4, [r3, #-2048]	; 0x800
    1570:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    1574:	53705574 	cmnpl	r0, #486539264	; 0x1d000000
    1578:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    157c:	50450073 	subpl	r0, r5, r3, ror r0
    1580:	3354524f 	cmpcc	r4, #-268435452	; 0xf0000004
    1584:	68630041 	stmdavs	r3!, {r0, r6}^
    1588:	736b6365 	cmnvc	fp, #-1811939327	; 0x94000001
    158c:	41006d75 	tstmi	r0, r5, ror sp
    1590:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1594:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1598:	6f727245 	svcvs	0x00727245
    159c:	61745372 	cmnvs	r4, r2, ror r3
    15a0:	00737574 	rsbseq	r7, r3, r4, ror r5
    15a4:	696f7468 	stmdbvs	pc!, {r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    15a8:	534e4900 	movtpl	r4, #59648	; 0xe900
    15ac:	554c5f54 	strbpl	r5, [ip, #-3924]	; 0xf54
    15b0:	414d5f54 	cmpmi	sp, r4, asr pc
    15b4:	4547414e 	strbmi	r4, [r7, #-334]	; 0x14e
    15b8:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    15bc:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    15c0:	6c616974 	stclvs	9, cr6, [r1], #-464	; 0xfffffe30
    15c4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    15c8:	4f495047 	svcmi	0x00495047
    15cc:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    15d0:	65520074 	ldrbvs	r0, [r2, #-116]	; 0x74
    15d4:	6e416461 	cdpvs	4, 4, cr6, cr1, cr1, {3}
    15d8:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
    15dc:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
    15e0:	0044454c 	subeq	r4, r4, ip, asr #10
    15e4:	4349564e 	movtmi	r5, #38478	; 0x964e
    15e8:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    15ec:	75460074 	strbvc	r0, [r6, #-116]	; 0x74
    15f0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    15f4:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    15f8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    15fc:	50450065 	subpl	r0, r5, r5, rrx
    1600:	3454524f 	ldrbcc	r5, [r4], #-591	; 0x24f
    1604:	69730031 	ldmdbvs	r3!, {r0, r4, r5}^
    1608:	4500657a 	strmi	r6, [r0, #-1402]	; 0x57a
    160c:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    1610:	76003534 			; <UNDEFINED> instruction: 0x76003534
    1614:	6f627265 	svcvs	0x00627265
    1618:	705f6573 	subsvc	r6, pc, r3, ror r5	; <UNPREDICTABLE>
    161c:	5f676e69 	svcpl	0x00676e69
    1620:	006c7864 	rsbeq	r7, ip, r4, ror #16
    1624:	5f6c7864 	svcpl	0x006c7864
    1628:	5f746573 	svcpl	0x00746573
    162c:	61707874 	cmnvs	r0, r4, ror r8
    1630:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    1634:	6e656c5f 	mcrvs	12, 3, r6, cr5, cr15, {2}
    1638:	00687467 	rsbeq	r7, r8, r7, ror #8
    163c:	5446454c 	strbpl	r4, [r6], #-1356	; 0x54c
    1640:	72726500 	rsbsvc	r6, r2, #0
    1644:	00746962 	rsbseq	r6, r4, r2, ror #18
    1648:	524f5045 	subpl	r5, pc, #69	; 0x45
    164c:	00413454 	subeq	r3, r1, r4, asr r4
    1650:	5f525750 	svcpl	0x00525750
    1654:	6b636142 	blvs	18d9b64 <__Stack_Size+0x18d9764>
    1658:	63417075 	movtvs	r7, #4213	; 0x1075
    165c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    1660:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1664:	5f434441 	svcpl	0x00434441
    1668:	00646d43 	rsbeq	r6, r4, r3, asr #26
    166c:	41524150 	cmpmi	r2, r0, asr r1
    1670:	5047004d 	subpl	r0, r7, sp, asr #32
    1674:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1678:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    167c:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1680:	544f4e00 	strbpl	r4, [pc], #-3584	; 1688 <__Stack_Size+0x1288>
    1684:	00415f45 	subeq	r5, r1, r5, asr #30
    1688:	45544f4e 	ldrbmi	r4, [r4, #-3918]	; 0xf4e
    168c:	4e00425f 	mcrmi	2, 0, r4, cr0, cr15, {2}
    1690:	5f45544f 	svcpl	0x0045544f
    1694:	4f4e0043 	svcmi	0x004e0043
    1698:	445f4554 	ldrbmi	r4, [pc], #-1364	; 16a0 <__Stack_Size+0x12a0>
    169c:	544f4e00 	strbpl	r4, [pc], #-3584	; 16a4 <__Stack_Size+0x12a4>
    16a0:	00455f45 	subeq	r5, r5, r5, asr #30
    16a4:	45544f4e 	ldrbmi	r4, [r4, #-3918]	; 0xf4e
    16a8:	4e00465f 	mcrmi	6, 0, r4, cr0, cr15, {2}
    16ac:	5f45544f 	svcpl	0x0045544f
    16b0:	43520047 	cmpmi	r2, #71	; 0x47
    16b4:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    16b8:	646d434c 	strbtvs	r4, [sp], #-844	; 0x34c
    16bc:	6c617600 	stclvs	6, cr7, [r1], #-0
    16c0:	52006575 	andpl	r6, r0, #490733568	; 0x1d400000
    16c4:	575f4343 	ldrbpl	r4, [pc, -r3, asr #6]
    16c8:	46746961 	ldrbtmi	r6, [r4], -r1, ror #18
    16cc:	5348726f 	movtpl	r7, #33391	; 0x826f
    16d0:	61745345 	cmnvs	r4, r5, asr #6
    16d4:	70557472 	subsvc	r7, r5, r2, ror r4
    16d8:	4f504500 	svcmi	0x00504500
    16dc:	31355452 	teqcc	r5, r2, asr r4
    16e0:	4f504500 	svcmi	0x00504500
    16e4:	35355452 	ldrcc	r5, [r5, #-1106]!	; 0x452
    16e8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    16ec:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    16f0:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    16f4:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    16f8:	00657275 	rsbeq	r7, r5, r5, ror r2
    16fc:	4f495047 	svcmi	0x00495047
    1700:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1708 <__Stack_Size+0x1308>
    1704:	53550065 	cmppl	r5, #101	; 0x65
    1708:	5f545241 	svcpl	0x00545241
    170c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1710:	54534e49 	ldrbpl	r4, [r3], #-3657	; 0xe49
    1714:	5f52575f 	svcpl	0x0052575f
    1718:	544c4946 	strbpl	r4, [ip], #-2374	; 0x946
    171c:	64005248 	strvs	r5, [r0], #-584	; 0x248
    1720:	775f6c78 			; <UNDEFINED> instruction: 0x775f6c78
    1724:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    1728:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
    172c:	74730064 	ldrbtvc	r0, [r3], #-100	; 0x64
    1730:	5f747261 	svcpl	0x00747261
    1734:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0x974
    1738:	5f74756f 	svcpl	0x0074756f
    173c:	00756370 	rsbseq	r6, r5, r0, ror r3
    1740:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    1744:	5f6b6369 	svcpl	0x006b6369
    1748:	6f435449 	svcvs	0x00435449
    174c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1750:	69546e00 	ldmdbvs	r4, {r9, sl, fp, sp, lr}^
    1754:	5200656d 	andpl	r6, r0, #457179136	; 0x1b400000
    1758:	42646165 	rsbmi	r6, r4, #1073741849	; 0x40000019
    175c:	6f747475 	svcvs	0x00747475
    1760:	5047006e 	subpl	r0, r7, lr, rrx
    1764:	6f4d4f49 	svcvs	0x004d4f49
    1768:	545f6564 	ldrbpl	r6, [pc], #-1380	; 1770 <__Stack_Size+0x1370>
    176c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1770:	45006665 	strmi	r6, [r0, #-1637]	; 0x665
    1774:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    1778:	45003136 	strmi	r3, [r0, #-310]	; 0x136
    177c:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    1780:	55003536 	strpl	r3, [r0, #-1334]	; 0x536
    1784:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1788:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    178c:	70795474 	rsbsvc	r5, r9, r4, ror r4
    1790:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1794:	4f504500 	svcmi	0x00504500
    1798:	41365452 	teqmi	r6, r2, asr r4
    179c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    17a0:	72500065 	subsvc	r0, r0, #101	; 0x65
    17a4:	45746e69 	ldrbmi	r6, [r4, #-3689]!	; 0xe69
    17a8:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
    17ac:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xf43
    17b0:	6c786400 	cfldrdvs	mvd6, [r8], #-0
    17b4:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    17b8:	7078725f 	rsbsvc	r7, r8, pc, asr r2
    17bc:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    17c0:	61705f74 	cmnvs	r0, r4, ror pc
    17c4:	656d6172 	strbvs	r6, [sp, #-370]!	; 0x172
    17c8:	00726574 	rsbseq	r6, r2, r4, ror r5
    17cc:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
    17d0:	68387574 	ldmdavs	r8!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
    17d4:	43444100 	movtmi	r4, #16640	; 0x4100
    17d8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    17dc:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    17e0:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    17e4:	61566e6f 	cmpvs	r6, pc, ror #28
    17e8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    17ec:	5f6c7864 	svcpl	0x006c7864
    17f0:	78727874 	ldmdavc	r2!, {r2, r4, r5, r6, fp, ip, sp, lr}^
    17f4:	6361705f 	cmnvs	r1, #95	; 0x5f
    17f8:	0074656b 	rsbseq	r6, r4, fp, ror #10
    17fc:	54534e49 	ldrbpl	r4, [r3], #-3657	; 0xe49
    1800:	4e59535f 	mrcmi	3, 2, r5, cr9, cr15, {2}
    1804:	52575f43 	subspl	r5, r7, #268	; 0x10c
    1808:	00455449 	subeq	r5, r5, r9, asr #8
    180c:	4f495047 	svcmi	0x00495047
    1810:	6570535f 	ldrbvs	r5, [r0, #-863]!	; 0x35f
    1814:	325f6465 	subscc	r6, pc, #1694498816	; 0x65000000
    1818:	007a484d 	rsbseq	r4, sl, sp, asr #16
    181c:	4f495047 	svcmi	0x00495047
    1820:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
    1824:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1828:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    182c:	50470066 	subpl	r0, r7, r6, rrx
    1830:	505f4f49 	subspl	r4, pc, r9, asr #30
    1834:	64006e69 	strvs	r6, [r0], #-3689	; 0xe69
    1838:	675f6c78 			; <UNDEFINED> instruction: 0x675f6c78
    183c:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
    1840:	63617078 	cmnvs	r1, #120	; 0x78
    1844:	5f74656b 	svcpl	0x0074656b
    1848:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
    184c:	68006874 	stmdavs	r0, {r2, r4, r5, r6, fp, sp, lr}
    1850:	00646e61 	rsbeq	r6, r4, r1, ror #28
    1854:	6d754e6c 	ldclvs	14, cr4, [r5, #-432]!	; 0xfffffe50
    1858:	534e4900 	movtpl	r4, #59648	; 0xe900
    185c:	55425f54 	strbpl	r5, [r2, #-3924]	; 0xf54
    1860:	525f4b4c 	subspl	r4, pc, #77824	; 0x13000
    1864:	00444145 	subeq	r4, r4, r5, asr #2
    1868:	5f6c7864 	svcpl	0x006c7864
    186c:	5f746567 	svcpl	0x00746567
    1870:	62776f6c 	rsbsvs	r6, r7, #432	; 0x1b0
    1874:	00657479 	rsbeq	r7, r5, r9, ror r4
    1878:	5f434441 	svcpl	0x00434441
    187c:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xf53
    1880:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    1884:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    1888:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    188c:	646d4376 	strbtvs	r4, [sp], #-886	; 0x376
    1890:	75637000 	strbvc	r7, [r3, #-0]!
    1894:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0x5f
    1898:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    189c:	67006575 	smlsdxvs	r0, r5, r5, r6
    18a0:	756f436c 	strbvc	r4, [pc, #-876]!	; 153c <__Stack_Size+0x113c>
    18a4:	6f64746e 	svcvs	0x0064746e
    18a8:	6f436e77 	svcvs	0x00436e77
    18ac:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xe75
    18b0:	63700072 	cmnvs	r0, #114	; 0x72
    18b4:	61685f75 	smcvs	34293	; 0x85f5
    18b8:	706f5f6c 	rsbvc	r5, pc, ip, ror #30
    18bc:	62006e65 	andvs	r6, r0, #1616	; 0x650
    18c0:	44647854 	strbtmi	r7, [r4], #-2132	; 0x854
    18c4:	00617461 	rsbeq	r7, r1, r1, ror #8
    18c8:	5f756370 	svcpl	0x00756370
    18cc:	5f746567 	svcpl	0x00746567
    18d0:	61747371 	cmnvs	r4, r1, ror r3
    18d4:	47006574 	smlsdxmi	r0, r4, r5, r6
    18d8:	5f4f4950 	svcpl	0x004f4950
    18dc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    18e0:	5f4e495f 	svcpl	0x004e495f
    18e4:	414f4c46 	cmpmi	pc, r6, asr #24
    18e8:	474e4954 	smlsldmi	r4, lr, r4, r9
    18ec:	7a694700 	bvc	1a534f4 <__Stack_Size+0x1a530f4>
    18f0:	4a006f6d 	bmi	1d6ac <__Stack_Size+0x1d2ac>
    18f4:	3152464f 	cmpcc	r2, pc, asr #12
    18f8:	464f4a00 	strbmi	r4, [pc], -r0, lsl #20
    18fc:	4a003252 	bmi	e24c <__Stack_Size+0xde4c>
    1900:	3352464f 	cmpcc	r2, #82837504	; 0x4f00000
    1904:	464f4a00 	strbmi	r4, [pc], -r0, lsl #20
    1908:	67003452 	smlsdvs	r0, r2, r4, r3
    190c:	75635062 	strbvc	r5, [r3, #-98]!	; 0x62
    1910:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    1914:	55525400 	ldrbpl	r5, [r2, #-1024]	; 0x400
    1918:	58440045 	stmdapl	r4, {r0, r2, r6}^
    191c:	4b505f4c 	blmi	1419654 <__Stack_Size+0x1419254>
    1920:	454c5f54 	strbmi	r5, [ip, #-3924]	; 0xf54
    1924:	6267004e 	rsbvs	r0, r7, #78	; 0x4e
    1928:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    192c:	43726574 	cmnmi	r2, #486539264	; 0x1d000000
    1930:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1934:	414e4500 	cmpmi	lr, r0, lsl #10
    1938:	00454c42 	subeq	r4, r5, r2, asr #24
    193c:	54534e49 	ldrbpl	r4, [r3], #-3657	; 0xe49
    1940:	5f44525f 	svcpl	0x0044525f
    1944:	54474552 	strbpl	r4, [r7], #-1362	; 0x552
    1948:	70005248 	andvc	r5, r0, r8, asr #4
    194c:	6b636150 	blvs	18d9e94 <__Stack_Size+0x18d9a94>
    1950:	42007465 	andmi	r7, r0, #1694498816	; 0x65000000
    1954:	6f747475 	svcvs	0x00747475
    1958:	00655f6e 	rsbeq	r5, r5, lr, ror #30
    195c:	5f4c5844 	svcpl	0x004c5844
    1960:	5f544b50 	svcpl	0x00544b50
    1964:	41524150 	cmpmi	r2, r0, asr r1
    1968:	746f6e00 	strbtvc	r6, [pc], #-3584	; 1970 <__Stack_Size+0x1570>
    196c:	75420065 	strbvc	r0, [r2, #-101]	; 0x65
    1970:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    1974:	4200745f 	andmi	r7, r0, #1593835520	; 0x5f000000
    1978:	00525253 	subseq	r5, r2, r3, asr r2
    197c:	3152444a 	cmpcc	r2, sl, asr #8
    1980:	52444a00 	subpl	r4, r4, #0
    1984:	444a0032 	strbmi	r0, [sl], #-50	; 0x32
    1988:	4a003352 	bmi	e6d8 <__Stack_Size+0xe2d8>
    198c:	00345244 	eorseq	r5, r4, r4, asr #4
    1990:	54534e49 	ldrbpl	r4, [r3], #-3657	; 0xe49
    1994:	5359535f 	cmppl	r9, #2080374785	; 0x7c000001
    1998:	5f4d4554 	svcpl	0x004d4554
    199c:	54495257 	strbpl	r5, [r9], #-599	; 0x257
    19a0:	61620045 	cmnvs	r2, r5, asr #32
    19a4:	61726475 	cmnvs	r2, r5, ror r4
    19a8:	67006574 	smlsdxvs	r0, r4, r5, r6
    19ac:	61507062 	cmpvs	r0, r2, rrx
    19b0:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xb63
    19b4:	61746144 	cmnvs	r4, r4, asr #2
    19b8:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    19bc:	4a007265 	bmi	1e358 <__Stack_Size+0x1df58>
    19c0:	00525153 	subseq	r5, r2, r3, asr r1
    19c4:	44746567 	ldrbtmi	r6, [r4], #-1383	; 0x567
    19c8:	75434c58 	strbvc	r4, [r3, #-3160]	; 0xc58
    19cc:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    19d0:	6d655474 	cfstrdvs	mvd5, [r5, #-464]!	; 0xfffffe30
    19d4:	61726570 	cmnvs	r2, r0, ror r5
    19d8:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    19dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    19e0:	79545f4f 	ldmdbvc	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    19e4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    19e8:	78640066 	stmdavc	r4!, {r1, r2, r5, r6}^
    19ec:	65735f6c 	ldrbvs	r5, [r3, #-3948]!	; 0xf6c
    19f0:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    19f4:	6b636170 	blvs	18d9fbc <__Stack_Size+0x18d9bbc>
    19f8:	705f7465 	subsvc	r7, pc, r5, ror #8
    19fc:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    1a00:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    1a04:	75637000 	strbvc	r7, [r3, #-0]!
    1a08:	6c61685f 	stclvs	8, cr6, [r1], #-380	; 0xfffffe84
    1a0c:	7465735f 	strbtvc	r7, [r5], #-863	; 0x35f
    1a10:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    1a14:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    1a18:	626f7200 	rsbvs	r7, pc, #0
    1a1c:	6700746f 	strvs	r7, [r0, -pc, ror #8]
    1a20:	6c784462 	cfldrdvs	mvd4, [r8], #-392	; 0xfffffe78
    1a24:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    1a28:	41535500 	cmpmi	r3, r0, lsl #10
    1a2c:	445f5452 	ldrbmi	r5, [pc], #-1106	; 1a34 <__Stack_Size+0x1634>
    1a30:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    1a34:	44410074 	strbmi	r0, [r1], #-116	; 0x74
    1a38:	6f4d5f43 	svcvs	0x004d5f43
    1a3c:	67006564 	strvs	r6, [r0, -r4, ror #10]
    1a40:	58447465 	stmdapl	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1a44:	6174534c 	cmnvs	r4, ip, asr #6
    1a48:	00737574 	rsbseq	r7, r3, r4, ror r5
    1a4c:	4f495047 	svcmi	0x00495047
    1a50:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    1a54:	73746942 	cmnvc	r4, #1081344	; 0x108000
    1a58:	73614500 	cmnvc	r1, #0
    1a5c:	6f504579 	svcvs	0x00504579
    1a60:	52007472 	andpl	r7, r0, #1912602624	; 0x72000000
    1a64:	546c6165 	strbtpl	r6, [ip], #-357	; 0x165
    1a68:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
    1a6c:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0x942
    1a70:	43444100 	movtmi	r4, #16640	; 0x4100
    1a74:	72624e5f 	rsbvc	r4, r2, #1520	; 0x5f0
    1a78:	6843664f 	stmdavs	r3, {r0, r1, r2, r3, r6, r9, sl, sp, lr}^
    1a7c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    1a80:	7453006c 	ldrbvc	r0, [r3], #-108	; 0x6c
    1a84:	54747261 	ldrbtpl	r7, [r4], #-609	; 0x261
    1a88:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1a8c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1a90:	61485f54 	cmpvs	r8, r4, asr pc
    1a94:	61776472 	cmnvs	r7, r2, ror r4
    1a98:	6c466572 	cfstr64vs	mvdx6, [r6], {114}	; 0x72
    1a9c:	6f43776f 	svcvs	0x0043776f
    1aa0:	6f72746e 	svcvs	0x0072746e
    1aa4:	6573006c 	ldrbvs	r0, [r3, #-108]!	; 0x6c
    1aa8:	44454c74 	strbmi	r4, [r5], #-3188	; 0xc74
    1aac:	65470073 	strbvs	r0, [r7, #-115]	; 0x73
    1ab0:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    1ab4:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1ab8:	47746573 			; <UNDEFINED> instruction: 0x47746573
    1abc:	6f6d7a69 	svcvs	0x006d7a69
    1ac0:	7466654c 	strbtvc	r6, [r6], #-1356	; 0x54c
    1ac4:	006d7241 	rsbeq	r7, sp, r1, asr #4
    1ac8:	44746567 	ldrbtmi	r6, [r4], #-1383	; 0x567
    1acc:	6f474c58 	svcvs	0x00474c58
    1ad0:	6f506c61 	svcvs	0x00506c61
    1ad4:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    1ad8:	64006e6f 	strvs	r6, [r0], #-3695	; 0xe6f
    1adc:	675f6c78 			; <UNDEFINED> instruction: 0x675f6c78
    1ae0:	685f7465 	ldmdavs	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    1ae4:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    1ae8:	00657479 	rsbeq	r7, r5, r9, ror r4
    1aec:	6f626c65 	svcvs	0x00626c65
    1af0:	72700077 	rsbsvc	r0, r0, #119	; 0x77
    1af4:	53746e69 	cmnpl	r4, #1680	; 0x690
    1af8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1afc:	50470067 	subpl	r0, r7, r7, rrx
    1b00:	535f4f49 	cmppl	pc, #292	; 0x124
    1b04:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
    1b08:	4d30315f 	ldfmis	f3, [r0, #-380]!	; 0xfffffe84
    1b0c:	4e007a48 	vmlsmi.f32	s14, s0, s16
    1b10:	5f434956 	svcpl	0x00434956
    1b14:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1b18:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1b1c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1b20:	75426c67 	strbvc	r6, [r2, #-3175]	; 0xc67
    1b24:	72657a7a 	rsbvc	r7, r5, #499712	; 0x7a000
    1b28:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1b2c:	00726574 	rsbseq	r6, r2, r4, ror r5
    1b30:	5f434441 	svcpl	0x00434441
    1b34:	75727453 	ldrbvc	r7, [r2, #-1107]!	; 0x453
    1b38:	6e497463 	cdpvs	4, 4, cr7, cr9, cr3, {3}
    1b3c:	45007469 	strmi	r7, [r0, #-1129]	; 0x469
    1b40:	54524f50 	ldrbpl	r4, [r2], #-3920	; 0xf50
    1b44:	76003533 			; <UNDEFINED> instruction: 0x76003533
    1b48:	00746c6f 	rsbseq	r6, r4, pc, ror #24
    1b4c:	5f6c7864 	svcpl	0x006c7864
    1b50:	656b616d 	strbvs	r6, [fp, #-365]!	; 0x16d
    1b54:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xf77
    1b58:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    1b5c:	69440070 	stmdbvs	r4, {r4, r5, r6}^
    1b60:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1b64:	41535565 	cmpmi	r3, r5, ror #10
    1b68:	00315452 	eorseq	r5, r1, r2, asr r4
    1b6c:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
    1b70:	58440054 	stmdapl	r4, {r2, r4, r6}^
    1b74:	4b505f4c 	blmi	14198ac <__Stack_Size+0x14194ac>
    1b78:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1b7c:	52005453 	andpl	r5, r0, #1392508928	; 0x53000000
    1b80:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    1b84:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    1b88:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    1b8c:	00676966 	rsbeq	r6, r7, r6, ror #18
    1b90:	64756142 	ldrbtvs	r6, [r5], #-322	; 0x142
    1b94:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0x172
    1b98:	5543505f 	strbpl	r5, [r3, #-95]	; 0x5f
    1b9c:	75637000 	strbvc	r7, [r3, #-0]!
    1ba0:	7465675f 	strbtvc	r6, [r5], #-1887	; 0x75f
    1ba4:	6575715f 	ldrbvs	r7, [r5, #-351]!	; 0x15f
    1ba8:	52006575 	andpl	r6, r0, #490733568	; 0x1d400000
    1bac:	505f4343 	subspl	r4, pc, r3, asr #6
    1bb0:	6f434c4c 	svcvs	0x00434c4c
    1bb4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1bb8:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
    1bbc:	434c5844 	movtmi	r5, #51268	; 0xc844
    1bc0:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
    1bc4:	6f50746e 	svcvs	0x0050746e
    1bc8:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    1bcc:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
    1bd0:	5f4f4950 	svcpl	0x004f4950
    1bd4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1bd8:	4450495f 	ldrbmi	r4, [r0], #-2399	; 0x95f
    1bdc:	43444100 	movtmi	r4, #16640	; 0x4100
    1be0:	6d740078 	ldclvs	0, cr0, [r4, #-480]!	; 0xfffffe20
    1be4:	67657270 			; <UNDEFINED> instruction: 0x67657270
    1be8:	44410031 	strbmi	r0, [r1], #-49	; 0x31
    1bec:	6e415f43 	cdpvs	15, 4, cr5, cr1, cr3, {2}
    1bf0:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
    1bf4:	63746157 	cmnvs	r4, #-1073741803	; 0xc0000015
    1bf8:	676f6468 	strbvs	r6, [pc, -r8, ror #8]!
    1bfc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1c00:	5f434441 	svcpl	0x00434441
    1c04:	6f435449 	svcvs	0x00435449
    1c08:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1c0c:	43444100 	movtmi	r4, #16640	; 0x4100
    1c10:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1c14:	74666f53 	strbtvc	r6, [r6], #-3923	; 0xf53
    1c18:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    1c1c:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    1c20:	6a6e4974 	bvs	1b941f8 <__Stack_Size+0x1b93df8>
    1c24:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0x365
    1c28:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1c2c:	646d4376 	strbtvs	r4, [sp], #-886	; 0x376
    1c30:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1c34:	4c007375 	stcmi	3, cr7, [r0], {117}	; 0x75
    1c38:	6854776f 	ldmdavs	r4, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    1c3c:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1c40:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    1c44:	5f434441 	svcpl	0x00434441
    1c48:	61656c43 	cmnvs	r5, r3, asr #24
    1c4c:	616c4672 	smcvs	50274	; 0xc462
    1c50:	44410067 	strbmi	r0, [r1], #-103	; 0x67
    1c54:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    1c58:	53544974 	cmppl	r4, #1900544	; 0x1d0000
    1c5c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1c60:	74730073 	ldrbtvc	r0, [r3], #-115	; 0x73
    1c64:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    1c68:	5f783031 	svcpl	0x00783031
    1c6c:	2f62696c 	svccs	0x0062696c
    1c70:	2f637273 	svccs	0x00637273
    1c74:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    1c78:	30316632 	eorscc	r6, r1, r2, lsr r6
    1c7c:	64615f78 	strbtvs	r5, [r1], #-3960	; 0xf78
    1c80:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1c84:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
    1c88:	41007265 	tstmi	r0, r5, ror #4
    1c8c:	495f4344 	ldmdbmi	pc, {r2, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1c90:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1c94:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    1c98:	44410074 	strbmi	r0, [r1], #-116	; 0x74
    1c9c:	6e415f43 	cdpvs	15, 4, cr5, cr1, cr3, {2}
    1ca0:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
    1ca4:	63746157 	cmnvs	r4, #-1073741803	; 0xc0000015
    1ca8:	676f6468 	strbvs	r6, [pc, -r8, ror #8]!
    1cac:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0x854
    1cb0:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 1aec <__Stack_Size+0x16ec>
    1cb4:	6f437364 	svcvs	0x00437364
    1cb8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1cbc:	43444100 	movtmi	r4, #16640	; 0x4100
    1cc0:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    1cc4:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    1cc8:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    1ccc:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    1cd0:	41007469 	tstmi	r0, r9, ror #8
    1cd4:	465f4344 	ldrbmi	r4, [pc], -r4, asr #6
    1cd8:	0047414c 	subeq	r4, r7, ip, asr #2
    1cdc:	5f434441 	svcpl	0x00434441
    1ce0:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    1ce4:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
    1ce8:	53657261 	cmnpl	r5, #268435462	; 0x10000006
    1cec:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    1cf0:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    1cf4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1cf8:	4e007375 	mcrmi	3, 0, r7, cr0, cr5, {3}
    1cfc:	74537765 	ldrbvc	r7, [r3], #-1893	; 0x765
    1d00:	00657461 	rsbeq	r7, r5, r1, ror #8
    1d04:	5f434441 	svcpl	0x00434441
    1d08:	6c616e41 	stclvs	14, cr6, [r1], #-260	; 0xfffffefc
    1d0c:	6157676f 	cmpvs	r7, pc, ror #14
    1d10:	64686374 	strbtvs	r6, [r8], #-884	; 0x374
    1d14:	6953676f 	ldmdbvs	r3, {r0, r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1d18:	656c676e 	strbvs	r6, [ip, #-1902]!	; 0x76e
    1d1c:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1d20:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
    1d24:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1d28:	6e650067 	cdpvs	0, 6, cr0, cr5, cr7, {3}
    1d2c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
    1d30:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    1d34:	48007375 	stmdami	r0, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    1d38:	54686769 	strbtpl	r6, [r8], #-1897	; 0x769
    1d3c:	73657268 	cmnvc	r5, #-2147483642	; 0x80000006
    1d40:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xf68
    1d44:	43444100 	movtmi	r4, #16640	; 0x4100
    1d48:	7369445f 	cmnvc	r9, #1593835520	; 0x5f000000
    1d4c:	646f4d63 	strbtvs	r4, [pc], #-3427	; 1d54 <__Stack_Size+0x1954>
    1d50:	61684365 	cmnvs	r8, r5, ror #6
    1d54:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1d58:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1d5c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1d60:	00676966 	rsbeq	r6, r7, r6, ror #18
    1d64:	72706d74 	rsbsvc	r6, r0, #7424	; 0x1d00
    1d68:	52006765 	andpl	r6, r0, #26476544	; 0x1940000
    1d6c:	006b6e61 	rsbeq	r6, fp, r1, ror #28
    1d70:	5f434441 	svcpl	0x00434441
    1d74:	6f747541 	svcvs	0x00747541
    1d78:	656a6e49 	strbvs	r6, [sl, #-3657]!	; 0xe49
    1d7c:	64657463 	strbtvs	r7, [r5], #-1123	; 0x463
    1d80:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    1d84:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1d88:	5f434441 	svcpl	0x00434441
    1d8c:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0x845
    1d90:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1d94:	67697254 			; <UNDEFINED> instruction: 0x67697254
    1d98:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    1d9c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1da0:	5f434441 	svcpl	0x00434441
    1da4:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1da8:	63656a6e 	cmnvs	r5, #450560	; 0x6e000
    1dac:	4f646574 	svcmi	0x00646574
    1db0:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0x666
    1db4:	44410074 	strbmi	r0, [r1], #-116	; 0x74
    1db8:	65445f43 	strbvs	r5, [r4, #-3907]	; 0xf43
    1dbc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1dc0:	43444100 	movtmi	r4, #16640	; 0x4100
    1dc4:	7478455f 	ldrbtvc	r4, [r8], #-1375	; 0x55f
    1dc8:	616e7265 	cmnvs	lr, r5, ror #4
    1dcc:	6972546c 	ldmdbvs	r2!, {r2, r3, r5, r6, sl, ip, lr}^
    1dd0:	6a6e4967 	bvs	1b94374 <__Stack_Size+0x1b93f74>
    1dd4:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0x365
    1dd8:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1ddc:	646d4376 	strbtvs	r4, [sp], #-886	; 0x376
    1de0:	43444100 	movtmi	r4, #16640	; 0x4100
    1de4:	6a6e495f 	bvs	1b94368 <__Stack_Size+0x1b93f68>
    1de8:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0x365
    1dec:	73694464 	cmnvc	r9, #1677721600	; 0x64000000
    1df0:	646f4d63 	strbtvs	r4, [pc], #-3427	; 1df8 <__Stack_Size+0x19f8>
    1df4:	646d4365 	strbtvs	r4, [sp], #-869	; 0x365
    1df8:	43444100 	movtmi	r4, #16640	; 0x4100
    1dfc:	7478455f 	ldrbtvc	r4, [r8], #-1375	; 0x55f
    1e00:	616e7265 	cmnvs	lr, r5, ror #4
    1e04:	6972546c 	ldmdbvs	r2!, {r2, r3, r5, r6, sl, ip, lr}^
    1e08:	6a6e4967 	bvs	1b943ac <__Stack_Size+0x1b93fac>
    1e0c:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0x365
    1e10:	6e6f4364 	cdpvs	3, 6, cr4, cr15, cr4, {3}
    1e14:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
    1e18:	00676966 	rsbeq	r6, r7, r6, ror #18
    1e1c:	5f434441 	svcpl	0x00434441
    1e20:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1e24:	006c656e 	rsbeq	r6, ip, lr, ror #10
    1e28:	5f434352 	svcpl	0x00434352
    1e2c:	32425041 	subcc	r5, r2, #65	; 0x41
    1e30:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1e34:	65526870 	ldrbvs	r6, [r2, #-2160]	; 0x870
    1e38:	43746573 	cmnmi	r4, #482344960	; 0x1cc00000
    1e3c:	7400646d 	strvc	r6, [r0], #-1133	; 0x46d
    1e40:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0x6d
    1e44:	74003267 	strvc	r3, [r0], #-615	; 0x267
    1e48:	6572706d 	ldrbvs	r7, [r2, #-109]!	; 0x6d
    1e4c:	62003367 	andvs	r3, r0, #-1677721599	; 0x9c000001
    1e50:	74737469 	ldrbtvc	r7, [r3], #-1129	; 0x469
    1e54:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1e58:	43444100 	movtmi	r4, #16640	; 0x4100
    1e5c:	6a6e495f 	bvs	1b943e0 <__Stack_Size+0x1b93fe0>
    1e60:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0x365
    1e64:	71655364 	cmnvc	r5, r4, ror #6
    1e68:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    1e6c:	654c7265 	strbvs	r7, [ip, #-613]	; 0x265
    1e70:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1e74:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e78:	41006769 	tstmi	r0, r9, ror #14
    1e7c:	415f4344 	cmpmi	pc, r4, asr #6
    1e80:	6f6c616e 	svcvs	0x006c616e
    1e84:	74615767 	strbtvc	r5, [r1], #-1895	; 0x767
    1e88:	6f646863 	svcvs	0x00646863
    1e8c:	44410067 	strbmi	r0, [r1], #-103	; 0x67
    1e90:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
    1e94:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    1e98:	68436465 	stmdavs	r3, {r0, r2, r5, r6, sl, sp, lr}^
    1e9c:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
    1ea0:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    1ea4:	00676966 	rsbeq	r6, r7, r6, ror #18
    1ea8:	5f434441 	svcpl	0x00434441
    1eac:	706d6153 	rsbvc	r6, sp, r3, asr r1
    1eb0:	6954656c 	ldmdbvs	r4, {r2, r3, r5, r6, r8, sl, sp, lr}^
    1eb4:	4100656d 	tstmi	r0, sp, ror #10
    1eb8:	535f4344 	cmppl	pc, #268435457	; 0x10000001
    1ebc:	7774666f 	ldrbvc	r6, [r4, -pc, ror #12]!
    1ec0:	53657261 	cmnpl	r5, #268435462	; 0x10000006
    1ec4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    1ec8:	656a6e49 	strbvs	r6, [sl, #-3657]!	; 0xe49
    1ecc:	64657463 	strbtvs	r7, [r5], #-1123	; 0x463
    1ed0:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    1ed4:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1ed8:	5f434441 	svcpl	0x00434441
    1edc:	656a6e49 	strbvs	r6, [sl, #-3657]!	; 0xe49
    1ee0:	64657463 	strbtvs	r7, [r5], #-1123	; 0x463
    1ee4:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    1ee8:	006c656e 	rsbeq	r6, ip, lr, ror #10
    1eec:	5f434441 	svcpl	0x00434441
    1ef0:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    1ef4:	5367616c 	cmnpl	r7, #27
    1ef8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1efc:	44410073 	strbmi	r0, [r1], #-115	; 0x73
    1f00:	65545f43 	ldrbvs	r5, [r4, #-3907]	; 0xf43
    1f04:	6553706d 	ldrbvs	r7, [r3, #-109]	; 0x6d
    1f08:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    1f0c:	66657256 			; <UNDEFINED> instruction: 0x66657256
    1f10:	43746e69 	cmnmi	r4, #1680	; 0x690
    1f14:	4100646d 	tstmi	r0, sp, ror #8
    1f18:	445f4344 	ldrbmi	r4, [pc], #-836	; 1f20 <__Stack_Size+0x1b20>
    1f1c:	4d637369 	stclmi	3, cr7, [r3, #-420]!	; 0xfffffe5c
    1f20:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1f24:	4100646d 	tstmi	r0, sp, ror #8
    1f28:	475f4344 	ldrbmi	r4, [pc, -r4, asr #6]
    1f2c:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
    1f30:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
    1f34:	6f436465 	svcvs	0x00436465
    1f38:	7265766e 	rsbvc	r7, r5, #115343360	; 0x6e00000
    1f3c:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    1f40:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
    1f44:	44410065 	strbmi	r0, [r1], #-101	; 0x65
    1f48:	54495f43 	strbpl	r5, [r9], #-3907	; 0xf43
    1f4c:	6d746900 	ldclvs	9, cr6, [r4, #-0]
    1f50:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1f54:	5f434441 	svcpl	0x00434441
    1f58:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0x845
    1f5c:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
    1f60:	67697254 			; <UNDEFINED> instruction: 0x67697254
    1f64:	656a6e49 	strbvs	r6, [sl, #-3657]!	; 0xe49
    1f68:	6e6f4363 	cdpvs	3, 6, cr4, cr15, cr3, {3}
    1f6c:	44410076 	strbmi	r0, [r1], #-118	; 0x76
    1f70:	4d445f43 	stclmi	15, cr5, [r4, #-268]	; 0xfffffef4
    1f74:	646d4341 	strbtvs	r4, [sp], #-833	; 0x341
    1f78:	43444100 	movtmi	r4, #16640	; 0x4100
    1f7c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1f80:	6c617544 	cfstr64vs	mvdx7, [r1], #-272	; 0xfffffef0
    1f84:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1f88:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    1f8c:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1f90:	61566e6f 	cmpvs	r6, pc, ror #28
    1f94:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1f98:	53414c46 	movtpl	r4, #7238	; 0x1c46
    1f9c:	54495f48 	strbpl	r5, [r9], #-3912	; 0xf48
    1fa0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1fa4:	57006769 	strpl	r6, [r0, -r9, ror #14]
    1fa8:	5f325052 	svcpl	0x00325052
    1fac:	61746144 	cmnvs	r4, r4, asr #2
    1fb0:	5f424f00 	svcpl	0x00424f00
    1fb4:	504f5453 	subpl	r5, pc, r3, asr r4	; <UNPREDICTABLE>
    1fb8:	414c4600 	cmpmi	ip, r0, lsl #12
    1fbc:	455f4853 	ldrbmi	r4, [pc, #-2131]	; 1771 <__Stack_Size+0x1371>
    1fc0:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
    1fc4:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    1fc8:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1fcc:	00736574 	rsbseq	r6, r3, r4, ror r5
    1fd0:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
    1fd4:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    1fd8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1fdc:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    1fe0:	5f485341 	svcpl	0x00485341
    1fe4:	4f525245 	svcmi	0x00525245
    1fe8:	52575f52 	subspl	r5, r7, #328	; 0x148
    1fec:	4c460050 	mcrrmi	0, 5, r0, r6, cr0
    1ff0:	5f485341 	svcpl	0x00485341
    1ff4:	73617245 	cmnvc	r1, #1342177284	; 0x50000004
    1ff8:	67615065 	strbvs	r5, [r1, -r5, rrx]!
    1ffc:	4c460065 	mcrrmi	0, 6, r0, r6, cr5
    2000:	5f485341 	svcpl	0x00485341
    2004:	6574614c 	ldrbvs	r6, [r4, #-332]!	; 0x14c
    2008:	0079636e 	rsbseq	r6, r9, lr, ror #6
    200c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2010:	65475f48 	strbvs	r5, [r7, #-3912]	; 0xf48
    2014:	65725074 	ldrbvs	r5, [r2, #-116]!	; 0x74
    2018:	63746566 	cmnvs	r4, #427819008	; 0x19800000
    201c:	66754268 	ldrbtvs	r4, [r5], -r8, ror #4
    2020:	53726566 	cmnpl	r2, #427819008	; 0x19800000
    2024:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2028:	65640073 	strbvs	r0, [r4, #-115]!	; 0x73
    202c:	0079616c 	rsbseq	r6, r9, ip, ror #2
    2030:	52505257 	subspl	r5, r0, #1879048197	; 0x70000005
    2034:	414c4600 	cmpmi	ip, r0, lsl #12
    2038:	555f4853 	ldrbpl	r4, [pc, #-2131]	; 17ed <__Stack_Size+0x13ed>
    203c:	636f6c6e 	cmnvs	pc, #28160	; 0x6e00
    2040:	4c46006b 	mcrrmi	0, 6, r0, r6, cr11
    2044:	5f485341 	svcpl	0x00485341
    2048:	73617245 	cmnvc	r1, #1342177284	; 0x50000004
    204c:	6c6c4165 	stfvse	f4, [ip], #-404	; 0xfffffe6c
    2050:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
    2054:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    2058:	5f485341 	svcpl	0x00485341
    205c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    2060:	57007375 	smlsdxpl	r0, r5, r3, r7
    2064:	00305052 	eorseq	r5, r0, r2, asr r0
    2068:	31505257 	cmpcc	r0, r7, asr r2
    206c:	50525700 	subspl	r5, r2, r0, lsl #14
    2070:	52570032 	subspl	r0, r7, #50	; 0x32
    2074:	46003350 			; <UNDEFINED> instruction: 0x46003350
    2078:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    207c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    2080:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
    2084:	6f725065 	svcvs	0x00725065
    2088:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    208c:	4f6e6f69 	svcmi	0x006e6f69
    2090:	6f697470 	svcvs	0x00697470
    2094:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0x26e
    2098:	504f0065 	subpl	r0, pc, r5, rrx
    209c:	59454b54 	stmdbpl	r5, {r2, r4, r6, r8, r9, fp, lr}^
    20a0:	4c460052 	mcrrmi	0, 5, r0, r6, cr2
    20a4:	5f485341 	svcpl	0x00485341
    20a8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    20ac:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
    20b0:	79426e6f 	stmdbvc	r2, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    20b4:	6f436574 	svcvs	0x00436574
    20b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    20bc:	5f424f00 	svcpl	0x00424f00
    20c0:	47445749 	strbmi	r5, [r4, -r9, asr #14]
    20c4:	414c4600 	cmpmi	ip, r0, lsl #12
    20c8:	525f4853 	subspl	r4, pc, #5439488	; 0x530000
    20cc:	4f646165 	svcmi	0x00646165
    20d0:	72507475 	subsvc	r7, r0, #1962934272	; 0x75000000
    20d4:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    20d8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    20dc:	616c6600 	cmnvs	ip, r0, lsl #12
    20e0:	74736873 	ldrbtvc	r6, [r3], #-2163	; 0x873
    20e4:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    20e8:	67615000 	strbvs	r5, [r1, -r0]!
    20ec:	64415f65 	strbvs	r5, [r1], #-3941	; 0xf65
    20f0:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    20f4:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    20f8:	5f485341 	svcpl	0x00485341
    20fc:	4f525245 	svcmi	0x00525245
    2100:	47505f52 			; <UNDEFINED> instruction: 0x47505f52
    2104:	414c4600 	cmpmi	ip, r0, lsl #12
    2108:	4c5f4853 	mrrcmi	8, 5, r4, pc, cr3	; <UNPREDICTABLE>
    210c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    2110:	33505257 	cmpcc	r0, #1879048197	; 0x70000005
    2114:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
    2118:	74730061 	ldrbtvc	r0, [r3], #-97	; 0x61
    211c:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2120:	5f783031 	svcpl	0x00783031
    2124:	2f62696c 	svccs	0x0062696c
    2128:	2f637273 	svccs	0x00637273
    212c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2130:	30316632 	eorscc	r6, r1, r2, lsr r6
    2134:	6c665f78 	stclvs	15, cr5, [r6], #-480	; 0xfffffe20
    2138:	2e687361 	cdpcs	3, 6, cr7, cr8, cr1, {3}
    213c:	4c460063 	mcrrmi	0, 6, r0, r6, cr3
    2140:	5f485341 	svcpl	0x00485341
    2144:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    2148:	5367616c 	cmnpl	r7, #27
    214c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2150:	4c460073 	mcrrmi	0, 7, r0, r6, cr3
    2154:	5f485341 	svcpl	0x00485341
    2158:	61656c43 	cmnvs	r5, r3, asr #24
    215c:	616c4672 	smcvs	50274	; 0xc462
    2160:	4c460067 	mcrrmi	0, 6, r0, r6, cr7
    2164:	5f485341 	svcpl	0x00485341
    2168:	59535542 	ldmdbpl	r3, {r1, r6, r8, sl, ip, lr}^
    216c:	50525700 	subspl	r5, r2, r0, lsl #14
    2170:	61445f31 	cmpvs	r4, r1, lsr pc
    2174:	46006174 			; <UNDEFINED> instruction: 0x46006174
    2178:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    217c:	4d49545f 	cfstrdmi	mvd5, [r9, #-380]	; 0xfffffe84
    2180:	54554f45 	ldrbpl	r4, [r5], #-3909	; 0xf45
    2184:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
    2188:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    218c:	414c4600 	cmpmi	ip, r0, lsl #12
    2190:	475f4853 			; <UNDEFINED> instruction: 0x475f4853
    2194:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0x465
    2198:	754f6461 	strbvc	r6, [pc, #-1121]	; 1d3f <__Stack_Size+0x193f>
    219c:	6f725074 	svcvs	0x00725074
    21a0:	74636574 	strbtvc	r6, [r3], #-1396	; 0x574
    21a4:	536e6f69 	cmnpl	lr, #420	; 0x1a4
    21a8:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    21ac:	424f0073 	submi	r0, pc, #115	; 0x73
    21b0:	4454535f 	ldrbmi	r5, [r4], #-863	; 0x35f
    21b4:	46005942 	strmi	r5, [r0], -r2, asr #18
    21b8:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    21bc:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2048 <__Stack_Size+0x1c48>
    21c0:	54454c50 	strbpl	r4, [r5], #-3152	; 0xc50
    21c4:	4c460045 	mcrrmi	0, 4, r0, r6, cr5
    21c8:	5f485341 	svcpl	0x00485341
    21cc:	666c6148 	strbtvs	r6, [ip], -r8, asr #2
    21d0:	6c637943 	stclvs	9, cr7, [r3], #-268	; 0xfffffef4
    21d4:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    21d8:	00737365 	rsbseq	r7, r3, r5, ror #6
    21dc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    21e0:	65475f48 	strbvs	r5, [r7, #-3912]	; 0xf48
    21e4:	61745374 	cmnvs	r4, r4, ror r3
    21e8:	00737574 	rsbseq	r7, r3, r4, ror r5
    21ec:	545f424f 	ldrbpl	r4, [pc], #-591	; 21f4 <__Stack_Size+0x1df4>
    21f0:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    21f4:	57006665 	strpl	r6, [r0, -r5, ror #12]
    21f8:	5f305052 	svcpl	0x00305052
    21fc:	61746144 	cmnvs	r4, r4, asr #2
    2200:	414c4600 	cmpmi	ip, r0, lsl #12
    2204:	485f4853 	ldmdami	pc, {r0, r1, r4, r6, fp, lr}^	; <UNPREDICTABLE>
    2208:	43666c61 	cmnmi	r6, #24832	; 0x6100
    220c:	656c6379 	strbvs	r6, [ip, #-889]!	; 0x379
    2210:	65636341 	strbvs	r6, [r3, #-833]!	; 0x341
    2214:	6d437373 	stclvs	3, cr7, [r3, #-460]	; 0xfffffe34
    2218:	4c460064 	mcrrmi	0, 6, r0, r6, cr4
    221c:	5f485341 	svcpl	0x00485341
    2220:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
    2224:	4f6d6172 	svcmi	0x006d6172
    2228:	6f697470 	svcvs	0x00697470
    222c:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0x26e
    2230:	74614465 	strbtvc	r4, [r1], #-1125	; 0x465
    2234:	4c460061 	mcrrmi	0, 6, r0, r6, cr1
    2238:	5f485341 	svcpl	0x00485341
    223c:	55746547 	ldrbpl	r6, [r4, #-1351]!	; 0x547
    2240:	4f726573 	svcmi	0x00726573
    2244:	6f697470 	svcvs	0x00697470
    2248:	7479426e 	ldrbtvc	r4, [r9], #-622	; 0x26e
    224c:	4c460065 	mcrrmi	0, 6, r0, r6, cr5
    2250:	5f485341 	svcpl	0x00485341
    2254:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
    2258:	486d6172 	stmdami	sp!, {r1, r4, r5, r6, r8, sp, lr}^
    225c:	57666c61 	strbpl	r6, [r6, -r1, ror #24]!
    2260:	0064726f 	rsbeq	r7, r4, pc, ror #4
    2264:	53414c46 	movtpl	r4, #7238	; 0x1c46
    2268:	4c465f48 	mcrrmi	15, 4, r5, r6, cr8
    226c:	46004741 	strmi	r4, [r0], -r1, asr #14
    2270:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    2274:	616e455f 	cmnvs	lr, pc, asr r5
    2278:	57656c62 	strbpl	r6, [r5, -r2, ror #24]!
    227c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    2280:	746f7250 	strbtvc	r7, [pc], #-592	; 2288 <__Stack_Size+0x1e88>
    2284:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2288:	55006e6f 	strpl	r6, [r0, #-3695]	; 0xe6f
    228c:	00524553 	subseq	r4, r2, r3, asr r5
    2290:	61746144 	cmnvs	r4, r4, asr #2
    2294:	61440030 	cmpvs	r4, r0, lsr r0
    2298:	00316174 	eorseq	r6, r1, r4, ror r1
    229c:	53414c46 	movtpl	r4, #7238	; 0x1c46
    22a0:	61505f48 	cmpvs	r0, r8, asr #30
    22a4:	00736567 	rsbseq	r6, r3, r7, ror #10
    22a8:	53414c46 	movtpl	r4, #7238	; 0x1c46
    22ac:	54495f48 	strbpl	r5, [r9], #-3912	; 0xf48
    22b0:	414c4600 	cmpmi	ip, r0, lsl #12
    22b4:	505f4853 	subspl	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    22b8:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    22bc:	6f576d61 	svcvs	0x00576d61
    22c0:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
    22c4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    22c8:	00444556 	subeq	r4, r4, r6, asr r5
    22cc:	53414c46 	movtpl	r4, #7238	; 0x1c46
    22d0:	79545f48 	ldmdbvc	r4, {r3, r6, r8, r9, sl, fp, ip, lr}^
    22d4:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    22d8:	4c460066 	mcrrmi	0, 6, r0, r6, cr6
    22dc:	5f485341 	svcpl	0x00485341
    22e0:	74696157 	strbtvc	r6, [r9], #-343	; 0x157
    22e4:	4c726f46 	ldclmi	15, cr6, [r2], #-280	; 0xfffffee8
    22e8:	4f747361 	svcmi	0x00747361
    22ec:	61726570 	cmnvs	r2, r0, ror r5
    22f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    22f4:	414c4600 	cmpmi	ip, r0, lsl #12
    22f8:	505f4853 	subspl	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    22fc:	65666572 	strbvs	r6, [r6, #-1394]!	; 0x572
    2300:	42686374 	rsbmi	r6, r8, #-805306367	; 0xd0000001
    2304:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    2308:	69700072 	ldmdbvs	r0!, {r1, r4, r5, r6}^
    230c:	736f706e 	cmnvc	pc, #110	; 0x6e
    2310:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
    2314:	5445535f 	strbpl	r5, [r5], #-863	; 0x35f
    2318:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    231c:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
    2320:	754f6461 	strbvc	r6, [pc, #-1121]	; 1ec7 <__Stack_Size+0x1ac7>
    2324:	74757074 	ldrbtvc	r7, [r5], #-116	; 0x74
    2328:	61746144 	cmnvs	r4, r4, asr #2
    232c:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    2330:	76455f4f 	strbvc	r5, [r5], -pc, asr #30
    2334:	4f746e65 	svcmi	0x00746e65
    2338:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
    233c:	646d4374 	strbtvs	r4, [sp], #-884	; 0x374
    2340:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
    2344:	006c6156 	rsbeq	r6, ip, r6, asr r1
    2348:	5f746942 	svcpl	0x00746942
    234c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    2350:	50470054 	subpl	r0, r7, r4, asr r0
    2354:	575f4f49 	ldrbpl	r4, [pc, -r9, asr #30]
    2358:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0x972
    235c:	00746942 	rsbseq	r6, r4, r2, asr #18
    2360:	49545845 	ldmdbmi	r4, {r0, r2, r6, fp, ip, lr}^
    2364:	73005243 	movwvc	r5, #579	; 0x243
    2368:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    236c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2370:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    2374:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    2378:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    237c:	31663233 	cmncc	r6, r3, lsr r2
    2380:	675f7830 	smmlarvs	pc, r0, r8, r7	; <UNPREDICTABLE>
    2384:	2e6f6970 	mcrcs	9, 3, r6, cr15, cr0, {3}
    2388:	69700063 	ldmdbvs	r0!, {r0, r1, r5, r6}^
    238c:	73616d6e 	cmnvc	r1, #7040	; 0x1b80
    2390:	5047006b 	subpl	r0, r7, fp, rrx
    2394:	505f4f49 	subspl	r4, pc, r9, asr #30
    2398:	5374726f 	cmnpl	r4, #-268435450	; 0xf0000006
    239c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    23a0:	50470065 	subpl	r0, r7, r5, rrx
    23a4:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 23ac <__Stack_Size+0x1fac>
    23a8:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    23ac:	50470074 	subpl	r0, r7, r4, ror r0
    23b0:	455f4f49 	ldrbmi	r4, [pc, #-3913]	; 146f <__Stack_Size+0x106f>
    23b4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0x576
    23b8:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    23bc:	6f437475 	svcvs	0x00437475
    23c0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    23c4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    23c8:	65525f4f 	ldrbvs	r5, [r2, #-3919]	; 0xf4f
    23cc:	0070616d 	rsbseq	r6, r0, sp, ror #2
    23d0:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xf50
    23d4:	006c6156 	rsbeq	r6, ip, r6, asr r1
    23d8:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    23dc:	6d746e65 	ldclvs	14, cr6, [r4, #-404]!	; 0xfffffe6c
    23e0:	0065646f 	rsbeq	r6, r5, pc, ror #8
    23e4:	4f495047 	svcmi	0x00495047
    23e8:	6e69505f 	mcrvs	0, 3, r5, cr9, cr15, {2}
    23ec:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    23f0:	47006563 	strmi	r6, [r0, -r3, ror #10]
    23f4:	5f4f4950 	svcpl	0x004f4950
    23f8:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    23fc:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xe49
    2400:	74614474 	strbtvc	r4, [r1], #-1140	; 0x474
    2404:	6d740061 	ldclvs	0, cr0, [r4, #-388]!	; 0xfffffe7c
    2408:	73616d70 	cmnvc	r1, #7168	; 0x1c00
    240c:	5047006b 	subpl	r0, r7, fp, rrx
    2410:	505f4f49 	subspl	r4, pc, r9, asr #30
    2414:	6f4c6e69 	svcvs	0x004c6e69
    2418:	6f436b63 	svcvs	0x00436b63
    241c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2420:	72756300 	rsbsvc	r6, r5, #0
    2424:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
    2428:	006e6970 	rsbeq	r6, lr, r0, ror r9
    242c:	4f495047 	svcmi	0x00495047
    2430:	6972575f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    2434:	74006574 	strvc	r6, [r0], #-1396	; 0x574
    2438:	0031706d 	eorseq	r7, r1, sp, rrx
    243c:	4f495047 	svcmi	0x00495047
    2440:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
    2444:	6e694c49 	cdpvs	12, 6, cr4, cr9, cr9, {2}
    2448:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    244c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2450:	4f494641 	svcmi	0x00494641
    2454:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    2458:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    245c:	74694200 	strbtvc	r4, [r9], #-512	; 0x200
    2460:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    2464:	4d006e6f 	stcmi	14, cr6, [r0, #-444]	; 0xfffffe44
    2468:	00525041 	subseq	r5, r2, r1, asr #32
    246c:	4f495047 	svcmi	0x00495047
    2470:	50470078 	subpl	r0, r7, r8, ror r0
    2474:	495f4f49 	ldmdbmi	pc, {r0, r3, r6, r8, r9, sl, fp, lr}^	; <UNPREDICTABLE>
    2478:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    247c:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    2480:	56450074 			; <UNDEFINED> instruction: 0x56450074
    2484:	47005243 	strmi	r5, [r0, -r3, asr #4]
    2488:	5f4f4950 	svcpl	0x004f4950
    248c:	64616552 	strbtvs	r6, [r1], #-1362	; 0x552
    2490:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    2494:	61447475 	hvcvs	18245	; 0x4745
    2498:	69426174 	stmdbvs	r2, {r2, r4, r5, r6, r8, sp, lr}^
    249c:	50470074 	subpl	r0, r7, r4, ror r0
    24a0:	415f4f49 	cmpmi	pc, r9, asr #30
    24a4:	444f4946 	strbmi	r4, [pc], #-2374	; 24ac <__Stack_Size+0x20ac>
    24a8:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
    24ac:	41490074 	hvcmi	36868	; 0x9004
    24b0:	4e005242 	cdpmi	2, 0, cr5, cr0, cr2, {2}
    24b4:	5f434956 	svcpl	0x00434956
    24b8:	61656c43 	cmnvs	r5, r3, asr #24
    24bc:	51524972 	cmppl	r2, r2, ror r9
    24c0:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    24c4:	506c656e 	rsbpl	r6, ip, lr, ror #10
    24c8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    24cc:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    24d0:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    24d4:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    24d8:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    24dc:	63757274 	cmnvs	r5, #1073741831	; 0x40000007
    24e0:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
    24e4:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    24e8:	75437465 	strbvc	r7, [r3, #-1125]	; 0x465
    24ec:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    24f0:	6e655074 	mcrvs	0, 3, r5, cr5, cr4, {3}
    24f4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    24f8:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
    24fc:	6e6e6168 	powvsez	f6, f6, #0.0
    2500:	4e006c65 	cdpmi	12, 0, cr6, cr0, cr5, {3}
    2504:	5f434956 	svcpl	0x00434956
    2508:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    250c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    2510:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2514:	00737365 	rsbseq	r7, r3, r5, ror #6
    2518:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0x953
    251c:	61486d65 	cmpvs	r8, r5, ror #26
    2520:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    2524:	62755372 	rsbsvs	r5, r5, #-939524095	; 0xc8000001
    2528:	6f697250 	svcvs	0x00697250
    252c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2530:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2534:	45535f43 	ldrbmi	r5, [r3, #-3907]	; 0xf43
    2538:	49525054 	ldmdbmi	r2, {r2, r4, r6, ip, lr}^
    253c:	4b53414d 	blmi	14d2a78 <__Stack_Size+0x14d2678>
    2540:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2544:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2548:	6172656e 	cmnvs	r2, lr, ror #10
    254c:	79536574 	ldmdbvc	r3, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2550:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    2554:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    2558:	6d740074 	ldclvs	0, cr0, [r4, #-464]!	; 0xfffffe30
    255c:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0x70
    2560:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2564:	45525f43 	ldrbmi	r5, [r2, #-3907]	; 0xf43
    2568:	50544553 	subspl	r4, r4, r3, asr r5
    256c:	414d4952 	cmpmi	sp, r2, asr r9
    2570:	66004b53 			; <UNDEFINED> instruction: 0x66004b53
    2574:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    2578:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
    257c:	00737365 	rsbseq	r7, r3, r5, ror #6
    2580:	4349564e 	movtmi	r5, #38478	; 0x964e
    2584:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    2588:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    258c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    2590:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
    2594:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2598:	6f437974 	svcvs	0x00437974
    259c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    25a0:	475f5f00 	ldrbmi	r5, [pc, -r0, lsl #30]
    25a4:	41427465 	cmpmi	r2, r5, ror #8
    25a8:	52504553 	subspl	r4, r0, #348127232	; 0x14c00000
    25ac:	74730049 	ldrbtvc	r0, [r3], #-73	; 0x49
    25b0:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    25b4:	5f783031 	svcpl	0x00783031
    25b8:	2f62696c 	svccs	0x0062696c
    25bc:	2f637273 	svccs	0x00637273
    25c0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    25c4:	30316632 	eorscc	r6, r1, r2, lsr r6
    25c8:	766e5f78 	uqsub16vc	r5, lr, r8
    25cc:	632e6369 	teqvs	lr, #-1543503871	; 0xa4000001
    25d0:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    25d4:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    25d8:	55504374 	ldrbpl	r4, [r0, #-884]	; 0x374
    25dc:	4e004449 	cdpmi	4, 0, cr4, cr0, cr9, {2}
    25e0:	5f434956 	svcpl	0x00434956
    25e4:	6f697250 	svcvs	0x00697250
    25e8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    25ec:	756f7247 	strbvc	r7, [pc, #-583]!	; 23ad <__Stack_Size+0x1fad>
    25f0:	564e0070 			; <UNDEFINED> instruction: 0x564e0070
    25f4:	525f4349 	subspl	r4, pc, #603979777	; 0x24000001
    25f8:	54455345 	strbpl	r5, [r5], #-837	; 0x345
    25fc:	4c554146 	ldfmie	f4, [r5], {70}	; 0x46
    2600:	53414d54 	movtpl	r4, #7508	; 0x1d54
    2604:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    2608:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    260c:	75437465 	strbvc	r7, [r3, #-1125]	; 0x465
    2610:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2614:	74634174 	strbtvc	r4, [r3], #-372	; 0x174
    2618:	48657669 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
    261c:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    2620:	53007265 	movwpl	r7, #613	; 0x265
    2624:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    2628:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    262c:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    2630:	53434900 	movtpl	r4, #14592	; 0x3900
    2634:	53520052 	cmppl	r2, #82	; 0x52
    2638:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    263c:	5f003144 	svcpl	0x00003144
    2640:	5445535f 	strbpl	r5, [r5], #-863	; 0x35f
    2644:	4c554146 	ldfmie	f4, [r5], {70}	; 0x46
    2648:	53414d54 	movtpl	r4, #7508	; 0x1d54
    264c:	564e004b 	strbpl	r0, [lr], -fp, asr #32
    2650:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    2654:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    2658:	43657461 	cmnmi	r5, #1627389952	; 0x61000000
    265c:	5265726f 	rsbpl	r7, r5, #-268435450	; 0xf0000006
    2660:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    2664:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2668:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    266c:	73795374 	cmnvc	r9, #-805306367	; 0xd0000001
    2670:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2674:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    2678:	63417265 	movtvs	r7, #4709	; 0x1265
    267c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0x974
    2680:	53746942 	cmnpl	r4, #1081344	; 0x108000
    2684:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2688:	564e0073 			; <UNDEFINED> instruction: 0x564e0073
    268c:	425f4349 	subsmi	r4, pc, #603979777	; 0x24000001
    2690:	50455341 	subpl	r5, r5, r1, asr #6
    2694:	4f434952 	svcmi	0x00434952
    2698:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    269c:	41464200 	mrsmi	r4, (UNDEF: 102)
    26a0:	564e0052 			; <UNDEFINED> instruction: 0x564e0052
    26a4:	535f4349 	cmppl	pc, #603979777	; 0x24000001
    26a8:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    26ac:	61684351 	cmnvs	r8, r1, asr r3
    26b0:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    26b4:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    26b8:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    26bc:	74007469 	strvc	r7, [r0], #-1129	; 0x469
    26c0:	6f70706d 	svcvs	0x0070706d
    26c4:	46430073 			; <UNDEFINED> instruction: 0x46430073
    26c8:	4e005253 	mcrmi	2, 0, r5, cr0, cr3, {2}
    26cc:	5f434956 	svcpl	0x00434956
    26d0:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    26d4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
    26d8:	6e61486d 	cdpvs	8, 6, cr4, cr1, cr13, {3}
    26dc:	72656c64 	rsbvc	r6, r5, #25600	; 0x6400
    26e0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    26e4:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    26e8:	41007469 	tstmi	r0, r9, ror #8
    26ec:	52435249 	subpl	r5, r3, #-1879048188	; 0x90000004
    26f0:	50434900 	subpl	r4, r3, r0, lsl #18
    26f4:	5f5f0052 	svcpl	0x005f0052
    26f8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0x142
    26fc:	43495250 	movtmi	r5, #37456	; 0x9250
    2700:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    2704:	48530047 	ldmdami	r3, {r0, r1, r2, r6}^
    2708:	53005250 	movwpl	r5, #592	; 0x250
    270c:	52534348 	subspl	r4, r3, #536870913	; 0x20000001
    2710:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2714:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    2718:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    271c:	5f5f0066 	svcpl	0x005f0066
    2720:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    2724:	55414654 	strbpl	r4, [r1, #-1620]	; 0x654
    2728:	414d544c 	cmpmi	sp, ip, asr #8
    272c:	4d004b53 	vstrmi	d4, [r0, #-332]	; 0xfffffeb4
    2730:	5241464d 	subpl	r4, r1, #80740352	; 0x4d00000
    2734:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    2738:	00627573 	rsbeq	r7, r2, r3, ror r5
    273c:	4349564e 	movtmi	r5, #38478	; 0x964e
    2740:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    2744:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2748:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    274c:	6f437265 	svcvs	0x00437265
    2750:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2754:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2758:	79535f43 	ldmdbvc	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    275c:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    2760:	6f43504c 	svcvs	0x0043504c
    2764:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2768:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    276c:	74535f43 	ldrbvc	r5, [r3], #-3907	; 0xf43
    2770:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2774:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2778:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    277c:	6f697270 	svcvs	0x00697270
    2780:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    2784:	4f545600 	svcmi	0x00545600
    2788:	53490052 	movtpl	r0, #36946	; 0x9052
    278c:	44005250 	strmi	r5, [r0], #-592	; 0x250
    2790:	00525346 	subseq	r5, r2, r6, asr #6
    2794:	52534648 	subspl	r4, r3, #75497472	; 0x4800000
    2798:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    279c:	45535f43 	ldrbmi	r5, [r3, #-3907]	; 0xf43
    27a0:	55414654 	strbpl	r4, [r1, #-1620]	; 0x654
    27a4:	414d544c 	cmpmi	sp, ip, asr #8
    27a8:	41004b53 	tstmi	r0, r3, asr fp
    27ac:	00525346 	subseq	r5, r2, r6, asr #6
    27b0:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
    27b4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    27b8:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    27bc:	75614674 	strbvc	r4, [r1, #-1652]!	; 0x674
    27c0:	6148746c 	cmpvs	r8, ip, ror #8
    27c4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    27c8:	756f5372 	strbvc	r5, [pc, #-882]!	; 245e <__Stack_Size+0x205e>
    27cc:	73656372 	cmnvc	r5, #-939524095	; 0xc8000001
    27d0:	42435300 	submi	r5, r3, #0
    27d4:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    27d8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    27dc:	706d7400 	rsbvc	r7, sp, r0, lsl #8
    27e0:	564e0032 			; <UNDEFINED> instruction: 0x564e0032
    27e4:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    27e8:	79537465 	ldmdbvc	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    27ec:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    27f0:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    27f4:	5072656c 	rsbspl	r6, r2, ip, ror #10
    27f8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    27fc:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2800:	61745374 	cmnvs	r4, r4, ror r3
    2804:	00737574 	rsbseq	r7, r3, r4, ror r5
    2808:	4349564e 	movtmi	r5, #38478	; 0x964e
    280c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2810:	79537261 	ldmdbvc	r3, {r0, r5, r6, r9, ip, sp, lr}^
    2814:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    2818:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
    281c:	5072656c 	rsbspl	r6, r2, ip, ror #10
    2820:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2824:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2828:	75760074 	ldrbvc	r0, [r6, #-116]!	; 0x74
    282c:	00323363 	eorseq	r3, r2, r3, ror #6
    2830:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2834:	756f7374 	strbvc	r7, [pc, #-884]!	; 24c8 <__Stack_Size+0x20c8>
    2838:	73656372 	cmnvc	r5, #-939524095	; 0xc8000001
    283c:	73795300 	cmnvc	r9, #0
    2840:	486d6574 	stmdami	sp!, {r2, r4, r5, r6, r8, sl, sp, lr}^
    2844:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    2848:	72507265 	subsvc	r7, r0, #1342177286	; 0x50000006
    284c:	706d6565 	rsbvc	r6, sp, r5, ror #10
    2850:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    2854:	6f697250 	svcvs	0x00697250
    2858:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    285c:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    2860:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2864:	51524974 	cmppl	r2, r4, ror r9
    2868:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
    286c:	506c656e 	rsbpl	r6, ip, lr, ror #10
    2870:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2874:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2878:	61745374 	cmnvs	r4, r4, ror r3
    287c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2880:	4349564e 	movtmi	r5, #38478	; 0x964e
    2884:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    2888:	45534142 	ldrbmi	r4, [r3, #-322]	; 0x142
    288c:	00495250 	subeq	r5, r9, r0, asr r2
    2890:	4349564e 	movtmi	r5, #38478	; 0x964e
    2894:	4243535f 	submi	r5, r3, #2080374785	; 0x7c000001
    2898:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    289c:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    28a0:	72507765 	subsvc	r7, r0, #26476544	; 0x1940000
    28a4:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    28a8:	4e007974 	mcrmi	9, 0, r7, cr0, cr4, {3}
    28ac:	5f434956 	svcpl	0x00434956
    28b0:	74636556 	strbtvc	r6, [r3], #-1366	; 0x556
    28b4:	00626154 	rsbeq	r6, r2, r4, asr r1
    28b8:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    28bc:	72696576 	rsbvc	r6, r9, #494927872	; 0x1d800000
    28c0:	61747371 	cmnvs	r4, r1, ror r3
    28c4:	00737574 	rsbseq	r7, r3, r4, ror r5
    28c8:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
    28cc:	535f5f00 	cmppl	pc, #0
    28d0:	52505445 	subspl	r5, r0, #1157627904	; 0x45000000
    28d4:	53414d49 	movtpl	r4, #7497	; 0x1d49
    28d8:	6168004b 	cmnvs	r8, fp, asr #32
    28dc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
    28e0:	73616d72 	cmnvc	r1, #7296	; 0x1c80
    28e4:	5f5f006b 	svcpl	0x005f006b
    28e8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    28ec:	49525054 	ldmdbmi	r2, {r2, r4, r6, ip, lr}^
    28f0:	4b53414d 	blmi	14d2e2c <__Stack_Size+0x14d2a2c>
    28f4:	776f4c00 	strbvc	r4, [pc, -r0, lsl #24]!
    28f8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
    28fc:	646f4d72 	strbtvs	r4, [pc], #-3442	; 2904 <__Stack_Size+0x2504>
    2900:	564e0065 	strbpl	r0, [lr], -r5, rrx
    2904:	475f4349 	ldrbmi	r4, [pc, -r9, asr #6]
    2908:	52497465 	subpl	r7, r9, #1694498816	; 0x65000000
    290c:	61684351 	cmnvs	r8, r1, asr r3
    2910:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    2914:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    2918:	69426576 	stmdbvs	r2, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    291c:	61745374 	cmnvs	r4, r4, ror r3
    2920:	00737574 	rsbseq	r7, r3, r4, ror r5
    2924:	4349564e 	movtmi	r5, #38478	; 0x964e
    2928:	4965445f 	stmdbmi	r5!, {r0, r1, r2, r3, r4, r6, sl, lr}^
    292c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2930:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
    2934:	69676e69 	stmdbvs	r7!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    2938:	74737172 	ldrbtvc	r7, [r3], #-370	; 0x172
    293c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2940:	52575000 	subspl	r5, r7, #0
    2944:	746e455f 	strbtvc	r4, [lr], #-1375	; 0x55f
    2948:	54537265 	ldrbpl	r7, [r3], #-613	; 0x265
    294c:	42444e41 	submi	r4, r4, #1040	; 0x410
    2950:	646f4d59 	strbtvs	r4, [pc], #-3417	; 2958 <__Stack_Size+0x2558>
    2954:	57500065 	ldrbpl	r0, [r0, -r5, rrx]
    2958:	6c435f52 	mcrrvs	15, 5, r5, r3, cr2
    295c:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
    2960:	0067616c 	rsbeq	r6, r7, ip, ror #2
    2964:	5f525750 	svcpl	0x00525750
    2968:	6e496544 	cdpvs	5, 4, cr6, cr9, cr4, {2}
    296c:	50007469 	andpl	r7, r0, r9, ror #8
    2970:	525f5257 	subspl	r5, pc, #1879048197	; 0x70000005
    2974:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    2978:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    297c:	52575000 	subspl	r5, r7, #0
    2980:	4456505f 	ldrbmi	r5, [r6], #-95	; 0x5f
    2984:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0x54c
    2988:	5750006c 	ldrbpl	r0, [r0, -ip, rrx]
    298c:	4c465f52 	mcrrmi	15, 5, r5, r6, cr2
    2990:	50004741 	andpl	r4, r0, r1, asr #14
    2994:	545f5257 	ldrbpl	r5, [pc], #-599	; 299c <__Stack_Size+0x259c>
    2998:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    299c:	50006665 	andpl	r6, r0, r5, ror #12
    29a0:	505f5257 	subspl	r5, pc, r7, asr r2	; <UNPREDICTABLE>
    29a4:	6d434456 	cfstrdvs	mvd4, [r3, #-344]	; 0xfffffea8
    29a8:	74730064 	ldrbtvc	r0, [r3], #-100	; 0x64
    29ac:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    29b0:	5f783031 	svcpl	0x00783031
    29b4:	2f62696c 	svccs	0x0062696c
    29b8:	2f637273 	svccs	0x00637273
    29bc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    29c0:	30316632 	eorscc	r6, r1, r2, lsr r6
    29c4:	77705f78 			; <UNDEFINED> instruction: 0x77705f78
    29c8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    29cc:	5f525750 	svcpl	0x00525750
    29d0:	4c445650 	mcrrmi	6, 5, r5, r4, cr0
    29d4:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    29d8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    29dc:	50006769 	andpl	r6, r0, r9, ror #14
    29e0:	475f5257 			; <UNDEFINED> instruction: 0x475f5257
    29e4:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    29e8:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    29ec:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    29f0:	575f5f00 	ldrbpl	r5, [pc, -r0, lsl #30]
    29f4:	5f004546 	svcpl	0x00004546
    29f8:	4946575f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    29fc:	52575000 	subspl	r5, r7, #0
    2a00:	746e455f 	strbtvc	r4, [lr], #-1375	; 0x55f
    2a04:	54537265 	ldrbpl	r7, [r3], #-613	; 0x265
    2a08:	6f4d504f 	svcvs	0x004d504f
    2a0c:	52006564 	andpl	r6, r0, #419430400	; 0x19000000
    2a10:	415f4343 	cmpmi	pc, r3, asr #6
    2a14:	50314250 	eorspl	r4, r1, r0, asr r2
    2a18:	70697265 	rsbvc	r7, r9, r5, ror #4
    2a1c:	73655268 	cmnvc	r5, #-2147483642	; 0x80000006
    2a20:	6d437465 	cfstrdvs	mvd7, [r3, #-404]	; 0xfffffe6c
    2a24:	57500064 	ldrbpl	r0, [r0, -r4, rrx]
    2a28:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xf52
    2a2c:	6e45504f 	cdpvs	0, 4, cr5, cr5, cr15, {2}
    2a30:	00797274 	rsbseq	r7, r9, r4, ror r2
    2a34:	5f525750 	svcpl	0x00525750
    2a38:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    2a3c:	69507055 	ldmdbvs	r0, {r0, r2, r4, r6, ip, sp, lr}^
    2a40:	646d436e 	strbtvs	r4, [sp], #-878	; 0x36e
    2a44:	43435200 	movtmi	r5, #12800	; 0x3200
    2a48:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    2a4c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    2a50:	42504100 	subsmi	r4, r0, #0
    2a54:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
    2a58:	43520052 	cmpmi	r2, #82	; 0x52
    2a5c:	43485f43 	movtmi	r5, #36675	; 0x8f43
    2a60:	52004b4c 	andpl	r4, r0, #77824	; 0x13000
    2a64:	415f4343 	cmpmi	pc, r3, asr #6
    2a68:	4c434344 	mcrrmi	3, 4, r4, r3, cr4
    2a6c:	6e6f434b 	cdpvs	3, 6, cr4, cr15, cr11, {2}
    2a70:	00676966 	rsbeq	r6, r7, r6, ror #18
    2a74:	5f434352 	svcpl	0x00434352
    2a78:	61656c43 	cmnvs	r5, r3, asr #24
    2a7c:	50544972 	subspl	r4, r4, r2, ror r9
    2a80:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2a84:	6942676e 	stmdbvs	r2, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2a88:	43520074 	cmpmi	r2, #116	; 0x74
    2a8c:	534c5f43 	movtpl	r5, #53059	; 0xcf43
    2a90:	43520045 	cmpmi	r2, #69	; 0x45
    2a94:	65475f43 	strbvs	r5, [r7, #-3907]	; 0xf43
    2a98:	53544974 	cmppl	r4, #1900544	; 0x1d0000
    2a9c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2aa0:	44420073 	strbmi	r0, [r2], #-115	; 0x73
    2aa4:	52005243 	andpl	r5, r0, #805306372	; 0x30000004
    2aa8:	415f4343 	cmpmi	pc, r3, asr #6
    2aac:	50324250 	eorspl	r4, r2, r0, asr r2
    2ab0:	70697265 	rsbvc	r7, r9, r5, ror #4
    2ab4:	43520068 	cmpmi	r2, #104	; 0x68
    2ab8:	43505f43 	cmpmi	r0, #268	; 0x10c
    2abc:	00324b4c 	eorseq	r4, r2, ip, asr #22
    2ac0:	5f434352 	svcpl	0x00434352
    2ac4:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2ac8:	7954736b 	ldmdbvc	r4, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
    2acc:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    2ad0:	43520066 	cmpmi	r2, #102	; 0x66
    2ad4:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    2ad8:	6c754d4c 	ldclvs	13, cr4, [r5], #-304	; 0xfffffed0
    2adc:	43435200 	movtmi	r5, #12800	; 0x3200
    2ae0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
    2ae4:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2ae8:	6c436870 	mcrrvs	8, 7, r6, r3, cr0
    2aec:	436b636f 	cmnmi	fp, #-1140850687	; 0xbc000001
    2af0:	4300646d 	movwmi	r6, #1133	; 0x46d
    2af4:	00524746 	subseq	r4, r2, r6, asr #14
    2af8:	4b4c4348 	blmi	1313820 <__Stack_Size+0x1313420>
    2afc:	6572465f 	ldrbvs	r4, [r2, #-1631]!	; 0x65f
    2b00:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2b04:	41007963 	tstmi	r0, r3, ror #18
    2b08:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
    2b0c:	5200524e 	andpl	r5, r0, #-536870908	; 0xe0000004
    2b10:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 2a0c <__Stack_Size+0x260c>
    2b14:	6f434f43 	svcvs	0x00434f43
    2b18:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2b1c:	43435200 	movtmi	r5, #12800	; 0x3200
    2b20:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
    2b24:	534b4c43 	movtpl	r4, #48195	; 0xbc43
    2b28:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2b2c:	6c700065 	ldclvs	0, cr0, [r0], #-404	; 0xfffffe6c
    2b30:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    2b34:	4352006c 	cmpmi	r2, #108	; 0x6c
    2b38:	53555f43 	cmppl	r5, #268	; 0x10c
    2b3c:	4b4c4342 	blmi	131384c <__Stack_Size+0x131344c>
    2b40:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2b44:	52006769 	andpl	r6, r0, #27525120	; 0x1a40000
    2b48:	4c5f4343 	mrrcmi	3, 4, r4, pc, cr3	; <UNPREDICTABLE>
    2b4c:	6d434953 	stclvs	9, cr4, [r3, #-332]	; 0xfffffeb4
    2b50:	50410064 	subpl	r0, r1, r4, rrx
    2b54:	53523242 	cmppl	r2, #536870916	; 0x20000004
    2b58:	52005254 	andpl	r5, r0, #1073741829	; 0x40000005
    2b5c:	415f4343 	cmpmi	pc, r3, asr #6
    2b60:	50314250 	eorspl	r4, r1, r0, asr r2
    2b64:	70697265 	rsbvc	r7, r9, r5, ror #4
    2b68:	6c700068 	ldclvs	0, cr0, [r0], #-416	; 0xfffffe60
    2b6c:	756f736c 	strbvc	r7, [pc, #-876]!	; 2808 <__Stack_Size+0x2408>
    2b70:	00656372 	rsbeq	r6, r5, r2, ror r3
    2b74:	5f434352 	svcpl	0x00434352
    2b78:	43425355 	movtmi	r5, #9045	; 0x2355
    2b7c:	6f534b4c 	svcvs	0x00534b4c
    2b80:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2b84:	42484100 	submi	r4, r8, #0
    2b88:	00524e45 	subseq	r4, r2, r5, asr #28
    2b8c:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    2b90:	65727375 	ldrbvs	r7, [r2, #-885]!	; 0x375
    2b94:	50410067 	subpl	r0, r1, r7, rrx
    2b98:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
    2b9c:	74530052 	ldrbvc	r0, [r3], #-82	; 0x52
    2ba0:	55747261 	ldrbpl	r7, [r4, #-609]!	; 0x261
    2ba4:	756f4370 	strbvc	r4, [pc, #-880]!	; 283c <__Stack_Size+0x243c>
    2ba8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2bac:	43435200 	movtmi	r5, #12800	; 0x3200
    2bb0:	6361425f 	cmnvs	r1, #-268435451	; 0xf0000005
    2bb4:	5270756b 	rsbspl	r7, r0, #448790528	; 0x1ac00000
    2bb8:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
    2bbc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2bc0:	43434441 	movtmi	r4, #13377	; 0x3441
    2bc4:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    2bc8:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0x572
    2bcc:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2bd0:	43435200 	movtmi	r5, #12800	; 0x3200
    2bd4:	414c465f 	cmpmi	ip, pc, asr r6
    2bd8:	43520047 	cmpmi	r2, #71	; 0x47
    2bdc:	4c505f43 	mrrcmi	15, 4, r5, r0, cr3
    2be0:	756f534c 	strbvc	r5, [pc, #-844]!	; 289c <__Stack_Size+0x249c>
    2be4:	00656372 	rsbeq	r6, r5, r2, ror r3
    2be8:	5f434352 	svcpl	0x00434352
    2bec:	43435452 	movtmi	r5, #13394	; 0x3452
    2bf0:	6f434b4c 	svcvs	0x00434b4c
    2bf4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2bf8:	43435200 	movtmi	r5, #12800	; 0x3200
    2bfc:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2c00:	6c467261 	sfmvs	f7, 2, [r6], {97}	; 0x61
    2c04:	52006761 	andpl	r6, r0, #25427968	; 0x1840000
    2c08:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    2c0c:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    2c10:	5348004b 	movtpl	r0, #32843	; 0x804b
    2c14:	61745345 	cmnvs	r4, r5, asr #6
    2c18:	00737574 	rsbseq	r7, r3, r4, ror r5
    2c1c:	43535953 	cmpmi	r3, #1359872	; 0x14c000
    2c20:	465f4b4c 	ldrbmi	r4, [pc], -ip, asr #22
    2c24:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0x572
    2c28:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2c2c:	43435200 	movtmi	r5, #12800	; 0x3200
    2c30:	6f6c435f 	svcvs	0x006c435f
    2c34:	00736b63 	rsbseq	r6, r3, r3, ror #22
    2c38:	4b4c4350 	blmi	1313980 <__Stack_Size+0x1313580>
    2c3c:	72465f32 	subvc	r5, r6, #200	; 0xc8
    2c40:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    2c44:	0079636e 	rsbseq	r6, r9, lr, ror #6
    2c48:	5f434352 	svcpl	0x00434352
    2c4c:	6f435449 	svcvs	0x00435449
    2c50:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2c54:	65727000 	ldrbvs	r7, [r2, #-0]!
    2c58:	52006373 	andpl	r6, r0, #-872415231	; 0xcc000001
    2c5c:	485f4343 	ldmdami	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2c60:	52004553 	andpl	r4, r0, #348127232	; 0x14c00000
    2c64:	535f4343 	cmppl	pc, #201326593	; 0xc000001
    2c68:	4c435359 	mcrrmi	3, 5, r5, r3, cr9
    2c6c:	756f534b 	strbvc	r5, [pc, #-843]!	; 2929 <__Stack_Size+0x2529>
    2c70:	00656372 	rsbeq	r6, r5, r2, ror r3
    2c74:	4b4c4350 	blmi	13139bc <__Stack_Size+0x13135bc>
    2c78:	72465f31 	subvc	r5, r6, #196	; 0xc4
    2c7c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    2c80:	0079636e 	rsbseq	r6, r9, lr, ror #6
    2c84:	5f434352 	svcpl	0x00434352
    2c88:	4345534c 	movtmi	r5, #21324	; 0x534c
    2c8c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2c90:	50410067 	subpl	r0, r1, r7, rrx
    2c94:	42484142 	submi	r4, r8, #-2147483632	; 0x80000010
    2c98:	73657250 	cmnvc	r5, #5
    2c9c:	62615463 	rsbvs	r5, r1, #1660944384	; 0x63000000
    2ca0:	5200656c 	andpl	r6, r0, #452984832	; 0x1b000000
    2ca4:	475f4343 	ldrbmi	r4, [pc, -r3, asr #6]
    2ca8:	6c437465 	cfstrdvs	mvd7, [r3], {101}	; 0x65
    2cac:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    2cb0:	71657246 	cmnvc	r5, r6, asr #4
    2cb4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
    2cb8:	31663233 	cmncc	r6, r3, lsr r2
    2cbc:	6c5f7830 	mrrcvs	8, 3, r7, pc, cr0	; <UNPREDICTABLE>
    2cc0:	732f6269 	teqvc	pc, #-1879048186	; 0x90000006
    2cc4:	732f6372 	teqvc	pc, #-939524095	; 0xc8000001
    2cc8:	32336d74 	eorscc	r6, r3, #7424	; 0x1d00
    2ccc:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    2cd0:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
    2cd4:	5200632e 	andpl	r6, r0, #-1207959552	; 0xb8000000
    2cd8:	525f4343 	subspl	r4, pc, #201326593	; 0xc000001
    2cdc:	4c434354 	mcrrmi	3, 5, r4, r3, cr4
    2ce0:	646d434b 	strbtvs	r4, [sp], #-843	; 0x34b
    2ce4:	43435200 	movtmi	r5, #12800	; 0x3200
    2ce8:	6f6c435f 	svcvs	0x006c435f
    2cec:	65536b63 	ldrbvs	r6, [r3, #-2915]	; 0xb63
    2cf0:	69727563 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, sl, ip, sp, lr}^
    2cf4:	79537974 	ldmdbvc	r3, {r2, r4, r5, r6, r8, fp, ip, sp, lr}^
    2cf8:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
    2cfc:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2d00:	5f434352 	svcpl	0x00434352
    2d04:	43495348 	movtmi	r5, #37704	; 0x9348
    2d08:	5200646d 	andpl	r6, r0, #1828716544	; 0x6d000000
    2d0c:	4d5f4343 	ldclmi	3, cr4, [pc, #-268]	; 2c08 <__Stack_Size+0x2808>
    2d10:	52004f43 	andpl	r4, r0, #268	; 0x10c
    2d14:	495f4343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2d18:	43520054 	cmpmi	r2, #84	; 0x54
    2d1c:	64415f43 	strbvs	r5, [r1], #-3907	; 0xf43
    2d20:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0x56a
    2d24:	43495348 	movtmi	r5, #37704	; 0x9348
    2d28:	62696c61 	rsbvs	r6, r9, #24832	; 0x6100
    2d2c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    2d30:	61566e6f 	cmpvs	r6, pc, ror #28
    2d34:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2d38:	5f434352 	svcpl	0x00434352
    2d3c:	50424841 	subpl	r4, r2, r1, asr #16
    2d40:	70697265 	rsbvc	r7, r9, r5, ror #4
    2d44:	44410068 	strbmi	r0, [r1], #-104	; 0x68
    2d48:	65725043 	ldrbvs	r5, [r2, #-67]!	; 0x43
    2d4c:	61546373 	cmpvs	r4, r3, ror r3
    2d50:	00656c62 	rsbeq	r6, r5, r2, ror #24
    2d54:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    2d58:	5f6b6369 	svcpl	0x006b6369
    2d5c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2d60:	00726574 	rsbseq	r6, r2, r4, ror r5
    2d64:	54737953 	ldrbtpl	r7, [r3], #-2387	; 0x953
    2d68:	5f6b6369 	svcpl	0x006b6369
    2d6c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2d70:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    2d74:	53007265 	movwpl	r7, #613	; 0x265
    2d78:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    2d7c:	475f6b63 	ldrbmi	r6, [pc, -r3, ror #22]
    2d80:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    2d84:	74536761 	ldrbvc	r6, [r3], #-1889	; 0x761
    2d88:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    2d8c:	73795300 	cmnvc	r9, #0
    2d90:	6b636954 	blvs	18dd2e8 <__Stack_Size+0x18dcee8>
    2d94:	414c465f 	cmpmi	ip, pc, asr r6
    2d98:	41430047 	cmpmi	r3, r7, asr #32
    2d9c:	0042494c 	subeq	r4, r2, ip, asr #18
    2da0:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2da4:	30316632 	eorscc	r6, r1, r2, lsr r6
    2da8:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2dac:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    2db0:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    2db4:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2db8:	5f783031 	svcpl	0x00783031
    2dbc:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
    2dc0:	2e6b6369 	cdpcs	3, 6, cr6, cr11, cr9, {3}
    2dc4:	54430063 	strbpl	r0, [r3], #-99	; 0x63
    2dc8:	53004c52 	movwpl	r4, #3154	; 0xc52
    2dcc:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    2dd0:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2dd4:	6f534b4c 	svcvs	0x00534b4c
    2dd8:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2ddc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2de0:	53006769 	movwpl	r6, #1897	; 0x769
    2de4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    2de8:	545f6b63 	ldrbpl	r6, [pc], #-2915	; 2df0 <__Stack_Size+0x29f0>
    2dec:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    2df0:	53006665 	movwpl	r6, #1637	; 0x665
    2df4:	69547379 	ldmdbvs	r4, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
    2df8:	435f6b63 	cmpmi	pc, #101376	; 0x18c00
    2dfc:	6f534b4c 	svcvs	0x00534b4c
    2e00:	65637275 	strbvs	r7, [r3, #-629]!	; 0x275
    2e04:	746e6900 	strbtvc	r6, [lr], #-2304	; 0x900
    2e08:	72656765 	rsbvc	r6, r5, #26476544	; 0x1940000
    2e0c:	69766964 	ldmdbvs	r6!, {r2, r5, r6, r8, fp, sp, lr}^
    2e10:	00726564 	rsbseq	r6, r2, r4, ror #10
    2e14:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e18:	50435f54 	subpl	r5, r3, r4, asr pc
    2e1c:	55004148 	strpl	r4, [r0, #-328]	; 0x148
    2e20:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2e24:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2e28:	73657250 	cmnvc	r5, #5
    2e2c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    2e30:	53550072 	cmppl	r5, #114	; 0x72
    2e34:	5f545241 	svcpl	0x00545241
    2e38:	424e494c 	submi	r4, lr, #1245184	; 0x130000
    2e3c:	6b616572 	blvs	185c40c <__Stack_Size+0x185c00c>
    2e40:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0x544
    2e44:	654c7463 	strbvs	r7, [ip, #-1123]	; 0x463
    2e48:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    2e4c:	41535500 	cmpmi	r3, r0, lsl #10
    2e50:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2e54:	6b636f6c 	blvs	18dec0c <__Stack_Size+0x18de80c>
    2e58:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    2e5c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2e60:	00666544 	rsbeq	r6, r6, r4, asr #10
    2e64:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    2e68:	30316632 	eorscc	r6, r1, r2, lsr r6
    2e6c:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2e70:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    2e74:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    2e78:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    2e7c:	5f783031 	svcpl	0x00783031
    2e80:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    2e84:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2e88:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2e8c:	61485f54 	cmpvs	r8, r4, asr pc
    2e90:	7544666c 	strbvc	r6, [r4, #-1644]	; 0x66c
    2e94:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    2e98:	00646d43 	rsbeq	r6, r4, r3, asr #26
    2e9c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2ea0:	61575f54 	cmpvs	r7, r4, asr pc
    2ea4:	7055656b 	subsvc	r6, r5, fp, ror #10
    2ea8:	41535500 	cmpmi	r3, r0, lsl #10
    2eac:	445f5452 	ldrbmi	r5, [pc], #-1106	; 2eb4 <__Stack_Size+0x2ab4>
    2eb0:	6d43414d 	stfvse	f4, [r3, #-308]	; 0xfffffecc
    2eb4:	53550064 	cmppl	r5, #100	; 0x64
    2eb8:	5f545241 	svcpl	0x00545241
    2ebc:	55005449 	strpl	r5, [r0, #-1097]	; 0x449
    2ec0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2ec4:	4472495f 	ldrbtmi	r4, [r2], #-2399	; 0x95f
    2ec8:	646f4d41 	strbtvs	r4, [pc], #-3393	; 2ed0 <__Stack_Size+0x2ad0>
    2ecc:	70610065 	rsbvc	r0, r1, r5, rrx
    2ed0:	6f6c6362 	svcvs	0x006c6362
    2ed4:	55006b63 	strpl	r6, [r0, #-2915]	; 0xb63
    2ed8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2edc:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    2ee0:	54497261 	strbpl	r7, [r9], #-609	; 0x261
    2ee4:	646e6550 	strbtvs	r6, [lr], #-1360	; 0x550
    2ee8:	42676e69 	rsbmi	r6, r7, #1680	; 0x690
    2eec:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    2ef0:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2ef4:	6175475f 	cmnvs	r5, pc, asr r7
    2ef8:	69546472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, sp, lr}^
    2efc:	5500656d 	strpl	r6, [r0, #-1389]	; 0x56d
    2f00:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f04:	4e494c5f 	mcrmi	12, 2, r4, cr9, cr15, {2}
    2f08:	61657242 	cmnvs	r5, r2, asr #4
    2f0c:	7465446b 	strbtvc	r4, [r5], #-1131	; 0x46b
    2f10:	4c746365 	ldclmi	3, cr6, [r4], #-404	; 0xfffffe6c
    2f14:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    2f18:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
    2f1c:	00676966 	rsbeq	r6, r7, r6, ror #18
    2f20:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f24:	4c465f54 	mcrrmi	15, 5, r5, r6, cr4
    2f28:	55004741 	strpl	r4, [r0, #-1857]	; 0x741
    2f2c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2f30:	6f6c435f 	svcvs	0x006c435f
    2f34:	6e496b63 	vmlsvs.f64	d22, d9, d19
    2f38:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    2f3c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    2f40:	41535500 	cmpmi	r3, r0, lsl #10
    2f44:	445f5452 	ldrbmi	r5, [pc], #-1106	; 2f4c <__Stack_Size+0x2b4c>
    2f48:	6552414d 	ldrbvs	r4, [r2, #-333]	; 0x14d
    2f4c:	53550071 	cmppl	r5, #113	; 0x71
    2f50:	5f545241 	svcpl	0x00545241
    2f54:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2f58:	7274536b 	rsbsvc	r5, r4, #-1409286143	; 0xac000001
    2f5c:	49746375 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}^
    2f60:	0074696e 	rsbseq	r6, r4, lr, ror #18
    2f64:	72617375 	rsbvc	r7, r1, #-738197503	; 0xd4000001
    2f68:	61627874 	smcvs	10116	; 0x2784
    2f6c:	52006573 	andpl	r6, r0, #482344960	; 0x1cc00000
    2f70:	435f4343 	cmpmi	pc, #201326593	; 0xc000001
    2f74:	6b636f6c 	blvs	18ded2c <__Stack_Size+0x18de92c>
    2f78:	61745373 	cmnvs	r4, r3, ror r3
    2f7c:	00737574 	rsbseq	r7, r3, r4, ror r5
    2f80:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2f84:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    2f88:	64644174 	strbtvs	r4, [r4], #-372	; 0x174
    2f8c:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2f90:	41535500 	cmpmi	r3, r0, lsl #10
    2f94:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    2f98:	75477465 	strbvc	r7, [r7, #-1125]	; 0x465
    2f9c:	54647261 	strbtpl	r7, [r4], #-609	; 0x261
    2fa0:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2fa4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2fa8:	65535f54 	ldrbvs	r5, [r3, #-3924]	; 0xf54
    2fac:	7242646e 	subvc	r6, r2, #1845493760	; 0x6e000000
    2fb0:	006b6165 	rsbeq	r6, fp, r5, ror #2
    2fb4:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2fb8:	55007854 	strpl	r7, [r0, #-2132]	; 0x854
    2fbc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    2fc0:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
    2fc4:	72745374 	rsbsvc	r5, r4, #-805306367	; 0xd0000001
    2fc8:	00746375 	rsbseq	r6, r4, r5, ror r3
    2fcc:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    2fd0:	64415f54 	strbvs	r5, [r1], #-3924	; 0xf54
    2fd4:	73657264 	cmnvc	r5, #1073741830	; 0x40000006
    2fd8:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
    2fdc:	736f7074 	cmnvc	pc, #116	; 0x74
    2fe0:	41535500 	cmpmi	r3, r0, lsl #10
    2fe4:	435f5452 	cmpmi	pc, #1375731712	; 0x52000000
    2fe8:	7261656c 	rsbvc	r6, r1, #452984832	; 0x1b000000
    2fec:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
    2ff0:	41535500 	cmpmi	r3, r0, lsl #10
    2ff4:	495f5452 	ldmdbmi	pc, {r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2ff8:	43414472 	movtmi	r4, #5234	; 0x1472
    2ffc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3000:	53550067 	cmppl	r5, #103	; 0x67
    3004:	5f545241 	svcpl	0x00545241
    3008:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    300c:	5355006b 	cmppl	r5, #107	; 0x6b
    3010:	5f545241 	svcpl	0x00545241
    3014:	65636552 	strbvs	r6, [r3, #-1362]!	; 0x552
    3018:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    301c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0x157
    3020:	6d437055 	stclvs	0, cr7, [r3, #-340]	; 0xfffffeac
    3024:	53550064 	cmppl	r5, #100	; 0x64
    3028:	5f545241 	svcpl	0x00545241
    302c:	41447249 	cmpmi	r4, r9, asr #4
    3030:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3034:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    3038:	494c5f54 	stmdbmi	ip, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    303c:	646d434e 	strbtvs	r4, [sp], #-846	; 0x34e
    3040:	41535500 	cmpmi	r3, r0, lsl #10
    3044:	535f5452 	cmppl	pc, #1375731712	; 0x52000000
    3048:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0x16d
    304c:	64726143 	ldrbtvs	r6, [r2], #-323	; 0x143
    3050:	4b43414e 	blmi	10d3590 <__Stack_Size+0x10d3190>
    3054:	00646d43 	rsbeq	r6, r4, r3, asr #26
    3058:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    305c:	6d535f54 	ldclvs	15, cr5, [r3, #-336]	; 0xfffffeb0
    3060:	43747261 	cmnmi	r4, #268435462	; 0x10000006
    3064:	43647261 	cmnmi	r4, #268435462	; 0x10000006
    3068:	5500646d 	strpl	r6, [r0, #-1133]	; 0x46d
    306c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    3070:	6f6c435f 	svcvs	0x006c435f
    3074:	6e496b63 	vmlsvs.f64	d22, d9, d19
    3078:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
    307c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    3080:	6b61575f 	blvs	1858e04 <__Stack_Size+0x1858a04>
    3084:	43705565 	cmnmi	r0, #423624704	; 0x19400000
    3088:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    308c:	53550067 	cmppl	r5, #103	; 0x67
    3090:	5f545241 	svcpl	0x00545241
    3094:	73657250 	cmnvc	r5, #5
    3098:	656c6163 	strbvs	r6, [ip, #-355]!	; 0x163
    309c:	53550072 	cmppl	r5, #114	; 0x72
    30a0:	5f545241 	svcpl	0x00545241
    30a4:	4c4f5043 	mcrrmi	0, 4, r5, pc, cr3
    30a8:	41535500 	cmpmi	r3, r0, lsl #10
    30ac:	4c5f5452 	cfldrdmi	mvd5, [pc], {82}	; 0x52
    30b0:	42747361 	rsbsmi	r7, r4, #-2080374783	; 0x84000001
    30b4:	66007469 	strvs	r7, [r0], -r9, ror #8
    30b8:	74636172 	strbtvc	r6, [r3], #-370	; 0x172
    30bc:	616e6f69 	cmnvs	lr, r9, ror #30
    30c0:	7669646c 	strbtvc	r6, [r9], -ip, ror #8
    30c4:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    30c8:	61737500 	cmnvs	r3, r0, lsl #10
    30cc:	65727472 	ldrbvs	r7, [r2, #-1138]!	; 0x472
    30d0:	655f0067 	ldrbvs	r0, [pc, #-103]	; 3071 <__Stack_Size+0x2c71>
    30d4:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    30d8:	735f006b 	cmpvc	pc, #107	; 0x6b
    30dc:	61746164 	cmnvs	r4, r4, ror #2
    30e0:	73655200 	cmnvc	r5, #0
    30e4:	485f7465 	ldmdami	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    30e8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    30ec:	70007265 	andvc	r7, r0, r5, ror #4
    30f0:	65446c75 	strbvs	r6, [r4, #-3189]	; 0xc75
    30f4:	5f007473 	svcpl	0x00007473
    30f8:	61646973 	smcvs	18067	; 0x4693
    30fc:	5f006174 	svcpl	0x00006174
    3100:	73736265 	cmnvc	r3, #1342177286	; 0x50000006
    3104:	64655f00 	strbtvs	r5, [r5], #-3840	; 0xf00
    3108:	00617461 	rsbeq	r7, r1, r1, ror #8
    310c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    3110:	30316632 	eorscc	r6, r1, r2, lsr r6
    3114:	696c5f78 	stmdbvs	ip!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3118:	72732f62 	rsbsvc	r2, r3, #392	; 0x188
    311c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xf63
    3120:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
    3124:	5f783031 	svcpl	0x00783031
    3128:	74636576 	strbtvc	r6, [r3], #-1398	; 0x576
    312c:	632e726f 	teqvs	lr, #-268435450	; 0xf0000006
    3130:	705f6700 	subsvc	r6, pc, r0, lsl #14
    3134:	65566e66 	ldrbvs	r6, [r6, #-3686]	; 0xe66
    3138:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    313c:	75700073 	ldrbvc	r0, [r0, #-115]!	; 0x73
    3140:	6372536c 	cmnvs	r2, #-1342177279	; 0xb0000001
    3144:	62735f00 	rsbsvs	r5, r3, #0
    3148:	Address 0x0000000000003148 is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
	mDelay(50);
	end();
	return 0;
}

void blinky(uint8 level) {
       0:	08006684 	stmdaeq	r0, {r2, r7, r9, sl, sp, lr}
       4:	08006686 	stmdaeq	r0, {r1, r2, r7, r9, sl, sp, lr}
	// Turn them all off first.
	SetLED(MANAGE, 0);
       8:	007d0002 	rsbseq	r0, sp, r2
	SetLED(TXD, 0);
       c:	08006686 	stmdaeq	r0, {r1, r2, r7, r9, sl, sp, lr}
      10:	08006724 	stmdaeq	r0, {r2, r5, r8, r9, sl, sp, lr}
	SetLED(PROGRAM, 0);
      14:	087d0002 	ldmdaeq	sp!, {r1}^
	...
	SetLED(RXD, 0);
      20:	0800668a 	stmdaeq	r0, {r1, r3, r7, r9, sl, sp, lr}
	SetLED(PLAY, 0);
      24:	0800669c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, sp, lr}
      28:	9f300002 	svcls	0x00300002
	SetLED(AUX, 0);
      2c:	080066a4 	stmdaeq	r0, {r2, r5, r7, r9, sl, sp, lr}
      30:	08006724 	stmdaeq	r0, {r2, r5, r8, r9, sl, sp, lr}
	switch (level) {	// Turn them on.
      34:	00540001 	subseq	r0, r4, r1
	...
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      44:	02000000 	andeq	r0, r0, #0
      48:	00007d00 	andeq	r7, r0, r0, lsl #26
      4c:	00000000 	andeq	r0, r0, r0
	SetLED(PROGRAM, 0);
	SetLED(RXD, 0);
	SetLED(PLAY, 0);
	SetLED(AUX, 0);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
      50:	02000000 	andeq	r0, r0, #0
      54:	00087d00 	andeq	r7, r8, r0, lsl #26
	...
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
      64:	01000000 	mrseq	r0, (UNDEF: 0)
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
      68:	00005000 	andeq	r5, r0, r0
		default: return;
	}
	mDelay(100);
      6c:	00000000 	andeq	r0, r0, r0
	switch (level) {	// Turn them on.
      70:	00040000 	andeq	r0, r4, r0
      74:	9f5001f3 	svcls	0x005001f3
	...
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      84:	0000000c 	andeq	r0, r0, ip
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
		default: return;
	}
	mDelay(100);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
      88:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
      8c:	14000000 	strne	r0, [r0], #-0
      90:	04000000 	streq	r0, [r0], #-0
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
      94:	5001f300 	andpl	pc, r1, r0, lsl #6
      98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      9c:	00000000 	andeq	r0, r0, r0
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
      a0:	00001400 	andeq	r1, r0, r0, lsl #8
		default: return;
	}
	mDelay(100);
      a4:	00001600 	andeq	r1, r0, r0, lsl #12
}
      a8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
		default: return;
	}
	mDelay(100);
      ac:	00001600 	andeq	r1, r0, r0, lsl #12
      b0:	00006400 	andeq	r6, r0, r0, lsl #8
      b4:	7d000200 	sfmvc	f0, 4, [r0, #-0]
      b8:	00000008 	andeq	r0, r0, r8
      bc:	00000000 	andeq	r0, r0, r0
      c0:	00001400 	andeq	r1, r0, r0, lsl #8
      c4:	00001800 	andeq	r1, r0, r0, lsl #16
      c8:	50000100 	andpl	r0, r0, r0, lsl #2
      cc:	00000018 	andeq	r0, r0, r8, lsl r0
      d0:	00000064 	andeq	r0, r0, r4, rrx
      d4:	01f30004 	mvnseq	r0, r4
      d8:	00009f50 	andeq	r9, r0, r0, asr pc
      dc:	00000000 	andeq	r0, r0, r0
      e0:	00140000 	andseq	r0, r4, r0
      e4:	00180000 	andseq	r0, r8, r0
      e8:	00020000 	andeq	r0, r2, r0
      ec:	00009f30 	andeq	r9, r0, r0, lsr pc
      f0:	00000000 	andeq	r0, r0, r0
      f4:	001e0000 	andseq	r0, lr, r0
      f8:	00290000 	eoreq	r0, r9, r0
      fc:	00020000 	andeq	r0, r2, r0
     100:	004c0074 	subeq	r0, ip, r4, ror r0
     104:	004f0000 	subeq	r0, pc, r0
     108:	00020000 	andeq	r0, r2, r0
     10c:	00000074 	andeq	r0, r0, r4, ror r0
     110:	00000000 	andeq	r0, r0, r0
     114:	00640000 	rsbeq	r0, r4, r0
     118:	00660000 	rsbeq	r0, r6, r0
     11c:	00010000 	andeq	r0, r1, r0
     120:	00006650 	andeq	r6, r0, r0, asr r6
     124:	00006900 	andeq	r6, r0, r0, lsl #18
     128:	70000300 	andvc	r0, r0, r0, lsl #6
     12c:	00699f76 	rsbeq	r9, r9, r6, ror pc
     130:	006a0000 	rsbeq	r0, sl, r0
     134:	00040000 	andeq	r0, r4, r0
     138:	9f5001f3 	svcls	0x005001f3
	...
     144:	0000006a 	andeq	r0, r0, sl, rrx
     148:	00000074 	andeq	r0, r0, r4, ror r0
     14c:	74500001 	ldrbvc	r0, [r0], #-1
     150:	76000000 	strvc	r0, [r0], -r0
     154:	04000000 	streq	r0, [r0], #-0
     158:	5001f300 	andpl	pc, r1, r0, lsl #6
     15c:	0000769f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
     160:	00008000 	andeq	r8, r0, r0
     164:	50000100 	andpl	r0, r0, r0, lsl #2
     168:	00000080 	andeq	r0, r0, r0, lsl #1
     16c:	00000082 	andeq	r0, r0, r2, lsl #1
     170:	01f30004 	mvnseq	r0, r4
     174:	00829f50 	addeq	r9, r2, r0, asr pc
     178:	00840000 	addeq	r0, r4, r0
     17c:	00010000 	andeq	r0, r1, r0
     180:	00008450 	andeq	r8, r0, r0, asr r4
     184:	00009000 	andeq	r9, r0, r0
     188:	f3000400 	vshl.u8	d0, d0, d0
     18c:	009f5001 	addseq	r5, pc, r1
     190:	00000000 	andeq	r0, r0, r0
     194:	0c000000 	stceq	0, cr0, [r0], {-0}
     198:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     19c:	02000001 	andeq	r0, r0, #1
     1a0:	0e007d00 	cdpeq	13, 0, cr7, cr0, cr0, {0}
     1a4:	50000001 	andpl	r0, r0, r1
     1a8:	02000001 	andeq	r0, r0, #1
     1ac:	00087d00 	andeq	r7, r8, r0, lsl #26
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	50000000 	andpl	r0, r0, r0
     1b8:	52000001 	andpl	r0, r0, #1
     1bc:	02000001 	andeq	r0, r0, #1
     1c0:	52007d00 	andpl	r7, r0, #0
     1c4:	94000001 	strls	r0, [r0], #-1
     1c8:	02000001 	andeq	r0, r0, #1
     1cc:	00087d00 	andeq	r7, r8, r0, lsl #26
     1d0:	00000000 	andeq	r0, r0, r0
     1d4:	94000000 	strls	r0, [r0], #-0
     1d8:	99000001 	stmdbls	r0, {r0}
     1dc:	01000001 	tsteq	r0, r1
     1e0:	01995000 	orrseq	r5, r9, r0
     1e4:	019a0000 	orrseq	r0, sl, r0
     1e8:	00040000 	andeq	r0, r4, r0
     1ec:	9f5001f3 	svcls	0x005001f3
     1f0:	0000019a 	muleq	r0, sl, r1
     1f4:	0000019d 	muleq	r0, sp, r1
     1f8:	9d500001 	ldclls	0, cr0, [r0, #-4]
     1fc:	9e000001 	cdpls	0, 0, cr0, cr0, cr1, {0}
     200:	04000001 	streq	r0, [r0], #-1
     204:	5001f300 	andpl	pc, r1, r0, lsl #6
     208:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     20c:	00000000 	andeq	r0, r0, r0
     210:	0001ac00 	andeq	sl, r1, r0, lsl #24
     214:	0001b100 	andeq	fp, r1, r0, lsl #2
     218:	50000100 	andpl	r0, r0, r0, lsl #2
     21c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
     220:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
     224:	01f30004 	mvnseq	r0, r4
     228:	01b29f50 			; <UNDEFINED> instruction: 0x01b29f50
     22c:	01be0000 			; <UNDEFINED> instruction: 0x01be0000
     230:	00010000 	andeq	r0, r1, r0
     234:	0001be50 	andeq	fp, r1, r0, asr lr
     238:	0001c800 	andeq	ip, r1, r0, lsl #16
     23c:	f3000400 	vshl.u8	d0, d0, d0
     240:	009f5001 	addseq	r5, pc, r1
     244:	00000000 	andeq	r0, r0, r0
     248:	ac000000 	stcge	0, cr0, [r0], {-0}
     24c:	b1000001 	tstlt	r0, r1
     250:	01000001 	tsteq	r0, r1
     254:	01b15100 			; <UNDEFINED> instruction: 0x01b15100
     258:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
     25c:	00040000 	andeq	r0, r4, r0
     260:	9f5101f3 	svcls	0x005101f3
     264:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
     268:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     26c:	b8510001 	ldmdalt	r1, {r0}^
     270:	c8000001 	stmdagt	r0, {r0}
     274:	04000001 	streq	r0, [r0], #-1
     278:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     27c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     280:	00000000 	andeq	r0, r0, r0
     284:	0001c800 	andeq	ip, r1, r0, lsl #16
     288:	0001ca00 	andeq	ip, r1, r0, lsl #20
     28c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     290:	0001ca00 	andeq	ip, r1, r0, lsl #20
     294:	0001e800 	andeq	lr, r1, r0, lsl #16
     298:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     29c:	00000008 	andeq	r0, r0, r8
     2a0:	00000000 	andeq	r0, r0, r0
     2a4:	0001c800 	andeq	ip, r1, r0, lsl #16
     2a8:	0001d200 	andeq	sp, r1, r0, lsl #4
     2ac:	50000100 	andpl	r0, r0, r0, lsl #2
     2b0:	000001d2 	ldrdeq	r0, [r0], -r2
     2b4:	000001e8 	andeq	r0, r0, r8, ror #3
     2b8:	01f30004 	mvnseq	r0, r4
     2bc:	00009f50 	andeq	r9, r0, r0, asr pc
     2c0:	00000000 	andeq	r0, r0, r0
     2c4:	01e80000 	mvneq	r0, r0
     2c8:	01ec0000 	mvneq	r0, r0
     2cc:	00010000 	andeq	r0, r1, r0
     2d0:	0001ec50 	andeq	lr, r1, r0, asr ip
     2d4:	00020800 	andeq	r0, r2, r0, lsl #16
     2d8:	f3000400 	vshl.u8	d0, d0, d0
     2dc:	009f5001 	addseq	r5, pc, r1
     2e0:	00000000 	andeq	r0, r0, r0
     2e4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     2e8:	f6000001 			; <UNDEFINED> instruction: 0xf6000001
     2ec:	01000001 	tsteq	r0, r1
     2f0:	01f65100 	mvnseq	r5, r0, lsl #2
     2f4:	01fa0000 	mvnseq	r0, r0
     2f8:	00040000 	andeq	r0, r4, r0
     2fc:	9f5101f3 	svcls	0x005101f3
     300:	000001fa 	strdeq	r0, [r0], -sl
     304:	000001fe 	strdeq	r0, [r0], -lr
     308:	fe510001 	cdp2	0, 5, cr0, cr1, cr1, {0}
     30c:	08000001 	stmdaeq	r0, {r0}
     310:	04000002 	streq	r0, [r0], #-2
     314:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     318:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     31c:	00000000 	andeq	r0, r0, r0
     320:	00020800 	andeq	r0, r2, r0, lsl #16
     324:	00020a00 	andeq	r0, r2, r0, lsl #20
     328:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     32c:	00020a00 	andeq	r0, r2, r0, lsl #20
     330:	00024400 	andeq	r4, r2, r0, lsl #8
     334:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     338:	00000008 	andeq	r0, r0, r8
     33c:	00000000 	andeq	r0, r0, r0
     340:	00020800 	andeq	r0, r2, r0, lsl #16
     344:	00022a00 	andeq	r2, r2, r0, lsl #20
     348:	50000100 	andpl	r0, r0, r0, lsl #2
     34c:	0000022a 	andeq	r0, r0, sl, lsr #4
     350:	00000244 	andeq	r0, r0, r4, asr #4
     354:	01f30004 	mvnseq	r0, r4
     358:	00009f50 	andeq	r9, r0, r0, asr pc
     35c:	00000000 	andeq	r0, r0, r0
     360:	02440000 	subeq	r0, r4, #0
     364:	024a0000 	subeq	r0, sl, #0
     368:	00010000 	andeq	r0, r1, r0
     36c:	00024a50 	andeq	r4, r2, r0, asr sl
     370:	00024e00 	andeq	r4, r2, r0, lsl #28
     374:	f3000400 	vshl.u8	d0, d0, d0
     378:	009f5001 	addseq	r5, pc, r1
     37c:	00000000 	andeq	r0, r0, r0
     380:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
     384:	51000002 	tstpl	r0, r2
     388:	01000002 	tsteq	r0, r2
     38c:	02515000 	subseq	r5, r1, #0
     390:	02520000 	subseq	r0, r2, #0
     394:	00040000 	andeq	r0, r4, r0
     398:	9f5001f3 	svcls	0x005001f3
	...
     3a4:	00000252 	andeq	r0, r0, r2, asr r2
     3a8:	00000256 	andeq	r0, r0, r6, asr r2
     3ac:	007d0002 	rsbseq	r0, sp, r2
     3b0:	00000256 	andeq	r0, r0, r6, asr r2
     3b4:	00000320 	andeq	r0, r0, r0, lsr #6
     3b8:	087d0002 	ldmdaeq	sp!, {r1}^
	...
     3c4:	00000252 	andeq	r0, r0, r2, asr r2
     3c8:	00000262 	andeq	r0, r0, r2, ror #4
     3cc:	62500001 	subsvs	r0, r0, #1
     3d0:	7e000002 	cdpvc	0, 0, cr0, cr0, cr2, {0}
     3d4:	04000002 	streq	r0, [r0], #-2
     3d8:	5001f300 	andpl	pc, r1, r0, lsl #6
     3dc:	00027e9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
     3e0:	00028a00 	andeq	r8, r2, r0, lsl #20
     3e4:	50000100 	andpl	r0, r0, r0, lsl #2
     3e8:	0000028a 	andeq	r0, r0, sl, lsl #5
     3ec:	000002ca 	andeq	r0, r0, sl, asr #5
     3f0:	01f30004 	mvnseq	r0, r4
     3f4:	02ca9f50 	sbceq	r9, sl, #320	; 0x140
     3f8:	02dc0000 	sbcseq	r0, ip, #0
     3fc:	00010000 	andeq	r0, r1, r0
     400:	0002dc50 	andeq	sp, r2, r0, asr ip
     404:	00032000 	andeq	r2, r3, r0
     408:	f3000400 	vshl.u8	d0, d0, d0
     40c:	009f5001 	addseq	r5, pc, r1
     410:	00000000 	andeq	r0, r0, r0
     414:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
     418:	02000002 	andeq	r0, r0, #2
     41c:	01000003 	tsteq	r0, r3
     420:	03025000 	movweq	r5, #8192	; 0x2000
     424:	030e0000 	movweq	r0, #57344	; 0xe000
     428:	00010000 	andeq	r0, r1, r0
     42c:	00000054 	andeq	r0, r0, r4, asr r0
     430:	00000000 	andeq	r0, r0, r0
     434:	00032000 	andeq	r2, r3, r0
     438:	00032200 	andeq	r2, r3, r0, lsl #4
     43c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     440:	00032200 	andeq	r2, r3, r0, lsl #4
     444:	00038000 	andeq	r8, r3, r0
     448:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     44c:	00000008 	andeq	r0, r0, r8
     450:	00000000 	andeq	r0, r0, r0
     454:	00032000 	andeq	r2, r3, r0
     458:	00032c00 	andeq	r2, r3, r0, lsl #24
     45c:	50000100 	andpl	r0, r0, r0, lsl #2
     460:	0000032c 	andeq	r0, r0, ip, lsr #6
     464:	0000036c 	andeq	r0, r0, ip, ror #6
     468:	01f30004 	mvnseq	r0, r4
     46c:	036c9f50 	cmneq	ip, #320	; 0x140
     470:	03730000 	cmneq	r3, #0
     474:	00010000 	andeq	r0, r1, r0
     478:	00037350 	andeq	r7, r3, r0, asr r3
     47c:	00038000 	andeq	r8, r3, r0
     480:	f3000400 	vshl.u8	d0, d0, d0
     484:	009f5001 	addseq	r5, pc, r1
     488:	00000000 	andeq	r0, r0, r0
     48c:	80000000 	andhi	r0, r0, r0
     490:	82000003 	andhi	r0, r0, #3
     494:	02000003 	andeq	r0, r0, #3
     498:	82007d00 	andhi	r7, r0, #0
     49c:	cc000003 	stcgt	0, cr0, [r0], {3}
     4a0:	02000003 	andeq	r0, r0, #3
     4a4:	00107d00 	andseq	r7, r0, r0, lsl #26
     4a8:	00000000 	andeq	r0, r0, r0
     4ac:	80000000 	andhi	r0, r0, r0
     4b0:	94000003 	strls	r0, [r0], #-3
     4b4:	01000003 	tsteq	r0, r3
     4b8:	03945000 	orrseq	r5, r4, #0
     4bc:	03cc0000 	biceq	r0, ip, #0
     4c0:	00040000 	andeq	r0, r4, r0
     4c4:	9f5001f3 	svcls	0x005001f3
	...
     4d0:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
     4d4:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
     4d8:	b6500001 	ldrblt	r0, [r0], -r1
     4dc:	cc000003 	stcgt	0, cr0, [r0], {3}
     4e0:	01000003 	tsteq	r0, r3
     4e4:	00005600 	andeq	r5, r0, r0, lsl #12
     4e8:	00000000 	andeq	r0, r0, r0
     4ec:	03cc0000 	biceq	r0, ip, #0
     4f0:	03ce0000 	biceq	r0, lr, #0
     4f4:	00020000 	andeq	r0, r2, r0
     4f8:	03ce007d 	biceq	r0, lr, #125	; 0x7d
     4fc:	04000000 	streq	r0, [r0], #-0
     500:	00020000 	andeq	r0, r2, r0
     504:	0000087d 	andeq	r0, r0, sp, ror r8
     508:	00000000 	andeq	r0, r0, r0
     50c:	03e60000 	mvneq	r0, #0
     510:	03f80000 	mvnseq	r0, #0
     514:	00010000 	andeq	r0, r1, r0
     518:	00000050 	andeq	r0, r0, r0, asr r0
     51c:	00000000 	andeq	r0, r0, r0
     520:	0003cc00 	andeq	ip, r3, r0, lsl #24
     524:	0003e000 	andeq	lr, r3, r0
     528:	0a000400 	beq	1530 <__Stack_Size+0x1130>
     52c:	e09f03e8 	adds	r0, pc, r8, ror #7
     530:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
     534:	04000003 	streq	r0, [r0], #-3
     538:	03e70a00 	mvneq	r0, #0
     53c:	0003f89f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
     540:	00040000 	andeq	r0, r4, r0
     544:	0a000400 	beq	154c <__Stack_Size+0x114c>
     548:	009f03e8 	addseq	r0, pc, r8, ror #7
     54c:	00000000 	andeq	r0, r0, r0
     550:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     554:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
     558:	02000003 	andeq	r0, r0, #3
     55c:	009f3100 	addseq	r3, pc, r0, lsl #2
	...
     568:	02000004 	andeq	r0, r0, #4
     56c:	02000004 	andeq	r0, r0, #4
     570:	02007d00 	andeq	r7, r0, #0
     574:	24000004 	strcs	r0, [r0], #-4
     578:	02000004 	andeq	r0, r0, #4
     57c:	00107d00 	andseq	r7, r0, r0, lsl #26
     580:	00000000 	andeq	r0, r0, r0
     584:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     588:	1a000004 	bne	5a0 <__Stack_Size+0x1a0>
     58c:	01000004 	tsteq	r0, r4
     590:	00005000 	andeq	r5, r0, r0
     594:	00000000 	andeq	r0, r0, r0
     598:	04000000 	streq	r0, [r0], #-0
     59c:	04060000 	streq	r0, [r6], #-0
     5a0:	00020000 	andeq	r0, r2, r0
     5a4:	00009f30 	andeq	r9, r0, r0, lsr pc
     5a8:	00000000 	andeq	r0, r0, r0
     5ac:	04000000 	streq	r0, [r0], #-0
     5b0:	04060000 	streq	r0, [r6], #-0
     5b4:	00060000 	andeq	r0, r6, r0
     5b8:	006d8003 	rsbeq	r8, sp, r3
     5bc:	04069f08 	streq	r9, [r6], #-3848	; 0xf08
     5c0:	04240000 	strteq	r0, [r4], #-0
     5c4:	00010000 	andeq	r0, r1, r0
     5c8:	00000054 	andeq	r0, r0, r4, asr r0
     5cc:	00000000 	andeq	r0, r0, r0
     5d0:	00042400 	andeq	r2, r4, r0, lsl #8
     5d4:	00042600 	andeq	r2, r4, r0, lsl #12
     5d8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     5dc:	00042600 	andeq	r2, r4, r0, lsl #12
     5e0:	00046c00 	andeq	r6, r4, r0, lsl #24
     5e4:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     5e8:	00000010 	andeq	r0, r0, r0, lsl r0
     5ec:	00000000 	andeq	r0, r0, r0
     5f0:	00042400 	andeq	r2, r4, r0, lsl #8
     5f4:	00043900 	andeq	r3, r4, r0, lsl #18
     5f8:	50000100 	andpl	r0, r0, r0, lsl #2
     5fc:	00000439 	andeq	r0, r0, r9, lsr r4
     600:	00000462 	andeq	r0, r0, r2, ror #8
     604:	62550001 	subsvs	r0, r5, #1
     608:	6c000004 	stcvs	0, cr0, [r0], {4}
     60c:	01000004 	tsteq	r0, r4
     610:	00005000 	andeq	r5, r0, r0
     614:	00000000 	andeq	r0, r0, r0
     618:	04240000 	strteq	r0, [r4], #-0
     61c:	042a0000 	strteq	r0, [sl], #-0
     620:	00020000 	andeq	r0, r2, r0
     624:	043a9f30 	ldrteq	r9, [sl], #-3888	; 0xf30
     628:	043c0000 	ldrteq	r0, [ip], #-0
     62c:	00020000 	andeq	r0, r2, r0
     630:	00009f30 	andeq	r9, r0, r0, lsr pc
     634:	00000000 	andeq	r0, r0, r0
     638:	04540000 	ldrbeq	r0, [r4], #-0
     63c:	04620000 	strbteq	r0, [r2], #-0
     640:	00030000 	andeq	r0, r3, r0
     644:	009f9608 	addseq	r9, pc, r8, lsl #12
     648:	00000000 	andeq	r0, r0, r0
     64c:	6c000000 	stcvs	0, cr0, [r0], {-0}
     650:	6e000004 	cdpvs	0, 0, cr0, cr0, cr4, {0}
     654:	02000004 	andeq	r0, r0, #4
     658:	6e007d00 	cdpvs	13, 0, cr7, cr0, cr0, {0}
     65c:	94000004 	strls	r0, [r0], #-4
     660:	02000004 	andeq	r0, r0, #4
     664:	00087d00 	andeq	r7, r8, r0, lsl #26
     668:	00000000 	andeq	r0, r0, r0
     66c:	94000000 	strls	r0, [r0], #-0
     670:	a6000004 	strge	r0, [r0], -r4
     674:	01000004 	tsteq	r0, r4
     678:	04a65000 	strteq	r5, [r6], #0
     67c:	04bc0000 	ldrteq	r0, [ip], #0
     680:	00040000 	andeq	r0, r4, r0
     684:	9f5001f3 	svcls	0x005001f3
	...
     690:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
     694:	000004ce 	andeq	r0, r0, lr, asr #9
     698:	ce500001 	cdpgt	0, 5, cr0, cr0, cr1, {0}
     69c:	e4000004 	str	r0, [r0], #-4
     6a0:	04000004 	streq	r0, [r0], #-4
     6a4:	5001f300 	andpl	pc, r1, r0, lsl #6
     6a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     6ac:	00000000 	andeq	r0, r0, r0
     6b0:	0004e400 	andeq	lr, r4, r0, lsl #8
     6b4:	0004e600 	andeq	lr, r4, r0, lsl #12
     6b8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     6bc:	0004e600 	andeq	lr, r4, r0, lsl #12
     6c0:	00051c00 	andeq	r1, r5, r0, lsl #24
     6c4:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     6c8:	00000008 	andeq	r0, r0, r8
     6cc:	00000000 	andeq	r0, r0, r0
     6d0:	0004e400 	andeq	lr, r4, r0, lsl #8
     6d4:	0004eb00 	andeq	lr, r4, r0, lsl #22
     6d8:	50000100 	andpl	r0, r0, r0, lsl #2
     6dc:	000004eb 	andeq	r0, r0, fp, ror #9
     6e0:	0000051c 	andeq	r0, r0, ip, lsl r5
     6e4:	01f30004 	mvnseq	r0, r4
     6e8:	00009f50 	andeq	r9, r0, r0, asr pc
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	04e40000 	strbteq	r0, [r4], #0
     6f4:	04eb0000 	strbteq	r0, [fp], #0
     6f8:	00010000 	andeq	r0, r1, r0
     6fc:	0004eb51 	andeq	lr, r4, r1, asr fp
     700:	00051c00 	andeq	r1, r5, r0, lsl #24
     704:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     710:	0000051c 	andeq	r0, r0, ip, lsl r5
     714:	00000523 	andeq	r0, r0, r3, lsr #10
     718:	23500001 	cmpcs	r0, #1
     71c:	24000005 	strcs	r0, [r0], #-5
     720:	04000005 	streq	r0, [r0], #-5
     724:	5001f300 	andpl	pc, r1, r0, lsl #6
     728:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     72c:	00000000 	andeq	r0, r0, r0
     730:	00051c00 	andeq	r1, r5, r0, lsl #24
     734:	00052000 	andeq	r2, r5, r0
     738:	51000100 	mrspl	r0, (UNDEF: 16)
     73c:	00000520 	andeq	r0, r0, r0, lsr #10
     740:	00000524 	andeq	r0, r0, r4, lsr #10
     744:	01f30004 	mvnseq	r0, r4
     748:	00009f51 	andeq	r9, r0, r1, asr pc
     74c:	00000000 	andeq	r0, r0, r0
     750:	051c0000 	ldreq	r0, [ip, #-0]
     754:	05230000 	streq	r0, [r3, #-0]!
     758:	00010000 	andeq	r0, r1, r0
     75c:	00052352 	andeq	r2, r5, r2, asr r3
     760:	00052400 	andeq	r2, r5, r0, lsl #8
     764:	f3000400 	vshl.u8	d0, d0, d0
     768:	009f5201 	addseq	r5, pc, r1, lsl #4
     76c:	00000000 	andeq	r0, r0, r0
     770:	24000000 	strcs	r0, [r0], #-0
     774:	44000005 	strmi	r0, [r0], #-5
     778:	01000005 	tsteq	r0, r5
     77c:	05445000 	strbeq	r5, [r4, #-0]
     780:	05580000 	ldrbeq	r0, [r8, #-0]
     784:	00040000 	andeq	r0, r4, r0
     788:	9f5001f3 	svcls	0x005001f3
	...
     794:	00000558 	andeq	r0, r0, r8, asr r5
     798:	00000578 	andeq	r0, r0, r8, ror r5
     79c:	78500001 	ldmdavc	r0, {r0}^
     7a0:	8c000005 	stchi	0, cr0, [r0], {5}
     7a4:	04000005 	streq	r0, [r0], #-5
     7a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     7ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     7b0:	00000000 	andeq	r0, r0, r0
     7b4:	00058c00 	andeq	r8, r5, r0, lsl #24
     7b8:	00058e00 	andeq	r8, r5, r0, lsl #28
     7bc:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     7c0:	00058e00 	andeq	r8, r5, r0, lsl #28
     7c4:	0005e800 	andeq	lr, r5, r0, lsl #16
     7c8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     7cc:	00000018 	andeq	r0, r0, r8, lsl r0
     7d0:	00000000 	andeq	r0, r0, r0
     7d4:	00058c00 	andeq	r8, r5, r0, lsl #24
     7d8:	00059200 	andeq	r9, r5, r0, lsl #4
     7dc:	50000100 	andpl	r0, r0, r0, lsl #2
     7e0:	00000592 	muleq	r0, r2, r5
     7e4:	0000059a 	muleq	r0, sl, r5
     7e8:	9a540001 	bls	15007f4 <__Stack_Size+0x15003f4>
     7ec:	b7000005 	strlt	r0, [r0, -r5]
     7f0:	02000005 	andeq	r0, r0, #5
     7f4:	b7689100 	strblt	r9, [r8, -r0, lsl #2]!
     7f8:	e8000005 	stmda	r0, {r0, r2}
     7fc:	04000005 	streq	r0, [r0], #-5
     800:	5001f300 	andpl	pc, r1, r0, lsl #6
     804:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     808:	00000000 	andeq	r0, r0, r0
     80c:	0005f400 	andeq	pc, r5, r0, lsl #8
     810:	0005f600 	andeq	pc, r5, r0, lsl #12
     814:	30000200 	andcc	r0, r0, r0, lsl #4
     818:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     81c:	00000000 	andeq	r0, r0, r0
     820:	00061800 	andeq	r1, r6, r0, lsl #16
     824:	00061a00 	andeq	r1, r6, r0, lsl #20
     828:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     82c:	00061a00 	andeq	r1, r6, r0, lsl #20
     830:	00066c00 	andeq	r6, r6, r0, lsl #24
     834:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     838:	00000010 	andeq	r0, r0, r0, lsl r0
     83c:	00000000 	andeq	r0, r0, r0
     840:	00061800 	andeq	r1, r6, r0, lsl #16
     844:	00062000 	andeq	r2, r6, r0
     848:	50000100 	andpl	r0, r0, r0, lsl #2
     84c:	00000620 	andeq	r0, r0, r0, lsr #12
     850:	0000066c 	andeq	r0, r0, ip, ror #12
     854:	00560001 	subseq	r0, r6, r1
     858:	00000000 	andeq	r0, r0, r0
     85c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     860:	20000006 	andcs	r0, r0, r6
     864:	01000006 	tsteq	r0, r6
     868:	06205100 	strteq	r5, [r0], -r0, lsl #2
     86c:	066c0000 	strbteq	r0, [ip], -r0
     870:	00040000 	andeq	r0, r4, r0
     874:	9f5101f3 	svcls	0x005101f3
	...
     880:	00000618 	andeq	r0, r0, r8, lsl r6
     884:	00000620 	andeq	r0, r0, r0, lsr #12
     888:	9f300002 	svcls	0x00300002
	...
     894:	0000066c 	andeq	r0, r0, ip, ror #12
     898:	0000066e 	andeq	r0, r0, lr, ror #12
     89c:	007d0002 	rsbseq	r0, sp, r2
     8a0:	0000066e 	andeq	r0, r0, lr, ror #12
     8a4:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
     8a8:	107d0002 	rsbsne	r0, sp, r2
	...
     8b4:	0000066c 	andeq	r0, r0, ip, ror #12
     8b8:	00000672 	andeq	r0, r0, r2, ror r6
     8bc:	72500001 	subsvc	r0, r0, #1
     8c0:	bc000006 	stclt	0, cr0, [r0], {6}
     8c4:	01000006 	tsteq	r0, r6
     8c8:	00005500 	andeq	r5, r0, r0, lsl #10
     8cc:	00000000 	andeq	r0, r0, r0
     8d0:	066c0000 	strbteq	r0, [ip], -r0
     8d4:	06720000 	ldrbteq	r0, [r2], -r0
     8d8:	00020000 	andeq	r0, r2, r0
     8dc:	06749f30 	uhasxeq	r9, r4, r0
     8e0:	06b00000 	ldrteq	r0, [r0], r0
     8e4:	00010000 	andeq	r0, r1, r0
     8e8:	0006b452 	andeq	fp, r6, r2, asr r4
     8ec:	0006bc00 	andeq	fp, r6, r0, lsl #24
     8f0:	52000100 	andpl	r0, r0, #0
	...
     8fc:	000006bc 			; <UNDEFINED> instruction: 0x000006bc
     900:	000006c0 	andeq	r0, r0, r0, asr #13
     904:	c0500001 	subsgt	r0, r0, r1
     908:	c4000006 	strgt	r0, [r0], #-6
     90c:	04000006 	streq	r0, [r0], #-6
     910:	5001f300 	andpl	pc, r1, r0, lsl #6
     914:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     918:	00000000 	andeq	r0, r0, r0
     91c:	0006d800 	andeq	sp, r6, r0, lsl #16
     920:	0006da00 	andeq	sp, r6, r0, lsl #20
     924:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     928:	0006da00 	andeq	sp, r6, r0, lsl #20
     92c:	00075400 	andeq	r5, r7, r0, lsl #8
     930:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     934:	00000008 	andeq	r0, r0, r8
     938:	00000000 	andeq	r0, r0, r0
     93c:	0006f000 	andeq	pc, r6, r0
     940:	00070a00 	andeq	r0, r7, r0, lsl #20
     944:	50000100 	andpl	r0, r0, r0, lsl #2
     948:	0000070c 	andeq	r0, r0, ip, lsl #14
     94c:	00000714 	andeq	r0, r0, r4, lsl r7
     950:	00500001 	subseq	r0, r0, r1
     954:	00000000 	andeq	r0, r0, r0
     958:	54000000 	strpl	r0, [r0], #-0
     95c:	56000007 	strpl	r0, [r0], -r7
     960:	02000007 	andeq	r0, r0, #7
     964:	56007d00 	strpl	r7, [r0], -r0, lsl #26
     968:	84000007 	strhi	r0, [r0], #-7
     96c:	02000007 	andeq	r0, r0, #7
     970:	00087d00 	andeq	r7, r8, r0, lsl #26
     974:	00000000 	andeq	r0, r0, r0
     978:	54000000 	strpl	r0, [r0], #-0
     97c:	5a000007 	bpl	9a0 <__Stack_Size+0x5a0>
     980:	01000007 	tsteq	r0, r7
     984:	075a5000 	ldrbeq	r5, [sl, -r0]
     988:	07840000 	streq	r0, [r4, r0]
     98c:	00040000 	andeq	r0, r4, r0
     990:	9f5001f3 	svcls	0x005001f3
	...
     99c:	00000788 	andeq	r0, r0, r8, lsl #15
     9a0:	0000078a 	andeq	r0, r0, sl, lsl #15
     9a4:	007d0002 	rsbseq	r0, sp, r2
     9a8:	0000078a 	andeq	r0, r0, sl, lsl #15
     9ac:	00000884 	andeq	r0, r0, r4, lsl #17
     9b0:	107d0002 	rsbsne	r0, sp, r2
	...
     9bc:	000007ec 	andeq	r0, r0, ip, ror #15
     9c0:	000007ee 	andeq	r0, r0, lr, ror #15
     9c4:	9f300002 	svcls	0x00300002
     9c8:	000007ee 	andeq	r0, r0, lr, ror #15
     9cc:	000007fc 	strdeq	r0, [r0], -ip
     9d0:	fc520001 	mrrc2	0, 0, r0, r2, cr1
     9d4:	02000007 	andeq	r0, r0, #7
     9d8:	03000008 	movweq	r0, #8
     9dc:	9f7f7200 	svcls	0x007f7200
     9e0:	00000802 	andeq	r0, r0, r2, lsl #16
     9e4:	00000806 	andeq	r0, r0, r6, lsl #16
     9e8:	00520001 	subseq	r0, r2, r1
     9ec:	00000000 	andeq	r0, r0, r0
     9f0:	30000000 	andcc	r0, r0, r0
     9f4:	76000008 	strvc	r0, [r0], -r8
     9f8:	01000008 	tsteq	r0, r8
     9fc:	00005500 	andeq	r5, r0, r0, lsl #10
     a00:	00000000 	andeq	r0, r0, r0
     a04:	08360000 	ldmdaeq	r6!, {}	; <UNPREDICTABLE>
     a08:	08460000 	stmdaeq	r6, {}^	; <UNPREDICTABLE>
     a0c:	00010000 	andeq	r0, r1, r0
     a10:	00085250 	andeq	r5, r8, r0, asr r2
     a14:	00085600 	andeq	r5, r8, r0, lsl #12
     a18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a24:	00000788 	andeq	r0, r0, r8, lsl #15
     a28:	000007ee 	andeq	r0, r0, lr, ror #15
     a2c:	9f300002 	svcls	0x00300002
     a30:	000007ee 	andeq	r0, r0, lr, ror #15
     a34:	00000800 	andeq	r0, r0, r0, lsl #16
     a38:	00530001 	subseq	r0, r3, r1
     a3c:	04000008 	streq	r0, [r0], #-8
     a40:	01000008 	tsteq	r0, r8
     a44:	08045000 	stmdaeq	r4, {ip, lr}
     a48:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
     a4c:	00010000 	andeq	r0, r1, r0
     a50:	00080a53 	andeq	r0, r8, r3, asr sl
     a54:	00081e00 	andeq	r1, r8, r0, lsl #28
     a58:	73000400 	movwvc	r0, #1024	; 0x400
     a5c:	009f2000 	addseq	r2, pc, r0
     a60:	00000000 	andeq	r0, r0, r0
     a64:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     a68:	6e000008 	cdpvs	0, 0, cr0, cr0, cr8, {0}
     a6c:	02000008 	andeq	r0, r0, #8
     a70:	009f3600 	addseq	r3, pc, r0, lsl #12
     a74:	00000000 	andeq	r0, r0, r0
     a78:	84000000 	strhi	r0, [r0], #-0
     a7c:	86000008 	strhi	r0, [r0], -r8
     a80:	02000008 	andeq	r0, r0, #8
     a84:	86007d00 	strhi	r7, [r0], -r0, lsl #26
     a88:	04000008 	streq	r0, [r0], #-8
     a8c:	0200000a 	andeq	r0, r0, #10
     a90:	00107d00 	andseq	r7, r0, r0, lsl #26
     a94:	00000000 	andeq	r0, r0, r0
     a98:	02000000 	andeq	r0, r0, #0
     a9c:	04000009 	streq	r0, [r0], #-9
     aa0:	02000009 	andeq	r0, r0, #9
     aa4:	049f3000 	ldreq	r3, [pc], #0	; aac <__Stack_Size+0x6ac>
     aa8:	36000009 	strcc	r0, [r0], -r9
     aac:	01000009 	tsteq	r0, r9
     ab0:	09365300 	ldmdbeq	r6!, {r8, r9, ip, lr}
     ab4:	09380000 	ldmdbeq	r8!, {}	; <UNPREDICTABLE>
     ab8:	00030000 	andeq	r0, r3, r0
     abc:	389f7f73 	ldmcc	pc, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
     ac0:	6c000009 	stcvs	0, cr0, [r0], {9}
     ac4:	01000009 	tsteq	r0, r9
     ac8:	09b45300 	ldmibeq	r4!, {r8, r9, ip, lr}
     acc:	09be0000 	ldmibeq	lr!, {}	; <UNPREDICTABLE>
     ad0:	00020000 	andeq	r0, r2, r0
     ad4:	09be9f30 	ldmibeq	lr!, {r4, r5, r8, r9, sl, fp, ip, pc}
     ad8:	09cc0000 	stmibeq	ip, {}^	; <UNPREDICTABLE>
     adc:	00010000 	andeq	r0, r1, r0
     ae0:	0009cc51 	andeq	ip, r9, r1, asr ip
     ae4:	0009d200 	andeq	sp, r9, r0, lsl #4
     ae8:	71000300 	mrsvc	r0, LR_irq
     aec:	09d29f7f 	ldmibeq	r2, {r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}^
     af0:	09da0000 	ldmibeq	sl, {}^	; <UNPREDICTABLE>
     af4:	00010000 	andeq	r0, r1, r0
     af8:	00000051 	andeq	r0, r0, r1, asr r0
     afc:	00000000 	andeq	r0, r0, r0
     b00:	00093a00 	andeq	r3, r9, r0, lsl #20
     b04:	00094e00 	andeq	r4, r9, r0, lsl #28
     b08:	55000100 	strpl	r0, [r0, #-256]	; 0x100
     b0c:	0000094e 	andeq	r0, r0, lr, asr #18
     b10:	00000954 	andeq	r0, r0, r4, asr r9
     b14:	7f750003 	svcvc	0x00750003
     b18:	0009549f 	muleq	r9, pc, r4	; <UNPREDICTABLE>
     b1c:	00095a00 	andeq	r5, r9, r0, lsl #20
     b20:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     b2c:	000008d6 	ldrdeq	r0, [r0], -r6
     b30:	000008e5 	andeq	r0, r0, r5, ror #17
     b34:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     b38:	a8000009 	stmdage	r0, {r0, r3}
     b3c:	01000009 	tsteq	r0, r9
     b40:	00005000 	andeq	r5, r0, r0
     b44:	00000000 	andeq	r0, r0, r0
     b48:	08840000 	stmeq	r4, {}	; <UNPREDICTABLE>
     b4c:	09be0000 	ldmibeq	lr!, {}	; <UNPREDICTABLE>
     b50:	00020000 	andeq	r0, r2, r0
     b54:	09be9f30 	ldmibeq	lr!, {r4, r5, r8, r9, sl, fp, ip, pc}
     b58:	09ce0000 	stmibeq	lr, {}^	; <UNPREDICTABLE>
     b5c:	00010000 	andeq	r0, r1, r0
     b60:	0009d052 	andeq	sp, r9, r2, asr r0
     b64:	0009d400 	andeq	sp, r9, r0, lsl #8
     b68:	52000100 	andpl	r0, r0, #0
     b6c:	000009d4 	ldrdeq	r0, [r0], -r4
     b70:	000009dc 	ldrdeq	r0, [r0], -ip
     b74:	00720004 	rsbseq	r0, r2, r4
     b78:	09dc9f20 	ldmibeq	ip, {r5, r8, r9, sl, fp, ip, pc}^
     b7c:	09de0000 	ldmibeq	lr, {}^	; <UNPREDICTABLE>
     b80:	00050000 	andeq	r0, r5, r0
     b84:	20200072 	eorcs	r0, r0, r2, ror r0
     b88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     b8c:	00000000 	andeq	r0, r0, r0
     b90:	000a2c00 	andeq	r2, sl, r0, lsl #24
     b94:	000a3000 	andeq	r3, sl, r0
     b98:	50000100 	andpl	r0, r0, r0, lsl #2
     b9c:	00000a30 	andeq	r0, r0, r0, lsr sl
     ba0:	00000a3c 	andeq	r0, r0, ip, lsr sl
     ba4:	01f30004 	mvnseq	r0, r4
     ba8:	00009f50 	andeq	r9, r0, r0, asr pc
     bac:	00000000 	andeq	r0, r0, r0
     bb0:	0a480000 	beq	1200bb8 <__Stack_Size+0x12007b8>
     bb4:	0a640000 	beq	1900bbc <__Stack_Size+0x19007bc>
     bb8:	00010000 	andeq	r0, r1, r0
     bbc:	000a6450 	andeq	r6, sl, r0, asr r4
     bc0:	000a6600 	andeq	r6, sl, r0, lsl #12
     bc4:	f3000400 	vshl.u8	d0, d0, d0
     bc8:	669f5001 	ldrvs	r5, [pc], r1
     bcc:	6800000a 	stmdavs	r0, {r1, r3}
     bd0:	0100000a 	tsteq	r0, sl
     bd4:	0a685000 	beq	1a14bdc <__Stack_Size+0x1a147dc>
     bd8:	0a740000 	beq	1d00be0 <__Stack_Size+0x1d007e0>
     bdc:	00040000 	andeq	r0, r4, r0
     be0:	9f5001f3 	svcls	0x005001f3
	...
     bec:	00000a56 	andeq	r0, r0, r6, asr sl
     bf0:	00000a64 	andeq	r0, r0, r4, ror #20
     bf4:	00500001 	subseq	r0, r0, r1
     bf8:	00000000 	andeq	r0, r0, r0
     bfc:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     c00:	aa00000a 	bge	c30 <__Stack_Size+0x830>
     c04:	0100000a 	tsteq	r0, sl
     c08:	0aaa5000 	beq	fea94c10 <SCS_BASE+0x1ea86c10>
     c0c:	0ab00000 	beq	fec00c14 <SCS_BASE+0x1ebf2c14>
     c10:	00040000 	andeq	r0, r4, r0
     c14:	9f5001f3 	svcls	0x005001f3
     c18:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
     c1c:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
     c20:	b2500001 	subslt	r0, r0, #1
     c24:	bc00000a 	stclt	0, cr0, [r0], {10}
     c28:	0400000a 	streq	r0, [r0], #-10
     c2c:	5001f300 	andpl	pc, r1, r0, lsl #6
     c30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c34:	00000000 	andeq	r0, r0, r0
     c38:	000abc00 	andeq	fp, sl, r0, lsl #24
     c3c:	000ac000 	andeq	ip, sl, r0
     c40:	50000100 	andpl	r0, r0, r0, lsl #2
     c44:	00000ac0 	andeq	r0, r0, r0, asr #21
     c48:	00000ac4 	andeq	r0, r0, r4, asr #21
     c4c:	01f30004 	mvnseq	r0, r4
     c50:	00009f50 	andeq	r9, r0, r0, asr pc
     c54:	00000000 	andeq	r0, r0, r0
     c58:	0abc0000 	beq	fef00c60 <SCS_BASE+0x1eef2c60>
     c5c:	0ac00000 	beq	ff000c64 <SCS_BASE+0x1eff2c64>
     c60:	000b0000 	andeq	r0, fp, r0
     c64:	24380071 	ldrtcs	r0, [r8], #-113	; 0x71
     c68:	ff080070 			; <UNDEFINED> instruction: 0xff080070
     c6c:	c09f221a 	addsgt	r2, pc, sl, lsl r2	; <UNPREDICTABLE>
     c70:	c400000a 	strgt	r0, [r0], #-10
     c74:	0c00000a 	stceq	0, cr0, [r0], {10}
     c78:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
     c7c:	5001f324 	andpl	pc, r1, r4, lsr #6
     c80:	221aff08 	andscs	pc, sl, #32
     c84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c88:	00000000 	andeq	r0, r0, r0
     c8c:	000ac400 	andeq	ip, sl, r0, lsl #8
     c90:	000ac600 	andeq	ip, sl, r0, lsl #12
     c94:	50000100 	andpl	r0, r0, r0, lsl #2
     c98:	00000ac6 	andeq	r0, r0, r6, asr #21
     c9c:	00000ac8 	andeq	r0, r0, r8, asr #21
     ca0:	01f30004 	mvnseq	r0, r4
     ca4:	00009f50 	andeq	r9, r0, r0, asr pc
     ca8:	00000000 	andeq	r0, r0, r0
     cac:	0ac40000 	beq	ff100cb4 <SCS_BASE+0x1f0f2cb4>
     cb0:	0ac60000 	beq	ff180cb8 <SCS_BASE+0x1f172cb8>
     cb4:	00060000 	andeq	r0, r6, r0
     cb8:	ff080070 			; <UNDEFINED> instruction: 0xff080070
     cbc:	0ac69f1a 	beq	ff1a892c <SCS_BASE+0x1f19a92c>
     cc0:	0ac80000 	beq	ff200cc8 <SCS_BASE+0x1f1f2cc8>
     cc4:	00070000 	andeq	r0, r7, r0
     cc8:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
     ccc:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
     cd0:	00000000 	andeq	r0, r0, r0
     cd4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     cd8:	ca00000a 	bgt	d08 <__Stack_Size+0x908>
     cdc:	0100000a 	tsteq	r0, sl
     ce0:	0aca5000 	beq	ff294ce8 <SCS_BASE+0x1f286ce8>
     ce4:	0acc0000 	beq	ff300cec <SCS_BASE+0x1f2f2cec>
     ce8:	00040000 	andeq	r0, r4, r0
     cec:	9f5001f3 	svcls	0x005001f3
	...
     cf8:	00000ac8 	andeq	r0, r0, r8, asr #21
     cfc:	00000aca 	andeq	r0, r0, sl, asr #21
     d00:	00700005 	rsbseq	r0, r0, r5
     d04:	ca9f2538 	bgt	fe7ca1ec <SCS_BASE+0x1e7bc1ec>
     d08:	cc00000a 	stcgt	0, cr0, [r0], {10}
     d0c:	0600000a 	streq	r0, [r0], -sl
     d10:	5001f300 	andpl	pc, r1, r0, lsl #6
     d14:	009f2538 	addseq	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
     d18:	00000000 	andeq	r0, r0, r0
     d1c:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
     d20:	0400000a 	streq	r0, [r0], #-10
     d24:	0100000b 	tsteq	r0, fp
     d28:	0b045300 	bleq	115930 <__Stack_Size+0x115530>
     d2c:	0b0a0000 	bleq	280d34 <__Stack_Size+0x280934>
     d30:	00030000 	andeq	r0, r3, r0
     d34:	0a9f7f73 	beq	fe7e0b08 <SCS_BASE+0x1e7d2b08>
     d38:	1400000b 	strne	r0, [r0], #-11
     d3c:	0100000b 	tsteq	r0, fp
     d40:	00005300 	andeq	r5, r0, r0, lsl #6
     d44:	00000000 	andeq	r0, r0, r0
     d48:	0adc0000 	beq	ff700d50 <SCS_BASE+0x1f6f2d50>
     d4c:	0ae00000 	beq	ff800d54 <SCS_BASE+0x1f7f2d54>
     d50:	00020000 	andeq	r0, r2, r0
     d54:	0ae09f30 	beq	ff828a1c <SCS_BASE+0x1f81aa1c>
     d58:	0ae40000 	beq	ff900d60 <SCS_BASE+0x1f8f2d60>
     d5c:	00020000 	andeq	r0, r2, r0
     d60:	0ae49f31 	beq	ff928a2c <SCS_BASE+0x1f91aa2c>
     d64:	0ae80000 	beq	ffa00d6c <SCS_BASE+0x1f9f2d6c>
     d68:	00020000 	andeq	r0, r2, r0
     d6c:	0ae89f32 	beq	ffa28a3c <SCS_BASE+0x1fa1aa3c>
     d70:	0aec0000 	beq	ffb00d78 <SCS_BASE+0x1faf2d78>
     d74:	00020000 	andeq	r0, r2, r0
     d78:	0aec9f33 	beq	ffb28a4c <SCS_BASE+0x1fb1aa4c>
     d7c:	0af00000 	beq	ffc00d84 <SCS_BASE+0x1fbf2d84>
     d80:	00020000 	andeq	r0, r2, r0
     d84:	0af09f34 	beq	ffc28a5c <SCS_BASE+0x1fc1aa5c>
     d88:	0af40000 	beq	ffd00d90 <SCS_BASE+0x1fcf2d90>
     d8c:	00020000 	andeq	r0, r2, r0
     d90:	0af49f35 	beq	ffd28a6c <SCS_BASE+0x1fd1aa6c>
     d94:	0af60000 	beq	ffd80d9c <SCS_BASE+0x1fd72d9c>
     d98:	00020000 	andeq	r0, r2, r0
     d9c:	00009f36 	andeq	r9, r0, r6, lsr pc
     da0:	00000000 	andeq	r0, r0, r0
     da4:	0b140000 	bleq	500dac <__Stack_Size+0x5009ac>
     da8:	0b160000 	bleq	580db0 <__Stack_Size+0x5809b0>
     dac:	00020000 	andeq	r0, r2, r0
     db0:	0b16007d 	bleq	580fac <__Stack_Size+0x580bac>
     db4:	0b480000 	bleq	1200dbc <__Stack_Size+0x12009bc>
     db8:	00020000 	andeq	r0, r2, r0
     dbc:	0000087d 	andeq	r0, r0, sp, ror r8
     dc0:	00000000 	andeq	r0, r0, r0
     dc4:	0b480000 	bleq	1200dcc <__Stack_Size+0x12009cc>
     dc8:	0b4a0000 	bleq	1280dd0 <__Stack_Size+0x12809d0>
     dcc:	00020000 	andeq	r0, r2, r0
     dd0:	0b4a007d 	bleq	1280fcc <__Stack_Size+0x1280bcc>
     dd4:	0b940000 	bleq	fe500ddc <SCS_BASE+0x1e4f2ddc>
     dd8:	00020000 	andeq	r0, r2, r0
     ddc:	0000187d 	andeq	r1, r0, sp, ror r8
     de0:	00000000 	andeq	r0, r0, r0
     de4:	0b480000 	bleq	1200dec <__Stack_Size+0x12009ec>
     de8:	0b530000 	bleq	14c0df0 <__Stack_Size+0x14c09f0>
     dec:	00010000 	andeq	r0, r1, r0
     df0:	000b5350 	andeq	r5, fp, r0, asr r3
     df4:	000b9400 	andeq	r9, fp, r0, lsl #8
     df8:	f3000400 	vshl.u8	d0, d0, d0
     dfc:	009f5001 	addseq	r5, pc, r1
     e00:	00000000 	andeq	r0, r0, r0
     e04:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     e08:	5300000b 	movwpl	r0, #11
     e0c:	0100000b 	tsteq	r0, fp
     e10:	0b535100 	bleq	14d5218 <__Stack_Size+0x14d4e18>
     e14:	0b940000 	bleq	fe500e1c <SCS_BASE+0x1e4f2e1c>
     e18:	00040000 	andeq	r0, r4, r0
     e1c:	9f5101f3 	svcls	0x005101f3
	...
     e28:	00000b48 	andeq	r0, r0, r8, asr #22
     e2c:	00000b53 	andeq	r0, r0, r3, asr fp
     e30:	53520001 	cmppl	r2, #1
     e34:	9400000b 	strls	r0, [r0], #-11
     e38:	0400000b 	streq	r0, [r0], #-11
     e3c:	5201f300 	andpl	pc, r1, #0
     e40:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e44:	00000000 	andeq	r0, r0, r0
     e48:	000b9400 	andeq	r9, fp, r0, lsl #8
     e4c:	000b9600 	andeq	r9, fp, r0, lsl #12
     e50:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     e54:	000b9600 	andeq	r9, fp, r0, lsl #12
     e58:	000bc000 	andeq	ip, fp, r0
     e5c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     e60:	00000008 	andeq	r0, r0, r8
     e64:	00000000 	andeq	r0, r0, r0
     e68:	000bc000 	andeq	ip, fp, r0
     e6c:	000bc200 	andeq	ip, fp, r0, lsl #4
     e70:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     e74:	000bc200 	andeq	ip, fp, r0, lsl #4
     e78:	000be000 	andeq	lr, fp, r0
     e7c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     e80:	00000010 	andeq	r0, r0, r0, lsl r0
     e84:	00000000 	andeq	r0, r0, r0
     e88:	000bc000 	andeq	ip, fp, r0
     e8c:	000bc600 	andeq	ip, fp, r0, lsl #12
     e90:	50000100 	andpl	r0, r0, r0, lsl #2
     e94:	00000bc6 	andeq	r0, r0, r6, asr #23
     e98:	00000be0 	andeq	r0, r0, r0, ror #23
     e9c:	01f30004 	mvnseq	r0, r4
     ea0:	00009f50 	andeq	r9, r0, r0, asr pc
     ea4:	00000000 	andeq	r0, r0, r0
     ea8:	0bc00000 	bleq	ff000eb0 <SCS_BASE+0x1eff2eb0>
     eac:	0bc60000 	bleq	ff180eb4 <SCS_BASE+0x1f172eb4>
     eb0:	00020000 	andeq	r0, r2, r0
     eb4:	0bda9f30 	bleq	ff6a8b7c <SCS_BASE+0x1f69ab7c>
     eb8:	0be00000 	bleq	ff800ec0 <SCS_BASE+0x1f7f2ec0>
     ebc:	00010000 	andeq	r0, r1, r0
     ec0:	00000054 	andeq	r0, r0, r4, asr r0
     ec4:	00000000 	andeq	r0, r0, r0
     ec8:	000be000 	andeq	lr, fp, r0
     ecc:	000be200 	andeq	lr, fp, r0, lsl #4
     ed0:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     ed4:	000be200 	andeq	lr, fp, r0, lsl #4
     ed8:	000c0400 	andeq	r0, ip, r0, lsl #8
     edc:	7d000200 	sfmvc	f0, 4, [r0, #-0]
     ee0:	00000008 	andeq	r0, r0, r8
     ee4:	00000000 	andeq	r0, r0, r0
     ee8:	000be000 	andeq	lr, fp, r0
     eec:	000be400 	andeq	lr, fp, r0, lsl #8
     ef0:	30000200 	andcc	r0, r0, r0, lsl #4
     ef4:	000bf29f 	muleq	fp, pc, r2	; <UNPREDICTABLE>
     ef8:	000c0400 	andeq	r0, ip, r0, lsl #8
     efc:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
     f08:	00000c04 	andeq	r0, r0, r4, lsl #24
     f0c:	00000c06 	andeq	r0, r0, r6, lsl #24
     f10:	007d0002 	rsbseq	r0, sp, r2
     f14:	00000c06 	andeq	r0, r0, r6, lsl #24
     f18:	00000c28 	andeq	r0, r0, r8, lsr #24
     f1c:	087d0002 	ldmdaeq	sp!, {r1}^
	...
     f28:	00000c04 	andeq	r0, r0, r4, lsl #24
     f2c:	00000c08 	andeq	r0, r0, r8, lsl #24
     f30:	9f300002 	svcls	0x00300002
     f34:	00000c16 	andeq	r0, r0, r6, lsl ip
     f38:	00000c28 	andeq	r0, r0, r8, lsr #24
     f3c:	00540001 	subseq	r0, r4, r1
     f40:	00000000 	andeq	r0, r0, r0
     f44:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     f48:	2f00000c 	svccs	0x0000000c
     f4c:	0100000c 	tsteq	r0, ip
     f50:	0c2f5000 	stceq	0, cr5, [pc], #-0	; f58 <__Stack_Size+0xb58>
     f54:	0c300000 	ldceq	0, cr0, [r0], #-0
     f58:	00040000 	andeq	r0, r4, r0
     f5c:	9f5001f3 	svcls	0x005001f3
	...
     f68:	00000c30 	andeq	r0, r0, r0, lsr ip
     f6c:	00000c37 	andeq	r0, r0, r7, lsr ip
     f70:	37500001 	ldrbcc	r0, [r0, -r1]
     f74:	3800000c 	stmdacc	r0, {r2, r3}
     f78:	0400000c 	streq	r0, [r0], #-12
     f7c:	5001f300 	andpl	pc, r1, r0, lsl #6
     f80:	000c389f 	muleq	ip, pc, r8	; <UNPREDICTABLE>
     f84:	000c3d00 	andeq	r3, ip, r0, lsl #26
     f88:	50000100 	andpl	r0, r0, r0, lsl #2
     f8c:	00000c3d 	andeq	r0, r0, sp, lsr ip
     f90:	00000c3e 	andeq	r0, r0, lr, lsr ip
     f94:	01f30004 	mvnseq	r0, r4
     f98:	00009f50 	andeq	r9, r0, r0, asr pc
     f9c:	00000000 	andeq	r0, r0, r0
     fa0:	0c300000 	ldceq	0, cr0, [r0], #-0
     fa4:	0c370000 	ldceq	0, cr0, [r7], #-0
     fa8:	00010000 	andeq	r0, r1, r0
     fac:	000c3751 	andeq	r3, ip, r1, asr r7
     fb0:	000c3800 	andeq	r3, ip, r0, lsl #16
     fb4:	f3000400 	vshl.u8	d0, d0, d0
     fb8:	389f5101 	ldmcc	pc, {r0, r8, ip, lr}	; <UNPREDICTABLE>
     fbc:	3a00000c 	bcc	ff4 <__Stack_Size+0xbf4>
     fc0:	0100000c 	tsteq	r0, ip
     fc4:	0c3a5100 	ldfeqs	f5, [sl], #-0
     fc8:	0c3e0000 	ldceq	0, cr0, [lr], #-0
     fcc:	00040000 	andeq	r0, r4, r0
     fd0:	9f5101f3 	svcls	0x005101f3
	...
     fdc:	00000c3e 	andeq	r0, r0, lr, lsr ip
     fe0:	00000c49 	andeq	r0, r0, r9, asr #24
     fe4:	49500001 	ldmdbmi	r0, {r0}^
     fe8:	4a00000c 	bmi	1020 <__Stack_Size+0xc20>
     fec:	0400000c 	streq	r0, [r0], #-12
     ff0:	5001f300 	andpl	pc, r1, r0, lsl #6
     ff4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     ff8:	00000000 	andeq	r0, r0, r0
     ffc:	000c3e00 	andeq	r3, ip, r0, lsl #28
    1000:	000c4200 	andeq	r4, ip, r0, lsl #4
    1004:	51000100 	mrspl	r0, (UNDEF: 16)
    1008:	00000c42 	andeq	r0, r0, r2, asr #24
    100c:	00000c4a 	andeq	r0, r0, sl, asr #24
    1010:	01f30004 	mvnseq	r0, r4
    1014:	00009f51 	andeq	r9, r0, r1, asr pc
    1018:	00000000 	andeq	r0, r0, r0
    101c:	0c4a0000 	mareq	acc0, r0, sl
    1020:	0c4c0000 	mareq	acc0, r0, ip
    1024:	00020000 	andeq	r0, r2, r0
    1028:	0c4c007d 	mcrreq	0, 7, r0, ip, cr13
    102c:	0cac0000 	stceq	0, cr0, [ip]
    1030:	00020000 	andeq	r0, r2, r0
    1034:	0000187d 	andeq	r1, r0, sp, ror r8
    1038:	00000000 	andeq	r0, r0, r0
    103c:	0c4a0000 	mareq	acc0, r0, sl
    1040:	0c530000 	mraeq	r0, r3, acc0
    1044:	00010000 	andeq	r0, r1, r0
    1048:	000c5350 	andeq	r5, ip, r0, asr r3
    104c:	000cac00 	andeq	sl, ip, r0, lsl #24
    1050:	f3000400 	vshl.u8	d0, d0, d0
    1054:	009f5001 	addseq	r5, pc, r1
    1058:	00000000 	andeq	r0, r0, r0
    105c:	4a000000 	bmi	1064 <__Stack_Size+0xc64>
    1060:	5300000c 	movwpl	r0, #12
    1064:	0100000c 	tsteq	r0, ip
    1068:	0c535100 	ldfeqe	f5, [r3], {-0}
    106c:	0cac0000 	stceq	0, cr0, [ip]
    1070:	00040000 	andeq	r0, r4, r0
    1074:	9f5101f3 	svcls	0x005101f3
	...
    1080:	00000c90 	muleq	r0, r0, ip
    1084:	00000ca0 	andeq	r0, r0, r0, lsr #25
    1088:	c4030005 	strgt	r0, [r3], #-5
    108c:	00200002 	eoreq	r0, r0, r2
    1090:	00000000 	andeq	r0, r0, r0
    1094:	90000000 	andls	r0, r0, r0
    1098:	a000000c 	andge	r0, r0, ip
    109c:	0500000c 	streq	r0, [r0, #-12]
    10a0:	02c50300 	sbceq	r0, r5, #0
    10a4:	00002000 	andeq	r2, r0, r0
    10a8:	00000000 	andeq	r0, r0, r0
    10ac:	0c940000 	ldceq	0, cr0, [r4], {0}
    10b0:	0c9e0000 	ldceq	0, cr0, [lr], {0}
    10b4:	000a0000 	andeq	r0, sl, r0
    10b8:	0002c503 	andeq	ip, r2, r3, lsl #10
    10bc:	38019420 	stmdacc	r1, {r5, sl, ip, pc}
    10c0:	0c9e9f24 	ldceq	15, cr9, [lr], {36}	; 0x24
    10c4:	0ca00000 	stceq	0, cr0, [r0]
    10c8:	00010000 	andeq	r0, r1, r0
    10cc:	00000053 	andeq	r0, r0, r3, asr r0
    10d0:	00000000 	andeq	r0, r0, r0
    10d4:	000cac00 	andeq	sl, ip, r0, lsl #24
    10d8:	000cae00 	andeq	sl, ip, r0, lsl #28
    10dc:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    10e0:	000cae00 	andeq	sl, ip, r0, lsl #28
    10e4:	000d0800 	andeq	r0, sp, r0, lsl #16
    10e8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    10ec:	00000018 	andeq	r0, r0, r8, lsl r0
    10f0:	00000000 	andeq	r0, r0, r0
    10f4:	000cac00 	andeq	sl, ip, r0, lsl #24
    10f8:	000cb500 	andeq	fp, ip, r0, lsl #10
    10fc:	50000100 	andpl	r0, r0, r0, lsl #2
    1100:	00000cb5 			; <UNDEFINED> instruction: 0x00000cb5
    1104:	00000d08 	andeq	r0, r0, r8, lsl #26
    1108:	01f30004 	mvnseq	r0, r4
    110c:	00009f50 	andeq	r9, r0, r0, asr pc
    1110:	00000000 	andeq	r0, r0, r0
    1114:	0cac0000 	stceq	0, cr0, [ip]
    1118:	0cb50000 	ldceq	0, cr0, [r5]
    111c:	00010000 	andeq	r0, r1, r0
    1120:	000cb551 	andeq	fp, ip, r1, asr r5
    1124:	000d0800 	andeq	r0, sp, r0, lsl #16
    1128:	f3000400 	vshl.u8	d0, d0, d0
    112c:	009f5101 	addseq	r5, pc, r1, lsl #2
    1130:	00000000 	andeq	r0, r0, r0
    1134:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1138:	0a00000d 	beq	1174 <__Stack_Size+0xd74>
    113c:	0200000d 	andeq	r0, r0, #13
    1140:	0a007d00 	beq	20548 <__Stack_Size+0x20148>
    1144:	2400000d 	strcs	r0, [r0], #-13
    1148:	0200000d 	andeq	r0, r0, #13
    114c:	00107d00 	andseq	r7, r0, r0, lsl #26
    1150:	00000000 	andeq	r0, r0, r0
    1154:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1158:	1100000d 	tstne	r0, sp
    115c:	0100000d 	tsteq	r0, sp
    1160:	0d115000 	ldceq	0, cr5, [r1, #-0]
    1164:	0d240000 	stceq	0, cr0, [r4, #-0]
    1168:	00040000 	andeq	r0, r4, r0
    116c:	9f5001f3 	svcls	0x005001f3
	...
    1178:	00000d1c 	andeq	r0, r0, ip, lsl sp
    117c:	00000d20 	andeq	r0, r0, r0, lsr #26
    1180:	00500001 	subseq	r0, r0, r1
    1184:	00000000 	andeq	r0, r0, r0
    1188:	1c000000 	stcne	0, cr0, [r0], {-0}
    118c:	2000000d 	andcs	r0, r0, sp
    1190:	0f00000d 	svceq	0x0000000d
    1194:	08007400 	stmdaeq	r0, {sl, ip, sp, lr}
    1198:	00701aff 	ldrshteq	r1, [r0], #-175	; 0xffffff51
    119c:	000a2438 	andeq	r2, sl, r8, lsr r4
    11a0:	9f221aff 	svcls	0x00221aff
	...
    11ac:	00000d24 	andeq	r0, r0, r4, lsr #26
    11b0:	00000d26 	andeq	r0, r0, r6, lsr #26
    11b4:	007d0002 	rsbseq	r0, sp, r2
    11b8:	00000d26 	andeq	r0, r0, r6, lsr #26
    11bc:	00000d40 	andeq	r0, r0, r0, asr #26
    11c0:	107d0002 	rsbsne	r0, sp, r2
	...
    11cc:	00000d24 	andeq	r0, r0, r4, lsr #26
    11d0:	00000d2d 	andeq	r0, r0, sp, lsr #26
    11d4:	2d500001 	ldclcs	0, cr0, [r0, #-4]
    11d8:	4000000d 	andmi	r0, r0, sp
    11dc:	0400000d 	streq	r0, [r0], #-13
    11e0:	5001f300 	andpl	pc, r1, r0, lsl #6
    11e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	000d3800 	andeq	r3, sp, r0, lsl #16
    11f0:	000d3c00 	andeq	r3, sp, r0, lsl #24
    11f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1200:	00000d38 	andeq	r0, r0, r8, lsr sp
    1204:	00000d3c 	andeq	r0, r0, ip, lsr sp
    1208:	0074000f 	rsbseq	r0, r4, pc
    120c:	701aff08 	andsvc	pc, sl, r8, lsl #30
    1210:	0a243800 	beq	90f218 <__Stack_Size+0x90ee18>
    1214:	221aff00 	andscs	pc, sl, #0
    1218:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    121c:	00000000 	andeq	r0, r0, r0
    1220:	000d4000 	andeq	r4, sp, r0
    1224:	000d4200 	andeq	r4, sp, r0, lsl #4
    1228:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    122c:	000d4200 	andeq	r4, sp, r0, lsl #4
    1230:	000d5c00 	andeq	r5, sp, r0, lsl #24
    1234:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1238:	00000010 	andeq	r0, r0, r0, lsl r0
    123c:	00000000 	andeq	r0, r0, r0
    1240:	000d4000 	andeq	r4, sp, r0
    1244:	000d4900 	andeq	r4, sp, r0, lsl #18
    1248:	50000100 	andpl	r0, r0, r0, lsl #2
    124c:	00000d49 	andeq	r0, r0, r9, asr #26
    1250:	00000d5c 	andeq	r0, r0, ip, asr sp
    1254:	01f30004 	mvnseq	r0, r4
    1258:	00009f50 	andeq	r9, r0, r0, asr pc
    125c:	00000000 	andeq	r0, r0, r0
    1260:	0d540000 	ldcleq	0, cr0, [r4, #-0]
    1264:	0d580000 	ldcleq	0, cr0, [r8, #-0]
    1268:	00010000 	andeq	r0, r1, r0
    126c:	00000050 	andeq	r0, r0, r0, asr r0
    1270:	00000000 	andeq	r0, r0, r0
    1274:	000d5400 	andeq	r5, sp, r0, lsl #8
    1278:	000d5800 	andeq	r5, sp, r0, lsl #16
    127c:	74000f00 	strvc	r0, [r0], #-3840	; 0xf00
    1280:	1aff0800 	bne	fffc3288 <SCS_BASE+0x1ffb5288>
    1284:	24380070 	ldrtcs	r0, [r8], #-112	; 0x70
    1288:	1aff000a 	bne	fffc12b8 <SCS_BASE+0x1ffb32b8>
    128c:	00009f22 	andeq	r9, r0, r2, lsr #30
    1290:	00000000 	andeq	r0, r0, r0
    1294:	0d5c0000 	ldcleq	0, cr0, [ip, #-0]
    1298:	0d5e0000 	ldcleq	0, cr0, [lr, #-0]
    129c:	00020000 	andeq	r0, r2, r0
    12a0:	0d5e007d 	ldcleq	0, cr0, [lr, #-500]	; 0xfffffe0c
    12a4:	0d7c0000 	ldcleq	0, cr0, [ip, #-0]
    12a8:	00020000 	andeq	r0, r2, r0
    12ac:	0000107d 	andeq	r1, r0, sp, ror r0
    12b0:	00000000 	andeq	r0, r0, r0
    12b4:	0d5c0000 	ldcleq	0, cr0, [ip, #-0]
    12b8:	0d630000 	stcleq	0, cr0, [r3, #-0]
    12bc:	00010000 	andeq	r0, r1, r0
    12c0:	000d6350 	andeq	r6, sp, r0, asr r3
    12c4:	000d7c00 	andeq	r7, sp, r0, lsl #24
    12c8:	f3000400 	vshl.u8	d0, d0, d0
    12cc:	009f5001 	addseq	r5, pc, r1
    12d0:	00000000 	andeq	r0, r0, r0
    12d4:	66000000 	strvs	r0, [r0], -r0
    12d8:	6a00000d 	bvs	1314 <__Stack_Size+0xf14>
    12dc:	0500000d 	streq	r0, [r0, #-13]
    12e0:	02935000 	addseq	r5, r3, #0
    12e4:	0d6a0293 	sfmeq	f0, 2, [sl, #-588]!	; 0xfffffdb4
    12e8:	0d740000 	ldcleq	0, cr0, [r4, #-0]
    12ec:	00050000 	andeq	r0, r5, r0
    12f0:	93029354 	movwls	r9, #9044	; 0x2354
    12f4:	000d7402 	andeq	r7, sp, r2, lsl #8
    12f8:	000d7600 	andeq	r7, sp, r0, lsl #12
    12fc:	54000600 	strpl	r0, [r0], #-1536	; 0x600
    1300:	93500293 	cmpls	r0, #805306377	; 0x30000009
    1304:	000d7602 	andeq	r7, sp, r2, lsl #12
    1308:	000d7c00 	andeq	r7, sp, r0, lsl #24
    130c:	54000500 	strpl	r0, [r0], #-1280	; 0x500
    1310:	02930293 	addseq	r0, r3, #805306377	; 0x30000009
	...
    131c:	00000d7c 	andeq	r0, r0, ip, ror sp
    1320:	00000d7e 	andeq	r0, r0, lr, ror sp
    1324:	007d0002 	rsbseq	r0, sp, r2
    1328:	00000d7e 	andeq	r0, r0, lr, ror sp
    132c:	00000d98 	muleq	r0, r8, sp
    1330:	107d0002 	rsbsne	r0, sp, r2
	...
    133c:	00000d7c 	andeq	r0, r0, ip, ror sp
    1340:	00000d85 	andeq	r0, r0, r5, lsl #27
    1344:	85500001 	ldrbhi	r0, [r0, #-1]
    1348:	9800000d 	stmdals	r0, {r0, r2, r3}
    134c:	0400000d 	streq	r0, [r0], #-13
    1350:	5001f300 	andpl	pc, r1, r0, lsl #6
    1354:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1358:	00000000 	andeq	r0, r0, r0
    135c:	000d9000 	andeq	r9, sp, r0
    1360:	000d9400 	andeq	r9, sp, r0, lsl #8
    1364:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1370:	00000d90 	muleq	r0, r0, sp
    1374:	00000d94 	muleq	r0, r4, sp
    1378:	0074000f 	rsbseq	r0, r4, pc
    137c:	701aff08 	andsvc	pc, sl, r8, lsl #30
    1380:	0a243800 	beq	90f388 <__Stack_Size+0x90ef88>
    1384:	221aff00 	andscs	pc, sl, #0
    1388:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    138c:	00000000 	andeq	r0, r0, r0
    1390:	000d9800 	andeq	r9, sp, r0, lsl #16
    1394:	000d9a00 	andeq	r9, sp, r0, lsl #20
    1398:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    139c:	000d9a00 	andeq	r9, sp, r0, lsl #20
    13a0:	000db400 	andeq	fp, sp, r0, lsl #8
    13a4:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    13a8:	00000010 	andeq	r0, r0, r0, lsl r0
    13ac:	00000000 	andeq	r0, r0, r0
    13b0:	000d9800 	andeq	r9, sp, r0, lsl #16
    13b4:	000da100 	andeq	sl, sp, r0, lsl #2
    13b8:	50000100 	andpl	r0, r0, r0, lsl #2
    13bc:	00000da1 	andeq	r0, r0, r1, lsr #27
    13c0:	00000db4 			; <UNDEFINED> instruction: 0x00000db4
    13c4:	01f30004 	mvnseq	r0, r4
    13c8:	00009f50 	andeq	r9, r0, r0, asr pc
    13cc:	00000000 	andeq	r0, r0, r0
    13d0:	0dac0000 	stceq	0, cr0, [ip]
    13d4:	0db00000 	ldceq	0, cr0, [r0]
    13d8:	00010000 	andeq	r0, r1, r0
    13dc:	00000050 	andeq	r0, r0, r0, asr r0
    13e0:	00000000 	andeq	r0, r0, r0
    13e4:	000dac00 	andeq	sl, sp, r0, lsl #24
    13e8:	000db000 	andeq	fp, sp, r0
    13ec:	74000f00 	strvc	r0, [r0], #-3840	; 0xf00
    13f0:	1aff0800 	bne	fffc33f8 <SCS_BASE+0x1ffb53f8>
    13f4:	24380070 	ldrtcs	r0, [r8], #-112	; 0x70
    13f8:	1aff000a 	bne	fffc1428 <SCS_BASE+0x1ffb3428>
    13fc:	00009f22 	andeq	r9, r0, r2, lsr #30
    1400:	00000000 	andeq	r0, r0, r0
    1404:	0db40000 	ldceq	0, cr0, [r4]
    1408:	0db90000 	ldceq	0, cr0, [r9]
    140c:	00010000 	andeq	r0, r1, r0
    1410:	000db950 	andeq	fp, sp, r0, asr r9
    1414:	000dba00 	andeq	fp, sp, r0, lsl #20
    1418:	f3000400 	vshl.u8	d0, d0, d0
    141c:	009f5001 	addseq	r5, pc, r1
    1420:	00000000 	andeq	r0, r0, r0
    1424:	ba000000 	blt	142c <__Stack_Size+0x102c>
    1428:	bf00000d 	svclt	0x0000000d
    142c:	0100000d 	tsteq	r0, sp
    1430:	0dbf5000 	ldceq	0, cr5, [pc]	; 1438 <__Stack_Size+0x1038>
    1434:	0dc00000 	stcleq	0, cr0, [r0]
    1438:	00040000 	andeq	r0, r4, r0
    143c:	9f5001f3 	svcls	0x005001f3
	...
    1448:	00000dc0 	andeq	r0, r0, r0, asr #27
    144c:	00000dc5 	andeq	r0, r0, r5, asr #27
    1450:	c5500001 	ldrbgt	r0, [r0, #-1]
    1454:	c600000d 	strgt	r0, [r0], -sp
    1458:	0400000d 	streq	r0, [r0], #-13
    145c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1460:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1464:	00000000 	andeq	r0, r0, r0
    1468:	000dc600 	andeq	ip, sp, r0, lsl #12
    146c:	000dcb00 	andeq	ip, sp, r0, lsl #22
    1470:	50000100 	andpl	r0, r0, r0, lsl #2
    1474:	00000dcb 	andeq	r0, r0, fp, asr #27
    1478:	00000dcc 	andeq	r0, r0, ip, asr #27
    147c:	01f30004 	mvnseq	r0, r4
    1480:	00009f50 	andeq	r9, r0, r0, asr pc
    1484:	00000000 	andeq	r0, r0, r0
    1488:	0dcc0000 	stcleq	0, cr0, [ip]
    148c:	0dd10000 	ldcleq	0, cr0, [r1]
    1490:	00010000 	andeq	r0, r1, r0
    1494:	000dd150 	andeq	sp, sp, r0, asr r1
    1498:	000dd200 	andeq	sp, sp, r0, lsl #4
    149c:	f3000400 	vshl.u8	d0, d0, d0
    14a0:	009f5001 	addseq	r5, pc, r1
    14a4:	00000000 	andeq	r0, r0, r0
    14a8:	d2000000 	andle	r0, r0, #0
    14ac:	d700000d 	strle	r0, [r0, -sp]
    14b0:	0100000d 	tsteq	r0, sp
    14b4:	0dd75000 	ldcleq	0, cr5, [r7]
    14b8:	0dd80000 	ldcleq	0, cr0, [r8]
    14bc:	00040000 	andeq	r0, r4, r0
    14c0:	9f5001f3 	svcls	0x005001f3
	...
    14cc:	00000dd8 	ldrdeq	r0, [r0], -r8
    14d0:	00000dda 	ldrdeq	r0, [r0], -sl
    14d4:	007d0002 	rsbseq	r0, sp, r2
    14d8:	00000dda 	ldrdeq	r0, [r0], -sl
    14dc:	00000e24 	andeq	r0, r0, r4, lsr #28
    14e0:	107d0002 	rsbsne	r0, sp, r2
	...
    14ec:	00000dd8 	ldrdeq	r0, [r0], -r8
    14f0:	00000de8 	andeq	r0, r0, r8, ror #27
    14f4:	e8500001 	ldmda	r0, {r0}^
    14f8:	2400000d 	strcs	r0, [r0], #-13
    14fc:	0400000e 	streq	r0, [r0], #-14
    1500:	5001f300 	andpl	pc, r1, r0, lsl #6
    1504:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1508:	00000000 	andeq	r0, r0, r0
    150c:	000e2400 	andeq	r2, lr, r0, lsl #8
    1510:	000e2600 	andeq	r2, lr, r0, lsl #12
    1514:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1518:	000e2600 	andeq	r2, lr, r0, lsl #12
    151c:	000e4200 	andeq	r4, lr, r0, lsl #4
    1520:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1524:	00000008 	andeq	r0, r0, r8
    1528:	00000000 	andeq	r0, r0, r0
    152c:	000e2400 	andeq	r2, lr, r0, lsl #8
    1530:	000e2b00 	andeq	r2, lr, r0, lsl #22
    1534:	50000100 	andpl	r0, r0, r0, lsl #2
    1538:	00000e2b 	andeq	r0, r0, fp, lsr #28
    153c:	00000e42 	andeq	r0, r0, r2, asr #28
    1540:	01f30004 	mvnseq	r0, r4
    1544:	00009f50 	andeq	r9, r0, r0, asr pc
    1548:	00000000 	andeq	r0, r0, r0
    154c:	0e420000 	cdpeq	0, 4, cr0, cr2, cr0, {0}
    1550:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
    1554:	00020000 	andeq	r0, r2, r0
    1558:	0e44007d 	mcreq	0, 2, r0, cr4, cr13, {3}
    155c:	0e9c0000 	cdpeq	0, 9, cr0, cr12, cr0, {0}
    1560:	00020000 	andeq	r0, r2, r0
    1564:	0000187d 	andeq	r1, r0, sp, ror r8
    1568:	00000000 	andeq	r0, r0, r0
    156c:	0e420000 	cdpeq	0, 4, cr0, cr2, cr0, {0}
    1570:	0e480000 	cdpeq	0, 4, cr0, cr8, cr0, {0}
    1574:	00010000 	andeq	r0, r1, r0
    1578:	000e4850 	andeq	r4, lr, r0, asr r8
    157c:	000e5000 	andeq	r5, lr, r0
    1580:	54000100 	strpl	r0, [r0], #-256	; 0x100
    1584:	00000e50 	andeq	r0, r0, r0, asr lr
    1588:	00000e6d 	andeq	r0, r0, sp, ror #28
    158c:	68910002 	ldmvs	r1, {r1}
    1590:	00000e6d 	andeq	r0, r0, sp, ror #28
    1594:	00000e9c 	muleq	r0, ip, lr
    1598:	01f30004 	mvnseq	r0, r4
    159c:	00009f50 	andeq	r9, r0, r0, asr pc
    15a0:	00000000 	andeq	r0, r0, r0
    15a4:	0ea80000 	cdpeq	0, 10, cr0, cr8, cr0, {0}
    15a8:	0eac0000 	cdpeq	0, 10, cr0, cr12, cr0, {0}
    15ac:	00010000 	andeq	r0, r1, r0
    15b0:	000eac50 	andeq	sl, lr, r0, asr ip
    15b4:	000eb000 	andeq	fp, lr, r0
    15b8:	f3000400 	vshl.u8	d0, d0, d0
    15bc:	009f5001 	addseq	r5, pc, r1
    15c0:	00000000 	andeq	r0, r0, r0
    15c4:	c4000000 	strgt	r0, [r0], #-0
    15c8:	c600000e 	strgt	r0, [r0], -lr
    15cc:	0200000e 	andeq	r0, r0, #14
    15d0:	c6007d00 	strgt	r7, [r0], -r0, lsl #26
    15d4:	f400000e 	vst4.8	{d0-d3}, [r0], lr
    15d8:	0200000e 	andeq	r0, r0, #14
    15dc:	00087d00 	andeq	r7, r8, r0, lsl #26
    15e0:	00000000 	andeq	r0, r0, r0
    15e4:	c4000000 	strgt	r0, [r0], #-0
    15e8:	ca00000e 	bgt	1628 <__Stack_Size+0x1228>
    15ec:	0100000e 	tsteq	r0, lr
    15f0:	0eca5000 	cdpeq	0, 12, cr5, cr10, cr0, {0}
    15f4:	0ef40000 	cdpeq	0, 15, cr0, cr4, cr0, {0}
    15f8:	00040000 	andeq	r0, r4, r0
    15fc:	9f5001f3 	svcls	0x005001f3
	...
    1608:	00000f14 	andeq	r0, r0, r4, lsl pc
    160c:	00000f2c 	andeq	r0, r0, ip, lsr #30
    1610:	00500001 	subseq	r0, r0, r1
    1614:	00000000 	andeq	r0, r0, r0
    1618:	52000000 	andpl	r0, r0, #0
    161c:	5400000f 	strpl	r0, [r0], #-15
    1620:	0100000f 	tsteq	r0, pc
    1624:	00005000 	andeq	r5, r0, r0
    1628:	00000000 	andeq	r0, r0, r0
    162c:	0f5c0000 	svceq	0x005c0000
    1630:	0f5e0000 	svceq	0x005e0000
    1634:	00020000 	andeq	r0, r2, r0
    1638:	0f5e007d 	svceq	0x005e007d
    163c:	10040000 	andne	r0, r4, r0
    1640:	00020000 	andeq	r0, r2, r0
    1644:	0000107d 	andeq	r1, r0, sp, ror r0
    1648:	00000000 	andeq	r0, r0, r0
    164c:	0f740000 	svceq	0x00740000
    1650:	0f7e0000 	svceq	0x007e0000
    1654:	00010000 	andeq	r0, r1, r0
    1658:	000f7e50 	andeq	r7, pc, r0, asr lr	; <UNPREDICTABLE>
    165c:	000f8400 	andeq	r8, pc, r0, lsl #8
    1660:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1664:	00000f84 	andeq	r0, r0, r4, lsl #31
    1668:	00000f86 	andeq	r0, r0, r6, lsl #31
    166c:	86500001 	ldrbhi	r0, [r0], -r1
    1670:	fa00000f 	blx	16b4 <__Stack_Size+0x12b4>
    1674:	0100000f 	tsteq	r0, pc
    1678:	00005600 	andeq	r5, r0, r0, lsl #12
    167c:	00000000 	andeq	r0, r0, r0
    1680:	10180000 	andsne	r0, r8, r0
    1684:	101a0000 	andsne	r0, sl, r0
    1688:	00020000 	andeq	r0, r2, r0
    168c:	101a007d 	andsne	r0, sl, sp, ror r0
    1690:	10600000 	rsbne	r0, r0, r0
    1694:	00020000 	andeq	r0, r2, r0
    1698:	0000087d 	andeq	r0, r0, sp, ror r8
    169c:	00000000 	andeq	r0, r0, r0
    16a0:	10640000 	rsbne	r0, r4, r0
    16a4:	10660000 	rsbne	r0, r6, r0
    16a8:	00020000 	andeq	r0, r2, r0
    16ac:	1066007d 	rsbne	r0, r6, sp, ror r0
    16b0:	10720000 	rsbsne	r0, r2, r0
    16b4:	00020000 	andeq	r0, r2, r0
    16b8:	0000087d 	andeq	r0, r0, sp, ror r8
    16bc:	00000000 	andeq	r0, r0, r0
    16c0:	10640000 	rsbne	r0, r4, r0
    16c4:	10690000 	rsbne	r0, r9, r0
    16c8:	00010000 	andeq	r0, r1, r0
    16cc:	00106950 	andseq	r6, r0, r0, asr r9
    16d0:	00107200 	andseq	r7, r0, r0, lsl #4
    16d4:	f3000400 	vshl.u8	d0, d0, d0
    16d8:	009f5001 	addseq	r5, pc, r1
    16dc:	00000000 	andeq	r0, r0, r0
    16e0:	76000000 	strvc	r0, [r0], -r0
    16e4:	7a000010 	bvc	172c <__Stack_Size+0x132c>
    16e8:	02000010 	andeq	r0, r0, #16
    16ec:	7a007d00 	bvc	20af4 <__Stack_Size+0x206f4>
    16f0:	8e000010 	mcrhi	0, 0, r0, cr0, cr0, {0}
    16f4:	02000010 	andeq	r0, r0, #16
    16f8:	00087d00 	andeq	r7, r8, r0, lsl #26
    16fc:	00000000 	andeq	r0, r0, r0
    1700:	76000000 	strvc	r0, [r0], -r0
    1704:	80000010 	andhi	r0, r0, r0, lsl r0
    1708:	01000010 	tsteq	r0, r0, lsl r0
    170c:	10805000 	addne	r5, r0, r0
    1710:	108e0000 	addne	r0, lr, r0
    1714:	00040000 	andeq	r0, r4, r0
    1718:	9f5001f3 	svcls	0x005001f3
	...
    1724:	0000108e 	andeq	r1, r0, lr, lsl #1
    1728:	00001090 	muleq	r0, r0, r0
    172c:	007d0002 	rsbseq	r0, sp, r2
    1730:	00001090 	muleq	r0, r0, r0
    1734:	000010a4 	andeq	r1, r0, r4, lsr #1
    1738:	107d0002 	rsbsne	r0, sp, r2
	...
    1744:	0000108e 	andeq	r1, r0, lr, lsl #1
    1748:	00001094 	muleq	r0, r4, r0
    174c:	94500001 	ldrbls	r0, [r0], #-1
    1750:	a4000010 	strge	r0, [r0], #-16
    1754:	01000010 	tsteq	r0, r0, lsl r0
    1758:	00005500 	andeq	r5, r0, r0, lsl #10
    175c:	00000000 	andeq	r0, r0, r0
    1760:	108e0000 	addne	r0, lr, r0
    1764:	10940000 	addsne	r0, r4, r0
    1768:	00020000 	andeq	r0, r2, r0
    176c:	10949f30 	addsne	r9, r4, r0, lsr pc
    1770:	10a40000 	adcne	r0, r4, r0
    1774:	00010000 	andeq	r0, r1, r0
    1778:	00000054 	andeq	r0, r0, r4, asr r0
    177c:	00000000 	andeq	r0, r0, r0
    1780:	0010a400 	andseq	sl, r0, r0, lsl #8
    1784:	0010a600 	andseq	sl, r0, r0, lsl #12
    1788:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    178c:	0010a600 	andseq	sl, r0, r0, lsl #12
    1790:	0010d400 	andseq	sp, r0, r0, lsl #8
    1794:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1798:	00000008 	andeq	r0, r0, r8
    179c:	00000000 	andeq	r0, r0, r0
    17a0:	0010be00 	andseq	fp, r0, r0, lsl #28
    17a4:	0010c400 	andseq	ip, r0, r0, lsl #8
    17a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    17b4:	000010d4 	ldrdeq	r1, [r0], -r4
    17b8:	000010d6 	ldrdeq	r1, [r0], -r6
    17bc:	007d0002 	rsbseq	r0, sp, r2
    17c0:	000010d6 	ldrdeq	r1, [r0], -r6
    17c4:	00001128 	andeq	r1, r0, r8, lsr #2
    17c8:	107d0002 	rsbsne	r0, sp, r2
	...
    17d4:	000010d4 	ldrdeq	r1, [r0], -r4
    17d8:	000010da 	ldrdeq	r1, [r0], -sl
    17dc:	da500001 	ble	14017e8 <__Stack_Size+0x14013e8>
    17e0:	fe000010 	mcr2	0, 0, r0, cr0, cr0, {0}
    17e4:	01000010 	tsteq	r0, r0, lsl r0
    17e8:	10fe5500 	rscsne	r5, lr, r0, lsl #10
    17ec:	11000000 	mrsne	r0, (UNDEF: 0)
    17f0:	00040000 	andeq	r0, r4, r0
    17f4:	9f5001f3 	svcls	0x005001f3
    17f8:	00001100 	andeq	r1, r0, r0, lsl #2
    17fc:	00001124 	andeq	r1, r0, r4, lsr #2
    1800:	24550001 	ldrbcs	r0, [r5], #-1
    1804:	28000011 	stmdacs	r0, {r0, r4}
    1808:	04000011 	streq	r0, [r0], #-17
    180c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1810:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1814:	00000000 	andeq	r0, r0, r0
    1818:	00110800 	andseq	r0, r1, r0, lsl #16
    181c:	00112400 	andseq	r2, r1, r0, lsl #8
    1820:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    182c:	000010d4 	ldrdeq	r1, [r0], -r4
    1830:	000010da 	ldrdeq	r1, [r0], -sl
    1834:	9f300002 	svcls	0x00300002
    1838:	00001120 	andeq	r1, r0, r0, lsr #2
    183c:	00001124 	andeq	r1, r0, r4, lsr #2
    1840:	00540001 	subseq	r0, r4, r1
    1844:	00000000 	andeq	r0, r0, r0
    1848:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    184c:	2e000011 	mcrcs	0, 0, r0, cr0, cr1, {0}
    1850:	02000011 	andeq	r0, r0, #17
    1854:	2e007d00 	cdpcs	13, 0, cr7, cr0, cr0, {0}
    1858:	c4000011 	strgt	r0, [r0], #-17
    185c:	02000011 	andeq	r0, r0, #17
    1860:	00087d00 	andeq	r7, r8, r0, lsl #26
    1864:	00000000 	andeq	r0, r0, r0
    1868:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    186c:	32000011 	andcc	r0, r0, #17
    1870:	01000011 	tsteq	r0, r1, lsl r0
    1874:	11325000 	teqne	r2, r0
    1878:	11c40000 	bicne	r0, r4, r0
    187c:	00040000 	andeq	r0, r4, r0
    1880:	9f5001f3 	svcls	0x005001f3
	...
    188c:	000011c4 	andeq	r1, r0, r4, asr #3
    1890:	000011c6 	andeq	r1, r0, r6, asr #3
    1894:	007d0002 	rsbseq	r0, sp, r2
    1898:	000011c6 	andeq	r1, r0, r6, asr #3
    189c:	00001214 	andeq	r1, r0, r4, lsl r2
    18a0:	187d0002 	ldmdane	sp!, {r1}^
	...
    18ac:	000011fa 	strdeq	r1, [r0], -sl
    18b0:	000011fc 	strdeq	r1, [r0], -ip
    18b4:	00500001 	subseq	r0, r0, r1
    18b8:	00000000 	andeq	r0, r0, r0
    18bc:	ea000000 	b	18c4 <__Stack_Size+0x14c4>
    18c0:	ec000011 	stc	0, cr0, [r0], {17}
    18c4:	02000011 	andeq	r0, r0, #17
    18c8:	0a9f3000 	beq	fe7cd8d0 <SCS_BASE+0x1e7bf8d0>
    18cc:	14000012 	strne	r0, [r0], #-18
    18d0:	01000012 	tsteq	r0, r2, lsl r0
    18d4:	00005400 	andeq	r5, r0, r0, lsl #8
    18d8:	00000000 	andeq	r0, r0, r0
    18dc:	12140000 	andsne	r0, r4, #0
    18e0:	12170000 	andsne	r0, r7, #0
    18e4:	00010000 	andeq	r0, r1, r0
    18e8:	00121750 	andseq	r1, r2, r0, asr r7
    18ec:	00121800 	andseq	r1, r2, r0, lsl #16
    18f0:	f3000400 	vshl.u8	d0, d0, d0
    18f4:	009f5001 	addseq	r5, pc, r1
    18f8:	00000000 	andeq	r0, r0, r0
    18fc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1900:	1a000012 	bne	1950 <__Stack_Size+0x1550>
    1904:	02000012 	andeq	r0, r0, #18
    1908:	1a007d00 	bne	20d10 <__Stack_Size+0x20910>
    190c:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
    1910:	02000012 	andeq	r0, r0, #18
    1914:	1e107d00 	cdpne	13, 1, cr7, cr0, cr0, {0}
    1918:	5c000012 	stcpl	0, cr0, [r0], {18}
    191c:	03000012 	movweq	r0, #18
    1920:	00d07d00 	sbcseq	r7, r0, r0, lsl #26
	...
    192c:	00001218 	andeq	r1, r0, r8, lsl r2
    1930:	00001226 	andeq	r1, r0, r6, lsr #4
    1934:	26500001 	ldrbcs	r0, [r0], -r1
    1938:	5c000012 	stcpl	0, cr0, [r0], {18}
    193c:	04000012 	streq	r0, [r0], #-18
    1940:	5001f300 	andpl	pc, r1, r0, lsl #6
    1944:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1948:	00000000 	andeq	r0, r0, r0
    194c:	00125c00 	andseq	r5, r2, r0, lsl #24
    1950:	00125e00 	andseq	r5, r2, r0, lsl #28
    1954:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1958:	00125e00 	andseq	r5, r2, r0, lsl #28
    195c:	00128800 	andseq	r8, r2, r0, lsl #16
    1960:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1964:	00000008 	andeq	r0, r0, r8
    1968:	00000000 	andeq	r0, r0, r0
    196c:	00125c00 	andseq	r5, r2, r0, lsl #24
    1970:	00126200 	andseq	r6, r2, r0, lsl #4
    1974:	50000100 	andpl	r0, r0, r0, lsl #2
    1978:	00001262 	andeq	r1, r0, r2, ror #4
    197c:	00001276 	andeq	r1, r0, r6, ror r2
    1980:	76540001 	ldrbvc	r0, [r4], -r1
    1984:	88000012 	stmdahi	r0, {r1, r4}
    1988:	04000012 	streq	r0, [r0], #-18
    198c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1990:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1994:	00000000 	andeq	r0, r0, r0
    1998:	00127600 	andseq	r7, r2, r0, lsl #12
    199c:	00127a00 	andseq	r7, r2, r0, lsl #20
    19a0:	50000100 	andpl	r0, r0, r0, lsl #2
    19a4:	0000127a 	andeq	r1, r0, sl, ror r2
    19a8:	00001288 	andeq	r1, r0, r8, lsl #5
    19ac:	00540001 	subseq	r0, r4, r1
    19b0:	00000000 	andeq	r0, r0, r0
    19b4:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    19b8:	8a000012 	bhi	1a08 <__Stack_Size+0x1608>
    19bc:	02000012 	andeq	r0, r0, #18
    19c0:	8a007d00 	bhi	20dc8 <__Stack_Size+0x209c8>
    19c4:	d0000012 	andle	r0, r0, r2, lsl r0
    19c8:	02000012 	andeq	r0, r0, #18
    19cc:	00087d00 	andeq	r7, r8, r0, lsl #26
    19d0:	00000000 	andeq	r0, r0, r0
    19d4:	d0000000 	andle	r0, r0, r0
    19d8:	d2000012 	andle	r0, r0, #18
    19dc:	02000012 	andeq	r0, r0, #18
    19e0:	d2007d00 	andle	r7, r0, #0
    19e4:	e4000012 	str	r0, [r0], #-18
    19e8:	02000012 	andeq	r0, r0, #18
    19ec:	00087d00 	andeq	r7, r8, r0, lsl #26
    19f0:	00000000 	andeq	r0, r0, r0
    19f4:	d0000000 	andle	r0, r0, r0
    19f8:	d5000012 	strle	r0, [r0, #-18]
    19fc:	01000012 	tsteq	r0, r2, lsl r0
    1a00:	12d55000 	sbcsne	r5, r5, #0
    1a04:	12e40000 	rscne	r0, r4, #0
    1a08:	00040000 	andeq	r0, r4, r0
    1a0c:	9f5001f3 	svcls	0x005001f3
	...
    1a18:	000012d8 	ldrdeq	r1, [r0], -r8
    1a1c:	000012dc 	ldrdeq	r1, [r0], -ip
    1a20:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1a24:	e4000012 	str	r0, [r0], #-18
    1a28:	01000012 	tsteq	r0, r2, lsl r0
    1a2c:	00005400 	andeq	r5, r0, r0, lsl #8
    1a30:	00000000 	andeq	r0, r0, r0
    1a34:	12e40000 	rscne	r0, r4, #0
    1a38:	12e60000 	rscne	r0, r6, #0
    1a3c:	00020000 	andeq	r0, r2, r0
    1a40:	12e6007d 	rscne	r0, r6, #125	; 0x7d
    1a44:	13440000 	movtne	r0, #16384	; 0x4000
    1a48:	00020000 	andeq	r0, r2, r0
    1a4c:	0000187d 	andeq	r1, r0, sp, ror r8
    1a50:	00000000 	andeq	r0, r0, r0
    1a54:	13440000 	movtne	r0, #16384	; 0x4000
    1a58:	13480000 	movtne	r0, #32768	; 0x8000
    1a5c:	00020000 	andeq	r0, r2, r0
    1a60:	1348007d 	movtne	r0, #32893	; 0x807d
    1a64:	13ac0000 			; <UNDEFINED> instruction: 0x13ac0000
    1a68:	00020000 	andeq	r0, r2, r0
    1a6c:	0000207d 	andeq	r2, r0, sp, ror r0
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	13440000 	movtne	r0, #16384	; 0x4000
    1a78:	13510000 	cmpne	r1, #0
    1a7c:	00010000 	andeq	r0, r1, r0
    1a80:	00135150 	andseq	r5, r3, r0, asr r1
    1a84:	0013ac00 	andseq	sl, r3, r0, lsl #24
    1a88:	f3000400 	vshl.u8	d0, d0, d0
    1a8c:	009f5001 	addseq	r5, pc, r1
    1a90:	00000000 	andeq	r0, r0, r0
    1a94:	44000000 	strmi	r0, [r0], #-0
    1a98:	51000013 	tstpl	r0, r3, lsl r0
    1a9c:	01000013 	tsteq	r0, r3, lsl r0
    1aa0:	13515100 	cmpne	r1, #0
    1aa4:	13ac0000 			; <UNDEFINED> instruction: 0x13ac0000
    1aa8:	00040000 	andeq	r0, r4, r0
    1aac:	9f5101f3 	svcls	0x005101f3
	...
    1ab8:	00001344 	andeq	r1, r0, r4, asr #6
    1abc:	00001351 	andeq	r1, r0, r1, asr r3
    1ac0:	51520001 	cmppl	r2, r1
    1ac4:	ac000013 	stcge	0, cr0, [r0], {19}
    1ac8:	04000013 	streq	r0, [r0], #-19
    1acc:	5201f300 	andpl	pc, r1, #0
    1ad0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1ad4:	00000000 	andeq	r0, r0, r0
    1ad8:	0013ac00 	andseq	sl, r3, r0, lsl #24
    1adc:	0013bb00 	andseq	fp, r3, r0, lsl #22
    1ae0:	50000100 	andpl	r0, r0, r0, lsl #2
    1ae4:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    1ae8:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
    1aec:	01f30004 	mvnseq	r0, r4
    1af0:	13bc9f50 			; <UNDEFINED> instruction: 0x13bc9f50
    1af4:	13be0000 			; <UNDEFINED> instruction: 0x13be0000
    1af8:	00010000 	andeq	r0, r1, r0
    1afc:	00000050 	andeq	r0, r0, r0, asr r0
    1b00:	00000000 	andeq	r0, r0, r0
    1b04:	0013ac00 	andseq	sl, r3, r0, lsl #24
    1b08:	0013b600 	andseq	fp, r3, r0, lsl #12
    1b0c:	51000100 	mrspl	r0, (UNDEF: 16)
    1b10:	000013b6 			; <UNDEFINED> instruction: 0x000013b6
    1b14:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
    1b18:	b8520001 	ldmdalt	r2, {r0}^
    1b1c:	bc000013 	stclt	0, cr0, [r0], {19}
    1b20:	04000013 	streq	r0, [r0], #-19
    1b24:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1b28:	0013bc9f 	mulseq	r3, pc, ip	; <UNPREDICTABLE>
    1b2c:	0013be00 	andseq	fp, r3, r0, lsl #28
    1b30:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1b3c:	000013be 			; <UNDEFINED> instruction: 0x000013be
    1b40:	000013c0 	andeq	r1, r0, r0, asr #7
    1b44:	007d0002 	rsbseq	r0, sp, r2
    1b48:	000013c0 	andeq	r1, r0, r0, asr #7
    1b4c:	00001490 	muleq	r0, r0, r4
    1b50:	107d0002 	rsbsne	r0, sp, r2
	...
    1b5c:	000013be 			; <UNDEFINED> instruction: 0x000013be
    1b60:	000013c9 	andeq	r1, r0, r9, asr #7
    1b64:	c9500001 	ldmdbgt	r0, {r0}^
    1b68:	90000013 	andls	r0, r0, r3, lsl r0
    1b6c:	04000014 	streq	r0, [r0], #-20
    1b70:	5001f300 	andpl	pc, r1, r0, lsl #6
    1b74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1b78:	00000000 	andeq	r0, r0, r0
    1b7c:	00149000 	andseq	r9, r4, r0
    1b80:	00149200 	andseq	r9, r4, r0, lsl #4
    1b84:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1b88:	00149200 	andseq	r9, r4, r0, lsl #4
    1b8c:	0014ac00 	andseq	sl, r4, r0, lsl #24
    1b90:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1b94:	00000008 	andeq	r0, r0, r8
    1b98:	00000000 	andeq	r0, r0, r0
    1b9c:	00149000 	andseq	r9, r4, r0
    1ba0:	00149400 	andseq	r9, r4, r0, lsl #8
    1ba4:	30000200 	andcc	r0, r0, r0, lsl #4
    1ba8:	0014a69f 	mulseq	r4, pc, r6	; <UNPREDICTABLE>
    1bac:	0014ac00 	andseq	sl, r4, r0, lsl #24
    1bb0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1bbc:	000014ac 	andeq	r1, r0, ip, lsr #9
    1bc0:	000014ae 	andeq	r1, r0, lr, lsr #9
    1bc4:	007d0002 	rsbseq	r0, sp, r2
    1bc8:	000014ae 	andeq	r1, r0, lr, lsr #9
    1bcc:	000015a4 	andeq	r1, r0, r4, lsr #11
    1bd0:	107d0002 	rsbsne	r0, sp, r2
	...
    1bdc:	000014b6 			; <UNDEFINED> instruction: 0x000014b6
    1be0:	000014da 	ldrdeq	r1, [r0], -sl
    1be4:	e0510001 	subs	r0, r1, r1
    1be8:	fc000014 	stc2	0, cr0, [r0], {20}
    1bec:	01000014 	tsteq	r0, r4, lsl r0
    1bf0:	00005100 	andeq	r5, r0, r0, lsl #2
    1bf4:	00000000 	andeq	r0, r0, r0
    1bf8:	14b60000 	ldrtne	r0, [r6], #0
    1bfc:	15080000 	strne	r0, [r8, #-0]
    1c00:	00020000 	andeq	r0, r2, r0
    1c04:	15569f30 	ldrbne	r9, [r6, #-3888]	; 0xf30
    1c08:	15580000 	ldrbne	r0, [r8, #-0]
    1c0c:	00010000 	andeq	r0, r1, r0
    1c10:	00000054 	andeq	r0, r0, r4, asr r0
    1c14:	00000000 	andeq	r0, r0, r0
    1c18:	0015a400 	andseq	sl, r5, r0, lsl #8
    1c1c:	0015a600 	andseq	sl, r5, r0, lsl #12
    1c20:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1c24:	0015a600 	andseq	sl, r5, r0, lsl #12
    1c28:	00166000 	andseq	r6, r6, r0
    1c2c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1c30:	00000010 	andeq	r0, r0, r0, lsl r0
    1c34:	00000000 	andeq	r0, r0, r0
    1c38:	0015a400 	andseq	sl, r5, r0, lsl #8
    1c3c:	0015ac00 	andseq	sl, r5, r0, lsl #24
    1c40:	50000100 	andpl	r0, r0, r0, lsl #2
    1c44:	000015ac 	andeq	r1, r0, ip, lsr #11
    1c48:	00001660 	andeq	r1, r0, r0, ror #12
    1c4c:	00560001 	subseq	r0, r6, r1
    1c50:	00000000 	andeq	r0, r0, r0
    1c54:	e0000000 	and	r0, r0, r0
    1c58:	e4000015 	str	r0, [r0], #-21
    1c5c:	04000015 	streq	r0, [r0], #-21
    1c60:	03e80a00 	mvneq	r0, #0
    1c64:	0016129f 	mulseq	r6, pc, r2	; <UNPREDICTABLE>
    1c68:	00161600 	andseq	r1, r6, r0, lsl #12
    1c6c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1c78:	00001608 	andeq	r1, r0, r8, lsl #12
    1c7c:	00001616 	andeq	r1, r0, r6, lsl r6
    1c80:	9f310002 	svcls	0x00310002
	...
    1c8c:	00001660 	andeq	r1, r0, r0, ror #12
    1c90:	00001662 	andeq	r1, r0, r2, ror #12
    1c94:	007d0002 	rsbseq	r0, sp, r2
    1c98:	00001662 	andeq	r1, r0, r2, ror #12
    1c9c:	000016d4 	ldrdeq	r1, [r0], -r4
    1ca0:	107d0002 	rsbsne	r0, sp, r2
	...
    1cac:	00001660 	andeq	r1, r0, r0, ror #12
    1cb0:	00001666 	andeq	r1, r0, r6, ror #12
    1cb4:	66500001 	ldrbvs	r0, [r0], -r1
    1cb8:	d4000016 	strle	r0, [r0], #-22
    1cbc:	04000016 	streq	r0, [r0], #-22
    1cc0:	5001f300 	andpl	pc, r1, r0, lsl #6
    1cc4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1cc8:	00000000 	andeq	r0, r0, r0
    1ccc:	0016d400 	andseq	sp, r6, r0, lsl #8
    1cd0:	0016d600 	andseq	sp, r6, r0, lsl #12
    1cd4:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1cd8:	0016d600 	andseq	sp, r6, r0, lsl #12
    1cdc:	0016f400 	andseq	pc, r6, r0, lsl #8
    1ce0:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1ce4:	00000008 	andeq	r0, r0, r8
    1ce8:	00000000 	andeq	r0, r0, r0
    1cec:	0016d400 	andseq	sp, r6, r0, lsl #8
    1cf0:	0016d800 	andseq	sp, r6, r0, lsl #16
    1cf4:	30000200 	andcc	r0, r0, r0, lsl #4
    1cf8:	0016e89f 	mulseq	r6, pc, r8	; <UNPREDICTABLE>
    1cfc:	0016f400 	andseq	pc, r6, r0, lsl #8
    1d00:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1d0c:	000016f4 	strdeq	r1, [r0], -r4
    1d10:	000016f6 	strdeq	r1, [r0], -r6
    1d14:	007d0002 	rsbseq	r0, sp, r2
    1d18:	000016f6 	strdeq	r1, [r0], -r6
    1d1c:	00001728 	andeq	r1, r0, r8, lsr #14
    1d20:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    1d2c:	0000172c 	andeq	r1, r0, ip, lsr #14
    1d30:	0000172f 	andeq	r1, r0, pc, lsr #14
    1d34:	2f500001 	svccs	0x00500001
    1d38:	30000017 	andcc	r0, r0, r7, lsl r0
    1d3c:	04000017 	streq	r0, [r0], #-23
    1d40:	5001f300 	andpl	pc, r1, r0, lsl #6
    1d44:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1d48:	00000000 	andeq	r0, r0, r0
    1d4c:	00173000 	andseq	r3, r7, r0
    1d50:	00173200 	andseq	r3, r7, r0, lsl #4
    1d54:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1d58:	00173200 	andseq	r3, r7, r0, lsl #4
    1d5c:	00179000 	andseq	r9, r7, r0
    1d60:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1d64:	00000018 	andeq	r0, r0, r8, lsl r0
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	00173000 	andseq	r3, r7, r0
    1d70:	00173e00 	andseq	r3, r7, r0, lsl #28
    1d74:	50000100 	andpl	r0, r0, r0, lsl #2
    1d78:	0000173e 	andeq	r1, r0, lr, lsr r7
    1d7c:	00001756 	andeq	r1, r0, r6, asr r7
    1d80:	00500001 	subseq	r0, r0, r1
    1d84:	00000000 	andeq	r0, r0, r0
    1d88:	3a000000 	bcc	1d90 <__Stack_Size+0x1990>
    1d8c:	42000017 	andmi	r0, r0, #23
    1d90:	06000017 			; <UNDEFINED> instruction: 0x06000017
    1d94:	08007100 	stmdaeq	r0, {r8, ip, sp, lr}
    1d98:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1d9c:	00000000 	andeq	r0, r0, r0
    1da0:	30000000 	andcc	r0, r0, r0
    1da4:	36000017 			; <UNDEFINED> instruction: 0x36000017
    1da8:	06000017 			; <UNDEFINED> instruction: 0x06000017
    1dac:	ca000c00 	bgt	4db4 <__Stack_Size+0x49b4>
    1db0:	529f3b9a 	addspl	r3, pc, #157696	; 0x26800
    1db4:	5a000017 	bpl	1e18 <__Stack_Size+0x1a18>
    1db8:	01000017 	tsteq	r0, r7, lsl r0
    1dbc:	00005200 	andeq	r5, r0, r0, lsl #4
    1dc0:	00000000 	andeq	r0, r0, r0
    1dc4:	17300000 	ldrne	r0, [r0, -r0]!
    1dc8:	17360000 	ldrne	r0, [r6, -r0]!
    1dcc:	00020000 	andeq	r0, r2, r0
    1dd0:	00009f30 	andeq	r9, r0, r0, lsr pc
    1dd4:	00000000 	andeq	r0, r0, r0
    1dd8:	17900000 	ldrne	r0, [r0, r0]
    1ddc:	17920000 	ldrne	r0, [r2, r0]
    1de0:	00020000 	andeq	r0, r2, r0
    1de4:	1792007d 			; <UNDEFINED> instruction: 0x1792007d
    1de8:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    1dec:	00020000 	andeq	r0, r2, r0
    1df0:	0000087d 	andeq	r0, r0, sp, ror r8
    1df4:	00000000 	andeq	r0, r0, r0
    1df8:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    1dfc:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
    1e00:	00020000 	andeq	r0, r2, r0
    1e04:	180a007d 	stmdane	sl, {r0, r2, r3, r4, r5, r6}
    1e08:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    1e0c:	00020000 	andeq	r0, r2, r0
    1e10:	180e0c7d 	stmdane	lr, {r0, r2, r3, r4, r5, r6, sl, fp}
    1e14:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    1e18:	00020000 	andeq	r0, r2, r0
    1e1c:	0000207d 	andeq	r2, r0, sp, ror r0
    1e20:	00000000 	andeq	r0, r0, r0
    1e24:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    1e28:	18160000 	ldmdane	r6, {}	; <UNPREDICTABLE>
    1e2c:	00010000 	andeq	r0, r1, r0
    1e30:	00181650 	andseq	r1, r8, r0, asr r6
    1e34:	00187800 	andseq	r7, r8, r0, lsl #16
    1e38:	f3000400 	vshl.u8	d0, d0, d0
    1e3c:	009f5001 	addseq	r5, pc, r1
    1e40:	00000000 	andeq	r0, r0, r0
    1e44:	1a000000 	bne	1e4c <__Stack_Size+0x1a4c>
    1e48:	24000018 	strcs	r0, [r0], #-24
    1e4c:	01000018 	tsteq	r0, r8, lsl r0
    1e50:	00005100 	andeq	r5, r0, r0, lsl #2
    1e54:	00000000 	andeq	r0, r0, r0
    1e58:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    1e5c:	183a0000 	ldmdane	sl!, {}	; <UNPREDICTABLE>
    1e60:	00010000 	andeq	r0, r1, r0
    1e64:	00000050 	andeq	r0, r0, r0, asr r0
    1e68:	00000000 	andeq	r0, r0, r0
    1e6c:	00180800 	andseq	r0, r8, r0, lsl #16
    1e70:	00181600 	andseq	r1, r8, r0, lsl #12
    1e74:	0c000600 	stceq	6, cr0, [r0], {-0}
    1e78:	3b9aca00 	blcc	fe6b4680 <SCS_BASE+0x1e6a6680>
    1e7c:	0018369f 	mulseq	r8, pc, r6	; <UNPREDICTABLE>
    1e80:	00184000 	andseq	r4, r8, r0
    1e84:	52000100 	andpl	r0, r0, #0
	...
    1e90:	00001814 	andeq	r1, r0, r4, lsl r8
    1e94:	00001816 	andeq	r1, r0, r6, lsl r8
    1e98:	9f310002 	svcls	0x00310002
    1e9c:	0000183e 	andeq	r1, r0, lr, lsr r8
    1ea0:	00001840 	andeq	r1, r0, r0, asr #16
    1ea4:	9f300002 	svcls	0x00300002
	...
    1eb0:	00001878 	andeq	r1, r0, r8, ror r8
    1eb4:	0000187a 	andeq	r1, r0, sl, ror r8
    1eb8:	007d0002 	rsbseq	r0, sp, r2
    1ebc:	0000187a 	andeq	r1, r0, sl, ror r8
    1ec0:	000018f2 	strdeq	r1, [r0], -r2
    1ec4:	107d0002 	rsbsne	r0, sp, r2
	...
    1ed0:	00001878 	andeq	r1, r0, r8, ror r8
    1ed4:	000018d6 	ldrdeq	r1, [r0], -r6
    1ed8:	d6500001 	ldrble	r0, [r0], -r1
    1edc:	f2000018 	vqadd.s8	d0, d0, d8
    1ee0:	04000018 	streq	r0, [r0], #-24
    1ee4:	5001f300 	andpl	pc, r1, r0, lsl #6
    1ee8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1eec:	00000000 	andeq	r0, r0, r0
    1ef0:	0018f200 	andseq	pc, r8, r0, lsl #4
    1ef4:	0018f400 	andseq	pc, r8, r0, lsl #8
    1ef8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1efc:	0018f400 	andseq	pc, r8, r0, lsl #8
    1f00:	00193c00 	andseq	r3, r9, r0, lsl #24
    1f04:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    1f08:	00000010 	andeq	r0, r0, r0, lsl r0
    1f0c:	00000000 	andeq	r0, r0, r0
    1f10:	0018f200 	andseq	pc, r8, r0, lsl #4
    1f14:	00192000 	andseq	r2, r9, r0
    1f18:	50000100 	andpl	r0, r0, r0, lsl #2
    1f1c:	00001920 	andeq	r1, r0, r0, lsr #18
    1f20:	0000193c 	andeq	r1, r0, ip, lsr r9
    1f24:	01f30004 	mvnseq	r0, r4
    1f28:	00009f50 	andeq	r9, r0, r0, asr pc
    1f2c:	00000000 	andeq	r0, r0, r0
    1f30:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
    1f34:	193e0000 	ldmdbne	lr!, {}	; <UNPREDICTABLE>
    1f38:	00020000 	andeq	r0, r2, r0
    1f3c:	193e007d 	ldmdbne	lr!, {r0, r2, r3, r4, r5, r6}
    1f40:	19b00000 	ldmibne	r0!, {}	; <UNPREDICTABLE>
    1f44:	00020000 	andeq	r0, r2, r0
    1f48:	0000107d 	andeq	r1, r0, sp, ror r0
    1f4c:	00000000 	andeq	r0, r0, r0
    1f50:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
    1f54:	19460000 	stmdbne	r6, {}^	; <UNPREDICTABLE>
    1f58:	00020000 	andeq	r0, r2, r0
    1f5c:	19849f30 	stmibne	r4, {r4, r5, r8, r9, sl, fp, ip, pc}
    1f60:	198a0000 	stmibne	sl, {}	; <UNPREDICTABLE>
    1f64:	00010000 	andeq	r0, r1, r0
    1f68:	00198a55 	andseq	r8, r9, r5, asr sl
    1f6c:	0019b000 	andseq	fp, r9, r0
    1f70:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    1f7c:	00001962 	andeq	r1, r0, r2, ror #18
    1f80:	00001978 	andeq	r1, r0, r8, ror r9
    1f84:	00700007 	rsbseq	r0, r0, r7
    1f88:	1affff0a 	bne	1bb8 <__Stack_Size+0x17b8>
    1f8c:	00197a9f 	mulseq	r9, pc, sl	; <UNPREDICTABLE>
    1f90:	00197c00 	andseq	r7, r9, r0, lsl #24
    1f94:	70000700 	andvc	r0, r0, r0, lsl #14
    1f98:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1f9c:	197e9f1a 	ldmdbne	lr!, {r1, r3, r4, r8, r9, sl, fp, ip, pc}^
    1fa0:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
    1fa4:	00070000 	andeq	r0, r7, r0
    1fa8:	ff0a0070 			; <UNDEFINED> instruction: 0xff0a0070
    1fac:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1fb0:	00000000 	andeq	r0, r0, r0
    1fb4:	b0000000 	andlt	r0, r0, r0
    1fb8:	b4000019 	strlt	r0, [r0], #-25
    1fbc:	02000019 	andeq	r0, r0, #25
    1fc0:	b4007d00 	strlt	r7, [r0], #-3328	; 0xd00
    1fc4:	8c000019 	stchi	0, cr0, [r0], {25}
    1fc8:	0200001a 	andeq	r0, r0, #26
    1fcc:	00087d00 	andeq	r7, r8, r0, lsl #26
    1fd0:	00000000 	andeq	r0, r0, r0
    1fd4:	8c000000 	stchi	0, cr0, [r0], {-0}
    1fd8:	8e00001a 	mcrhi	0, 0, r0, cr0, cr10, {0}
    1fdc:	0200001a 	andeq	r0, r0, #26
    1fe0:	8e007d00 	cdphi	13, 0, cr7, cr0, cr0, {0}
    1fe4:	a800001a 	stmdage	r0, {r1, r3, r4}
    1fe8:	0200001a 	andeq	r0, r0, #26
    1fec:	00087d00 	andeq	r7, r8, r0, lsl #26
    1ff0:	00000000 	andeq	r0, r0, r0
    1ff4:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    1ff8:	aa00001a 	bge	2068 <__Stack_Size+0x1c68>
    1ffc:	0200001a 	andeq	r0, r0, #26
    2000:	aa007d00 	bge	21408 <__Stack_Size+0x21008>
    2004:	3400001a 	strcc	r0, [r0], #-26
    2008:	0200001b 	andeq	r0, r0, #27
    200c:	00087d00 	andeq	r7, r8, r0, lsl #26
    2010:	00000000 	andeq	r0, r0, r0
    2014:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    2018:	c000001a 	andgt	r0, r0, sl, lsl r0
    201c:	0100001a 	tsteq	r0, sl, lsl r0
    2020:	1ac05000 	bne	ff016028 <SCS_BASE+0x1f008028>
    2024:	1ae80000 	bne	ffa0202c <SCS_BASE+0x1f9f402c>
    2028:	00010000 	andeq	r0, r1, r0
    202c:	001ae854 	andseq	lr, sl, r4, asr r8
    2030:	001aea00 	andseq	lr, sl, r0, lsl #20
    2034:	50000100 	andpl	r0, r0, r0, lsl #2
    2038:	00001aea 	andeq	r1, r0, sl, ror #21
    203c:	00001b34 	andeq	r1, r0, r4, lsr fp
    2040:	00540001 	subseq	r0, r4, r1
    2044:	00000000 	andeq	r0, r0, r0
    2048:	34000000 	strcc	r0, [r0], #-0
    204c:	3600001b 			; <UNDEFINED> instruction: 0x3600001b
    2050:	0200001b 	andeq	r0, r0, #27
    2054:	36007d00 	strcc	r7, [r0], -r0, lsl #26
    2058:	9a00001b 	bls	20cc <__Stack_Size+0x1ccc>
    205c:	0200001b 	andeq	r0, r0, #27
    2060:	00187d00 	andseq	r7, r8, r0, lsl #26
    2064:	00000000 	andeq	r0, r0, r0
    2068:	9a000000 	bls	2070 <__Stack_Size+0x1c70>
    206c:	9e00001b 	mcrls	0, 0, r0, cr0, cr11, {0}
    2070:	0200001b 	andeq	r0, r0, #27
    2074:	9e007d00 	cdpls	13, 0, cr7, cr0, cr0, {0}
    2078:	5c00001b 	stcpl	0, cr0, [r0], {27}
    207c:	0200001d 	andeq	r0, r0, #29
    2080:	00287d00 	eoreq	r7, r8, r0, lsl #26
    2084:	00000000 	andeq	r0, r0, r0
    2088:	5c000000 	stcpl	0, cr0, [r0], {-0}
    208c:	5e00001d 	mcrpl	0, 0, r0, cr0, cr13, {0}
    2090:	0200001d 	andeq	r0, r0, #29
    2094:	5e007d00 	cdppl	13, 0, cr7, cr0, cr0, {0}
    2098:	6000001d 	andvs	r0, r0, sp, lsl r0
    209c:	0200001d 	andeq	r0, r0, #29
    20a0:	600c7d00 	andvs	r7, ip, r0, lsl #26
    20a4:	2800001d 	stmdacs	r0, {r0, r2, r3, r4}
    20a8:	0200001e 	andeq	r0, r0, #30
    20ac:	00287d00 	eoreq	r7, r8, r0, lsl #26
    20b0:	00000000 	andeq	r0, r0, r0
    20b4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    20b8:	2a00001e 	bcs	2138 <__Stack_Size+0x1d38>
    20bc:	0200001e 	andeq	r0, r0, #30
    20c0:	2a007d00 	bcs	214c8 <__Stack_Size+0x210c8>
    20c4:	cc00001e 	stcgt	0, cr0, [r0], {30}
    20c8:	0200001e 	andeq	r0, r0, #30
    20cc:	00107d00 	andseq	r7, r0, r0, lsl #26
    20d0:	00000000 	andeq	r0, r0, r0
    20d4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    20d8:	6000001e 	andvs	r0, r0, lr, lsl r0
    20dc:	0200001e 	andeq	r0, r0, #30
    20e0:	749f3000 	ldrvc	r3, [pc], #0	; 20e8 <__Stack_Size+0x1ce8>
    20e4:	cc00001e 	stcgt	0, cr0, [r0], {30}
    20e8:	0100001e 	tsteq	r0, lr, lsl r0
    20ec:	00005400 	andeq	r5, r0, r0, lsl #8
    20f0:	00000000 	andeq	r0, r0, r0
    20f4:	1e480000 	cdpne	0, 4, cr0, cr8, cr0, {0}
    20f8:	1e940000 	cdpne	0, 9, cr0, cr4, cr0, {0}
    20fc:	00020000 	andeq	r0, r2, r0
    2100:	1ea29f30 	mcrne	15, 5, r9, cr2, cr0, {1}
    2104:	1ea80000 	cdpne	0, 10, cr0, cr8, cr0, {0}
    2108:	00010000 	andeq	r0, r1, r0
    210c:	001ea855 	andseq	sl, lr, r5, asr r8
    2110:	001ecc00 	andseq	ip, lr, r0, lsl #24
    2114:	30000200 	andcc	r0, r0, r0, lsl #4
    2118:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    211c:	00000000 	andeq	r0, r0, r0
    2120:	001ea200 	andseq	sl, lr, r0, lsl #4
    2124:	001ea800 	andseq	sl, lr, r0, lsl #16
    2128:	0a000400 	beq	3130 <__Stack_Size+0x2d30>
    212c:	009f01f4 			; <UNDEFINED> instruction: 0x009f01f4
	...
    2138:	02000000 	andeq	r0, r0, #0
    213c:	02000000 	andeq	r0, r0, #0
    2140:	02007d00 	andeq	r7, r0, #0
    2144:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    2148:	02000000 	andeq	r0, r0, #0
    214c:	00087d00 	andeq	r7, r8, r0, lsl #26
	...
    2158:	1c000000 	stcne	0, cr0, [r0], {-0}
    215c:	01000000 	mrseq	r0, (UNDEF: 0)
    2160:	001c5000 	andseq	r5, ip, r0
    2164:	00280000 	eoreq	r0, r8, r0
    2168:	00040000 	andeq	r0, r4, r0
    216c:	9f5001f3 	svcls	0x005001f3
    2170:	00000028 	andeq	r0, r0, r8, lsr #32
    2174:	0000002c 	andeq	r0, r0, ip, lsr #32
    2178:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    217c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2180:	04000000 	streq	r0, [r0], #-0
    2184:	5001f300 	andpl	pc, r1, r0, lsl #6
    2188:	0000389f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    218c:	00003c00 	andeq	r3, r0, r0, lsl #24
    2190:	50000100 	andpl	r0, r0, r0, lsl #2
    2194:	0000003c 	andeq	r0, r0, ip, lsr r0
    2198:	00000050 	andeq	r0, r0, r0, asr r0
    219c:	01f30004 	mvnseq	r0, r4
    21a0:	00509f50 	subseq	r9, r0, r0, asr pc
    21a4:	00580000 	subseq	r0, r8, r0
    21a8:	00010000 	andeq	r0, r1, r0
    21ac:	00000050 	andeq	r0, r0, r0, asr r0
    21b0:	00000000 	andeq	r0, r0, r0
    21b4:	00005800 	andeq	r5, r0, r0, lsl #16
    21b8:	00005c00 	andeq	r5, r0, r0, lsl #24
    21bc:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    21c0:	00005c00 	andeq	r5, r0, r0, lsl #24
    21c4:	0000a000 	andeq	sl, r0, r0
    21c8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    21cc:	00000008 	andeq	r0, r0, r8
    21d0:	00000000 	andeq	r0, r0, r0
    21d4:	00005800 	andeq	r5, r0, r0, lsl #16
    21d8:	00008a00 	andeq	r8, r0, r0, lsl #20
    21dc:	51000100 	mrspl	r0, (UNDEF: 16)
    21e0:	0000008a 	andeq	r0, r0, sl, lsl #1
    21e4:	000000a0 	andeq	r0, r0, r0, lsr #1
    21e8:	01f30004 	mvnseq	r0, r4
    21ec:	00009f51 	andeq	r9, r0, r1, asr pc
    21f0:	00000000 	andeq	r0, r0, r0
    21f4:	00580000 	subseq	r0, r8, r0
    21f8:	005a0000 	subseq	r0, sl, r0
    21fc:	00020000 	andeq	r0, r2, r0
    2200:	005a9f30 	subseq	r9, sl, r0, lsr pc
    2204:	00620000 	rsbeq	r0, r2, r0
    2208:	00080000 	andeq	r0, r8, r0
    220c:	ff110072 			; <UNDEFINED> instruction: 0xff110072
    2210:	9f1a43fd 	svcls	0x001a43fd
    2214:	00000070 	andeq	r0, r0, r0, ror r0
    2218:	00000076 	andeq	r0, r0, r6, ror r0
    221c:	76520001 	ldrbvc	r0, [r2], -r1
    2220:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    2224:	02000000 	andeq	r0, r0, #0
    2228:	78047000 	stmdavc	r4, {ip, sp, lr}
    222c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    2230:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2234:	11007400 	tstne	r0, r0, lsl #8
    2238:	1a47effd 	bne	11fe234 <__Stack_Size+0x11fde34>
    223c:	00007e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    2240:	00008000 	andeq	r8, r0, r0
    2244:	53000100 	movwpl	r0, #256	; 0x100
    2248:	00000080 	andeq	r0, r0, r0, lsl #1
    224c:	00000086 	andeq	r0, r0, r6, lsl #1
    2250:	00740008 	rsbseq	r0, r4, r8
    2254:	47effd11 			; <UNDEFINED> instruction: 0x47effd11
    2258:	00869f1a 	addeq	r9, r6, sl, lsl pc
    225c:	008c0000 	addeq	r0, ip, r0
    2260:	00010000 	andeq	r0, r1, r0
    2264:	00008c53 	andeq	r8, r0, r3, asr ip
    2268:	0000a000 	andeq	sl, r0, r0
    226c:	52000100 	andpl	r0, r0, #0
	...
    2278:	00000058 	andeq	r0, r0, r8, asr r0
    227c:	00000092 	muleq	r0, r2, r0
    2280:	9f300002 	svcls	0x00300002
	...
    228c:	000000b2 	strheq	r0, [r0], -r2
    2290:	000000ba 	strheq	r0, [r0], -sl
    2294:	ba510001 	blt	14422a0 <__Stack_Size+0x1441ea0>
    2298:	bc000000 	stclt	0, cr0, [r0], {-0}
    229c:	04000000 	streq	r0, [r0], #-0
    22a0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    22a4:	0000bc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    22a8:	0000c000 	andeq	ip, r0, r0
    22ac:	51000100 	mrspl	r0, (UNDEF: 16)
    22b0:	000000c0 	andeq	r0, r0, r0, asr #1
    22b4:	000000c4 	andeq	r0, r0, r4, asr #1
    22b8:	01f30004 	mvnseq	r0, r4
    22bc:	00009f51 	andeq	r9, r0, r1, asr pc
    22c0:	00000000 	andeq	r0, r0, r0
    22c4:	00c40000 	sbceq	r0, r4, r0
    22c8:	00cc0000 	sbceq	r0, ip, r0
    22cc:	00010000 	andeq	r0, r1, r0
    22d0:	0000cc51 	andeq	ip, r0, r1, asr ip
    22d4:	0000ce00 	andeq	ip, r0, r0, lsl #28
    22d8:	f3000400 	vshl.u8	d0, d0, d0
    22dc:	ce9f5101 	fmlgte	f5, f7, f1
    22e0:	d2000000 	andle	r0, r0, #0
    22e4:	01000000 	mrseq	r0, (UNDEF: 0)
    22e8:	00d25100 	sbcseq	r5, r2, r0, lsl #2
    22ec:	00d60000 	sbcseq	r0, r6, r0
    22f0:	00040000 	andeq	r0, r4, r0
    22f4:	9f5101f3 	svcls	0x005101f3
	...
    2300:	000000d6 	ldrdeq	r0, [r0], -r6
    2304:	000000d8 	ldrdeq	r0, [r0], -r8
    2308:	d8510001 	ldmdale	r1, {r0}^
    230c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    2310:	04000000 	streq	r0, [r0], #-0
    2314:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2318:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    231c:	00000000 	andeq	r0, r0, r0
    2320:	0000d600 	andeq	sp, r0, r0, lsl #12
    2324:	0000d800 	andeq	sp, r0, r0, lsl #16
    2328:	30000200 	andcc	r0, r0, r0, lsl #4
    232c:	0000d89f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    2330:	0000de00 	andeq	sp, r0, r0, lsl #28
    2334:	51000100 	mrspl	r0, (UNDEF: 16)
    2338:	000000de 	ldrdeq	r0, [r0], -lr
    233c:	000000e8 	andeq	r0, r0, r8, ror #1
    2340:	01f30004 	mvnseq	r0, r4
    2344:	00009f51 	andeq	r9, r0, r1, asr pc
    2348:	00000000 	andeq	r0, r0, r0
    234c:	00f20000 	rscseq	r0, r2, r0
    2350:	00f40000 	rscseq	r0, r4, r0
    2354:	00010000 	andeq	r0, r1, r0
    2358:	0000f450 	andeq	pc, r0, r0, asr r4	; <UNPREDICTABLE>
    235c:	0000fa00 	andeq	pc, r0, r0, lsl #20
    2360:	f3000400 	vshl.u8	d0, d0, d0
    2364:	009f5001 	addseq	r5, pc, r1
    2368:	00000000 	andeq	r0, r0, r0
    236c:	f2000000 	vhadd.s8	d0, d0, d0
    2370:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    2374:	02000000 	andeq	r0, r0, #0
    2378:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
    237c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2380:	07000000 	streq	r0, [r0, -r0]
    2384:	38007000 	stmdacc	r0, {ip, sp, lr}
    2388:	9f2e301a 	svcls	0x002e301a
	...
    2394:	00000104 	andeq	r0, r0, r4, lsl #2
    2398:	00000106 	andeq	r0, r0, r6, lsl #2
    239c:	06500001 	ldrbeq	r0, [r0], -r1
    23a0:	0c000001 	stceq	0, cr0, [r0], {1}
    23a4:	04000001 	streq	r0, [r0], #-1
    23a8:	5001f300 	andpl	pc, r1, r0, lsl #6
    23ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    23b0:	00000000 	andeq	r0, r0, r0
    23b4:	00010400 	andeq	r0, r1, r0, lsl #8
    23b8:	00010600 	andeq	r0, r1, r0, lsl #12
    23bc:	30000200 	andcc	r0, r0, r0, lsl #4
    23c0:	0001069f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    23c4:	00010a00 	andeq	r0, r1, r0, lsl #20
    23c8:	70000700 	andvc	r0, r0, r0, lsl #14
    23cc:	301a3400 	andscc	r3, sl, r0, lsl #8
    23d0:	00009f2e 	andeq	r9, r0, lr, lsr #30
    23d4:	00000000 	andeq	r0, r0, r0
    23d8:	010c0000 	mrseq	r0, (UNDEF: 12)
    23dc:	01140000 	tsteq	r4, r0
    23e0:	00010000 	andeq	r0, r1, r0
    23e4:	00011451 	andeq	r1, r1, r1, asr r4
    23e8:	00011600 	andeq	r1, r1, r0, lsl #12
    23ec:	f3000400 	vshl.u8	d0, d0, d0
    23f0:	169f5101 	ldrne	r5, [pc], r1, lsl #2
    23f4:	1a000001 	bne	2400 <__Stack_Size+0x2000>
    23f8:	01000001 	tsteq	r0, r1
    23fc:	011a5100 	tsteq	sl, r0, lsl #2
    2400:	011e0000 	tsteq	lr, r0
    2404:	00040000 	andeq	r0, r4, r0
    2408:	9f5101f3 	svcls	0x005101f3
	...
    2414:	0000011e 	andeq	r0, r0, lr, lsl r1
    2418:	00000120 	andeq	r0, r0, r0, lsr #2
    241c:	20500001 	subscs	r0, r0, r1
    2420:	26000001 	strcs	r0, [r0], -r1
    2424:	04000001 	streq	r0, [r0], #-1
    2428:	5001f300 	andpl	pc, r1, r0, lsl #6
    242c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2430:	00000000 	andeq	r0, r0, r0
    2434:	00011e00 	andeq	r1, r1, r0, lsl #28
    2438:	00012000 	andeq	r2, r1, r0
    243c:	30000200 	andcc	r0, r0, r0, lsl #4
    2440:	0001209f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    2444:	00012400 	andeq	r2, r1, r0, lsl #8
    2448:	70000900 	andvc	r0, r0, r0, lsl #18
    244c:	24424000 	strbcs	r4, [r2], #-0
    2450:	9f2e301a 	svcls	0x002e301a
	...
    245c:	00000126 	andeq	r0, r0, r6, lsr #2
    2460:	0000012a 	andeq	r0, r0, sl, lsr #2
    2464:	2a510001 	bcs	1442470 <__Stack_Size+0x1442070>
    2468:	36000001 	strcc	r0, [r0], -r1
    246c:	04000001 	streq	r0, [r0], #-1
    2470:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2474:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2478:	00000000 	andeq	r0, r0, r0
    247c:	00012600 	andeq	r2, r1, r0, lsl #12
    2480:	00012800 	andeq	r2, r1, r0, lsl #16
    2484:	30000200 	andcc	r0, r0, r0, lsl #4
    2488:	0001289f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    248c:	00012e00 	andeq	r2, r1, r0, lsl #28
    2490:	53000100 	movwpl	r0, #256	; 0x100
    2494:	0000012e 	andeq	r0, r0, lr, lsr #2
    2498:	00000132 	andeq	r0, r0, r2, lsr r1
    249c:	32520001 	subscc	r0, r2, #1
    24a0:	36000001 	strcc	r0, [r0], -r1
    24a4:	01000001 	tsteq	r0, r1
    24a8:	00005300 	andeq	r5, r0, r0, lsl #6
    24ac:	00000000 	andeq	r0, r0, r0
    24b0:	01260000 	teqeq	r6, r0
    24b4:	012e0000 	teqeq	lr, r0
    24b8:	00020000 	andeq	r0, r2, r0
    24bc:	00009f30 	andeq	r9, r0, r0, lsr pc
    24c0:	00000000 	andeq	r0, r0, r0
    24c4:	01360000 	teqeq	r6, r0
    24c8:	013e0000 	teqeq	lr, r0
    24cc:	00010000 	andeq	r0, r1, r0
    24d0:	00013e51 	andeq	r3, r1, r1, asr lr
    24d4:	00014000 	andeq	r4, r1, r0
    24d8:	f3000400 	vshl.u8	d0, d0, d0
    24dc:	409f5101 	addsmi	r5, pc, r1, lsl #2
    24e0:	44000001 	strmi	r0, [r0], #-1
    24e4:	01000001 	tsteq	r0, r1
    24e8:	01445100 	mrseq	r5, (UNDEF: 84)
    24ec:	01480000 	mrseq	r0, (UNDEF: 72)
    24f0:	00040000 	andeq	r0, r4, r0
    24f4:	9f5101f3 	svcls	0x005101f3
	...
    2500:	00000148 	andeq	r0, r0, r8, asr #2
    2504:	0000014c 	andeq	r0, r0, ip, asr #2
    2508:	007d0002 	rsbseq	r0, sp, r2
    250c:	0000014c 	andeq	r0, r0, ip, asr #2
    2510:	000001e2 	andeq	r0, r0, r2, ror #3
    2514:	107d0002 	rsbsne	r0, sp, r2
	...
    2520:	00000148 	andeq	r0, r0, r8, asr #2
    2524:	0000019a 	muleq	r0, sl, r1
    2528:	9a510001 	bls	1442534 <__Stack_Size+0x1442134>
    252c:	a8000001 	stmdage	r0, {r0}
    2530:	04000001 	streq	r0, [r0], #-1
    2534:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2538:	0001a89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    253c:	0001ba00 	andeq	fp, r1, r0, lsl #20
    2540:	51000100 	mrspl	r0, (UNDEF: 16)
    2544:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
    2548:	000001c8 	andeq	r0, r0, r8, asr #3
    254c:	01f30004 	mvnseq	r0, r4
    2550:	01c89f51 	biceq	r9, r8, r1, asr pc
    2554:	01d60000 	bicseq	r0, r6, r0
    2558:	00010000 	andeq	r0, r1, r0
    255c:	0001d651 	andeq	sp, r1, r1, asr r6
    2560:	0001e200 	andeq	lr, r1, r0, lsl #4
    2564:	f3000400 	vshl.u8	d0, d0, d0
    2568:	009f5101 	addseq	r5, pc, r1, lsl #2
    256c:	00000000 	andeq	r0, r0, r0
    2570:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2574:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
    2578:	01000001 	tsteq	r0, r1
    257c:	018e5200 	orreq	r5, lr, r0, lsl #4
    2580:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    2584:	00040000 	andeq	r0, r4, r0
    2588:	9f5201f3 	svcls	0x005201f3
    258c:	000001a8 	andeq	r0, r0, r8, lsr #3
    2590:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    2594:	b0520001 	subslt	r0, r2, r1
    2598:	c8000001 	stmdagt	r0, {r0}
    259c:	04000001 	streq	r0, [r0], #-1
    25a0:	5201f300 	andpl	pc, r1, #0
    25a4:	0001c89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    25a8:	0001cc00 	andeq	ip, r1, r0, lsl #24
    25ac:	52000100 	andpl	r0, r0, #0
    25b0:	000001cc 	andeq	r0, r0, ip, asr #3
    25b4:	000001e2 	andeq	r0, r0, r2, ror #3
    25b8:	01f30004 	mvnseq	r0, r4
    25bc:	00009f52 	andeq	r9, r0, r2, asr pc
    25c0:	00000000 	andeq	r0, r0, r0
    25c4:	01480000 	mrseq	r0, (UNDEF: 72)
    25c8:	01600000 	cmneq	r0, r0
    25cc:	00010000 	andeq	r0, r1, r0
    25d0:	00016053 	andeq	r6, r1, r3, asr r0
    25d4:	00016c00 	andeq	r6, r1, r0, lsl #24
    25d8:	f3000400 	vshl.u8	d0, d0, d0
    25dc:	6c9f5301 	ldcvs	3, cr5, [pc], {1}
    25e0:	78000001 	stmdavc	r0, {r0}
    25e4:	01000001 	tsteq	r0, r1
    25e8:	01785300 	cmneq	r8, r0, lsl #6
    25ec:	01e20000 	mvneq	r0, r0
    25f0:	00040000 	andeq	r0, r4, r0
    25f4:	9f5301f3 	svcls	0x005301f3
	...
    2600:	00000148 	andeq	r0, r0, r8, asr #2
    2604:	00000162 	andeq	r0, r0, r2, ror #2
    2608:	9f300002 	svcls	0x00300002
    260c:	00000162 	andeq	r0, r0, r2, ror #2
    2610:	00000166 	andeq	r0, r0, r6, ror #2
    2614:	66560001 	ldrbvs	r0, [r6], -r1
    2618:	68000001 	stmdavs	r0, {r0}
    261c:	01000001 	tsteq	r0, r1
    2620:	01685500 	cmneq	r8, r0, lsl #10
    2624:	016c0000 	cmneq	ip, r0
    2628:	00010000 	andeq	r0, r1, r0
    262c:	00016c53 	andeq	r6, r1, r3, asr ip
    2630:	00017a00 	andeq	r7, r1, r0, lsl #20
    2634:	30000200 	andcc	r0, r0, r0, lsl #4
    2638:	00017a9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    263c:	00017e00 	andeq	r7, r1, r0, lsl #28
    2640:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2644:	0000017e 	andeq	r0, r0, lr, ror r1
    2648:	00000182 	andeq	r0, r0, r2, lsl #3
    264c:	82550001 	subshi	r0, r5, #1
    2650:	84000001 	strhi	r0, [r0], #-1
    2654:	01000001 	tsteq	r0, r1
    2658:	019c5400 	orrseq	r5, ip, r0, lsl #8
    265c:	01a00000 	moveq	r0, r0
    2660:	00010000 	andeq	r0, r1, r0
    2664:	0001a054 	andeq	sl, r1, r4, asr r0
    2668:	0001a400 	andeq	sl, r1, r0, lsl #8
    266c:	52000100 	andpl	r0, r0, #0
    2670:	000001a4 	andeq	r0, r0, r4, lsr #3
    2674:	000001a8 	andeq	r0, r0, r8, lsr #3
    2678:	bc530001 	mrrclt	0, 0, r0, r3, cr1
    267c:	c0000001 	andgt	r0, r0, r1
    2680:	01000001 	tsteq	r0, r1
    2684:	01c05400 	biceq	r5, r0, r0, lsl #8
    2688:	01c40000 	biceq	r0, r4, r0
    268c:	00010000 	andeq	r0, r1, r0
    2690:	0001c452 	andeq	ip, r1, r2, asr r4
    2694:	0001c800 	andeq	ip, r1, r0, lsl #16
    2698:	53000100 	movwpl	r0, #256	; 0x100
    269c:	000001d8 	ldrdeq	r0, [r0], -r8
    26a0:	000001dc 	ldrdeq	r0, [r0], -ip
    26a4:	dc540001 	mrrcle	0, 0, r0, r4, cr1
    26a8:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
    26ac:	01000001 	tsteq	r0, r1
    26b0:	01de5200 	bicseq	r5, lr, r0, lsl #4
    26b4:	01e20000 	mvneq	r0, r0
    26b8:	00010000 	andeq	r0, r1, r0
    26bc:	00000051 	andeq	r0, r0, r1, asr r0
    26c0:	00000000 	andeq	r0, r0, r0
    26c4:	00014800 	andeq	r4, r1, r0, lsl #16
    26c8:	00016200 	andeq	r6, r1, r0, lsl #4
    26cc:	30000200 	andcc	r0, r0, r0, lsl #4
    26d0:	0001629f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    26d4:	00016600 	andeq	r6, r1, r0, lsl #12
    26d8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    26dc:	0000016c 	andeq	r0, r0, ip, ror #2
    26e0:	0000017a 	andeq	r0, r0, sl, ror r1
    26e4:	9f300002 	svcls	0x00300002
    26e8:	0000017a 	andeq	r0, r0, sl, ror r1
    26ec:	0000017e 	andeq	r0, r0, lr, ror r1
    26f0:	9c550001 	mrrcls	0, 0, r0, r5, cr1
    26f4:	a0000001 	andge	r0, r0, r1
    26f8:	01000001 	tsteq	r0, r1
    26fc:	01bc5200 			; <UNDEFINED> instruction: 0x01bc5200
    2700:	01c00000 	biceq	r0, r0, r0
    2704:	00010000 	andeq	r0, r1, r0
    2708:	0001d852 	andeq	sp, r1, r2, asr r8
    270c:	0001dc00 	andeq	sp, r1, r0, lsl #24
    2710:	52000100 	andpl	r0, r0, #0
	...
    271c:	000001e2 	andeq	r0, r0, r2, ror #3
    2720:	000001ea 	andeq	r0, r0, sl, ror #3
    2724:	ea510001 	b	1442730 <__Stack_Size+0x1442330>
    2728:	ec000001 	stc	0, cr0, [r0], {1}
    272c:	04000001 	streq	r0, [r0], #-1
    2730:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2734:	0001ec9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    2738:	0001f000 	andeq	pc, r1, r0
    273c:	51000100 	mrspl	r0, (UNDEF: 16)
    2740:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2744:	000001f4 	strdeq	r0, [r0], -r4
    2748:	01f30004 	mvnseq	r0, r4
    274c:	00009f51 	andeq	r9, r0, r1, asr pc
    2750:	00000000 	andeq	r0, r0, r0
    2754:	01f40000 	mvnseq	r0, r0
    2758:	01f60000 	mvnseq	r0, r0
    275c:	00010000 	andeq	r0, r1, r0
    2760:	0001f650 	andeq	pc, r1, r0, asr r6	; <UNPREDICTABLE>
    2764:	0001fa00 	andeq	pc, r1, r0, lsl #20
    2768:	f3000400 	vshl.u8	d0, d0, d0
    276c:	009f5001 	addseq	r5, pc, r1
    2770:	00000000 	andeq	r0, r0, r0
    2774:	04000000 	streq	r0, [r0], #-0
    2778:	0c000002 	stceq	0, cr0, [r0], {2}
    277c:	01000002 	tsteq	r0, r2
    2780:	020c5100 	andeq	r5, ip, #0
    2784:	020e0000 	andeq	r0, lr, #0
    2788:	00040000 	andeq	r0, r4, r0
    278c:	9f5101f3 	svcls	0x005101f3
    2790:	0000020e 	andeq	r0, r0, lr, lsl #4
    2794:	00000212 	andeq	r0, r0, r2, lsl r2
    2798:	12510001 	subsne	r0, r1, #1
    279c:	16000002 	strne	r0, [r0], -r2
    27a0:	04000002 	streq	r0, [r0], #-2
    27a4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    27a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    27ac:	00000000 	andeq	r0, r0, r0
    27b0:	00021600 	andeq	r1, r2, r0, lsl #12
    27b4:	00021e00 	andeq	r1, r2, r0, lsl #28
    27b8:	51000100 	mrspl	r0, (UNDEF: 16)
    27bc:	0000021e 	andeq	r0, r0, lr, lsl r2
    27c0:	00000220 	andeq	r0, r0, r0, lsr #4
    27c4:	01f30004 	mvnseq	r0, r4
    27c8:	02209f51 	eoreq	r9, r0, #324	; 0x144
    27cc:	02240000 	eoreq	r0, r4, #0
    27d0:	00010000 	andeq	r0, r1, r0
    27d4:	00022451 	andeq	r2, r2, r1, asr r4
    27d8:	00022800 	andeq	r2, r2, r0, lsl #16
    27dc:	f3000400 	vshl.u8	d0, d0, d0
    27e0:	009f5101 	addseq	r5, pc, r1, lsl #2
    27e4:	00000000 	andeq	r0, r0, r0
    27e8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    27ec:	30000002 	andcc	r0, r0, r2
    27f0:	01000002 	tsteq	r0, r2
    27f4:	02305100 	eorseq	r5, r0, #0
    27f8:	02340000 	eorseq	r0, r4, #0
    27fc:	00040000 	andeq	r0, r4, r0
    2800:	9f5101f3 	svcls	0x005101f3
	...
    280c:	00000228 	andeq	r0, r0, r8, lsr #4
    2810:	0000022a 	andeq	r0, r0, sl, lsr #4
    2814:	9f300002 	svcls	0x00300002
    2818:	0000022a 	andeq	r0, r0, sl, lsr #4
    281c:	0000022e 	andeq	r0, r0, lr, lsr #4
    2820:	2e530001 	cdpcs	0, 5, cr0, cr3, cr1, {0}
    2824:	30000002 	andcc	r0, r0, r2
    2828:	01000002 	tsteq	r0, r2
    282c:	02305200 	eorseq	r5, r0, #0
    2830:	02340000 	eorseq	r0, r4, #0
    2834:	00010000 	andeq	r0, r1, r0
    2838:	00000051 	andeq	r0, r0, r1, asr r0
    283c:	00000000 	andeq	r0, r0, r0
    2840:	00023400 	andeq	r3, r2, r0, lsl #8
    2844:	00023c00 	andeq	r3, r2, r0, lsl #24
    2848:	51000100 	mrspl	r0, (UNDEF: 16)
    284c:	0000023c 	andeq	r0, r0, ip, lsr r2
    2850:	0000023e 	andeq	r0, r0, lr, lsr r2
    2854:	01f30004 	mvnseq	r0, r4
    2858:	023e9f51 	eorseq	r9, lr, #324	; 0x144
    285c:	02420000 	subeq	r0, r2, #0
    2860:	00010000 	andeq	r0, r1, r0
    2864:	00024251 	andeq	r4, r2, r1, asr r2
    2868:	00024600 	andeq	r4, r2, r0, lsl #12
    286c:	f3000400 	vshl.u8	d0, d0, d0
    2870:	009f5101 	addseq	r5, pc, r1, lsl #2
    2874:	00000000 	andeq	r0, r0, r0
    2878:	46000000 	strmi	r0, [r0], -r0
    287c:	4e000002 	cdpmi	0, 0, cr0, cr0, cr2, {0}
    2880:	01000002 	tsteq	r0, r2
    2884:	024e5100 	subeq	r5, lr, #0
    2888:	02500000 	subseq	r0, r0, #0
    288c:	00040000 	andeq	r0, r4, r0
    2890:	9f5101f3 	svcls	0x005101f3
    2894:	00000250 	andeq	r0, r0, r0, asr r2
    2898:	00000254 	andeq	r0, r0, r4, asr r2
    289c:	54510001 	ldrbpl	r0, [r1], #-1
    28a0:	58000002 	stmdapl	r0, {r1}
    28a4:	04000002 	streq	r0, [r0], #-2
    28a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    28ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    28b0:	00000000 	andeq	r0, r0, r0
    28b4:	00025800 	andeq	r5, r2, r0, lsl #16
    28b8:	00025a00 	andeq	r5, r2, r0, lsl #20
    28bc:	50000100 	andpl	r0, r0, r0, lsl #2
    28c0:	0000025a 	andeq	r0, r0, sl, asr r2
    28c4:	00000260 	andeq	r0, r0, r0, ror #4
    28c8:	01f30004 	mvnseq	r0, r4
    28cc:	00009f50 	andeq	r9, r0, r0, asr pc
    28d0:	00000000 	andeq	r0, r0, r0
    28d4:	02580000 	subseq	r0, r8, #0
    28d8:	025a0000 	subseq	r0, sl, #0
    28dc:	00020000 	andeq	r0, r2, r0
    28e0:	025a9f30 	subseq	r9, sl, #192	; 0xc0
    28e4:	025e0000 	subseq	r0, lr, #0
    28e8:	00090000 	andeq	r0, r9, r0
    28ec:	41400070 	hvcmi	0
    28f0:	2e301a24 	vaddcs.f32	s2, s0, s9
    28f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    28f8:	00000000 	andeq	r0, r0, r0
    28fc:	00026000 	andeq	r6, r2, r0
    2900:	00026400 	andeq	r6, r2, r0, lsl #8
    2904:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    2908:	00026400 	andeq	r6, r2, r0, lsl #8
    290c:	0002c000 	andeq	ip, r2, r0
    2910:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    2914:	00000010 	andeq	r0, r0, r0, lsl r0
    2918:	00000000 	andeq	r0, r0, r0
    291c:	00026000 	andeq	r6, r2, r0
    2920:	0002b600 	andeq	fp, r2, r0, lsl #12
    2924:	51000100 	mrspl	r0, (UNDEF: 16)
    2928:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    292c:	000002c0 	andeq	r0, r0, r0, asr #5
    2930:	01f30004 	mvnseq	r0, r4
    2934:	00009f51 	andeq	r9, r0, r1, asr pc
    2938:	00000000 	andeq	r0, r0, r0
    293c:	02600000 	rsbeq	r0, r0, #0
    2940:	02a40000 	adceq	r0, r4, #0
    2944:	00010000 	andeq	r0, r1, r0
    2948:	0002a452 	andeq	sl, r2, r2, asr r4
    294c:	0002c000 	andeq	ip, r2, r0
    2950:	f3000400 	vshl.u8	d0, d0, d0
    2954:	009f5201 	addseq	r5, pc, r1, lsl #4
    2958:	00000000 	andeq	r0, r0, r0
    295c:	60000000 	andvs	r0, r0, r0
    2960:	78000002 	stmdavc	r0, {r1}
    2964:	01000002 	tsteq	r0, r2
    2968:	02785300 	rsbseq	r5, r8, #0
    296c:	02840000 	addeq	r0, r4, #0
    2970:	00040000 	andeq	r0, r4, r0
    2974:	9f5301f3 	svcls	0x005301f3
    2978:	00000284 	andeq	r0, r0, r4, lsl #5
    297c:	00000290 	muleq	r0, r0, r2
    2980:	90530001 	subsls	r0, r3, r1
    2984:	c0000002 	andgt	r0, r0, r2
    2988:	04000002 	streq	r0, [r0], #-2
    298c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    2990:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2994:	00000000 	andeq	r0, r0, r0
    2998:	00026000 	andeq	r6, r2, r0
    299c:	00027a00 	andeq	r7, r2, r0, lsl #20
    29a0:	30000200 	andcc	r0, r0, r0, lsl #4
    29a4:	00027a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    29a8:	00027e00 	andeq	r7, r2, r0, lsl #28
    29ac:	56000100 	strpl	r0, [r0], -r0, lsl #2
    29b0:	0000027e 	andeq	r0, r0, lr, ror r2
    29b4:	00000280 	andeq	r0, r0, r0, lsl #5
    29b8:	80550001 	subshi	r0, r5, r1
    29bc:	84000002 	strhi	r0, [r0], #-2
    29c0:	01000002 	tsteq	r0, r2
    29c4:	02845300 	addeq	r5, r4, #0
    29c8:	02920000 	addseq	r0, r2, #0
    29cc:	00020000 	andeq	r0, r2, r0
    29d0:	02929f30 	addseq	r9, r2, #192	; 0xc0
    29d4:	02960000 	addseq	r0, r6, #0
    29d8:	00010000 	andeq	r0, r1, r0
    29dc:	00029656 	andeq	r9, r2, r6, asr r6
    29e0:	00029a00 	andeq	r9, r2, r0, lsl #20
    29e4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    29e8:	0000029a 	muleq	r0, sl, r2
    29ec:	0000029c 	muleq	r0, ip, r2
    29f0:	9e540001 	cdpls	0, 5, cr0, cr4, cr1, {0}
    29f4:	bc000002 	stclt	0, cr0, [r0], {2}
    29f8:	01000002 	tsteq	r0, r2
    29fc:	02bc5400 	adcseq	r5, ip, #0
    2a00:	02c00000 	sbceq	r0, r0, #0
    2a04:	00010000 	andeq	r0, r1, r0
    2a08:	00000051 	andeq	r0, r0, r1, asr r0
    2a0c:	00000000 	andeq	r0, r0, r0
    2a10:	00026000 	andeq	r6, r2, r0
    2a14:	00027a00 	andeq	r7, r2, r0, lsl #20
    2a18:	30000200 	andcc	r0, r0, r0, lsl #4
    2a1c:	00027a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    2a20:	00027e00 	andeq	r7, r2, r0, lsl #28
    2a24:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    2a28:	00000284 	andeq	r0, r0, r4, lsl #5
    2a2c:	00000292 	muleq	r0, r2, r2
    2a30:	9f300002 	svcls	0x00300002
    2a34:	00000292 	muleq	r0, r2, r2
    2a38:	00000296 	muleq	r0, r6, r2
    2a3c:	ac550001 	mrrcge	0, 0, r0, r5, cr1
    2a40:	b2000002 	andlt	r0, r0, #2
    2a44:	05000002 	streq	r0, [r0, #-2]
    2a48:	00734f00 	rsbseq	r4, r3, r0, lsl #30
    2a4c:	02b29f24 	adcseq	r9, r2, #144	; 0x90
    2a50:	02ba0000 	adcseq	r0, sl, #0
    2a54:	00010000 	andeq	r0, r1, r0
    2a58:	00000052 	andeq	r0, r0, r2, asr r0
    2a5c:	00000000 	andeq	r0, r0, r0
    2a60:	00026000 	andeq	r6, r2, r0
    2a64:	00029e00 	andeq	r9, r2, r0, lsl #28
    2a68:	30000200 	andcc	r0, r0, r0, lsl #4
    2a6c:	00029e9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    2a70:	0002ba00 	andeq	fp, r2, r0, lsl #20
    2a74:	74000900 	strvc	r0, [r0], #-2304	; 0x900
    2a78:	24414800 	strbcs	r4, [r1], #-2048	; 0x800
    2a7c:	9f25441a 	svcls	0x0025441a
	...
    2a88:	000002c0 	andeq	r0, r0, r0, asr #5
    2a8c:	000002c4 	andeq	r0, r0, r4, asr #5
    2a90:	c4510001 	ldrbgt	r0, [r1], #-1
    2a94:	d0000002 	andle	r0, r0, r2
    2a98:	04000002 	streq	r0, [r0], #-2
    2a9c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2aa0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2aa4:	00000000 	andeq	r0, r0, r0
    2aa8:	0002c000 	andeq	ip, r2, r0
    2aac:	0002c200 	andeq	ip, r2, r0, lsl #4
    2ab0:	30000200 	andcc	r0, r0, r0, lsl #4
    2ab4:	0002c29f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    2ab8:	0002c800 	andeq	ip, r2, r0, lsl #16
    2abc:	53000100 	movwpl	r0, #256	; 0x100
    2ac0:	000002c8 	andeq	r0, r0, r8, asr #5
    2ac4:	000002cc 	andeq	r0, r0, ip, asr #5
    2ac8:	cc520001 	mrrcgt	0, 0, r0, r2, cr1
    2acc:	d0000002 	andle	r0, r0, r2
    2ad0:	01000002 	tsteq	r0, r2
    2ad4:	00005300 	andeq	r5, r0, r0, lsl #6
    2ad8:	00000000 	andeq	r0, r0, r0
    2adc:	02c00000 	sbceq	r0, r0, #0
    2ae0:	02c80000 	sbceq	r0, r8, #0
    2ae4:	00020000 	andeq	r0, r2, r0
    2ae8:	00009f30 	andeq	r9, r0, r0, lsr pc
    2aec:	00000000 	andeq	r0, r0, r0
    2af0:	02d40000 	sbcseq	r0, r4, #0
    2af4:	02d60000 	sbcseq	r0, r6, #0
    2af8:	00010000 	andeq	r0, r1, r0
    2afc:	0002d650 	andeq	sp, r2, r0, asr r6
    2b00:	0002d800 	andeq	sp, r2, r0, lsl #16
    2b04:	70000300 	andvc	r0, r0, r0, lsl #6
    2b08:	02d89f58 	sbcseq	r9, r8, #352	; 0x160
    2b0c:	02dc0000 	sbcseq	r0, ip, #0
    2b10:	00040000 	andeq	r0, r4, r0
    2b14:	9f5001f3 	svcls	0x005001f3
	...
    2b20:	000002dc 	ldrdeq	r0, [r0], -ip
    2b24:	000002e8 	andeq	r0, r0, r8, ror #5
    2b28:	e8510001 	ldmda	r1, {r0}^
    2b2c:	ec000002 	stc	0, cr0, [r0], {2}
    2b30:	04000002 	streq	r0, [r0], #-2
    2b34:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2b38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2b3c:	00000000 	andeq	r0, r0, r0
    2b40:	0002dc00 	andeq	sp, r2, r0, lsl #24
    2b44:	0002de00 	andeq	sp, r2, r0, lsl #28
    2b48:	30000200 	andcc	r0, r0, r0, lsl #4
    2b4c:	0002de9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    2b50:	0002e800 	andeq	lr, r2, r0, lsl #16
    2b54:	53000100 	movwpl	r0, #256	; 0x100
    2b58:	000002e8 	andeq	r0, r0, r8, ror #5
    2b5c:	000002ec 	andeq	r0, r0, ip, ror #5
    2b60:	00510001 	subseq	r0, r1, r1
    2b64:	00000000 	andeq	r0, r0, r0
    2b68:	f2000000 	vhadd.s8	d0, d0, d0
    2b6c:	fa000002 	blx	2b7c <__Stack_Size+0x277c>
    2b70:	01000002 	tsteq	r0, r2
    2b74:	02fa5100 	rscseq	r5, sl, #0
    2b78:	02fe0000 	rscseq	r0, lr, #0
    2b7c:	00040000 	andeq	r0, r4, r0
    2b80:	9f5101f3 	svcls	0x005101f3
	...
    2b8c:	000002f2 	strdeq	r0, [r0], -r2
    2b90:	000002f4 	strdeq	r0, [r0], -r4
    2b94:	9f300002 	svcls	0x00300002
    2b98:	000002f4 	strdeq	r0, [r0], -r4
    2b9c:	000002f8 	strdeq	r0, [r0], -r8
    2ba0:	f8530001 			; <UNDEFINED> instruction: 0xf8530001
    2ba4:	fa000002 	blx	2bb4 <__Stack_Size+0x27b4>
    2ba8:	01000002 	tsteq	r0, r2
    2bac:	02fa5200 	rscseq	r5, sl, #0
    2bb0:	02fe0000 	rscseq	r0, lr, #0
    2bb4:	00010000 	andeq	r0, r1, r0
    2bb8:	00000051 	andeq	r0, r0, r1, asr r0
    2bbc:	00000000 	andeq	r0, r0, r0
    2bc0:	0002fe00 	andeq	pc, r2, r0, lsl #28
    2bc4:	00030800 	andeq	r0, r3, r0, lsl #16
    2bc8:	50000100 	andpl	r0, r0, r0, lsl #2
    2bcc:	00000308 	andeq	r0, r0, r8, lsl #6
    2bd0:	0000030a 	andeq	r0, r0, sl, lsl #6
    2bd4:	01f30004 	mvnseq	r0, r4
    2bd8:	030a9f50 	movweq	r9, #44880	; 0xaf50
    2bdc:	030e0000 	movweq	r0, #57344	; 0xe000
    2be0:	00010000 	andeq	r0, r1, r0
    2be4:	00030e50 	andeq	r0, r3, r0, asr lr
    2be8:	00031800 	andeq	r1, r3, r0, lsl #16
    2bec:	f3000400 	vshl.u8	d0, d0, d0
    2bf0:	009f5001 	addseq	r5, pc, r1
    2bf4:	00000000 	andeq	r0, r0, r0
    2bf8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2bfc:	22000003 	andcs	r0, r0, #3
    2c00:	01000003 	tsteq	r0, r3
    2c04:	03225000 	teqeq	r2, #0
    2c08:	03240000 	teqeq	r4, #0
    2c0c:	00040000 	andeq	r0, r4, r0
    2c10:	9f5001f3 	svcls	0x005001f3
	...
    2c1c:	00000318 	andeq	r0, r0, r8, lsl r3
    2c20:	0000031a 	andeq	r0, r0, sl, lsl r3
    2c24:	9f300002 	svcls	0x00300002
    2c28:	0000031a 	andeq	r0, r0, sl, lsl r3
    2c2c:	00000324 	andeq	r0, r0, r4, lsr #6
    2c30:	0071000b 	rsbseq	r0, r1, fp
    2c34:	731aff08 	tstvc	sl, #32
    2c38:	2e301a00 	vaddcs.f32	s2, s0, s0
    2c3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2c40:	00000000 	andeq	r0, r0, r0
    2c44:	00032400 	andeq	r2, r3, r0, lsl #8
    2c48:	00032600 	andeq	r2, r3, r0, lsl #12
    2c4c:	51000100 	mrspl	r0, (UNDEF: 16)
    2c50:	00000326 	andeq	r0, r0, r6, lsr #6
    2c54:	0000032a 	andeq	r0, r0, sl, lsr #6
    2c58:	01f30004 	mvnseq	r0, r4
    2c5c:	00009f51 	andeq	r9, r0, r1, asr pc
    2c60:	00000000 	andeq	r0, r0, r0
    2c64:	032a0000 	teqeq	sl, #0
    2c68:	032e0000 	teqeq	lr, #0
    2c6c:	00010000 	andeq	r0, r1, r0
    2c70:	00032e50 	andeq	r2, r3, r0, asr lr
    2c74:	00034000 	andeq	r4, r3, r0
    2c78:	f3000400 	vshl.u8	d0, d0, d0
    2c7c:	009f5001 	addseq	r5, pc, r1
    2c80:	00000000 	andeq	r0, r0, r0
    2c84:	2a000000 	bcs	2c8c <__Stack_Size+0x288c>
    2c88:	36000003 	strcc	r0, [r0], -r3
    2c8c:	01000003 	tsteq	r0, r3
    2c90:	03365100 	teqeq	r6, #0
    2c94:	03400000 	movteq	r0, #0
    2c98:	00040000 	andeq	r0, r4, r0
    2c9c:	9f5101f3 	svcls	0x005101f3
	...
    2ca8:	0000032a 	andeq	r0, r0, sl, lsr #6
    2cac:	0000033e 	andeq	r0, r0, lr, lsr r3
    2cb0:	9f300002 	svcls	0x00300002
    2cb4:	0000033e 	andeq	r0, r0, lr, lsr r3
    2cb8:	00000340 	andeq	r0, r0, r0, asr #6
    2cbc:	00500001 	subseq	r0, r0, r1
    2cc0:	00000000 	andeq	r0, r0, r0
    2cc4:	2a000000 	bcs	2ccc <__Stack_Size+0x28cc>
    2cc8:	36000003 	strcc	r0, [r0], -r3
    2ccc:	09000003 	stmdbeq	r0, {r0, r1}
    2cd0:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    2cd4:	ffff0a25 			; <UNDEFINED> instruction: 0xffff0a25
    2cd8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    2cdc:	00000000 	andeq	r0, r0, r0
    2ce0:	032a0000 	teqeq	sl, #0
    2ce4:	032c0000 	teqeq	ip, #0
    2ce8:	00020000 	andeq	r0, r2, r0
    2cec:	032c9f30 	teqeq	ip, #192	; 0xc0
    2cf0:	03360000 	teqeq	r6, #0
    2cf4:	00090000 	andeq	r0, r9, r0
    2cf8:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    2cfc:	1a00731a 	bne	1f96c <__Stack_Size+0x1f56c>
    2d00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2d04:	00000000 	andeq	r0, r0, r0
    2d08:	00034000 	andeq	r4, r3, r0
    2d0c:	00034400 	andeq	r4, r3, r0, lsl #8
    2d10:	51000100 	mrspl	r0, (UNDEF: 16)
    2d14:	00000344 	andeq	r0, r0, r4, asr #6
    2d18:	00000348 	andeq	r0, r0, r8, asr #6
    2d1c:	01f30004 	mvnseq	r0, r4
    2d20:	00009f51 	andeq	r9, r0, r1, asr pc
    2d24:	00000000 	andeq	r0, r0, r0
    2d28:	03400000 	movteq	r0, #0
    2d2c:	03440000 	movteq	r0, #16384	; 0x4000
    2d30:	00050000 	andeq	r0, r5, r0
    2d34:	25380071 	ldrcs	r0, [r8, #-113]!	; 0x71
    2d38:	0003449f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    2d3c:	00034800 	andeq	r4, r3, r0, lsl #16
    2d40:	f3000600 	vmax.u8	d0, d0, d0
    2d44:	25385101 	ldrcs	r5, [r8, #-257]!	; 0x101
    2d48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2d54:	00000e00 	andeq	r0, r0, r0, lsl #28
    2d58:	50000100 	andpl	r0, r0, r0, lsl #2
    2d5c:	0000000e 	andeq	r0, r0, lr
    2d60:	00000018 	andeq	r0, r0, r8, lsl r0
    2d64:	01f30004 	mvnseq	r0, r4
    2d68:	00009f50 	andeq	r9, r0, r0, asr pc
    2d6c:	00000000 	andeq	r0, r0, r0
    2d70:	00180000 	andseq	r0, r8, r0
    2d74:	00260000 	eoreq	r0, r6, r0
    2d78:	00010000 	andeq	r0, r1, r0
    2d7c:	00002650 	andeq	r2, r0, r0, asr r6
    2d80:	00003000 	andeq	r3, r0, r0
    2d84:	f3000400 	vshl.u8	d0, d0, d0
    2d88:	009f5001 	addseq	r5, pc, r1
    2d8c:	00000000 	andeq	r0, r0, r0
    2d90:	30000000 	andcc	r0, r0, r0
    2d94:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    2d98:	01000000 	mrseq	r0, (UNDEF: 0)
    2d9c:	003e5000 	eorseq	r5, lr, r0
    2da0:	00480000 	subeq	r0, r8, r0
    2da4:	00040000 	andeq	r0, r4, r0
    2da8:	9f5001f3 	svcls	0x005001f3
	...
    2db4:	00000088 	andeq	r0, r0, r8, lsl #1
    2db8:	0000008c 	andeq	r0, r0, ip, lsl #1
    2dbc:	9f300002 	svcls	0x00300002
    2dc0:	0000008c 	andeq	r0, r0, ip, lsl #1
    2dc4:	00000090 	muleq	r0, r0, r0
    2dc8:	00700007 	rsbseq	r0, r0, r7
    2dcc:	2e301a32 	mrccs	10, 1, r1, cr0, cr2, {1}
    2dd0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2dd4:	00000000 	andeq	r0, r0, r0
    2dd8:	00009800 	andeq	r9, r0, r0, lsl #16
    2ddc:	00009c00 	andeq	r9, r0, r0, lsl #24
    2de0:	30000200 	andcc	r0, r0, r0, lsl #4
    2de4:	00009c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    2de8:	0000a000 	andeq	sl, r0, r0
    2dec:	70000800 	andvc	r0, r0, r0, lsl #16
    2df0:	1a200800 	bne	804df8 <__Stack_Size+0x8049f8>
    2df4:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    2df8:	00000000 	andeq	r0, r0, r0
    2dfc:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2e00:	b0000000 	andlt	r0, r0, r0
    2e04:	01000000 	mrseq	r0, (UNDEF: 0)
    2e08:	00b05000 	adcseq	r5, r0, r0
    2e0c:	00b20000 	adcseq	r0, r2, r0
    2e10:	00040000 	andeq	r0, r4, r0
    2e14:	9f5001f3 	svcls	0x005001f3
    2e18:	000000b2 	strheq	r0, [r0], -r2
    2e1c:	000000b6 	strheq	r0, [r0], -r6
    2e20:	b6500001 	ldrblt	r0, [r0], -r1
    2e24:	c0000000 	andgt	r0, r0, r0
    2e28:	04000000 	streq	r0, [r0], #-0
    2e2c:	5001f300 	andpl	pc, r1, r0, lsl #6
    2e30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2e34:	00000000 	andeq	r0, r0, r0
    2e38:	0000c000 	andeq	ip, r0, r0
    2e3c:	0000c800 	andeq	ip, r0, r0, lsl #16
    2e40:	50000100 	andpl	r0, r0, r0, lsl #2
    2e44:	000000c8 	andeq	r0, r0, r8, asr #1
    2e48:	000000ce 	andeq	r0, r0, lr, asr #1
    2e4c:	01f30004 	mvnseq	r0, r4
    2e50:	00ce9f50 	sbceq	r9, lr, r0, asr pc
    2e54:	00d80000 	sbcseq	r0, r8, r0
    2e58:	00010000 	andeq	r0, r1, r0
    2e5c:	0000d850 	andeq	sp, r0, r0, asr r8
    2e60:	0000e000 	andeq	lr, r0, r0
    2e64:	f3000400 	vshl.u8	d0, d0, d0
    2e68:	009f5001 	addseq	r5, pc, r1
    2e6c:	00000000 	andeq	r0, r0, r0
    2e70:	c0000000 	andgt	r0, r0, r0
    2e74:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    2e78:	02000000 	andeq	r0, r0, #0
    2e7c:	d89f3000 	ldmle	pc, {ip, sp}	; <UNPREDICTABLE>
    2e80:	e0000000 	and	r0, r0, r0
    2e84:	01000000 	mrseq	r0, (UNDEF: 0)
    2e88:	00005000 	andeq	r5, r0, r0
    2e8c:	00000000 	andeq	r0, r0, r0
    2e90:	00ec0000 	rsceq	r0, ip, r0
    2e94:	010e0000 	mrseq	r0, (UNDEF: 14)
    2e98:	00020000 	andeq	r0, r2, r0
    2e9c:	010e9f34 	tsteq	lr, r4, lsr pc
    2ea0:	01140000 	tsteq	r4, r0
    2ea4:	00010000 	andeq	r0, r1, r0
    2ea8:	00000050 	andeq	r0, r0, r0, asr r0
    2eac:	00000000 	andeq	r0, r0, r0
    2eb0:	00011400 	andeq	r1, r1, r0, lsl #8
    2eb4:	00011600 	andeq	r1, r1, r0, lsl #12
    2eb8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    2ebc:	00011600 	andeq	r1, r1, r0, lsl #12
    2ec0:	00014800 	andeq	r4, r1, r0, lsl #16
    2ec4:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    2ec8:	00000010 	andeq	r0, r0, r0, lsl r0
    2ecc:	00000000 	andeq	r0, r0, r0
    2ed0:	00011400 	andeq	r1, r1, r0, lsl #8
    2ed4:	00011b00 	andeq	r1, r1, r0, lsl #22
    2ed8:	50000100 	andpl	r0, r0, r0, lsl #2
    2edc:	0000011b 	andeq	r0, r0, fp, lsl r1
    2ee0:	00000148 	andeq	r0, r0, r8, asr #2
    2ee4:	00540001 	subseq	r0, r4, r1
    2ee8:	00000000 	andeq	r0, r0, r0
    2eec:	14000000 	strne	r0, [r0], #-0
    2ef0:	1c000001 	stcne	0, cr0, [r0], {1}
    2ef4:	02000001 	andeq	r0, r0, #1
    2ef8:	1c9f3400 	cfldrsne	mvf3, [pc], {0}
    2efc:	28000001 	stmdacs	r0, {r0}
    2f00:	01000001 	tsteq	r0, r1
    2f04:	01385000 	teqeq	r8, r0
    2f08:	013e0000 	teqeq	lr, r0
    2f0c:	00010000 	andeq	r0, r1, r0
    2f10:	00014050 	andeq	r4, r1, r0, asr r0
    2f14:	00014600 	andeq	r4, r1, r0, lsl #12
    2f18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2f24:	0000011c 	andeq	r0, r0, ip, lsl r1
    2f28:	00000128 	andeq	r0, r0, r8, lsr #2
    2f2c:	74910002 	ldrvc	r0, [r1], #2
    2f30:	00000128 	andeq	r0, r0, r8, lsr #2
    2f34:	00000132 	andeq	r0, r0, r2, lsr r1
    2f38:	34520001 	ldrbcc	r0, [r2], #-1
    2f3c:	48000001 	stmdami	r0, {r0}
    2f40:	02000001 	andeq	r0, r0, #1
    2f44:	00749100 	rsbseq	r9, r4, r0, lsl #2
    2f48:	00000000 	andeq	r0, r0, r0
    2f4c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2f50:	4a000001 	bmi	2f5c <__Stack_Size+0x2b5c>
    2f54:	02000001 	andeq	r0, r0, #1
    2f58:	4a007d00 	bmi	22360 <__Stack_Size+0x21f60>
    2f5c:	9c000001 	stcls	0, cr0, [r0], {1}
    2f60:	02000001 	andeq	r0, r0, #1
    2f64:	00187d00 	andseq	r7, r8, r0, lsl #26
    2f68:	00000000 	andeq	r0, r0, r0
    2f6c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2f70:	54000001 	strpl	r0, [r0], #-1
    2f74:	01000001 	tsteq	r0, r1
    2f78:	01545000 	cmpeq	r4, r0
    2f7c:	019c0000 	orrseq	r0, ip, r0
    2f80:	00040000 	andeq	r0, r4, r0
    2f84:	9f5001f3 	svcls	0x005001f3
	...
    2f90:	00000148 	andeq	r0, r0, r8, asr #2
    2f94:	00000161 	andeq	r0, r0, r1, ror #2
    2f98:	61510001 	cmpvs	r1, r1
    2f9c:	9c000001 	stcls	0, cr0, [r0], {1}
    2fa0:	04000001 	streq	r0, [r0], #-1
    2fa4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    2fa8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2fac:	00000000 	andeq	r0, r0, r0
    2fb0:	00014800 	andeq	r4, r1, r0, lsl #16
    2fb4:	00016100 	andeq	r6, r1, r0, lsl #2
    2fb8:	52000100 	andpl	r0, r0, #0
    2fbc:	00000161 	andeq	r0, r0, r1, ror #2
    2fc0:	0000019c 	muleq	r0, ip, r1
    2fc4:	01f30004 	mvnseq	r0, r4
    2fc8:	00009f52 	andeq	r9, r0, r2, asr pc
    2fcc:	00000000 	andeq	r0, r0, r0
    2fd0:	01480000 	mrseq	r0, (UNDEF: 72)
    2fd4:	01620000 	cmneq	r2, r0
    2fd8:	00020000 	andeq	r0, r2, r0
    2fdc:	01629f34 	cmneq	r2, r4, lsr pc
    2fe0:	017a0000 	cmneq	sl, r0
    2fe4:	00010000 	andeq	r0, r1, r0
    2fe8:	00018050 	andeq	r8, r1, r0, asr r0
    2fec:	00019c00 	andeq	r9, r1, r0, lsl #24
    2ff0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2ffc:	0000019c 	muleq	r0, ip, r1
    3000:	0000019e 	muleq	r0, lr, r1
    3004:	007d0002 	rsbseq	r0, sp, r2
    3008:	0000019e 	muleq	r0, lr, r1
    300c:	0000022c 	andeq	r0, r0, ip, lsr #4
    3010:	107d0002 	rsbsne	r0, sp, r2
	...
    301c:	0000019c 	muleq	r0, ip, r1
    3020:	000001a4 	andeq	r0, r0, r4, lsr #3
    3024:	a4500001 	ldrbge	r0, [r0], #-1
    3028:	2c000001 	stccs	0, cr0, [r0], {1}
    302c:	04000002 	streq	r0, [r0], #-2
    3030:	5001f300 	andpl	pc, r1, r0, lsl #6
    3034:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3038:	00000000 	andeq	r0, r0, r0
    303c:	00019c00 	andeq	r9, r1, r0, lsl #24
    3040:	0001a800 	andeq	sl, r1, r0, lsl #16
    3044:	34000200 	strcc	r0, [r0], #-512	; 0x200
    3048:	0001a89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    304c:	0001b400 	andeq	fp, r1, r0, lsl #8
    3050:	50000100 	andpl	r0, r0, r0, lsl #2
    3054:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3058:	000001d6 	ldrdeq	r0, [r0], -r6
    305c:	fa500001 	blx	1403068 <__Stack_Size+0x1402c68>
    3060:	fe000001 	cdp2	0, 0, cr0, cr0, cr1, {0}
    3064:	01000001 	tsteq	r0, r1
    3068:	02025000 	andeq	r5, r2, #0
    306c:	022c0000 	eoreq	r0, ip, #0
    3070:	00010000 	andeq	r0, r1, r0
    3074:	00000050 	andeq	r0, r0, r0, asr r0
    3078:	00000000 	andeq	r0, r0, r0
    307c:	00022c00 	andeq	r2, r2, r0, lsl #24
    3080:	00022e00 	andeq	r2, r2, r0, lsl #28
    3084:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    3088:	00022e00 	andeq	r2, r2, r0, lsl #28
    308c:	0002c800 	andeq	ip, r2, r0, lsl #16
    3090:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    3094:	00000008 	andeq	r0, r0, r8
    3098:	00000000 	andeq	r0, r0, r0
    309c:	00022c00 	andeq	r2, r2, r0, lsl #24
    30a0:	00023000 	andeq	r3, r2, r0
    30a4:	50000100 	andpl	r0, r0, r0, lsl #2
    30a8:	00000230 	andeq	r0, r0, r0, lsr r2
    30ac:	00000232 	andeq	r0, r0, r2, lsr r2
    30b0:	00700004 	rsbseq	r0, r0, r4
    30b4:	02329f20 	eorseq	r9, r2, #128	; 0x80
    30b8:	02480000 	subeq	r0, r8, #0
    30bc:	00040000 	andeq	r0, r4, r0
    30c0:	9f200074 	svcls	0x00200074
    30c4:	00000248 	andeq	r0, r0, r8, asr #4
    30c8:	00000296 	muleq	r0, r6, r2
    30cc:	96540001 	ldrbls	r0, [r4], -r1
    30d0:	c8000002 	stmdagt	r0, {r1}
    30d4:	05000002 	streq	r0, [r0, #-2]
    30d8:	5001f300 	andpl	pc, r1, r0, lsl #6
    30dc:	00009f20 	andeq	r9, r0, r0, lsr #30
    30e0:	00000000 	andeq	r0, r0, r0
    30e4:	02300000 	eorseq	r0, r0, #0
    30e8:	02320000 	eorseq	r0, r2, #0
    30ec:	00070000 	andeq	r0, r7, r0
    30f0:	08200070 	stmdaeq	r0!, {r4, r5, r6}
    30f4:	329f1aff 	addscc	r1, pc, #1044480	; 0xff000
    30f8:	48000002 	stmdami	r0, {r1}
    30fc:	07000002 	streq	r0, [r0, -r2]
    3100:	20007400 	andcs	r7, r0, r0, lsl #8
    3104:	9f1aff08 	svcls	0x001aff08
    3108:	00000248 	andeq	r0, r0, r8, asr #4
    310c:	00000296 	muleq	r0, r6, r2
    3110:	00740006 	rsbseq	r0, r4, r6
    3114:	9f1aff08 	svcls	0x001aff08
    3118:	00000296 	muleq	r0, r6, r2
    311c:	000002c8 	andeq	r0, r0, r8, asr #5
    3120:	01f30008 	mvnseq	r0, r8
    3124:	ff082050 			; <UNDEFINED> instruction: 0xff082050
    3128:	00009f1a 	andeq	r9, r0, sl, lsl pc
    312c:	00000000 	andeq	r0, r0, r0
    3130:	02300000 	eorseq	r0, r0, #0
    3134:	02320000 	eorseq	r0, r2, #0
    3138:	000a0000 	andeq	r0, sl, r0
    313c:	0a200070 	beq	803304 <__Stack_Size+0x802f04>
    3140:	381aff00 	ldmdacc	sl, {r8, r9, sl, fp, ip, sp, lr, pc}
    3144:	02329f25 	eorseq	r9, r2, #148	; 0x94
    3148:	02480000 	subeq	r0, r8, #0
    314c:	000a0000 	andeq	r0, sl, r0
    3150:	0a200074 	beq	803328 <__Stack_Size+0x802f28>
    3154:	381aff00 	ldmdacc	sl, {r8, r9, sl, fp, ip, sp, lr, pc}
    3158:	02489f25 	subeq	r9, r8, #148	; 0x94
    315c:	02960000 	addseq	r0, r6, #0
    3160:	00090000 	andeq	r0, r9, r0
    3164:	000a0074 	andeq	r0, sl, r4, ror r0
    3168:	25381aff 	ldrcs	r1, [r8, #-2815]!	; 0xaff
    316c:	0002969f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    3170:	0002c800 	andeq	ip, r2, r0, lsl #16
    3174:	f3000b00 	vqrdmulh.s<illegal width 8>	d0, d0, d0
    3178:	0a205001 	beq	817184 <__Stack_Size+0x816d84>
    317c:	381aff00 	ldmdacc	sl, {r8, r9, sl, fp, ip, sp, lr, pc}
    3180:	00009f25 	andeq	r9, r0, r5, lsr #30
    3184:	00000000 	andeq	r0, r0, r0
    3188:	02300000 	eorseq	r0, r0, #0
    318c:	02320000 	eorseq	r0, r2, #0
    3190:	000b0000 	andeq	r0, fp, r0
    3194:	08200070 	stmdaeq	r0!, {r4, r5, r6}
    3198:	1a2440ff 	bne	91359c <__Stack_Size+0x91319c>
    319c:	329f2540 	addscc	r2, pc, #268435456	; 0x10000000
    31a0:	48000002 	stmdami	r0, {r1}
    31a4:	0b000002 	bleq	31b4 <__Stack_Size+0x2db4>
    31a8:	20007400 	andcs	r7, r0, r0, lsl #8
    31ac:	2440ff08 	strbcs	pc, [r0], #-3848	; 0xf08	; <UNPREDICTABLE>
    31b0:	9f25401a 	svcls	0x0025401a
    31b4:	00000248 	andeq	r0, r0, r8, asr #4
    31b8:	00000296 	muleq	r0, r6, r2
    31bc:	0074000a 	rsbseq	r0, r4, sl
    31c0:	2440ff08 	strbcs	pc, [r0], #-3848	; 0xf08	; <UNPREDICTABLE>
    31c4:	9f25401a 	svcls	0x0025401a
    31c8:	00000296 	muleq	r0, r6, r2
    31cc:	000002c8 	andeq	r0, r0, r8, asr #5
    31d0:	01f3000c 	mvnseq	r0, ip
    31d4:	ff082050 			; <UNDEFINED> instruction: 0xff082050
    31d8:	401a2440 	andsmi	r2, sl, r0, asr #8
    31dc:	00009f25 	andeq	r9, r0, r5, lsr #30
    31e0:	00000000 	andeq	r0, r0, r0
    31e4:	02300000 	eorseq	r0, r0, #0
    31e8:	02320000 	eorseq	r0, r2, #0
    31ec:	00060000 	andeq	r0, r6, r0
    31f0:	48200070 	stmdami	r0!, {r4, r5, r6}
    31f4:	02329f25 	eorseq	r9, r2, #148	; 0x94
    31f8:	02480000 	subeq	r0, r8, #0
    31fc:	00060000 	andeq	r0, r6, r0
    3200:	48200074 	stmdami	r0!, {r2, r4, r5, r6}
    3204:	02489f25 	subeq	r9, r8, #148	; 0x94
    3208:	02960000 	addseq	r0, r6, #0
    320c:	00050000 	andeq	r0, r5, r0
    3210:	25480074 	strbcs	r0, [r8, #-116]	; 0x74
    3214:	0002969f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    3218:	0002c800 	andeq	ip, r2, r0, lsl #16
    321c:	f3000700 	vabd.u8	d0, d0, d0
    3220:	48205001 	stmdami	r0!, {r0, ip, lr}
    3224:	00009f25 	andeq	r9, r0, r5, lsr #30
    3228:	00000000 	andeq	r0, r0, r0
    322c:	022c0000 	eoreq	r0, ip, #0
    3230:	02360000 	eorseq	r0, r6, #0
    3234:	00020000 	andeq	r0, r2, r0
    3238:	02369f34 	eorseq	r9, r6, #208	; 0xd0
    323c:	02420000 	subeq	r0, r2, #0
    3240:	00010000 	andeq	r0, r1, r0
    3244:	00026a50 	andeq	r6, r2, r0, asr sl
    3248:	00027000 	andeq	r7, r2, r0
    324c:	50000100 	andpl	r0, r0, r0, lsl #2
    3250:	0000027a 	andeq	r0, r0, sl, ror r2
    3254:	0000027e 	andeq	r0, r0, lr, ror r2
    3258:	90500001 	subsls	r0, r0, r1
    325c:	94000002 	strls	r0, [r0], #-2
    3260:	01000002 	tsteq	r0, r2
    3264:	02a85000 	adceq	r5, r8, #0
    3268:	02ac0000 	adceq	r0, ip, #0
    326c:	00010000 	andeq	r0, r1, r0
    3270:	0002b850 	andeq	fp, r2, r0, asr r8
    3274:	0002c800 	andeq	ip, r2, r0, lsl #16
    3278:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3284:	000002c8 	andeq	r0, r0, r8, asr #5
    3288:	000002ca 	andeq	r0, r0, sl, asr #5
    328c:	007d0002 	rsbseq	r0, sp, r2
    3290:	000002ca 	andeq	r0, r0, sl, asr #5
    3294:	0000030c 	andeq	r0, r0, ip, lsl #6
    3298:	107d0002 	rsbsne	r0, sp, r2
	...
    32a4:	000002c8 	andeq	r0, r0, r8, asr #5
    32a8:	000002ce 	andeq	r0, r0, lr, asr #5
    32ac:	ce500001 	cdpgt	0, 5, cr0, cr0, cr1, {0}
    32b0:	0c000002 	stceq	0, cr0, [r0], {2}
    32b4:	01000003 	tsteq	r0, r3
    32b8:	00005500 	andeq	r5, r0, r0, lsl #10
    32bc:	00000000 	andeq	r0, r0, r0
    32c0:	02c80000 	sbceq	r0, r8, #0
    32c4:	02d30000 	sbcseq	r0, r3, #0
    32c8:	00010000 	andeq	r0, r1, r0
    32cc:	0002d351 	andeq	sp, r2, r1, asr r3
    32d0:	00030c00 	andeq	r0, r3, r0, lsl #24
    32d4:	f3000400 	vshl.u8	d0, d0, d0
    32d8:	009f5101 	addseq	r5, pc, r1, lsl #2
    32dc:	00000000 	andeq	r0, r0, r0
    32e0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    32e4:	d4000002 	strle	r0, [r0], #-2
    32e8:	02000002 	andeq	r0, r0, #2
    32ec:	d49f3400 	ldrle	r3, [pc], #1024	; 32f4 <__Stack_Size+0x2ef4>
    32f0:	e0000002 	and	r0, r0, r2
    32f4:	01000002 	tsteq	r0, r2
    32f8:	02f45000 	rscseq	r5, r4, #0
    32fc:	030c0000 	movweq	r0, #49152	; 0xc000
    3300:	00010000 	andeq	r0, r1, r0
    3304:	00000050 	andeq	r0, r0, r0, asr r0
    3308:	00000000 	andeq	r0, r0, r0
    330c:	00030c00 	andeq	r0, r3, r0, lsl #24
    3310:	00030e00 	andeq	r0, r3, r0, lsl #28
    3314:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    3318:	00030e00 	andeq	r0, r3, r0, lsl #28
    331c:	00034400 	andeq	r4, r3, r0, lsl #8
    3320:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    3324:	00000010 	andeq	r0, r0, r0, lsl r0
    3328:	00000000 	andeq	r0, r0, r0
    332c:	00030c00 	andeq	r0, r3, r0, lsl #24
    3330:	00031200 	andeq	r1, r3, r0, lsl #4
    3334:	50000100 	andpl	r0, r0, r0, lsl #2
    3338:	00000312 	andeq	r0, r0, r2, lsl r3
    333c:	00000344 	andeq	r0, r0, r4, asr #6
    3340:	00550001 	subseq	r0, r5, r1
    3344:	00000000 	andeq	r0, r0, r0
    3348:	0c000000 	stceq	0, cr0, [r0], {-0}
    334c:	17000003 	strne	r0, [r0, -r3]
    3350:	01000003 	tsteq	r0, r3
    3354:	03175100 	tsteq	r7, #0
    3358:	03440000 	movteq	r0, #16384	; 0x4000
    335c:	00040000 	andeq	r0, r4, r0
    3360:	9f5101f3 	svcls	0x005101f3
	...
    336c:	0000030c 	andeq	r0, r0, ip, lsl #6
    3370:	00000318 	andeq	r0, r0, r8, lsl r3
    3374:	9f340002 	svcls	0x00340002
    3378:	00000318 	andeq	r0, r0, r8, lsl r3
    337c:	00000324 	andeq	r0, r0, r4, lsr #6
    3380:	2e500001 	cdpcs	0, 5, cr0, cr0, cr1, {0}
    3384:	44000003 	strmi	r0, [r0], #-3
    3388:	01000003 	tsteq	r0, r3
    338c:	00005000 	andeq	r5, r0, r0
    3390:	00000000 	andeq	r0, r0, r0
    3394:	03440000 	movteq	r0, #16384	; 0x4000
    3398:	03460000 	movteq	r0, #24576	; 0x6000
    339c:	00020000 	andeq	r0, r2, r0
    33a0:	0346007d 	movteq	r0, #24701	; 0x607d
    33a4:	03900000 	orrseq	r0, r0, #0
    33a8:	00020000 	andeq	r0, r2, r0
    33ac:	0000107d 	andeq	r1, r0, sp, ror r0
    33b0:	00000000 	andeq	r0, r0, r0
    33b4:	03440000 	movteq	r0, #16384	; 0x4000
    33b8:	034a0000 	movteq	r0, #40960	; 0xa000
    33bc:	00010000 	andeq	r0, r1, r0
    33c0:	00034a50 	andeq	r4, r3, r0, asr sl
    33c4:	00039000 	andeq	r9, r3, r0
    33c8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    33d4:	00000344 	andeq	r0, r0, r4, asr #6
    33d8:	0000034f 	andeq	r0, r0, pc, asr #6
    33dc:	4f510001 	svcmi	0x00510001
    33e0:	6e000003 	cdpvs	0, 0, cr0, cr0, cr3, {0}
    33e4:	01000003 	tsteq	r0, r3
    33e8:	036e5600 	cmneq	lr, #0
    33ec:	03900000 	orrseq	r0, r0, #0
    33f0:	00040000 	andeq	r0, r4, r0
    33f4:	9f5101f3 	svcls	0x005101f3
	...
    3400:	00000344 	andeq	r0, r0, r4, asr #6
    3404:	00000350 	andeq	r0, r0, r0, asr r3
    3408:	9f340002 	svcls	0x00340002
    340c:	00000350 	andeq	r0, r0, r0, asr r3
    3410:	0000035e 	andeq	r0, r0, lr, asr r3
    3414:	68500001 	ldmdavs	r0, {r0}^
    3418:	72000003 	andvc	r0, r0, #3
    341c:	01000003 	tsteq	r0, r3
    3420:	03765000 	cmneq	r6, #0
    3424:	037c0000 	cmneq	ip, #0
    3428:	00010000 	andeq	r0, r1, r0
    342c:	00037e50 	andeq	r7, r3, r0, asr lr
    3430:	00039000 	andeq	r9, r3, r0
    3434:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3440:	00000390 	muleq	r0, r0, r3
    3444:	00000392 	muleq	r0, r2, r3
    3448:	007d0002 	rsbseq	r0, sp, r2
    344c:	00000392 	muleq	r0, r2, r3
    3450:	00000404 	andeq	r0, r0, r4, lsl #8
    3454:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    3460:	00000390 	muleq	r0, r0, r3
    3464:	0000039a 	muleq	r0, sl, r3
    3468:	9f340002 	svcls	0x00340002
    346c:	0000039a 	muleq	r0, sl, r3
    3470:	000003a6 	andeq	r0, r0, r6, lsr #7
    3474:	c2500001 	subsgt	r0, r0, #1
    3478:	d8000003 	stmdale	r0, {r0, r1}
    347c:	01000003 	tsteq	r0, r3
    3480:	03e45000 	mvneq	r5, #0
    3484:	03ea0000 	mvneq	r0, #0
    3488:	00010000 	andeq	r0, r1, r0
    348c:	0003ec50 	andeq	lr, r3, r0, asr ip
    3490:	00040400 	andeq	r0, r4, r0, lsl #8
    3494:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    34a0:	00000404 	andeq	r0, r0, r4, lsl #8
    34a4:	00000406 	andeq	r0, r0, r6, lsl #8
    34a8:	007d0002 	rsbseq	r0, sp, r2
    34ac:	00000406 	andeq	r0, r0, r6, lsl #8
    34b0:	00000440 	andeq	r0, r0, r0, asr #8
    34b4:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    34c0:	00000404 	andeq	r0, r0, r4, lsl #8
    34c4:	0000040e 	andeq	r0, r0, lr, lsl #8
    34c8:	9f340002 	svcls	0x00340002
    34cc:	0000040e 	andeq	r0, r0, lr, lsl #8
    34d0:	0000041a 	andeq	r0, r0, sl, lsl r4
    34d4:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    34d8:	40000004 	andmi	r0, r0, r4
    34dc:	01000004 	tsteq	r0, r4
    34e0:	00005000 	andeq	r5, r0, r0
    34e4:	00000000 	andeq	r0, r0, r0
    34e8:	04400000 	strbeq	r0, [r0], #-0
    34ec:	04420000 	strbeq	r0, [r2], #-0
    34f0:	00020000 	andeq	r0, r2, r0
    34f4:	0442007d 	strbeq	r0, [r2], #-125	; 0x7d
    34f8:	04800000 	streq	r0, [r0], #0
    34fc:	00020000 	andeq	r0, r2, r0
    3500:	0000107d 	andeq	r1, r0, sp, ror r0
    3504:	00000000 	andeq	r0, r0, r0
    3508:	04400000 	strbeq	r0, [r0], #-0
    350c:	04480000 	strbeq	r0, [r8], #-0
    3510:	00010000 	andeq	r0, r1, r0
    3514:	00044850 	andeq	r4, r4, r0, asr r8
    3518:	00048000 	andeq	r8, r4, r0
    351c:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    3528:	00000440 	andeq	r0, r0, r0, asr #8
    352c:	0000044c 	andeq	r0, r0, ip, asr #8
    3530:	9f340002 	svcls	0x00340002
    3534:	0000044c 	andeq	r0, r0, ip, asr #8
    3538:	00000458 	andeq	r0, r0, r8, asr r4
    353c:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3540:	80000004 	andhi	r0, r0, r4
    3544:	01000004 	tsteq	r0, r4
    3548:	00005000 	andeq	r5, r0, r0
	...
    3554:	00020000 	andeq	r0, r2, r0
    3558:	00020000 	andeq	r0, r2, r0
    355c:	0002007d 	andeq	r0, r2, sp, ror r0
    3560:	00a40000 	adceq	r0, r4, r0
    3564:	00020000 	andeq	r0, r2, r0
    3568:	0000087d 	andeq	r0, r0, sp, ror r8
	...
    3574:	00240000 	eoreq	r0, r4, r0
    3578:	00010000 	andeq	r0, r1, r0
    357c:	00002450 	andeq	r2, r0, r0, asr r4
    3580:	00002e00 	andeq	r2, r0, r0, lsl #28
    3584:	f3000400 	vshl.u8	d0, d0, d0
    3588:	2e9f5001 	cdpcs	0, 9, cr5, cr15, cr1, {0}
    358c:	46000000 	strmi	r0, [r0], -r0
    3590:	01000000 	mrseq	r0, (UNDEF: 0)
    3594:	00465000 	subeq	r5, r6, r0
    3598:	00500000 	subseq	r0, r0, r0
    359c:	00040000 	andeq	r0, r4, r0
    35a0:	9f5001f3 	svcls	0x005001f3
    35a4:	00000050 	andeq	r0, r0, r0, asr r0
    35a8:	00000052 	andeq	r0, r0, r2, asr r0
    35ac:	52500001 	subspl	r0, r0, #1
    35b0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    35b4:	04000000 	streq	r0, [r0], #-0
    35b8:	5001f300 	andpl	pc, r1, r0, lsl #6
    35bc:	00005c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    35c0:	00005e00 	andeq	r5, r0, r0, lsl #28
    35c4:	50000100 	andpl	r0, r0, r0, lsl #2
    35c8:	0000005e 	andeq	r0, r0, lr, asr r0
    35cc:	00000068 	andeq	r0, r0, r8, rrx
    35d0:	01f30004 	mvnseq	r0, r4
    35d4:	00689f50 	rsbeq	r9, r8, r0, asr pc
    35d8:	006a0000 	rsbeq	r0, sl, r0
    35dc:	00010000 	andeq	r0, r1, r0
    35e0:	00006a50 	andeq	r6, r0, r0, asr sl
    35e4:	00007400 	andeq	r7, r0, r0, lsl #8
    35e8:	f3000400 	vshl.u8	d0, d0, d0
    35ec:	749f5001 	ldrvc	r5, [pc], #1	; 35f4 <__Stack_Size+0x31f4>
    35f0:	76000000 	strvc	r0, [r0], -r0
    35f4:	01000000 	mrseq	r0, (UNDEF: 0)
    35f8:	00765000 	rsbseq	r5, r6, r0
    35fc:	00800000 	addeq	r0, r0, r0
    3600:	00040000 	andeq	r0, r4, r0
    3604:	9f5001f3 	svcls	0x005001f3
    3608:	00000080 	andeq	r0, r0, r0, lsl #1
    360c:	00000084 	andeq	r0, r0, r4, lsl #1
    3610:	84500001 	ldrbhi	r0, [r0], #-1
    3614:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    3618:	04000000 	streq	r0, [r0], #-0
    361c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3620:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    3624:	0000a400 	andeq	sl, r0, r0, lsl #8
    3628:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3634:	000000a4 	andeq	r0, r0, r4, lsr #1
    3638:	000000aa 	andeq	r0, r0, sl, lsr #1
    363c:	007d0002 	rsbseq	r0, sp, r2
    3640:	000000aa 	andeq	r0, r0, sl, lsr #1
    3644:	000000ba 	strheq	r0, [r0], -sl
    3648:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    3654:	000000ba 	strheq	r0, [r0], -sl
    3658:	000000be 	strheq	r0, [r0], -lr
    365c:	007d0002 	rsbseq	r0, sp, r2
    3660:	000000be 	strheq	r0, [r0], -lr
    3664:	0000015a 	andeq	r0, r0, sl, asr r1
    3668:	147d0002 	ldrbtne	r0, [sp], #-2
	...
    3674:	000000ba 	strheq	r0, [r0], -sl
    3678:	000000c6 	andeq	r0, r0, r6, asr #1
    367c:	c6510001 	ldrbgt	r0, [r1], -r1
    3680:	5a000000 	bpl	3688 <__Stack_Size+0x3288>
    3684:	04000001 	streq	r0, [r0], #-1
    3688:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    368c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3690:	00000000 	andeq	r0, r0, r0
    3694:	0000ba00 	andeq	fp, r0, r0, lsl #20
    3698:	0000ca00 	andeq	ip, r0, r0, lsl #20
    369c:	30000200 	andcc	r0, r0, r0, lsl #4
    36a0:	0000ca9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    36a4:	0000ce00 	andeq	ip, r0, r0, lsl #28
    36a8:	75000600 	strvc	r0, [r0, #-1536]	; 0x600
    36ac:	1aff0800 	bne	fffc56b4 <SCS_BASE+0x1ffb76b4>
    36b0:	0000ce9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    36b4:	00015a00 	andeq	r5, r1, r0, lsl #20
    36b8:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    36c4:	000000ba 	strheq	r0, [r0], -sl
    36c8:	000000d8 	ldrdeq	r0, [r0], -r8
    36cc:	9f300002 	svcls	0x00300002
    36d0:	000000e2 	andeq	r0, r0, r2, ror #1
    36d4:	00000112 	andeq	r0, r0, r2, lsl r1
    36d8:	28560001 	ldmdacs	r6, {r0}^
    36dc:	58000001 	stmdapl	r0, {r0}
    36e0:	01000001 	tsteq	r0, r1
    36e4:	00005600 	andeq	r5, r0, r0, lsl #12
    36e8:	00000000 	andeq	r0, r0, r0
    36ec:	00ba0000 	adcseq	r0, sl, r0
    36f0:	00d80000 	sbcseq	r0, r8, r0
    36f4:	00020000 	andeq	r0, r2, r0
    36f8:	010c9f30 	tsteq	ip, r0, lsr pc
    36fc:	01120000 	tsteq	r2, r0
    3700:	00010000 	andeq	r0, r1, r0
    3704:	00011852 	andeq	r1, r1, r2, asr r8
    3708:	00011a00 	andeq	r1, r1, r0, lsl #20
    370c:	30000200 	andcc	r0, r0, r0, lsl #4
    3710:	0001529f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
    3714:	00015800 	andeq	r5, r1, r0, lsl #16
    3718:	52000100 	andpl	r0, r0, #0
	...
    3724:	000000ba 	strheq	r0, [r0], -sl
    3728:	000000d8 	ldrdeq	r0, [r0], -r8
    372c:	9f300002 	svcls	0x00300002
    3730:	000000de 	ldrdeq	r0, [r0], -lr
    3734:	000000e6 	andeq	r0, r0, r6, ror #1
    3738:	e6570001 	ldrb	r0, [r7], -r1
    373c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    3740:	05000000 	streq	r0, [r0, #-0]
    3744:	32007200 	andcc	r7, r0, #0
    3748:	00e89f24 	rsceq	r9, r8, r4, lsr #30
    374c:	00f40000 	rscseq	r0, r4, r0
    3750:	00010000 	andeq	r0, r1, r0
    3754:	0000f457 	andeq	pc, r0, r7, asr r4	; <UNPREDICTABLE>
    3758:	00010a00 	andeq	r0, r1, r0, lsl #20
    375c:	72000500 	andvc	r0, r0, #0
    3760:	9f243200 	svcls	0x00243200
    3764:	00000124 	andeq	r0, r0, r4, lsr #2
    3768:	0000012c 	andeq	r0, r0, ip, lsr #2
    376c:	2c570001 	mrrccs	0, 0, r0, r7, cr1
    3770:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
    3774:	05000001 	streq	r0, [r0, #-1]
    3778:	32007200 	andcc	r7, r0, #0
    377c:	012e9f24 	teqeq	lr, r4, lsr #30
    3780:	013a0000 	teqeq	sl, r0
    3784:	00010000 	andeq	r0, r1, r0
    3788:	00013a57 	andeq	r3, r1, r7, asr sl
    378c:	00015000 	andeq	r5, r1, r0
    3790:	72000500 	andvc	r0, r0, #0
    3794:	9f243200 	svcls	0x00243200
	...
    37a0:	000000ba 	strheq	r0, [r0], -sl
    37a4:	000000d6 	ldrdeq	r0, [r0], -r6
    37a8:	9f300002 	svcls	0x00300002
    37ac:	000000d6 	ldrdeq	r0, [r0], -r6
    37b0:	00000112 	andeq	r0, r0, r2, lsl r1
    37b4:	18540001 	ldmdane	r4, {r0}^
    37b8:	58000001 	stmdapl	r0, {r0}
    37bc:	01000001 	tsteq	r0, r1
    37c0:	00005400 	andeq	r5, r0, r0, lsl #8
    37c4:	00000000 	andeq	r0, r0, r0
    37c8:	00ba0000 	adcseq	r0, sl, r0
    37cc:	00d80000 	sbcseq	r0, r8, r0
    37d0:	00020000 	andeq	r0, r2, r0
    37d4:	00e89f30 	rsceq	r9, r8, r0, lsr pc
    37d8:	00f00000 	rscseq	r0, r0, r0
    37dc:	00050000 	andeq	r0, r5, r0
    37e0:	2400773f 	strcs	r7, [r0], #-1855	; 0x73f
    37e4:	0000f09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37e8:	00010a00 	andeq	r0, r1, r0, lsl #20
    37ec:	5c000100 	stfpls	f0, [r0], {-0}
    37f0:	0000012e 	andeq	r0, r0, lr, lsr #2
    37f4:	00000136 	andeq	r0, r0, r6, lsr r1
    37f8:	773f0005 	ldrvc	r0, [pc, -r5]!
    37fc:	369f2400 	ldrcc	r2, [pc], r0, lsl #8
    3800:	50000001 	andpl	r0, r0, r1
    3804:	01000001 	tsteq	r0, r1
    3808:	00005c00 	andeq	r5, r0, r0, lsl #24
    380c:	00000000 	andeq	r0, r0, r0
    3810:	016a0000 	cmneq	sl, r0
    3814:	01740000 	cmneq	r4, r0
    3818:	00010000 	andeq	r0, r1, r0
    381c:	00017450 	andeq	r7, r1, r0, asr r4
    3820:	00017600 	andeq	r7, r1, r0, lsl #12
    3824:	f3000400 	vshl.u8	d0, d0, d0
    3828:	009f5001 	addseq	r5, pc, r1
    382c:	00000000 	andeq	r0, r0, r0
    3830:	6a000000 	bvs	3838 <__Stack_Size+0x3438>
    3834:	6c000001 	stcvs	0, cr0, [r0], {1}
    3838:	02000001 	andeq	r0, r0, #1
    383c:	6c9f3000 	ldcvs	0, cr3, [pc], {0}
    3840:	76000001 	strvc	r0, [r0], -r1
    3844:	0c000001 	stceq	0, cr0, [r0], {1}
    3848:	0a007100 	beq	1fc50 <__Stack_Size+0x1f850>
    384c:	731affff 	tstvc	sl, #1020	; 0x3fc
    3850:	2e301a00 	vaddcs.f32	s2, s0, s0
    3854:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3858:	00000000 	andeq	r0, r0, r0
    385c:	00017600 	andeq	r7, r1, r0, lsl #12
    3860:	00017800 	andeq	r7, r1, r0, lsl #16
    3864:	50000100 	andpl	r0, r0, r0, lsl #2
    3868:	00000178 	andeq	r0, r0, r8, ror r1
    386c:	0000017c 	andeq	r0, r0, ip, ror r1
    3870:	01f30004 	mvnseq	r0, r4
    3874:	00009f50 	andeq	r9, r0, r0, asr pc
    3878:	00000000 	andeq	r0, r0, r0
    387c:	017c0000 	cmneq	ip, r0
    3880:	01860000 	orreq	r0, r6, r0
    3884:	00010000 	andeq	r0, r1, r0
    3888:	00018650 	andeq	r8, r1, r0, asr r6
    388c:	00018800 	andeq	r8, r1, r0, lsl #16
    3890:	f3000400 	vshl.u8	d0, d0, d0
    3894:	009f5001 	addseq	r5, pc, r1
    3898:	00000000 	andeq	r0, r0, r0
    389c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    38a0:	7e000001 	cdpvc	0, 0, cr0, cr0, cr1, {0}
    38a4:	02000001 	andeq	r0, r0, #1
    38a8:	7e9f3000 	cdpvc	0, 9, cr3, cr15, cr0, {0}
    38ac:	88000001 	stmdahi	r0, {r0}
    38b0:	0c000001 	stceq	0, cr0, [r0], {1}
    38b4:	0a007100 	beq	1fcbc <__Stack_Size+0x1f8bc>
    38b8:	731affff 	tstvc	sl, #1020	; 0x3fc
    38bc:	2e301a00 	vaddcs.f32	s2, s0, s0
    38c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    38c4:	00000000 	andeq	r0, r0, r0
    38c8:	00018800 	andeq	r8, r1, r0, lsl #16
    38cc:	00018a00 	andeq	r8, r1, r0, lsl #20
    38d0:	50000100 	andpl	r0, r0, r0, lsl #2
    38d4:	0000018a 	andeq	r0, r0, sl, lsl #3
    38d8:	0000018e 	andeq	r0, r0, lr, lsl #3
    38dc:	01f30004 	mvnseq	r0, r4
    38e0:	00009f50 	andeq	r9, r0, r0, asr pc
    38e4:	00000000 	andeq	r0, r0, r0
    38e8:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
    38ec:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
    38f0:	00040000 	andeq	r0, r4, r0
    38f4:	9f243c40 	svcls	0x00243c40
    38f8:	000001a8 	andeq	r0, r0, r8, lsr #3
    38fc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    3900:	00530001 	subseq	r0, r3, r1
    3904:	00000000 	andeq	r0, r0, r0
    3908:	b4000000 	strlt	r0, [r0], #-0
    390c:	b8000001 	stmdalt	r0, {r0}
    3910:	02000001 	andeq	r0, r0, #1
    3914:	b8007d00 	stmdalt	r0, {r8, sl, fp, ip, sp, lr}
    3918:	d0000001 	andle	r0, r0, r1
    391c:	02000001 	andeq	r0, r0, #1
    3920:	00087d00 	andeq	r7, r8, r0, lsl #26
    3924:	00000000 	andeq	r0, r0, r0
    3928:	b4000000 	strlt	r0, [r0], #-0
    392c:	c8000001 	stmdagt	r0, {r0}
    3930:	01000001 	tsteq	r0, r1
    3934:	01c85000 	biceq	r5, r8, r0
    3938:	01d00000 	bicseq	r0, r0, r0
    393c:	00040000 	andeq	r0, r4, r0
    3940:	9f5001f3 	svcls	0x005001f3
	...
    394c:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    3950:	000001c4 	andeq	r0, r0, r4, asr #3
    3954:	c4510001 	ldrbgt	r0, [r1], #-1
    3958:	d0000001 	andle	r0, r0, r1
    395c:	04000001 	streq	r0, [r0], #-1
    3960:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3964:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3968:	00000000 	andeq	r0, r0, r0
    396c:	0001b400 	andeq	fp, r1, r0, lsl #8
    3970:	0001ba00 	andeq	fp, r1, r0, lsl #20
    3974:	30000200 	andcc	r0, r0, r0, lsl #4
    3978:	0001ba9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    397c:	0001c000 	andeq	ip, r1, r0
    3980:	54000100 	strpl	r0, [r0], #-256	; 0x100
    3984:	000001c0 	andeq	r0, r0, r0, asr #3
    3988:	000001c8 	andeq	r0, r0, r8, asr #3
    398c:	0070000b 	rsbseq	r0, r0, fp
    3990:	341aff08 	ldrcc	pc, [sl], #-3848	; 0xf08
    3994:	21007324 	tstcs	r0, r4, lsr #6
    3998:	0001c89f 	muleq	r1, pc, r8	; <UNPREDICTABLE>
    399c:	0001d000 	andeq	sp, r1, r0
    39a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    39ac:	000001dc 	ldrdeq	r0, [r0], -ip
    39b0:	000001de 	ldrdeq	r0, [r0], -lr
    39b4:	007d0002 	rsbseq	r0, sp, r2
    39b8:	000001de 	ldrdeq	r0, [r0], -lr
    39bc:	00000234 	andeq	r0, r0, r4, lsr r2
    39c0:	0c7d0002 	ldcleq	0, cr0, [sp], #-8
	...
    39cc:	000001dc 	ldrdeq	r0, [r0], -ip
    39d0:	00000220 	andeq	r0, r0, r0, lsr #4
    39d4:	20500001 	subscs	r0, r0, r1
    39d8:	34000002 	strcc	r0, [r0], #-2
    39dc:	04000002 	streq	r0, [r0], #-2
    39e0:	5001f300 	andpl	pc, r1, r0, lsl #6
    39e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    39e8:	00000000 	andeq	r0, r0, r0
    39ec:	0001dc00 	andeq	sp, r1, r0, lsl #24
    39f0:	00022200 	andeq	r2, r2, r0, lsl #4
    39f4:	51000100 	mrspl	r0, (UNDEF: 16)
    39f8:	00000222 	andeq	r0, r0, r2, lsr #4
    39fc:	00000234 	andeq	r0, r0, r4, lsr r2
    3a00:	01f30004 	mvnseq	r0, r4
    3a04:	00009f51 	andeq	r9, r0, r1, asr pc
    3a08:	00000000 	andeq	r0, r0, r0
    3a0c:	01dc0000 	bicseq	r0, ip, r0
    3a10:	01ec0000 	mvneq	r0, r0
    3a14:	00020000 	andeq	r0, r2, r0
    3a18:	01ec9f30 	mvneq	r9, r0, lsr pc
    3a1c:	02260000 	eoreq	r0, r6, #0
    3a20:	00010000 	andeq	r0, r1, r0
    3a24:	00022654 	andeq	r2, r2, r4, asr r6
    3a28:	00023400 	andeq	r3, r2, r0, lsl #8
    3a2c:	f3000800 	vsub.i8	d0, d0, d0
    3a30:	ff0a5001 			; <UNDEFINED> instruction: 0xff0a5001
    3a34:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    3a38:	00000000 	andeq	r0, r0, r0
    3a3c:	dc000000 	stcle	0, cr0, [r0], {-0}
    3a40:	00000001 	andeq	r0, r0, r1
    3a44:	02000002 	andeq	r0, r0, #2
    3a48:	009f3000 	addseq	r3, pc, r0
    3a4c:	0c000002 	stceq	0, cr0, [r0], {2}
    3a50:	0b000002 	bleq	3a60 <__Stack_Size+0x3660>
    3a54:	00703300 	rsbseq	r3, r0, r0, lsl #6
    3a58:	1a243f4e 	bne	913798 <__Stack_Size+0x913398>
    3a5c:	9f242540 	svcls	0x00242540
    3a60:	0000020c 	andeq	r0, r0, ip, lsl #4
    3a64:	00000214 	andeq	r0, r0, r4, lsl r2
    3a68:	9f300002 	svcls	0x00300002
	...
    3a74:	000001dc 	ldrdeq	r0, [r0], -ip
    3a78:	000001ea 	andeq	r0, r0, sl, ror #3
    3a7c:	9f300002 	svcls	0x00300002
    3a80:	000001ea 	andeq	r0, r0, sl, ror #3
    3a84:	00000234 	andeq	r0, r0, r4, lsr r2
    3a88:	00530001 	subseq	r0, r3, r1
    3a8c:	00000000 	andeq	r0, r0, r0
    3a90:	dc000000 	stcle	0, cr0, [r0], {-0}
    3a94:	ea000001 	b	3aa0 <__Stack_Size+0x36a0>
    3a98:	02000001 	andeq	r0, r0, #1
    3a9c:	ea9f3000 	b	fe7cfaa4 <SCS_BASE+0x1e7c1aa4>
    3aa0:	20000001 	andcs	r0, r0, r1
    3aa4:	09000002 	stmdbeq	r0, {r1}
    3aa8:	4e007000 	cdpmi	0, 0, cr7, cr0, cr0, {0}
    3aac:	401a243f 	andsmi	r2, sl, pc, lsr r4
    3ab0:	02209f25 	eoreq	r9, r0, #148	; 0x94
    3ab4:	02340000 	eorseq	r0, r4, #0
    3ab8:	000a0000 	andeq	r0, sl, r0
    3abc:	4e5001f3 	mrcmi	1, 2, r0, cr0, cr3, {7}
    3ac0:	401a243f 	andsmi	r2, sl, pc, lsr r4
    3ac4:	00009f25 	andeq	r9, r0, r5, lsr #30
    3ac8:	00000000 	andeq	r0, r0, r0
    3acc:	02340000 	eorseq	r0, r4, #0
    3ad0:	023a0000 	eorseq	r0, sl, #0
    3ad4:	00020000 	andeq	r0, r2, r0
    3ad8:	023a007d 	eorseq	r0, sl, #125	; 0x7d
    3adc:	02680000 	rsbeq	r0, r8, #0
    3ae0:	00020000 	andeq	r0, r2, r0
    3ae4:	00000c7d 	andeq	r0, r0, sp, ror ip
    3ae8:	00000000 	andeq	r0, r0, r0
    3aec:	02340000 	eorseq	r0, r4, #0
    3af0:	02460000 	subeq	r0, r6, #0
    3af4:	00010000 	andeq	r0, r1, r0
    3af8:	00024650 	andeq	r4, r2, r0, asr r6
    3afc:	00026800 	andeq	r6, r2, r0, lsl #16
    3b00:	f3000400 	vshl.u8	d0, d0, d0
    3b04:	009f5001 	addseq	r5, pc, r1
    3b08:	00000000 	andeq	r0, r0, r0
    3b0c:	34000000 	strcc	r0, [r0], #-0
    3b10:	4a000002 	bmi	3b20 <__Stack_Size+0x3720>
    3b14:	01000002 	tsteq	r0, r2
    3b18:	024a5100 	subeq	r5, sl, #0
    3b1c:	02680000 	rsbeq	r0, r8, #0
    3b20:	00040000 	andeq	r0, r4, r0
    3b24:	9f5101f3 	svcls	0x005101f3
	...
    3b30:	00000234 	andeq	r0, r0, r4, lsr r2
    3b34:	0000023c 	andeq	r0, r0, ip, lsr r2
    3b38:	9f300002 	svcls	0x00300002
    3b3c:	0000023c 	andeq	r0, r0, ip, lsr r2
    3b40:	00000242 	andeq	r0, r0, r2, asr #4
    3b44:	723f0005 	eorsvc	r0, pc, #5
    3b48:	429f2400 	addsmi	r2, pc, #0
    3b4c:	54000002 	strpl	r0, [r0], #-2
    3b50:	01000002 	tsteq	r0, r2
    3b54:	02545400 	subseq	r5, r4, #0
    3b58:	02680000 	rsbeq	r0, r8, #0
    3b5c:	00050000 	andeq	r0, r5, r0
    3b60:	2400723f 	strcs	r7, [r0], #-575	; 0x23f
    3b64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3b70:	00001c00 	andeq	r1, r0, r0, lsl #24
    3b74:	30000200 	andcc	r0, r0, r0, lsl #4
    3b78:	0000229f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    3b7c:	00003400 	andeq	r3, r0, r0, lsl #8
    3b80:	52000100 	andpl	r0, r0, #0
	...
    3b8c:	00000034 	andeq	r0, r0, r4, lsr r0
    3b90:	0000004e 	andeq	r0, r0, lr, asr #32
    3b94:	9f300002 	svcls	0x00300002
    3b98:	0000004e 	andeq	r0, r0, lr, asr #32
    3b9c:	00000050 	andeq	r0, r0, r0, asr r0
    3ba0:	9f310002 	svcls	0x00310002
    3ba4:	00000050 	andeq	r0, r0, r0, asr r0
    3ba8:	00000052 	andeq	r0, r0, r2, asr r0
    3bac:	9f320002 	svcls	0x00320002
    3bb0:	00000052 	andeq	r0, r0, r2, asr r0
    3bb4:	00000064 	andeq	r0, r0, r4, rrx
    3bb8:	9f330002 	svcls	0x00330002
	...
    3bc4:	00000064 	andeq	r0, r0, r4, rrx
    3bc8:	00000068 	andeq	r0, r0, r8, rrx
    3bcc:	68500001 	ldmdavs	r0, {r0}^
    3bd0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    3bd4:	04000000 	streq	r0, [r0], #-0
    3bd8:	5001f300 	andpl	pc, r1, r0, lsl #6
    3bdc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3be0:	00000000 	andeq	r0, r0, r0
    3be4:	00007800 	andeq	r7, r0, r0, lsl #16
    3be8:	00007c00 	andeq	r7, r0, r0, lsl #24
    3bec:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    3bf0:	00007c00 	andeq	r7, r0, r0, lsl #24
    3bf4:	0000fc00 	andeq	pc, r0, r0, lsl #24
    3bf8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    3bfc:	00000010 	andeq	r0, r0, r0, lsl r0
    3c00:	00000000 	andeq	r0, r0, r0
    3c04:	00007800 	andeq	r7, r0, r0, lsl #16
    3c08:	0000ca00 	andeq	ip, r0, r0, lsl #20
    3c0c:	50000100 	andpl	r0, r0, r0, lsl #2
    3c10:	000000ca 	andeq	r0, r0, sl, asr #1
    3c14:	000000dc 	ldrdeq	r0, [r0], -ip
    3c18:	01f30004 	mvnseq	r0, r4
    3c1c:	00dc9f50 	sbcseq	r9, ip, r0, asr pc
    3c20:	00de0000 	sbcseq	r0, lr, r0
    3c24:	00010000 	andeq	r0, r1, r0
    3c28:	0000de50 	andeq	sp, r0, r0, asr lr
    3c2c:	0000fc00 	andeq	pc, r0, r0, lsl #24
    3c30:	f3000400 	vshl.u8	d0, d0, d0
    3c34:	009f5001 	addseq	r5, pc, r1
    3c38:	00000000 	andeq	r0, r0, r0
    3c3c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    3c40:	8a000000 	bhi	3c48 <__Stack_Size+0x3848>
    3c44:	02000000 	andeq	r0, r0, #0
    3c48:	8a9f3000 	bhi	fe7cfc50 <SCS_BASE+0x1e7c1c50>
    3c4c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    3c50:	01000000 	mrseq	r0, (UNDEF: 0)
    3c54:	00985100 	addseq	r5, r8, r0, lsl #2
    3c58:	00a40000 	adceq	r0, r4, r0
    3c5c:	00010000 	andeq	r0, r1, r0
    3c60:	0000a454 	andeq	sl, r0, r4, asr r4
    3c64:	0000c000 	andeq	ip, r0, r0
    3c68:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    3c6c:	000000c0 	andeq	r0, r0, r0, asr #1
    3c70:	000000c2 	andeq	r0, r0, r2, asr #1
    3c74:	00750006 	rsbseq	r0, r5, r6
    3c78:	9f1a0071 	svcls	0x001a0071
    3c7c:	000000c2 	andeq	r0, r0, r2, asr #1
    3c80:	000000c4 	andeq	r0, r0, r4, asr #1
    3c84:	c4510001 	ldrbgt	r0, [r1], #-1
    3c88:	ca000000 	bgt	3c90 <__Stack_Size+0x3890>
    3c8c:	12000000 	andne	r0, r0, #0
    3c90:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
    3c94:	33019400 	movwcc	r9, #5120	; 0x1400
    3c98:	1aff081a 	bne	fffc5d08 <SCS_BASE+0x1ffb7d08>
    3c9c:	75242433 	strvc	r2, [r4, #-1075]!	; 0x433
    3ca0:	ca9f1a00 	bgt	fe7ca4a8 <SCS_BASE+0x1e7bc4a8>
    3ca4:	dc000000 	stcle	0, cr0, [r0], {-0}
    3ca8:	13000000 	movwne	r0, #0
    3cac:	f3ff0800 	vtbl.8	d16, {d15}, d0
    3cb0:	01945001 	orrseq	r5, r4, r1
    3cb4:	ff081a33 			; <UNDEFINED> instruction: 0xff081a33
    3cb8:	2424331a 	strtcs	r3, [r4], #-794	; 0x31a
    3cbc:	9f1a0075 	svcls	0x001a0075
    3cc0:	000000dc 	ldrdeq	r0, [r0], -ip
    3cc4:	000000fc 	strdeq	r0, [r0], -ip
    3cc8:	9f300002 	svcls	0x00300002
	...
    3cd4:	00000078 	andeq	r0, r0, r8, ror r0
    3cd8:	000000bc 	strheq	r0, [r0], -ip
    3cdc:	9f300002 	svcls	0x00300002
    3ce0:	000000bc 	strheq	r0, [r0], -ip
    3ce4:	000000c0 	andeq	r0, r0, r0, asr #1
    3ce8:	c0560001 	subsgt	r0, r6, r1
    3cec:	c4000000 	strgt	r0, [r0], #-0
    3cf0:	01000000 	mrseq	r0, (UNDEF: 0)
    3cf4:	00c45400 	sbceq	r5, r4, r0, lsl #8
    3cf8:	00cc0000 	sbceq	r0, ip, r0
    3cfc:	00010000 	andeq	r0, r1, r0
    3d00:	0000cc51 	andeq	ip, r0, r1, asr ip
    3d04:	0000d000 	andeq	sp, r0, r0
    3d08:	72000700 	andvc	r0, r0, #0
    3d0c:	73243200 	teqvc	r4, #0
    3d10:	00d02200 	sbcseq	r2, r0, r0, lsl #4
    3d14:	00dc0000 	sbcseq	r0, ip, r0
    3d18:	00120000 	andseq	r0, r2, r0
    3d1c:	945001f3 	ldrbls	r0, [r0], #-499	; 0x1f3
    3d20:	1aff0801 	bne	fffc5d2c <SCS_BASE+0x1ffb7d2c>
    3d24:	c0232532 	eorgt	r2, r3, r2, lsr r5
    3d28:	73243201 	teqvc	r4, #268435456	; 0x10000000
    3d2c:	00dc2200 	sbcseq	r2, ip, r0, lsl #4
    3d30:	00fc0000 	rscseq	r0, ip, r0
    3d34:	00020000 	andeq	r0, r2, r0
    3d38:	00009f30 	andeq	r9, r0, r0, lsr pc
    3d3c:	00000000 	andeq	r0, r0, r0
    3d40:	00780000 	rsbseq	r0, r8, r0
    3d44:	00bc0000 	adcseq	r0, ip, r0
    3d48:	00020000 	andeq	r0, r2, r0
    3d4c:	00bc9f30 	adcseq	r9, ip, r0, lsr pc
    3d50:	00c20000 	sbceq	r0, r2, r0
    3d54:	00010000 	andeq	r0, r1, r0
    3d58:	0000c251 	andeq	ip, r0, r1, asr r2
    3d5c:	0000ca00 	andeq	ip, r0, r0, lsl #20
    3d60:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
    3d64:	940070ff 	strls	r7, [r0], #-255	; 0xff
    3d68:	081a3301 	ldmdaeq	sl, {r0, r8, r9, ip, sp}
    3d6c:	24331aff 	ldrtcs	r1, [r3], #-2815	; 0xaff
    3d70:	00ca9f24 	sbceq	r9, sl, r4, lsr #30
    3d74:	00dc0000 	sbcseq	r0, ip, r0
    3d78:	00100000 	andseq	r0, r0, r0
    3d7c:	01f3ff08 	mvnseq	pc, r8, lsl #30
    3d80:	33019450 	movwcc	r9, #5200	; 0x1450
    3d84:	1aff081a 	bne	fffc5df4 <SCS_BASE+0x1ffb7df4>
    3d88:	9f242433 	svcls	0x00242433
    3d8c:	000000dc 	ldrdeq	r0, [r0], -ip
    3d90:	000000fc 	strdeq	r0, [r0], -ip
    3d94:	9f300002 	svcls	0x00300002
	...
    3da0:	00000078 	andeq	r0, r0, r8, ror r0
    3da4:	0000008a 	andeq	r0, r0, sl, lsl #1
    3da8:	9f300002 	svcls	0x00300002
    3dac:	0000008a 	andeq	r0, r0, sl, lsl #1
    3db0:	00000090 	muleq	r0, r0, r0
    3db4:	71340005 	teqvc	r4, r5
    3db8:	909f1c00 	addsls	r1, pc, r0, lsl #24
    3dbc:	a2000000 	andge	r0, r0, #0
    3dc0:	01000000 	mrseq	r0, (UNDEF: 0)
    3dc4:	00dc5200 	sbcseq	r5, ip, r0, lsl #4
    3dc8:	00fc0000 	rscseq	r0, ip, r0
    3dcc:	00020000 	andeq	r0, r2, r0
    3dd0:	00009f30 	andeq	r9, r0, r0, lsr pc
    3dd4:	00000000 	andeq	r0, r0, r0
    3dd8:	00780000 	rsbseq	r0, r8, r0
    3ddc:	008a0000 	addeq	r0, sl, r0
    3de0:	00020000 	andeq	r0, r2, r0
    3de4:	008a9f3f 	addeq	r9, sl, pc, lsr pc
    3de8:	00940000 	addseq	r0, r4, r0
    3dec:	00050000 	andeq	r0, r5, r0
    3df0:	2500713f 	strcs	r7, [r0, #-319]	; 0x13f
    3df4:	0000949f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    3df8:	00009e00 	andeq	r9, r0, r0, lsl #28
    3dfc:	55000100 	strpl	r0, [r0, #-256]	; 0x100
    3e00:	000000dc 	ldrdeq	r0, [r0], -ip
    3e04:	000000fc 	strdeq	r0, [r0], -ip
    3e08:	9f3f0002 	svcls	0x003f0002
	...
    3e14:	00000118 	andeq	r0, r0, r8, lsl r1
    3e18:	0000011a 	andeq	r0, r0, sl, lsl r1
    3e1c:	1a500001 	bne	1403e28 <__Stack_Size+0x1403a28>
    3e20:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    3e24:	04000001 	streq	r0, [r0], #-1
    3e28:	5001f300 	andpl	pc, r1, r0, lsl #6
    3e2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e30:	00000000 	andeq	r0, r0, r0
    3e34:	00013000 	andeq	r3, r1, r0
    3e38:	00013c00 	andeq	r3, r1, r0, lsl #24
    3e3c:	50000100 	andpl	r0, r0, r0, lsl #2
    3e40:	0000013c 	andeq	r0, r0, ip, lsr r1
    3e44:	00000154 	andeq	r0, r0, r4, asr r1
    3e48:	01f30004 	mvnseq	r0, r4
    3e4c:	00009f50 	andeq	r9, r0, r0, asr pc
    3e50:	00000000 	andeq	r0, r0, r0
    3e54:	01300000 	teqeq	r0, r0
    3e58:	01440000 	mrseq	r0, (UNDEF: 68)
    3e5c:	00020000 	andeq	r0, r2, r0
    3e60:	01449f30 	cmpeq	r4, r0, lsr pc
    3e64:	01460000 	mrseq	r0, (UNDEF: 70)
    3e68:	00090000 	andeq	r0, r9, r0
    3e6c:	00710072 	rsbseq	r0, r1, r2, ror r0
    3e70:	2900711a 	stmdbcs	r0, {r1, r3, r4, r8, ip, sp, lr}
    3e74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e78:	00000000 	andeq	r0, r0, r0
    3e7c:	00013000 	andeq	r3, r1, r0
    3e80:	00013a00 	andeq	r3, r1, r0, lsl #20
    3e84:	30000200 	andcc	r0, r0, r0, lsl #4
    3e88:	00013a9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    3e8c:	00014800 	andeq	r4, r1, r0, lsl #16
    3e90:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3e9c:	00000160 	andeq	r0, r0, r0, ror #2
    3ea0:	00000168 	andeq	r0, r0, r8, ror #2
    3ea4:	68500001 	ldmdavs	r0, {r0}^
    3ea8:	7c000001 	stcvc	0, cr0, [r0], {1}
    3eac:	04000001 	streq	r0, [r0], #-1
    3eb0:	5001f300 	andpl	pc, r1, r0, lsl #6
    3eb4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3eb8:	00000000 	andeq	r0, r0, r0
    3ebc:	00018c00 	andeq	r8, r1, r0, lsl #24
    3ec0:	00019800 	andeq	r9, r1, r0, lsl #16
    3ec4:	50000100 	andpl	r0, r0, r0, lsl #2
    3ec8:	00000198 	muleq	r0, r8, r1
    3ecc:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    3ed0:	01f30004 	mvnseq	r0, r4
    3ed4:	00009f50 	andeq	r9, r0, r0, asr pc
    3ed8:	00000000 	andeq	r0, r0, r0
    3edc:	018c0000 	orreq	r0, ip, r0
    3ee0:	01a00000 	moveq	r0, r0
    3ee4:	00020000 	andeq	r0, r2, r0
    3ee8:	01a09f30 	lsreq	r9, r0, pc
    3eec:	01a20000 			; <UNDEFINED> instruction: 0x01a20000
    3ef0:	00090000 	andeq	r0, r9, r0
    3ef4:	00710072 	rsbseq	r0, r1, r2, ror r0
    3ef8:	2900711a 	stmdbcs	r0, {r1, r3, r4, r8, ip, sp, lr}
    3efc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f00:	00000000 	andeq	r0, r0, r0
    3f04:	00018c00 	andeq	r8, r1, r0, lsl #24
    3f08:	00019600 	andeq	r9, r1, r0, lsl #12
    3f0c:	30000200 	andcc	r0, r0, r0, lsl #4
    3f10:	0001969f 	muleq	r1, pc, r6	; <UNPREDICTABLE>
    3f14:	0001a400 	andeq	sl, r1, r0, lsl #8
    3f18:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3f24:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    3f28:	000001c8 	andeq	r0, r0, r8, asr #3
    3f2c:	c8500001 	ldmdagt	r0, {r0}^
    3f30:	d0000001 	andle	r0, r0, r1
    3f34:	04000001 	streq	r0, [r0], #-1
    3f38:	5001f300 	andpl	pc, r1, r0, lsl #6
    3f3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f40:	00000000 	andeq	r0, r0, r0
    3f44:	0001bc00 	andeq	fp, r1, r0, lsl #24
    3f48:	0001c000 	andeq	ip, r1, r0
    3f4c:	51000100 	mrspl	r0, (UNDEF: 16)
    3f50:	000001c0 	andeq	r0, r0, r0, asr #3
    3f54:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3f58:	01f30004 	mvnseq	r0, r4
    3f5c:	00009f51 	andeq	r9, r0, r1, asr pc
    3f60:	00000000 	andeq	r0, r0, r0
    3f64:	01f00000 	mvnseq	r0, r0
    3f68:	01f80000 	mvnseq	r0, r0
    3f6c:	00010000 	andeq	r0, r1, r0
    3f70:	0001f850 	andeq	pc, r1, r0, asr r8	; <UNPREDICTABLE>
    3f74:	0001fa00 	andeq	pc, r1, r0, lsl #20
    3f78:	f3000400 	vshl.u8	d0, d0, d0
    3f7c:	fa9f5001 	blx	fe7d7f88 <SCS_BASE+0x1e7c9f88>
    3f80:	fe000001 	cdp2	0, 0, cr0, cr0, cr1, {0}
    3f84:	01000001 	tsteq	r0, r1
    3f88:	01fe5000 	mvnseq	r5, r0
    3f8c:	02080000 	andeq	r0, r8, #0
    3f90:	00040000 	andeq	r0, r4, r0
    3f94:	9f5001f3 	svcls	0x005001f3
	...
    3fa0:	00000208 	andeq	r0, r0, r8, lsl #4
    3fa4:	0000020e 	andeq	r0, r0, lr, lsl #4
    3fa8:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
    3fac:	28000002 	stmdacs	r0, {r1}
    3fb0:	04000002 	streq	r0, [r0], #-2
    3fb4:	5001f300 	andpl	pc, r1, r0, lsl #6
    3fb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3fbc:	00000000 	andeq	r0, r0, r0
    3fc0:	00020800 	andeq	r0, r2, r0, lsl #16
    3fc4:	00021200 	andeq	r1, r2, r0, lsl #4
    3fc8:	30000200 	andcc	r0, r0, r0, lsl #4
    3fcc:	0002129f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    3fd0:	00021a00 	andeq	r1, r2, r0, lsl #20
    3fd4:	50000100 	andpl	r0, r0, r0, lsl #2
    3fd8:	0000021a 	andeq	r0, r0, sl, lsl r2
    3fdc:	0000021c 	andeq	r0, r0, ip, lsl r2
    3fe0:	f3310008 	vhadd.u<illegal width 64>	d0, d1, d8
    3fe4:	1a4f5001 	bne	13d7ff0 <__Stack_Size+0x13d7bf0>
    3fe8:	021c9f24 	andseq	r9, ip, #144	; 0x90
    3fec:	02200000 	eoreq	r0, r0, #0
    3ff0:	00010000 	andeq	r0, r1, r0
    3ff4:	00022050 	andeq	r2, r2, r0, asr r0
    3ff8:	00022800 	andeq	r2, r2, r0, lsl #16
    3ffc:	31000800 	tstcc	r0, r0, lsl #16
    4000:	4f5001f3 	svcmi	0x005001f3
    4004:	009f241a 	addseq	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    4008:	00000000 	andeq	r0, r0, r0
    400c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4010:	2c000002 	stccs	0, cr0, [r0], {2}
    4014:	02000002 	andeq	r0, r0, #2
    4018:	2c007d00 	stccs	13, cr7, [r0], {-0}
    401c:	78000002 	stmdavc	r0, {r1}
    4020:	02000002 	andeq	r0, r0, #2
    4024:	00107d00 	andseq	r7, r0, r0, lsl #26
    4028:	00000000 	andeq	r0, r0, r0
    402c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4030:	4e000002 	cdpmi	0, 0, cr0, cr0, cr2, {0}
    4034:	01000002 	tsteq	r0, r2
    4038:	024e5000 	subeq	r5, lr, #0
    403c:	02780000 	rsbseq	r0, r8, #0
    4040:	00040000 	andeq	r0, r4, r0
    4044:	9f5001f3 	svcls	0x005001f3
	...
    4050:	00000228 	andeq	r0, r0, r8, lsr #4
    4054:	00000242 	andeq	r0, r0, r2, asr #4
    4058:	42510001 	subsmi	r0, r1, #1
    405c:	78000002 	stmdavc	r0, {r1}
    4060:	04000002 	streq	r0, [r0], #-2
    4064:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4068:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    406c:	00000000 	andeq	r0, r0, r0
    4070:	00022800 	andeq	r2, r2, r0, lsl #16
    4074:	00024400 	andeq	r4, r2, r0, lsl #8
    4078:	52000100 	andpl	r0, r0, #0
    407c:	00000244 	andeq	r0, r0, r4, asr #4
    4080:	00000278 	andeq	r0, r0, r8, ror r2
    4084:	01f30004 	mvnseq	r0, r4
    4088:	00009f52 	andeq	r9, r0, r2, asr pc
    408c:	00000000 	andeq	r0, r0, r0
    4090:	02280000 	eoreq	r0, r8, #0
    4094:	02340000 	eorseq	r0, r4, #0
    4098:	00020000 	andeq	r0, r2, r0
    409c:	02349f30 	eorseq	r9, r4, #192	; 0xc0
    40a0:	023a0000 	eorseq	r0, sl, #0
    40a4:	00050000 	andeq	r0, r5, r0
    40a8:	1c007634 	stcne	6, cr7, [r0], {52}	; 0x34
    40ac:	00023a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    40b0:	00025600 	andeq	r5, r2, r0, lsl #12
    40b4:	54000100 	strpl	r0, [r0], #-256	; 0x100
    40b8:	00000256 	andeq	r0, r0, r6, asr r2
    40bc:	0000025c 	andeq	r0, r0, ip, asr r2
    40c0:	5c520001 	mrrcpl	0, 0, r0, r2, cr1
    40c4:	78000002 	stmdavc	r0, {r1}
    40c8:	03000002 	movweq	r0, #2
    40cc:	9f7a7200 	svcls	0x007a7200
	...
    40d8:	00000228 	andeq	r0, r0, r8, lsr #4
    40dc:	00000234 	andeq	r0, r0, r4, lsr r2
    40e0:	ff080003 			; <UNDEFINED> instruction: 0xff080003
    40e4:	0002349f 	muleq	r2, pc, r4	; <UNPREDICTABLE>
    40e8:	00023e00 	andeq	r3, r2, r0, lsl #28
    40ec:	08000600 	stmdaeq	r0, {r9, sl}
    40f0:	250076ff 	strcs	r7, [r0, #-1791]	; 0x6ff
    40f4:	00023e9f 	muleq	r2, pc, lr	; <UNPREDICTABLE>
    40f8:	00025600 	andeq	r5, r2, r0, lsl #12
    40fc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4108:	00000228 	andeq	r0, r0, r8, lsr #4
    410c:	00000256 	andeq	r0, r0, r6, asr r2
    4110:	9f300002 	svcls	0x00300002
    4114:	00000256 	andeq	r0, r0, r6, asr r2
    4118:	00000264 	andeq	r0, r0, r4, ror #4
    411c:	64550001 	ldrbvs	r0, [r5], #-1
    4120:	78000002 	stmdavc	r0, {r1}
    4124:	06000002 	streq	r0, [r0], -r2
    4128:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
    412c:	009f2400 	addseq	r2, pc, r0, lsl #8
    4130:	00000000 	andeq	r0, r0, r0
    4134:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4138:	34000002 	strcc	r0, [r0], #-2
    413c:	02000002 	andeq	r0, r0, #2
    4140:	349f3000 	ldrcc	r3, [pc], #0	; 4148 <__Stack_Size+0x3d48>
    4144:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
    4148:	01000002 	tsteq	r0, r2
    414c:	02425600 	subeq	r5, r2, #0
    4150:	02560000 	subseq	r0, r6, #0
    4154:	00010000 	andeq	r0, r1, r0
    4158:	00025651 	andeq	r5, r2, r1, asr r6
    415c:	00025a00 	andeq	r5, r2, r0, lsl #20
    4160:	71000600 	tstvc	r0, r0, lsl #12
    4164:	24007000 	strcs	r7, [r0], #-0
    4168:	00025a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    416c:	00026e00 	andeq	r6, r2, r0, lsl #28
    4170:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    417c:	00000278 	andeq	r0, r0, r8, ror r2
    4180:	0000027c 	andeq	r0, r0, ip, ror r2
    4184:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4188:	94000002 	strls	r0, [r0], #-2
    418c:	04000002 	streq	r0, [r0], #-2
    4190:	5001f300 	andpl	pc, r1, r0, lsl #6
    4194:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4198:	00000000 	andeq	r0, r0, r0
    419c:	00027800 	andeq	r7, r2, r0, lsl #16
    41a0:	00028600 	andeq	r8, r2, r0, lsl #12
    41a4:	30000200 	andcc	r0, r0, r0, lsl #4
    41a8:	0002869f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    41ac:	00028800 	andeq	r8, r2, r0, lsl #16
    41b0:	73000900 	movwvc	r0, #2304	; 0x900
    41b4:	1a007100 	bne	205bc <__Stack_Size+0x201bc>
    41b8:	9f290073 	svcls	0x00290073
	...
    41c4:	00000278 	andeq	r0, r0, r8, ror r2
    41c8:	00000286 	andeq	r0, r0, r6, lsl #5
    41cc:	9f300002 	svcls	0x00300002
    41d0:	00000286 	andeq	r0, r0, r6, lsl #5
    41d4:	00000288 	andeq	r0, r0, r8, lsl #5
    41d8:	00730006 	rsbseq	r0, r3, r6
    41dc:	9f1a0071 	svcls	0x001a0071
    41e0:	00000288 	andeq	r0, r0, r8, lsl #5
    41e4:	00000294 	muleq	r0, r4, r2
    41e8:	00510001 	subseq	r0, r1, r1
    41ec:	00000000 	andeq	r0, r0, r0
    41f0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    41f4:	7c000002 	stcvc	0, cr0, [r0], {2}
    41f8:	07000002 	streq	r0, [r0, -r2]
    41fc:	3a007000 	bcc	20204 <__Stack_Size+0x1fe04>
    4200:	9f1a3f25 	svcls	0x001a3f25
    4204:	0000027c 	andeq	r0, r0, ip, ror r2
    4208:	00000282 	andeq	r0, r0, r2, lsl #5
    420c:	01f30008 	mvnseq	r0, r8
    4210:	3f253a50 	svccc	0x00253a50
    4214:	02829f1a 	addeq	r9, r2, #104	; 0x68
    4218:	028a0000 	addeq	r0, sl, #0
    421c:	00010000 	andeq	r0, r1, r0
    4220:	00028a53 	andeq	r8, r2, r3, asr sl
    4224:	00028c00 	andeq	r8, r2, r0, lsl #24
    4228:	31000500 	tstcc	r0, r0, lsl #10
    422c:	9f240070 	svcls	0x00240070
    4230:	0000028c 	andeq	r0, r0, ip, lsl #5
    4234:	00000294 	muleq	r0, r4, r2
    4238:	f3310009 	vhadd.u<illegal width 64>	d0, d1, d9
    423c:	f6095001 			; <UNDEFINED> instruction: 0xf6095001
    4240:	009f2424 	addseq	r2, pc, r4, lsr #8
    4244:	00000000 	andeq	r0, r0, r0
    4248:	94000000 	strls	r0, [r0], #-0
    424c:	98000002 	stmdals	r0, {r1}
    4250:	01000002 	tsteq	r0, r2
    4254:	02985000 	addseq	r5, r8, #0
    4258:	02ac0000 	adceq	r0, ip, #0
    425c:	00040000 	andeq	r0, r4, r0
    4260:	9f5001f3 	svcls	0x005001f3
	...
    426c:	00000294 	muleq	r0, r4, r2
    4270:	00000298 	muleq	r0, r8, r2
    4274:	00700005 	rsbseq	r0, r0, r5
    4278:	989f1a4f 	ldmls	pc, {r0, r1, r2, r3, r6, r9, fp, ip}	; <UNPREDICTABLE>
    427c:	9e000002 	cdpls	0, 0, cr0, cr0, cr2, {0}
    4280:	01000002 	tsteq	r0, r2
    4284:	029e5000 	addseq	r5, lr, #0
    4288:	02ac0000 	adceq	r0, ip, #0
    428c:	00060000 	andeq	r0, r6, r0
    4290:	4f5001f3 	svcmi	0x005001f3
    4294:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4298:	00000000 	andeq	r0, r0, r0
    429c:	02ac0000 	adceq	r0, ip, #0
    42a0:	02b00000 	adcseq	r0, r0, #0
    42a4:	00010000 	andeq	r0, r1, r0
    42a8:	0002b050 	andeq	fp, r2, r0, asr r0
    42ac:	0002c800 	andeq	ip, r2, r0, lsl #16
    42b0:	f3000400 	vshl.u8	d0, d0, d0
    42b4:	009f5001 	addseq	r5, pc, r1
    42b8:	00000000 	andeq	r0, r0, r0
    42bc:	ac000000 	stcge	0, cr0, [r0], {-0}
    42c0:	b0000002 	andlt	r0, r0, r2
    42c4:	05000002 	streq	r0, [r0, #-2]
    42c8:	4f007000 	svcmi	0x00007000
    42cc:	02b09f1a 	adcseq	r9, r0, #104	; 0x68
    42d0:	02b40000 	adcseq	r0, r4, #0
    42d4:	00010000 	andeq	r0, r1, r0
    42d8:	0002b450 	andeq	fp, r2, r0, asr r4
    42dc:	0002b800 	andeq	fp, r2, r0, lsl #16
    42e0:	71000300 	mrsvc	r0, LR_irq
    42e4:	02b89f01 	adcseq	r9, r8, #4
    42e8:	02c80000 	sbceq	r0, r8, #0
    42ec:	00060000 	andeq	r0, r6, r0
    42f0:	4f5001f3 	svcmi	0x005001f3
    42f4:	00009f1a 	andeq	r9, r0, sl, lsl pc
    42f8:	00000000 	andeq	r0, r0, r0
    42fc:	02c80000 	sbceq	r0, r8, #0
    4300:	02cc0000 	sbceq	r0, ip, #0
    4304:	00010000 	andeq	r0, r1, r0
    4308:	0002cc50 	andeq	ip, r2, r0, asr ip
    430c:	0002ec00 	andeq	lr, r2, r0, lsl #24
    4310:	f3000400 	vshl.u8	d0, d0, d0
    4314:	009f5001 	addseq	r5, pc, r1
    4318:	00000000 	andeq	r0, r0, r0
    431c:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    4320:	d6000002 	strle	r0, [r0], -r2
    4324:	02000002 	andeq	r0, r0, #2
    4328:	d69f3000 	ldrle	r3, [pc], r0
    432c:	d8000002 	stmdale	r0, {r1}
    4330:	09000002 	stmdbeq	r0, {r1}
    4334:	71007300 	mrsvc	r7, LR_irq
    4338:	00731a00 	rsbseq	r1, r3, r0, lsl #20
    433c:	00009f29 	andeq	r9, r0, r9, lsr #30
    4340:	00000000 	andeq	r0, r0, r0
    4344:	02c80000 	sbceq	r0, r8, #0
    4348:	02d60000 	sbcseq	r0, r6, #0
    434c:	00020000 	andeq	r0, r2, r0
    4350:	02d69f30 	sbcseq	r9, r6, #192	; 0xc0
    4354:	02d80000 	sbcseq	r0, r8, #0
    4358:	00060000 	andeq	r0, r6, r0
    435c:	00710073 	rsbseq	r0, r1, r3, ror r0
    4360:	02d89f1a 	sbcseq	r9, r8, #104	; 0x68
    4364:	02ec0000 	rsceq	r0, ip, #0
    4368:	00010000 	andeq	r0, r1, r0
    436c:	00000051 	andeq	r0, r0, r1, asr r0
    4370:	00000000 	andeq	r0, r0, r0
    4374:	0002c800 	andeq	ip, r2, r0, lsl #16
    4378:	0002cc00 	andeq	ip, r2, r0, lsl #24
    437c:	70000700 	andvc	r0, r0, r0, lsl #14
    4380:	3f253e00 	svccc	0x00253e00
    4384:	02cc9f1a 	sbceq	r9, ip, #104	; 0x68
    4388:	02d20000 	sbcseq	r0, r2, #0
    438c:	00080000 	andeq	r0, r8, r0
    4390:	3e5001f3 	mrccc	1, 2, r0, cr0, cr3, {7}
    4394:	9f1a3f25 	svcls	0x001a3f25
    4398:	000002d2 	ldrdeq	r0, [r0], -r2
    439c:	000002ec 	andeq	r0, r0, ip, ror #5
    43a0:	00530001 	subseq	r0, r3, r1
    43a4:	00000000 	andeq	r0, r0, r0
    43a8:	ec000000 	stc	0, cr0, [r0], {-0}
    43ac:	f6000002 			; <UNDEFINED> instruction: 0xf6000002
    43b0:	01000002 	tsteq	r0, r2
    43b4:	02f65000 	rscseq	r5, r6, #0
    43b8:	02f80000 	rscseq	r0, r8, #0
    43bc:	00040000 	andeq	r0, r4, r0
    43c0:	9f5001f3 	svcls	0x005001f3
    43c4:	000002f8 	strdeq	r0, [r0], -r8
    43c8:	00000302 	andeq	r0, r0, r2, lsl #6
    43cc:	02500001 	subseq	r0, r0, #1
    43d0:	14000003 	strne	r0, [r0], #-3
    43d4:	04000003 	streq	r0, [r0], #-3
    43d8:	5001f300 	andpl	pc, r1, r0, lsl #6
    43dc:	0003149f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    43e0:	00031600 	andeq	r1, r3, r0, lsl #12
    43e4:	50000100 	andpl	r0, r0, r0, lsl #2
    43e8:	00000316 	andeq	r0, r0, r6, lsl r3
    43ec:	0000031c 	andeq	r0, r0, ip, lsl r3
    43f0:	01f30004 	mvnseq	r0, r4
    43f4:	00009f50 	andeq	r9, r0, r0, asr pc
    43f8:	00000000 	andeq	r0, r0, r0
    43fc:	02ec0000 	rsceq	r0, ip, #0
    4400:	02f60000 	rscseq	r0, r6, #0
    4404:	00020000 	andeq	r0, r2, r0
    4408:	02f69f30 	rscseq	r9, r6, #192	; 0xc0
    440c:	02f80000 	rscseq	r0, r8, #0
    4410:	00010000 	andeq	r0, r1, r0
    4414:	0002f850 	andeq	pc, r2, r0, asr r8	; <UNPREDICTABLE>
    4418:	00030800 	andeq	r0, r3, r0, lsl #16
    441c:	30000200 	andcc	r0, r0, r0, lsl #4
    4420:	0003089f 	muleq	r3, pc, r8	; <UNPREDICTABLE>
    4424:	00031400 	andeq	r1, r3, r0, lsl #8
    4428:	50000100 	andpl	r0, r0, r0, lsl #2
    442c:	00000314 	andeq	r0, r0, r4, lsl r3
    4430:	00000316 	andeq	r0, r0, r6, lsl r3
    4434:	9f300002 	svcls	0x00300002
    4438:	00000316 	andeq	r0, r0, r6, lsl r3
    443c:	0000031c 	andeq	r0, r0, ip, lsl r3
    4440:	00500001 	subseq	r0, r0, r1
    4444:	00000000 	andeq	r0, r0, r0
    4448:	ec000000 	stc	0, cr0, [r0], {-0}
    444c:	f0000002 			; <UNDEFINED> instruction: 0xf0000002
    4450:	02000002 	andeq	r0, r0, #2
    4454:	f09f3000 			; <UNDEFINED> instruction: 0xf09f3000
    4458:	04000002 	streq	r0, [r0], #-2
    445c:	01000003 	tsteq	r0, r3
    4460:	03045200 	movweq	r5, #16896	; 0x4200
    4464:	03140000 	tsteq	r4, #0
    4468:	00090000 	andeq	r0, r9, r0
    446c:	095001f3 	ldmdbeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    4470:	253224f0 	ldrcs	r2, [r2, #-1264]!	; 0x4f0
    4474:	0003149f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    4478:	00031c00 	andeq	r1, r3, r0, lsl #24
    447c:	52000100 	andpl	r0, r0, #0
	...
    4488:	000002ec 	andeq	r0, r0, ip, ror #5
    448c:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4490:	9f300002 	svcls	0x00300002
    4494:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4498:	000002f6 	strdeq	r0, [r0], -r6
    449c:	00700007 	rsbseq	r0, r0, r7
    44a0:	1a332544 	bne	ccd9b8 <__Stack_Size+0xccd5b8>
    44a4:	0002f69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    44a8:	0002f800 	andeq	pc, r2, r0, lsl #16
    44ac:	f3000800 	vsub.i8	d0, d0, d0
    44b0:	25445001 	strbcs	r5, [r4, #-1]
    44b4:	f89f1a33 			; <UNDEFINED> instruction: 0xf89f1a33
    44b8:	02000002 	andeq	r0, r0, #2
    44bc:	07000003 	streq	r0, [r0, -r3]
    44c0:	44007000 	strmi	r7, [r0], #-0
    44c4:	9f1a3325 	svcls	0x001a3325
    44c8:	00000302 	andeq	r0, r0, r2, lsl #6
    44cc:	00000314 	andeq	r0, r0, r4, lsl r3
    44d0:	01f30008 	mvnseq	r0, r8
    44d4:	33254450 	teqcc	r5, #1342177280	; 0x50000000
    44d8:	03149f1a 	tsteq	r4, #104	; 0x68
    44dc:	03160000 	tsteq	r6, #0
    44e0:	00070000 	andeq	r0, r7, r0
    44e4:	25440070 	strbcs	r0, [r4, #-112]	; 0x70
    44e8:	169f1a33 			; <UNDEFINED> instruction: 0x169f1a33
    44ec:	1c000003 	stcne	0, cr0, [r0], {3}
    44f0:	08000003 	stmdaeq	r0, {r0, r1}
    44f4:	5001f300 	andpl	pc, r1, r0, lsl #6
    44f8:	1a332544 	bne	ccda10 <__Stack_Size+0xccd610>
    44fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4500:	00000000 	andeq	r0, r0, r0
    4504:	00031c00 	andeq	r1, r3, r0, lsl #24
    4508:	00032600 	andeq	r2, r3, r0, lsl #12
    450c:	50000100 	andpl	r0, r0, r0, lsl #2
    4510:	00000326 	andeq	r0, r0, r6, lsr #6
    4514:	00000330 	andeq	r0, r0, r0, lsr r3
    4518:	01f30004 	mvnseq	r0, r4
    451c:	00009f50 	andeq	r9, r0, r0, asr pc
    4520:	00000000 	andeq	r0, r0, r0
    4524:	031c0000 	tsteq	ip, #0
    4528:	03260000 	teqeq	r6, #0
    452c:	00020000 	andeq	r0, r2, r0
    4530:	03269f30 	teqeq	r6, #192	; 0xc0
    4534:	03300000 	teqeq	r0, #0
    4538:	00010000 	andeq	r0, r1, r0
    453c:	00000050 	andeq	r0, r0, r0, asr r0
    4540:	00000000 	andeq	r0, r0, r0
    4544:	00031c00 	andeq	r1, r3, r0, lsl #24
    4548:	00032600 	andeq	r2, r3, r0, lsl #12
    454c:	70000700 	andvc	r0, r0, r0, lsl #14
    4550:	31254600 	teqcc	r5, r0, lsl #12
    4554:	03269f1a 	teqeq	r6, #104	; 0x68
    4558:	03300000 	teqeq	r0, #0
    455c:	00080000 	andeq	r0, r8, r0
    4560:	465001f3 			; <UNDEFINED> instruction: 0x465001f3
    4564:	9f1a3125 	svcls	0x001a3125
	...
    4574:	00000004 	andeq	r0, r0, r4
    4578:	007d0002 	rsbseq	r0, sp, r2
    457c:	00000004 	andeq	r0, r0, r4
    4580:	0000001a 	andeq	r0, r0, sl, lsl r0
    4584:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    4590:	00000030 	andeq	r0, r0, r0, lsr r0
    4594:	0000003a 	andeq	r0, r0, sl, lsr r0
    4598:	3a500001 	bcc	14045a4 <__Stack_Size+0x14041a4>
    459c:	44000000 	strmi	r0, [r0], #-0
    45a0:	04000000 	streq	r0, [r0], #-0
    45a4:	5001f300 	andpl	pc, r1, r0, lsl #6
    45a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    45ac:	00000000 	andeq	r0, r0, r0
    45b0:	00003000 	andeq	r3, r0, r0
    45b4:	00003400 	andeq	r3, r0, r0, lsl #8
    45b8:	30000200 	andcc	r0, r0, r0, lsl #4
    45bc:	0000349f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    45c0:	00003800 	andeq	r3, r0, r0, lsl #16
    45c4:	52000100 	andpl	r0, r0, #0
    45c8:	00000038 	andeq	r0, r0, r8, lsr r0
    45cc:	0000003a 	andeq	r0, r0, sl, lsr r0
    45d0:	3a510001 	bcc	14445dc <__Stack_Size+0x14441dc>
    45d4:	44000000 	strmi	r0, [r0], #-0
    45d8:	01000000 	mrseq	r0, (UNDEF: 0)
    45dc:	00005000 	andeq	r5, r0, r0
    45e0:	00000000 	andeq	r0, r0, r0
    45e4:	00500000 	subseq	r0, r0, r0
    45e8:	005e0000 	subseq	r0, lr, r0
    45ec:	00010000 	andeq	r0, r1, r0
    45f0:	00005e50 	andeq	r5, r0, r0, asr lr
    45f4:	00007c00 	andeq	r7, r0, r0, lsl #24
    45f8:	f3000400 	vshl.u8	d0, d0, d0
    45fc:	009f5001 	addseq	r5, pc, r1
    4600:	00000000 	andeq	r0, r0, r0
    4604:	50000000 	andpl	r0, r0, r0
    4608:	6f000000 	svcvs	0x00000000
    460c:	01000000 	mrseq	r0, (UNDEF: 0)
    4610:	006f5100 	rsbeq	r5, pc, r0, lsl #2
    4614:	00700000 	rsbseq	r0, r0, r0
    4618:	00040000 	andeq	r0, r4, r0
    461c:	9f5101f3 	svcls	0x005101f3
    4620:	00000070 	andeq	r0, r0, r0, ror r0
    4624:	00000073 	andeq	r0, r0, r3, ror r0
    4628:	73510001 	cmpvc	r1, #1
    462c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    4630:	04000000 	streq	r0, [r0], #-0
    4634:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4638:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    463c:	00000000 	andeq	r0, r0, r0
    4640:	00005000 	andeq	r5, r0, r0
    4644:	00005600 	andeq	r5, r0, r0, lsl #12
    4648:	30000200 	andcc	r0, r0, r0, lsl #4
    464c:	0000569f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    4650:	00005e00 	andeq	r5, r0, r0, lsl #28
    4654:	52000100 	andpl	r0, r0, #0
    4658:	0000005e 	andeq	r0, r0, lr, asr r0
    465c:	00000062 	andeq	r0, r0, r2, rrx
    4660:	62500001 	subsvs	r0, r0, #1
    4664:	64000000 	strvs	r0, [r0], #-0
    4668:	02000000 	andeq	r0, r0, #0
    466c:	64007300 	strvs	r7, [r0], #-768	; 0x300
    4670:	6f000000 	svcvs	0x00000000
    4674:	05000000 	streq	r0, [r0, #-0]
    4678:	70000c00 	andvc	r0, r0, r0, lsl #24
    467c:	00704000 	rsbseq	r4, r0, r0
    4680:	00730000 	rsbseq	r0, r3, r0
    4684:	00050000 	andeq	r0, r5, r0
    4688:	0070000c 	rsbseq	r0, r0, ip
    468c:	00000040 	andeq	r0, r0, r0, asr #32
    4690:	00000000 	andeq	r0, r0, r0
    4694:	0000a400 	andeq	sl, r0, r0, lsl #8
    4698:	0000b000 	andeq	fp, r0, r0
    469c:	50000100 	andpl	r0, r0, r0, lsl #2
    46a0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    46a4:	000000b8 	strheq	r0, [r0], -r8
    46a8:	01f30004 	mvnseq	r0, r4
    46ac:	00009f50 	andeq	r9, r0, r0, asr pc
    46b0:	00000000 	andeq	r0, r0, r0
    46b4:	00a40000 	adceq	r0, r4, r0
    46b8:	00a80000 	adceq	r0, r8, r0
    46bc:	00020000 	andeq	r0, r2, r0
    46c0:	00a89f30 	adceq	r9, r8, r0, lsr pc
    46c4:	00b00000 	adcseq	r0, r0, r0
    46c8:	00080000 	andeq	r0, r8, r0
    46cc:	00710070 	rsbseq	r0, r1, r0, ror r0
    46d0:	9f2e301a 	svcls	0x002e301a
    46d4:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    46d8:	000000b8 	strheq	r0, [r0], -r8
    46dc:	01f30009 	mvnseq	r0, r9
    46e0:	1a007150 	bne	20c28 <__Stack_Size+0x20828>
    46e4:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    46e8:	00000000 	andeq	r0, r0, r0
    46ec:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    46f0:	c0000000 	andgt	r0, r0, r0
    46f4:	01000000 	mrseq	r0, (UNDEF: 0)
    46f8:	00c05000 	sbceq	r5, r0, r0
    46fc:	00c80000 	sbceq	r0, r8, r0
    4700:	00040000 	andeq	r0, r4, r0
    4704:	9f5001f3 	svcls	0x005001f3
	...
    4710:	0000003c 	andeq	r0, r0, ip, lsr r0
    4714:	0000005c 	andeq	r0, r0, ip, asr r0
    4718:	5c500001 	mrrcpl	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    471c:	62000000 	andvs	r0, r0, #0
    4720:	04000000 	streq	r0, [r0], #-0
    4724:	5001f300 	andpl	pc, r1, r0, lsl #6
    4728:	0000629f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    472c:	00006800 	andeq	r6, r0, r0, lsl #16
    4730:	50000100 	andpl	r0, r0, r0, lsl #2
    4734:	00000068 	andeq	r0, r0, r8, rrx
    4738:	00000070 	andeq	r0, r0, r0, ror r0
    473c:	01f30004 	mvnseq	r0, r4
    4740:	00009f50 	andeq	r9, r0, r0, asr pc
    4744:	00000000 	andeq	r0, r0, r0
    4748:	00700000 	rsbseq	r0, r0, r0
    474c:	007c0000 	rsbseq	r0, ip, r0
    4750:	00010000 	andeq	r0, r1, r0
    4754:	00007c50 	andeq	r7, r0, r0, asr ip
    4758:	00008400 	andeq	r8, r0, r0, lsl #8
    475c:	f3000400 	vshl.u8	d0, d0, d0
    4760:	009f5001 	addseq	r5, pc, r1
    4764:	00000000 	andeq	r0, r0, r0
    4768:	70000000 	andvc	r0, r0, r0
    476c:	74000000 	strvc	r0, [r0], #-0
    4770:	02000000 	andeq	r0, r0, #0
    4774:	749f3000 	ldrvc	r3, [pc], #0	; 477c <__Stack_Size+0x437c>
    4778:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    477c:	01000000 	mrseq	r0, (UNDEF: 0)
    4780:	00785200 	rsbseq	r5, r8, r0, lsl #4
    4784:	007c0000 	rsbseq	r0, ip, r0
    4788:	00010000 	andeq	r0, r1, r0
    478c:	00007c51 	andeq	r7, r0, r1, asr ip
    4790:	00008400 	andeq	r8, r0, r0, lsl #8
    4794:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    47a0:	00000090 	muleq	r0, r0, r0
    47a4:	0000009a 	muleq	r0, sl, r0
    47a8:	9a500001 	bls	14047b4 <__Stack_Size+0x14043b4>
    47ac:	a4000000 	strge	r0, [r0], #-0
    47b0:	04000000 	streq	r0, [r0], #-0
    47b4:	5001f300 	andpl	pc, r1, r0, lsl #6
    47b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47bc:	00000000 	andeq	r0, r0, r0
    47c0:	00009000 	andeq	r9, r0, r0
    47c4:	00009c00 	andeq	r9, r0, r0, lsl #24
    47c8:	51000100 	mrspl	r0, (UNDEF: 16)
    47cc:	0000009c 	muleq	r0, ip, r0
    47d0:	000000a4 	andeq	r0, r0, r4, lsr #1
    47d4:	01f30004 	mvnseq	r0, r4
    47d8:	00009f51 	andeq	r9, r0, r1, asr pc
    47dc:	00000000 	andeq	r0, r0, r0
    47e0:	00900000 	addseq	r0, r0, r0
    47e4:	00940000 	addseq	r0, r4, r0
    47e8:	00020000 	andeq	r0, r2, r0
    47ec:	00949f30 	addseq	r9, r4, r0, lsr pc
    47f0:	00980000 	addseq	r0, r8, r0
    47f4:	00090000 	andeq	r0, r9, r0
    47f8:	ff110072 			; <UNDEFINED> instruction: 0xff110072
    47fc:	1a7e83ff 	bne	1fa5800 <__Stack_Size+0x1fa5400>
    4800:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    4804:	00009c00 	andeq	r9, r0, r0, lsl #24
    4808:	52000100 	andpl	r0, r0, #0
    480c:	0000009c 	muleq	r0, ip, r0
    4810:	000000a4 	andeq	r0, r0, r4, lsr #1
    4814:	00510001 	subseq	r0, r1, r1
    4818:	00000000 	andeq	r0, r0, r0
    481c:	b0000000 	andlt	r0, r0, r0
    4820:	ba000000 	blt	4828 <__Stack_Size+0x4428>
    4824:	01000000 	mrseq	r0, (UNDEF: 0)
    4828:	00ba5000 	adcseq	r5, sl, r0
    482c:	00c40000 	sbceq	r0, r4, r0
    4830:	00040000 	andeq	r0, r4, r0
    4834:	9f5001f3 	svcls	0x005001f3
	...
    4840:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    4844:	000000b4 	strheq	r0, [r0], -r4
    4848:	9f300002 	svcls	0x00300002
    484c:	000000b4 	strheq	r0, [r0], -r4
    4850:	000000b8 	strheq	r0, [r0], -r8
    4854:	b8520001 	ldmdalt	r2, {r0}^
    4858:	ba000000 	blt	4860 <__Stack_Size+0x4460>
    485c:	01000000 	mrseq	r0, (UNDEF: 0)
    4860:	00ba5100 	adcseq	r5, sl, r0, lsl #2
    4864:	00c40000 	sbceq	r0, r4, r0
    4868:	00010000 	andeq	r0, r1, r0
    486c:	00000050 	andeq	r0, r0, r0, asr r0
    4870:	00000000 	andeq	r0, r0, r0
    4874:	0000d400 	andeq	sp, r0, r0, lsl #8
    4878:	0000de00 	andeq	sp, r0, r0, lsl #28
    487c:	50000100 	andpl	r0, r0, r0, lsl #2
    4880:	000000de 	ldrdeq	r0, [r0], -lr
    4884:	000000e8 	andeq	r0, r0, r8, ror #1
    4888:	01f30004 	mvnseq	r0, r4
    488c:	00009f50 	andeq	r9, r0, r0, asr pc
    4890:	00000000 	andeq	r0, r0, r0
    4894:	00d40000 	sbcseq	r0, r4, r0
    4898:	00d80000 	sbcseq	r0, r8, r0
    489c:	00020000 	andeq	r0, r2, r0
    48a0:	00d89f30 	sbcseq	r9, r8, r0, lsr pc
    48a4:	00dc0000 	sbcseq	r0, ip, r0
    48a8:	00010000 	andeq	r0, r1, r0
    48ac:	0000dc52 	andeq	sp, r0, r2, asr ip
    48b0:	0000de00 	andeq	sp, r0, r0, lsl #28
    48b4:	51000100 	mrspl	r0, (UNDEF: 16)
    48b8:	000000de 	ldrdeq	r0, [r0], -lr
    48bc:	000000e8 	andeq	r0, r0, r8, ror #1
    48c0:	00500001 	subseq	r0, r0, r1
    48c4:	00000000 	andeq	r0, r0, r0
    48c8:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    48cc:	f2000000 	vhadd.s8	d0, d0, d0
    48d0:	01000000 	mrseq	r0, (UNDEF: 0)
    48d4:	00f25000 	rscseq	r5, r2, r0
    48d8:	00fc0000 	rscseq	r0, ip, r0
    48dc:	00040000 	andeq	r0, r4, r0
    48e0:	9f5001f3 	svcls	0x005001f3
	...
    48ec:	000000e8 	andeq	r0, r0, r8, ror #1
    48f0:	000000ec 	andeq	r0, r0, ip, ror #1
    48f4:	9f300002 	svcls	0x00300002
    48f8:	000000ec 	andeq	r0, r0, ip, ror #1
    48fc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4900:	f0520001 			; <UNDEFINED> instruction: 0xf0520001
    4904:	f2000000 	vhadd.s8	d0, d0, d0
    4908:	01000000 	mrseq	r0, (UNDEF: 0)
    490c:	00f25100 	rscseq	r5, r2, r0, lsl #2
    4910:	00fc0000 	rscseq	r0, ip, r0
    4914:	00010000 	andeq	r0, r1, r0
    4918:	00000050 	andeq	r0, r0, r0, asr r0
    491c:	00000000 	andeq	r0, r0, r0
    4920:	0000fc00 	andeq	pc, r0, r0, lsl #24
    4924:	00010800 	andeq	r0, r1, r0, lsl #16
    4928:	50000100 	andpl	r0, r0, r0, lsl #2
    492c:	00000108 	andeq	r0, r0, r8, lsl #2
    4930:	00000110 	andeq	r0, r0, r0, lsl r1
    4934:	01f30004 	mvnseq	r0, r4
    4938:	00009f50 	andeq	r9, r0, r0, asr pc
    493c:	00000000 	andeq	r0, r0, r0
    4940:	00fc0000 	rscseq	r0, ip, r0
    4944:	01000000 	mrseq	r0, (UNDEF: 0)
    4948:	00020000 	andeq	r0, r2, r0
    494c:	01009f30 	tsteq	r0, r0, lsr pc
    4950:	01040000 	mrseq	r0, (UNDEF: 4)
    4954:	00010000 	andeq	r0, r1, r0
    4958:	00010452 	andeq	r0, r1, r2, asr r4
    495c:	00010800 	andeq	r0, r1, r0, lsl #16
    4960:	51000100 	mrspl	r0, (UNDEF: 16)
    4964:	00000108 	andeq	r0, r0, r8, lsl #2
    4968:	00000110 	andeq	r0, r0, r0, lsl r1
    496c:	00500001 	subseq	r0, r0, r1
    4970:	00000000 	andeq	r0, r0, r0
    4974:	10000000 	andne	r0, r0, r0
    4978:	18000001 	stmdane	r0, {r0}
    497c:	01000001 	tsteq	r0, r1
    4980:	01185000 	tsteq	r8, r0
    4984:	011a0000 	tsteq	sl, r0
    4988:	00040000 	andeq	r0, r4, r0
    498c:	9f5001f3 	svcls	0x005001f3
    4990:	0000011a 	andeq	r0, r0, sl, lsl r1
    4994:	0000011e 	andeq	r0, r0, lr, lsl r1
    4998:	1e500001 	cdpne	0, 5, cr0, cr0, cr1, {0}
    499c:	28000001 	stmdacs	r0, {r0}
    49a0:	04000001 	streq	r0, [r0], #-1
    49a4:	5001f300 	andpl	pc, r1, r0, lsl #6
    49a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    49ac:	00000000 	andeq	r0, r0, r0
    49b0:	00013400 	andeq	r3, r1, r0, lsl #8
    49b4:	00013e00 	andeq	r3, r1, r0, lsl #28
    49b8:	50000100 	andpl	r0, r0, r0, lsl #2
    49bc:	0000013e 	andeq	r0, r0, lr, lsr r1
    49c0:	00000148 	andeq	r0, r0, r8, asr #2
    49c4:	01f30004 	mvnseq	r0, r4
    49c8:	00009f50 	andeq	r9, r0, r0, asr pc
    49cc:	00000000 	andeq	r0, r0, r0
    49d0:	01340000 	teqeq	r4, r0
    49d4:	01380000 	teqeq	r8, r0
    49d8:	00020000 	andeq	r0, r2, r0
    49dc:	01389f30 	teqeq	r8, r0, lsr pc
    49e0:	013c0000 	teqeq	ip, r0
    49e4:	00010000 	andeq	r0, r1, r0
    49e8:	00013c52 	andeq	r3, r1, r2, asr ip
    49ec:	00013e00 	andeq	r3, r1, r0, lsl #28
    49f0:	51000100 	mrspl	r0, (UNDEF: 16)
    49f4:	0000013e 	andeq	r0, r0, lr, lsr r1
    49f8:	00000148 	andeq	r0, r0, r8, asr #2
    49fc:	00500001 	subseq	r0, r0, r1
    4a00:	00000000 	andeq	r0, r0, r0
    4a04:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    4a08:	5a000001 	bpl	4a14 <__Stack_Size+0x4614>
    4a0c:	01000001 	tsteq	r0, r1
    4a10:	015a5000 	cmpeq	sl, r0
    4a14:	015e0000 	cmpeq	lr, r0
    4a18:	00040000 	andeq	r0, r4, r0
    4a1c:	9f5001f3 	svcls	0x005001f3
    4a20:	0000015e 	andeq	r0, r0, lr, asr r1
    4a24:	00000162 	andeq	r0, r0, r2, ror #2
    4a28:	62500001 	subsvs	r0, r0, #1
    4a2c:	68000001 	stmdavs	r0, {r0}
    4a30:	04000001 	streq	r0, [r0], #-1
    4a34:	5001f300 	andpl	pc, r1, r0, lsl #6
    4a38:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4a3c:	00000000 	andeq	r0, r0, r0
    4a40:	00017400 	andeq	r7, r1, r0, lsl #8
    4a44:	00017a00 	andeq	r7, r1, r0, lsl #20
    4a48:	50000100 	andpl	r0, r0, r0, lsl #2
    4a4c:	0000017a 	andeq	r0, r0, sl, ror r1
    4a50:	00000184 	andeq	r0, r0, r4, lsl #3
    4a54:	01f30004 	mvnseq	r0, r4
    4a58:	00009f50 	andeq	r9, r0, r0, asr pc
    4a5c:	00000000 	andeq	r0, r0, r0
    4a60:	01900000 	orrseq	r0, r0, r0
    4a64:	01940000 	orrseq	r0, r4, r0
    4a68:	00020000 	andeq	r0, r2, r0
    4a6c:	0194007d 	orrseq	r0, r4, sp, ror r0
    4a70:	02180000 	andseq	r0, r8, #0
    4a74:	00020000 	andeq	r0, r2, r0
    4a78:	0000087d 	andeq	r0, r0, sp, ror r8
    4a7c:	00000000 	andeq	r0, r0, r0
    4a80:	01900000 	orrseq	r0, r0, r0
    4a84:	01960000 	orrseq	r0, r6, r0
    4a88:	00020000 	andeq	r0, r2, r0
    4a8c:	01969f30 	orrseq	r9, r6, r0, lsr pc
    4a90:	019a0000 	orrseq	r0, sl, r0
    4a94:	00050000 	andeq	r0, r5, r0
    4a98:	1a3c0072 	bne	f04c68 <__Stack_Size+0xf04868>
    4a9c:	00019a9f 	muleq	r1, pc, sl	; <UNPREDICTABLE>
    4aa0:	0001ac00 	andeq	sl, r1, r0, lsl #24
    4aa4:	51000100 	mrspl	r0, (UNDEF: 16)
    4aa8:	000001ac 	andeq	r0, r0, ip, lsr #3
    4aac:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    4ab0:	00720005 	rsbseq	r0, r2, r5
    4ab4:	cc9f1a3c 	vldmiagt	pc, {s2-s61}
    4ab8:	d4000001 	strle	r0, [r0], #-1
    4abc:	08000001 	stmdaeq	r0, {r0}
    4ac0:	08007100 	stmdaeq	r0, {r8, ip, sp, lr}
    4ac4:	25341af0 	ldrcs	r1, [r4, #-2800]!	; 0xaf0
    4ac8:	0001dc9f 	muleq	r1, pc, ip	; <UNPREDICTABLE>
    4acc:	0001e000 	andeq	lr, r1, r0
    4ad0:	74000900 	strvc	r0, [r0], #-2304	; 0x900
    4ad4:	07000a00 	streq	r0, [r0, -r0, lsl #20]
    4ad8:	9f25381a 	svcls	0x0025381a
    4adc:	000001ea 	andeq	r0, r0, sl, ror #3
    4ae0:	000001ee 	andeq	r0, r0, lr, ror #3
    4ae4:	00740009 	rsbseq	r0, r4, r9
    4ae8:	1a38000a 	bne	e04b18 <__Stack_Size+0xe04718>
    4aec:	f89f253b 			; <UNDEFINED> instruction: 0xf89f253b
    4af0:	fc000001 	stc2	0, cr0, [r0], {1}
    4af4:	09000001 	stmdbeq	r0, {r0}
    4af8:	0a007200 	beq	21300 <__Stack_Size+0x20f00>
    4afc:	3e1ac000 	cdpcc	0, 1, cr12, cr10, cr0, {0}
    4b00:	00009f25 	andeq	r9, r0, r5, lsr #30
    4b04:	00000000 	andeq	r0, r0, r0
    4b08:	01900000 	orrseq	r0, r0, r0
    4b0c:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    4b10:	00020000 	andeq	r0, r2, r0
    4b14:	01aa9f30 			; <UNDEFINED> instruction: 0x01aa9f30
    4b18:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    4b1c:	00070000 	andeq	r0, r7, r0
    4b20:	414e0074 	hvcmi	57348	; 0xe004
    4b24:	b29f1a24 	addslt	r1, pc, #147456	; 0x24000
    4b28:	c4000001 	strgt	r0, [r0], #-1
    4b2c:	01000001 	tsteq	r0, r1
    4b30:	00005400 	andeq	r5, r0, r0, lsl #8
    4b34:	00000000 	andeq	r0, r0, r0
    4b38:	01900000 	orrseq	r0, r0, r0
    4b3c:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    4b40:	00020000 	andeq	r0, r2, r0
    4b44:	01b29f30 			; <UNDEFINED> instruction: 0x01b29f30
    4b48:	01b40000 			; <UNDEFINED> instruction: 0x01b40000
    4b4c:	00070000 	andeq	r0, r7, r0
    4b50:	3c400071 	mcrrcc	0, 7, r0, r0, cr1
    4b54:	009f1a24 	addseq	r1, pc, r4, lsr #20
    4b58:	00000000 	andeq	r0, r0, r0
    4b5c:	90000000 	andls	r0, r0, r0
    4b60:	cc000001 	stcgt	0, cr0, [r0], {1}
    4b64:	02000001 	andeq	r0, r0, #1
    4b68:	cc9f3000 	ldcgt	0, cr3, [pc], {0}
    4b6c:	d4000001 	strle	r0, [r0], #-1
    4b70:	13000001 	movwne	r0, #1
    4b74:	08007100 	stmdaeq	r0, {r8, ip, sp, lr}
    4b78:	25341af0 	ldrcs	r1, [r4, #-2800]!	; 0xaf0
    4b7c:	0067a203 	rsbeq	sl, r7, r3, lsl #4
    4b80:	01942208 	orrseq	r2, r4, r8, lsl #4
    4b84:	9f1aff08 	svcls	0x001aff08
    4b88:	000001dc 	ldrdeq	r0, [r0], -ip
    4b8c:	000001e0 	andeq	r0, r0, r0, ror #3
    4b90:	00740014 	rsbseq	r0, r4, r4, lsl r0
    4b94:	1a07000a 	bne	1c4bc4 <__Stack_Size+0x1c47c4>
    4b98:	a2032538 	andge	r2, r3, #234881024	; 0xe000000
    4b9c:	22080067 	andcs	r0, r8, #103	; 0x67
    4ba0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    4ba4:	01ea9f1a 	mvneq	r9, sl, lsl pc
    4ba8:	01ee0000 	mvneq	r0, r0
    4bac:	00140000 	andseq	r0, r4, r0
    4bb0:	000a0074 	andeq	r0, sl, r4, ror r0
    4bb4:	253b1a38 	ldrcs	r1, [fp, #-2616]!	; 0xa38
    4bb8:	0067a203 	rsbeq	sl, r7, r3, lsl #4
    4bbc:	01942208 	orrseq	r2, r4, r8, lsl #4
    4bc0:	9f1aff08 	svcls	0x001aff08
    4bc4:	000001f8 	strdeq	r0, [r0], -r8
    4bc8:	000001fc 	strdeq	r0, [r0], -ip
    4bcc:	00720014 	rsbseq	r0, r2, r4, lsl r0
    4bd0:	1ac0000a 	bne	ff004c00 <SCS_BASE+0x1eff6c00>
    4bd4:	b203253e 	andlt	r2, r3, #260046848	; 0xf800000
    4bd8:	22080067 	andcs	r0, r8, #103	; 0x67
    4bdc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    4be0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4be4:	00000000 	andeq	r0, r0, r0
    4be8:	02180000 	andseq	r0, r8, #0
    4bec:	02200000 	eoreq	r0, r0, #0
    4bf0:	00010000 	andeq	r0, r1, r0
    4bf4:	00022050 	andeq	r2, r2, r0, asr r0
    4bf8:	00022200 	andeq	r2, r2, r0, lsl #4
    4bfc:	f3000400 	vshl.u8	d0, d0, d0
    4c00:	229f5001 	addscs	r5, pc, #1
    4c04:	26000002 	strcs	r0, [r0], -r2
    4c08:	01000002 	tsteq	r0, r2
    4c0c:	02265000 	eoreq	r5, r6, #0
    4c10:	02300000 	eorseq	r0, r0, #0
    4c14:	00040000 	andeq	r0, r4, r0
    4c18:	9f5001f3 	svcls	0x005001f3
	...
    4c24:	00000230 	andeq	r0, r0, r0, lsr r2
    4c28:	00000238 	andeq	r0, r0, r8, lsr r2
    4c2c:	38500001 	ldmdacc	r0, {r0}^
    4c30:	3a000002 	bcc	4c40 <__Stack_Size+0x4840>
    4c34:	04000002 	streq	r0, [r0], #-2
    4c38:	5001f300 	andpl	pc, r1, r0, lsl #6
    4c3c:	00023a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    4c40:	00023e00 	andeq	r3, r2, r0, lsl #28
    4c44:	50000100 	andpl	r0, r0, r0, lsl #2
    4c48:	0000023e 	andeq	r0, r0, lr, lsr r2
    4c4c:	00000248 	andeq	r0, r0, r8, asr #4
    4c50:	01f30004 	mvnseq	r0, r4
    4c54:	00009f50 	andeq	r9, r0, r0, asr pc
    4c58:	00000000 	andeq	r0, r0, r0
    4c5c:	02480000 	subeq	r0, r8, #0
    4c60:	02500000 	subseq	r0, r0, #0
    4c64:	00010000 	andeq	r0, r1, r0
    4c68:	00025050 	andeq	r5, r2, r0, asr r0
    4c6c:	00025200 	andeq	r5, r2, r0, lsl #4
    4c70:	f3000400 	vshl.u8	d0, d0, d0
    4c74:	529f5001 	addspl	r5, pc, #1
    4c78:	56000002 	strpl	r0, [r0], -r2
    4c7c:	01000002 	tsteq	r0, r2
    4c80:	02565000 	subseq	r5, r6, #0
    4c84:	02600000 	rsbeq	r0, r0, #0
    4c88:	00040000 	andeq	r0, r4, r0
    4c8c:	9f5001f3 	svcls	0x005001f3
	...
    4c98:	00000260 	andeq	r0, r0, r0, ror #4
    4c9c:	00000268 	andeq	r0, r0, r8, ror #4
    4ca0:	68500001 	ldmdavs	r0, {r0}^
    4ca4:	6a000002 	bvs	4cb4 <__Stack_Size+0x48b4>
    4ca8:	04000002 	streq	r0, [r0], #-2
    4cac:	5001f300 	andpl	pc, r1, r0, lsl #6
    4cb0:	00026a9f 	muleq	r2, pc, sl	; <UNPREDICTABLE>
    4cb4:	00026e00 	andeq	r6, r2, r0, lsl #28
    4cb8:	50000100 	andpl	r0, r0, r0, lsl #2
    4cbc:	0000026e 	andeq	r0, r0, lr, ror #4
    4cc0:	00000278 	andeq	r0, r0, r8, ror r2
    4cc4:	01f30004 	mvnseq	r0, r4
    4cc8:	00009f50 	andeq	r9, r0, r0, asr pc
    4ccc:	00000000 	andeq	r0, r0, r0
    4cd0:	02780000 	rsbseq	r0, r8, #0
    4cd4:	02800000 	addeq	r0, r0, #0
    4cd8:	00010000 	andeq	r0, r1, r0
    4cdc:	00028050 	andeq	r8, r2, r0, asr r0
    4ce0:	00028200 	andeq	r8, r2, r0, lsl #4
    4ce4:	f3000400 	vshl.u8	d0, d0, d0
    4ce8:	829f5001 	addshi	r5, pc, #1
    4cec:	86000002 	strhi	r0, [r0], -r2
    4cf0:	01000002 	tsteq	r0, r2
    4cf4:	02865000 	addeq	r5, r6, #0
    4cf8:	02900000 	addseq	r0, r0, #0
    4cfc:	00040000 	andeq	r0, r4, r0
    4d00:	9f5001f3 	svcls	0x005001f3
	...
    4d0c:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
    4d10:	000002cc 	andeq	r0, r0, ip, asr #5
    4d14:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    4d18:	dc000002 	stcle	0, cr0, [r0], {2}
    4d1c:	04000002 	streq	r0, [r0], #-2
    4d20:	5001f300 	andpl	pc, r1, r0, lsl #6
    4d24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4d28:	00000000 	andeq	r0, r0, r0
    4d2c:	0002b400 	andeq	fp, r2, r0, lsl #8
    4d30:	0002b600 	andeq	fp, r2, r0, lsl #12
    4d34:	30000200 	andcc	r0, r0, r0, lsl #4
    4d38:	0002b69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
    4d3c:	0002be00 	andeq	fp, r2, r0, lsl #28
    4d40:	53000100 	movwpl	r0, #256	; 0x100
    4d44:	000002be 			; <UNDEFINED> instruction: 0x000002be
    4d48:	000002c0 	andeq	r0, r0, r0, asr #5
    4d4c:	00700005 	rsbseq	r0, r0, r5
    4d50:	c09f2535 	addsgt	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    4d54:	c6000002 	strgt	r0, [r0], -r2
    4d58:	01000002 	tsteq	r0, r2
    4d5c:	02c65300 	sbceq	r5, r6, #0
    4d60:	02c80000 	sbceq	r0, r8, #0
    4d64:	00050000 	andeq	r0, r5, r0
    4d68:	25350070 	ldrcs	r0, [r5, #-112]!	; 0x70
    4d6c:	0002c89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    4d70:	0002cc00 	andeq	ip, r2, r0, lsl #24
    4d74:	70000800 	andvc	r0, r0, r0, lsl #16
    4d78:	081a4f00 	ldmdaeq	sl, {r8, r9, sl, fp, lr}
    4d7c:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    4d80:	00000000 	andeq	r0, r0, r0
    4d84:	b4000000 	strlt	r0, [r0], #-0
    4d88:	be000002 	cdplt	0, 0, cr0, cr0, cr2, {0}
    4d8c:	02000002 	andeq	r0, r0, #2
    4d90:	be9f3000 	cdplt	0, 9, cr3, cr15, cr0, {0}
    4d94:	c0000002 	andgt	r0, r0, r2
    4d98:	01000002 	tsteq	r0, r2
    4d9c:	02c05300 	sbceq	r5, r0, #0
    4da0:	02c60000 	sbceq	r0, r6, #0
    4da4:	00020000 	andeq	r0, r2, r0
    4da8:	02c69f30 	sbceq	r9, r6, #192	; 0xc0
    4dac:	02dc0000 	sbcseq	r0, ip, #0
    4db0:	00010000 	andeq	r0, r1, r0
    4db4:	00000053 	andeq	r0, r0, r3, asr r0
    4db8:	00000000 	andeq	r0, r0, r0
    4dbc:	0002b400 	andeq	fp, r2, r0, lsl #8
    4dc0:	0002c800 	andeq	ip, r2, r0, lsl #16
    4dc4:	30000200 	andcc	r0, r0, r0, lsl #4
    4dc8:	0002c89f 	muleq	r2, pc, r8	; <UNPREDICTABLE>
    4dcc:	0002cc00 	andeq	ip, r2, r0, lsl #24
    4dd0:	73000d00 	movwvc	r0, #3328	; 0xd00
    4dd4:	4f007000 	svcmi	0x00007000
    4dd8:	1aff081a 	bne	fffc6e48 <SCS_BASE+0x1ffb8e48>
    4ddc:	9f1a3125 	svcls	0x001a3125
	...
    4de8:	000002dc 	ldrdeq	r0, [r0], -ip
    4dec:	000002de 	ldrdeq	r0, [r0], -lr
    4df0:	007d0002 	rsbseq	r0, sp, r2
    4df4:	000002de 	ldrdeq	r0, [r0], -lr
    4df8:	00000306 	andeq	r0, r0, r6, lsl #6
    4dfc:	107d0002 	rsbsne	r0, sp, r2
	...
    4e08:	000002e2 	andeq	r0, r0, r2, ror #5
    4e0c:	000002ec 	andeq	r0, r0, ip, ror #5
    4e10:	74910002 	ldrvc	r0, [r1], #2
    4e14:	000002ee 	andeq	r0, r0, lr, ror #5
    4e18:	00000306 	andeq	r0, r0, r6, lsl #6
    4e1c:	00520001 	subseq	r0, r2, r1
    4e20:	00000000 	andeq	r0, r0, r0
    4e24:	e2000000 	and	r0, r0, #0
    4e28:	fe000002 	cdp2	0, 0, cr0, cr0, cr2, {0}
    4e2c:	02000002 	andeq	r0, r0, #2
    4e30:	fe9f3000 	cdp2	0, 9, cr3, cr15, cr0, {0}
    4e34:	00000002 	andeq	r0, r0, r2
    4e38:	07000003 	streq	r0, [r0, -r3]
    4e3c:	48007000 	stmdami	r0, {ip, sp, lr}
    4e40:	9f2e3024 	svcls	0x002e3024
	...
    4e4c:	000002e8 	andeq	r0, r0, r8, ror #5
    4e50:	000002f2 	strdeq	r0, [r0], -r2
    4e54:	00500001 	subseq	r0, r0, r1
    4e58:	00000000 	andeq	r0, r0, r0
    4e5c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4e60:	24000003 	strcs	r0, [r0], #-3
    4e64:	01000003 	tsteq	r0, r3
    4e68:	03245000 	teqeq	r4, #0
    4e6c:	032c0000 	teqeq	ip, #0
    4e70:	00040000 	andeq	r0, r4, r0
    4e74:	9f5001f3 	svcls	0x005001f3
	...
    4e80:	00000318 	andeq	r0, r0, r8, lsl r3
    4e84:	0000031c 	andeq	r0, r0, ip, lsl r3
    4e88:	9f300002 	svcls	0x00300002
    4e8c:	0000031c 	andeq	r0, r0, ip, lsl r3
    4e90:	00000324 	andeq	r0, r0, r4, lsr #6
    4e94:	0070000b 	rsbseq	r0, r0, fp
    4e98:	711aff08 	tstvc	sl, r8, lsl #30
    4e9c:	2e301a00 	vaddcs.f32	s2, s0, s0
    4ea0:	0003249f 	muleq	r3, pc, r4	; <UNPREDICTABLE>
    4ea4:	00032c00 	andeq	r2, r3, r0, lsl #24
    4ea8:	f3000c00 			; <UNDEFINED> instruction: 0xf3000c00
    4eac:	ff085001 			; <UNDEFINED> instruction: 0xff085001
    4eb0:	1a00711a 	bne	21320 <__Stack_Size+0x20f20>
    4eb4:	009f2e30 	addseq	r2, pc, r0, lsr lr	; <UNPREDICTABLE>
    4eb8:	00000000 	andeq	r0, r0, r0
    4ebc:	24000000 	strcs	r0, [r0], #-0
    4ec0:	34000000 	strcc	r0, [r0], #-0
    4ec4:	01000000 	mrseq	r0, (UNDEF: 0)
    4ec8:	00345000 	eorseq	r5, r4, r0
    4ecc:	00380000 	eorseq	r0, r8, r0
    4ed0:	00030000 	andeq	r0, r3, r0
    4ed4:	389f7e70 	ldmcc	pc, {r4, r5, r6, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    4ed8:	40000000 	andmi	r0, r0, r0
    4edc:	04000000 	streq	r0, [r0], #-0
    4ee0:	5001f300 	andpl	pc, r1, r0, lsl #6
    4ee4:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4ee8:	00004c00 	andeq	r4, r0, r0, lsl #24
    4eec:	70000300 	andvc	r0, r0, r0, lsl #6
    4ef0:	00009f7e 	andeq	r9, r0, lr, ror pc
    4ef4:	00000000 	andeq	r0, r0, r0
    4ef8:	004c0000 	subeq	r0, ip, r0
    4efc:	00560000 	subseq	r0, r6, r0
    4f00:	00010000 	andeq	r0, r1, r0
    4f04:	00005650 	andeq	r5, r0, r0, asr r6
    4f08:	00005800 	andeq	r5, r0, r0, lsl #16
    4f0c:	f3000400 	vshl.u8	d0, d0, d0
    4f10:	589f5001 	ldmpl	pc, {r0, ip, lr}	; <UNPREDICTABLE>
    4f14:	5c000000 	stcpl	0, cr0, [r0], {-0}
    4f18:	01000000 	mrseq	r0, (UNDEF: 0)
    4f1c:	005c5000 	subseq	r5, ip, r0
    4f20:	00640000 	rsbeq	r0, r4, r0
    4f24:	00040000 	andeq	r0, r4, r0
    4f28:	9f5001f3 	svcls	0x005001f3
	...
    4f34:	00000070 	andeq	r0, r0, r0, ror r0
    4f38:	00000080 	andeq	r0, r0, r0, lsl #1
    4f3c:	80500001 	subshi	r0, r0, r1
    4f40:	8c000000 	stchi	0, cr0, [r0], {-0}
    4f44:	04000000 	streq	r0, [r0], #-0
    4f48:	5001f300 	andpl	pc, r1, r0, lsl #6
    4f4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f50:	00000000 	andeq	r0, r0, r0
    4f54:	00007000 	andeq	r7, r0, r0
    4f58:	00007a00 	andeq	r7, r0, r0, lsl #20
    4f5c:	30000200 	andcc	r0, r0, r0, lsl #4
    4f60:	00007a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    4f64:	00008c00 	andeq	r8, r0, r0, lsl #24
    4f68:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4f74:	00000070 	andeq	r0, r0, r0, ror r0
    4f78:	00000080 	andeq	r0, r0, r0, lsl #1
    4f7c:	00700008 	rsbseq	r0, r0, r8
    4f80:	ff082533 			; <UNDEFINED> instruction: 0xff082533
    4f84:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4f88:	00000000 	andeq	r0, r0, r0
    4f8c:	00700000 	rsbseq	r0, r0, r0
    4f90:	007c0000 	rsbseq	r0, ip, r0
    4f94:	00020000 	andeq	r0, r2, r0
    4f98:	007c9f30 	rsbseq	r9, ip, r0, lsr pc
    4f9c:	00800000 	addeq	r0, r0, r0
    4fa0:	000b0000 	andeq	r0, fp, r0
    4fa4:	00700071 	rsbseq	r0, r0, r1, ror r0
    4fa8:	251aff08 	ldrcs	pc, [sl, #-3848]	; 0xf08
    4fac:	009f1a31 	addseq	r1, pc, r1, lsr sl	; <UNPREDICTABLE>
	...
    4fb8:	02000000 	andeq	r0, r0, #0
    4fbc:	02000000 	andeq	r0, r0, #0
    4fc0:	02007d00 	andeq	r7, r0, #0
    4fc4:	94000000 	strls	r0, [r0], #-0
    4fc8:	02000000 	andeq	r0, r0, #0
    4fcc:	00087d00 	andeq	r7, r8, r0, lsl #26
	...
    4fd8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4fdc:	01000000 	mrseq	r0, (UNDEF: 0)
    4fe0:	001e5000 	andseq	r5, lr, r0
    4fe4:	002a0000 	eoreq	r0, sl, r0
    4fe8:	00040000 	andeq	r0, r4, r0
    4fec:	9f5001f3 	svcls	0x005001f3
    4ff0:	0000002a 	andeq	r0, r0, sl, lsr #32
    4ff4:	0000003e 	andeq	r0, r0, lr, lsr r0
    4ff8:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    4ffc:	50000000 	andpl	r0, r0, r0
    5000:	04000000 	streq	r0, [r0], #-0
    5004:	5001f300 	andpl	pc, r1, r0, lsl #6
    5008:	0000509f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    500c:	00005400 	andeq	r5, r0, r0, lsl #8
    5010:	50000100 	andpl	r0, r0, r0, lsl #2
    5014:	00000054 	andeq	r0, r0, r4, asr r0
    5018:	00000060 	andeq	r0, r0, r0, rrx
    501c:	01f30004 	mvnseq	r0, r4
    5020:	00609f50 	rsbeq	r9, r0, r0, asr pc
    5024:	00640000 	rsbeq	r0, r4, r0
    5028:	00010000 	andeq	r0, r1, r0
    502c:	00006450 	andeq	r6, r0, r0, asr r4
    5030:	00007000 	andeq	r7, r0, r0
    5034:	f3000400 	vshl.u8	d0, d0, d0
    5038:	709f5001 	addsvc	r5, pc, r1
    503c:	74000000 	strvc	r0, [r0], #-0
    5040:	01000000 	mrseq	r0, (UNDEF: 0)
    5044:	00745000 	rsbseq	r5, r4, r0
    5048:	00880000 	addeq	r0, r8, r0
    504c:	00040000 	andeq	r0, r4, r0
    5050:	9f5001f3 	svcls	0x005001f3
    5054:	00000088 	andeq	r0, r0, r8, lsl #1
    5058:	00000094 	muleq	r0, r4, r0
    505c:	00500001 	subseq	r0, r0, r1
    5060:	00000000 	andeq	r0, r0, r0
    5064:	94000000 	strls	r0, [r0], #-0
    5068:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    506c:	02000000 	andeq	r0, r0, #0
    5070:	98007d00 	stmdals	r0, {r8, sl, fp, ip, sp, lr}
    5074:	d4000000 	strle	r0, [r0], #-0
    5078:	02000000 	andeq	r0, r0, #0
    507c:	d40c7d00 	strle	r7, [ip], #-3328	; 0xd00
    5080:	1c000000 	stcne	0, cr0, [r0], {-0}
    5084:	02000001 	andeq	r0, r0, #1
    5088:	00287d00 	eoreq	r7, r8, r0, lsl #26
    508c:	00000000 	andeq	r0, r0, r0
    5090:	94000000 	strls	r0, [r0], #-0
    5094:	a0000000 	andge	r0, r0, r0
    5098:	01000000 	mrseq	r0, (UNDEF: 0)
    509c:	00a05000 	adceq	r5, r0, r0
    50a0:	011c0000 	tsteq	ip, r0
    50a4:	00010000 	andeq	r0, r1, r0
    50a8:	00000054 	andeq	r0, r0, r4, asr r0
    50ac:	00000000 	andeq	r0, r0, r0
    50b0:	00009400 	andeq	r9, r0, r0, lsl #8
    50b4:	0000a400 	andeq	sl, r0, r0, lsl #8
    50b8:	51000100 	mrspl	r0, (UNDEF: 16)
    50bc:	000000a4 	andeq	r0, r0, r4, lsr #1
    50c0:	0000011c 	andeq	r0, r0, ip, lsl r1
    50c4:	00550001 	subseq	r0, r5, r1
    50c8:	00000000 	andeq	r0, r0, r0
    50cc:	94000000 	strls	r0, [r0], #-0
    50d0:	a0000000 	andge	r0, r0, r0
    50d4:	02000000 	andeq	r0, r0, #0
    50d8:	a09f3000 	addsge	r3, pc, r0
    50dc:	a6000000 	strge	r0, [r0], -r0
    50e0:	0b000000 	bleq	50e8 <__Stack_Size+0x4ce8>
    50e4:	0b007000 	bleq	210ec <__Stack_Size+0x20cec>
    50e8:	0a1acfff 	beq	6b90ec <__Stack_Size+0x6b8cec>
    50ec:	9f1affff 	svcls	0x001affff
    50f0:	000000a6 	andeq	r0, r0, r6, lsr #1
    50f4:	000000aa 	andeq	r0, r0, sl, lsr #1
    50f8:	00710007 	rsbseq	r0, r1, r7
    50fc:	1affff0a 	bne	4d2c <__Stack_Size+0x492c>
    5100:	0000aa9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    5104:	0000b200 	andeq	fp, r0, r0, lsl #4
    5108:	73000b00 	movwvc	r0, #2816	; 0xb00
    510c:	e9f30b00 	ldmib	r3!, {r8, r9, fp}^
    5110:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    5114:	00c69f1a 	sbceq	r9, r6, sl, lsl pc
    5118:	00ce0000 	sbceq	r0, lr, r0
    511c:	00070000 	andeq	r0, r7, r0
    5120:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    5124:	ce9f1aff 	mrcgt	10, 4, r1, cr15, cr15, {7}
    5128:	d6000000 	strle	r0, [r0], -r0
    512c:	0b000000 	bleq	5134 <__Stack_Size+0x4d34>
    5130:	0b007300 	bleq	21d38 <__Stack_Size+0x21938>
    5134:	0a1afcff 	beq	6c4538 <__Stack_Size+0x6c4138>
    5138:	9f1affff 	svcls	0x001affff
    513c:	000000d6 	ldrdeq	r0, [r0], -r6
    5140:	000000dd 	ldrdeq	r0, [r0], -sp
    5144:	00710007 	rsbseq	r0, r1, r7
    5148:	1affff0a 	bne	4d78 <__Stack_Size+0x4978>
    514c:	0000fc9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    5150:	00010e00 	andeq	r0, r1, r0, lsl #28
    5154:	52000100 	andpl	r0, r0, #0
    5158:	0000010e 	andeq	r0, r0, lr, lsl #2
    515c:	00000110 	andeq	r0, r0, r0, lsl r1
    5160:	00710006 	rsbseq	r0, r1, r6
    5164:	9f210072 	svcls	0x00210072
    5168:	00000110 	andeq	r0, r0, r0, lsl r1
    516c:	0000011c 	andeq	r0, r0, ip, lsl r1
    5170:	00520001 	subseq	r0, r2, r1
    5174:	00000000 	andeq	r0, r0, r0
    5178:	94000000 	strls	r0, [r0], #-0
    517c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    5180:	02000000 	andeq	r0, r0, #0
    5184:	e89f3000 	ldm	pc, {ip, sp}	; <UNPREDICTABLE>
    5188:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    518c:	01000000 	mrseq	r0, (UNDEF: 0)
    5190:	00ee5000 	rsceq	r5, lr, r0
    5194:	011c0000 	tsteq	ip, r0
    5198:	00260000 	eoreq	r0, r6, r0
    519c:	91066491 			; <UNDEFINED> instruction: 0x91066491
    51a0:	000c0668 	andeq	r0, ip, r8, ror #12
    51a4:	74400138 	strbvc	r0, [r0], #-312	; 0x138
    51a8:	38000c00 	stmdacc	r0, {sl, fp}
    51ac:	28294001 	stmdacs	r9!, {r0, lr}
    51b0:	13160001 	tstne	r6, #1
    51b4:	000c0074 	andeq	r0, ip, r4, ror r0
    51b8:	2e400138 	mcrcs	1, 2, r0, cr0, cr8, {1}
    51bc:	16000128 	strne	r0, [r0], -r8, lsr #2
    51c0:	00009f13 	andeq	r9, r0, r3, lsl pc
    51c4:	00000000 	andeq	r0, r0, r0
    51c8:	00940000 	addseq	r0, r4, r0
    51cc:	00f40000 	rscseq	r0, r4, r0
    51d0:	00020000 	andeq	r0, r2, r0
    51d4:	00f49f30 	rscseq	r9, r4, r0, lsr pc
    51d8:	01020000 	mrseq	r0, (UNDEF: 2)
    51dc:	00010000 	andeq	r0, r1, r0
    51e0:	00010251 	andeq	r0, r1, r1, asr r2
    51e4:	00011c00 	andeq	r1, r1, r0, lsl #24
    51e8:	91003400 	tstls	r0, r0, lsl #8
    51ec:	68910664 	ldmvs	r1, {r2, r5, r6, r9, sl}
    51f0:	38000c06 	stmdacc	r0, {r1, r2, sl, fp}
    51f4:	00744001 	rsbseq	r4, r4, r1
    51f8:	0138000c 	teqeq	r8, ip
    51fc:	01282940 	teqeq	r8, r0, asr #18
    5200:	74131600 	ldrvc	r1, [r3], #-1536	; 0x600
    5204:	38000c00 	stmdacc	r0, {sl, fp}
    5208:	282e4001 	stmdacs	lr!, {r0, lr}
    520c:	13160001 	tstne	r6, #1
    5210:	25f71e49 	ldrbcs	r1, [r7, #3657]!	; 0xe49
    5214:	32060075 	andcc	r0, r6, #117	; 0x75
    5218:	1b25f724 	blne	982eb0 <__Stack_Size+0x982ab0>
    521c:	009f00f7 	ldrsheq	r0, [pc], r7
    5220:	00000000 	andeq	r0, r0, r0
    5224:	94000000 	strls	r0, [r0], #-0
    5228:	fc000000 	stc2	0, cr0, [r0], {-0}
    522c:	02000000 	andeq	r0, r0, #0
    5230:	fc9f3000 	ldc2	0, cr3, [pc], {0}
    5234:	02000000 	andeq	r0, r0, #0
    5238:	0b000001 	bleq	5244 <__Stack_Size+0x4e44>
    523c:	72007100 	andvc	r7, r0, #0
    5240:	08253400 	stmdaeq	r5!, {sl, ip, sp}
    5244:	9f1c1e64 	svcls	0x001c1e64
    5248:	00000102 	andeq	r0, r0, r2, lsl #2
    524c:	0000010e 	andeq	r0, r0, lr, lsl #2
    5250:	0e510001 	cdpeq	0, 5, cr0, cr1, cr1, {0}
    5254:	10000001 	andne	r0, r0, r1
    5258:	3c000001 	stccc	0, cr0, [r0], {1}
    525c:	06649100 	strbteq	r9, [r4], -r0, lsl #2
    5260:	0c066891 	stceq	8, cr6, [r6], {145}	; 0x91
    5264:	40013800 	andmi	r3, r1, r0, lsl #16
    5268:	000c0074 	andeq	r0, ip, r4, ror r0
    526c:	29400138 	stmdbcs	r0, {r3, r4, r5, r8}^
    5270:	16000128 	strne	r0, [r0], -r8, lsr #2
    5274:	0c007413 	cfstrseq	mvf7, [r0], {19}
    5278:	40013800 	andmi	r3, r1, r0, lsl #16
    527c:	0001282e 	andeq	r2, r1, lr, lsr #16
    5280:	1e491316 	mcrne	3, 2, r1, cr9, cr6, {0}
    5284:	007525f7 	ldrshteq	r2, [r5], #-87	; 0xffffffa9
    5288:	f7243206 			; <UNDEFINED> instruction: 0xf7243206
    528c:	00f71b25 	rscseq	r1, r7, r5, lsr #22
    5290:	25340072 	ldrcs	r0, [r4, #-114]!	; 0x72
    5294:	1c1e6408 	cfldrsne	mvf6, [lr], {8}
    5298:	0001109f 	muleq	r1, pc, r0	; <UNPREDICTABLE>
    529c:	00011c00 	andeq	r1, r1, r0, lsl #24
    52a0:	91007800 	tstls	r0, r0, lsl #16
    52a4:	68910664 	ldmvs	r1, {r2, r5, r6, r9, sl}
    52a8:	38000c06 	stmdacc	r0, {r1, r2, sl, fp}
    52ac:	00744001 	rsbseq	r4, r4, r1
    52b0:	0138000c 	teqeq	r8, ip
    52b4:	01282940 	teqeq	r8, r0, asr #18
    52b8:	74131600 	ldrvc	r1, [r3], #-1536	; 0x600
    52bc:	38000c00 	stmdacc	r0, {sl, fp}
    52c0:	282e4001 	stmdacs	lr!, {r0, lr}
    52c4:	13160001 	tstne	r6, #1
    52c8:	25f71e49 	ldrbcs	r1, [r7, #3657]!	; 0xe49
    52cc:	32060075 	andcc	r0, r6, #117	; 0x75
    52d0:	1b25f724 	blne	982f68 <__Stack_Size+0x982b68>
    52d4:	649100f7 	ldrvs	r0, [r1], #247	; 0xf7
    52d8:	06689106 	strbteq	r9, [r8], -r6, lsl #2
    52dc:	0138000c 	teqeq	r8, ip
    52e0:	0c007440 	cfstrseq	mvf7, [r0], {64}	; 0x40
    52e4:	40013800 	andmi	r3, r1, r0, lsl #16
    52e8:	00012829 	andeq	r2, r1, r9, lsr #16
    52ec:	00741316 	rsbseq	r1, r4, r6, lsl r3
    52f0:	0138000c 	teqeq	r8, ip
    52f4:	01282e40 	teqeq	r8, r0, asr #28
    52f8:	49131600 	ldmdbmi	r3, {r9, sl, ip}
    52fc:	7525f71e 	strvc	pc, [r5, #-1822]!	; 0x71e
    5300:	24320600 	ldrtcs	r0, [r2], #-1536	; 0x600
    5304:	f71b25f7 			; <UNDEFINED> instruction: 0xf71b25f7
    5308:	0825f700 	stmdaeq	r5!, {r8, r9, sl, ip, sp, lr, pc}
    530c:	1b25f764 	blne	9830a4 <__Stack_Size+0x982ca4>
    5310:	243400f7 	ldrtcs	r0, [r4], #-247	; 0xf7
    5314:	64082534 	strvs	r2, [r8], #-1332	; 0x534
    5318:	009f1c1e 	addseq	r1, pc, lr, lsl ip	; <UNPREDICTABLE>
    531c:	00000000 	andeq	r0, r0, r0
    5320:	32000000 	andcc	r0, r0, #0
    5324:	36000001 	strcc	r0, [r0], -r1
    5328:	02000001 	andeq	r0, r0, #1
    532c:	36007d00 	strcc	r7, [r0], -r0, lsl #26
    5330:	52000001 	andpl	r0, r0, #1
    5334:	02000001 	andeq	r0, r0, #1
    5338:	00087d00 	andeq	r7, r8, r0, lsl #26
    533c:	00000000 	andeq	r0, r0, r0
    5340:	32000000 	andcc	r0, r0, #0
    5344:	40000001 	andmi	r0, r0, r1
    5348:	01000001 	tsteq	r0, r1
    534c:	01405100 	mrseq	r5, (UNDEF: 80)
    5350:	01520000 	cmpeq	r2, r0
    5354:	00040000 	andeq	r0, r4, r0
    5358:	9f5101f3 	svcls	0x005101f3
	...
    5364:	00000132 	andeq	r0, r0, r2, lsr r1
    5368:	00000142 	andeq	r0, r0, r2, asr #2
    536c:	9f300002 	svcls	0x00300002
    5370:	00000142 	andeq	r0, r0, r2, asr #2
    5374:	0000014a 	andeq	r0, r0, sl, asr #2
    5378:	0072000b 	rsbseq	r0, r2, fp
    537c:	1af0ff0b 	bne	ffc44fb0 <SCS_BASE+0x1fc36fb0>
    5380:	1affff0a 	bne	4fb0 <__Stack_Size+0x4bb0>
    5384:	00014e9f 	muleq	r1, pc, lr	; <UNPREDICTABLE>
    5388:	00015200 	andeq	r5, r1, r0, lsl #4
    538c:	73000700 	movwvc	r0, #1792	; 0x700
    5390:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    5394:	00009f1a 	andeq	r9, r0, sl, lsl pc
    5398:	00000000 	andeq	r0, r0, r0
    539c:	015e0000 	cmpeq	lr, r0
    53a0:	01640000 	cmneq	r4, r0
    53a4:	00010000 	andeq	r0, r1, r0
    53a8:	00016451 	andeq	r6, r1, r1, asr r4
    53ac:	00016a00 	andeq	r6, r1, r0, lsl #20
    53b0:	f3000400 	vshl.u8	d0, d0, d0
    53b4:	6a9f5101 	bvs	fe7d97c0 <SCS_BASE+0x1e7cb7c0>
    53b8:	6e000001 	cdpvs	0, 0, cr0, cr0, cr1, {0}
    53bc:	01000001 	tsteq	r0, r1
    53c0:	016e5100 	cmneq	lr, r0, lsl #2
    53c4:	01760000 	cmneq	r6, r0
    53c8:	00040000 	andeq	r0, r4, r0
    53cc:	9f5101f3 	svcls	0x005101f3
	...
    53d8:	00000176 	andeq	r0, r0, r6, ror r1
    53dc:	0000017c 	andeq	r0, r0, ip, ror r1
    53e0:	007d0002 	rsbseq	r0, sp, r2
    53e4:	0000017c 	andeq	r0, r0, ip, ror r1
    53e8:	000001aa 	andeq	r0, r0, sl, lsr #3
    53ec:	087d0002 	ldmdaeq	sp!, {r1}^
	...
    53f8:	00000176 	andeq	r0, r0, r6, ror r1
    53fc:	0000018c 	andeq	r0, r0, ip, lsl #3
    5400:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    5404:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
    5408:	03000001 	movweq	r0, #1
    540c:	9f747000 	svcls	0x00747000
    5410:	0000018e 	andeq	r0, r0, lr, lsl #3
    5414:	00000194 	muleq	r0, r4, r1
    5418:	94500001 	ldrbls	r0, [r0], #-1
    541c:	96000001 	strls	r0, [r0], -r1
    5420:	03000001 	movweq	r0, #1
    5424:	9f707000 	svcls	0x00707000
    5428:	00000196 	muleq	r0, r6, r1
    542c:	00000198 	muleq	r0, r8, r1
    5430:	98500001 	ldmdals	r0, {r0}^
    5434:	aa000001 	bge	5440 <__Stack_Size+0x5040>
    5438:	04000001 	streq	r0, [r0], #-1
    543c:	5001f300 	andpl	pc, r1, r0, lsl #6
    5440:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5444:	00000000 	andeq	r0, r0, r0
    5448:	00017600 	andeq	r7, r1, r0, lsl #12
    544c:	00018200 	andeq	r8, r1, r0, lsl #4
    5450:	51000100 	mrspl	r0, (UNDEF: 16)
    5454:	00000182 	andeq	r0, r0, r2, lsl #3
    5458:	000001aa 	andeq	r0, r0, sl, lsr #3
    545c:	01f30004 	mvnseq	r0, r4
    5460:	00009f51 	andeq	r9, r0, r1, asr pc
    5464:	00000000 	andeq	r0, r0, r0
    5468:	01760000 	cmneq	r6, r0
    546c:	01a00000 	moveq	r0, r0
    5470:	00010000 	andeq	r0, r1, r0
    5474:	0001a052 	andeq	sl, r1, r2, asr r0
    5478:	0001a200 	andeq	sl, r1, r0, lsl #4
    547c:	f3000400 	vshl.u8	d0, d0, d0
    5480:	a29f5201 	addsge	r5, pc, #268435456	; 0x10000000
    5484:	a6000001 	strge	r0, [r0], -r1
    5488:	01000001 	tsteq	r0, r1
    548c:	01a65200 			; <UNDEFINED> instruction: 0x01a65200
    5490:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    5494:	00040000 	andeq	r0, r4, r0
    5498:	9f5201f3 	svcls	0x005201f3
	...
    54a4:	00000176 	andeq	r0, r0, r6, ror r1
    54a8:	0000017a 	andeq	r0, r0, sl, ror r1
    54ac:	9f300002 	svcls	0x00300002
    54b0:	0000017a 	andeq	r0, r0, sl, ror r1
    54b4:	0000019a 	muleq	r0, sl, r1
    54b8:	00530001 	subseq	r0, r3, r1
    54bc:	00000000 	andeq	r0, r0, r0
    54c0:	76000000 	strvc	r0, [r0], -r0
    54c4:	7a000001 	bvc	54d0 <__Stack_Size+0x50d0>
    54c8:	02000001 	andeq	r0, r0, #1
    54cc:	7a9f3000 	bvc	fe7d14d4 <SCS_BASE+0x1e7c34d4>
    54d0:	82000001 	andhi	r0, r0, #1
    54d4:	09000001 	stmdbeq	r0, {r0}
    54d8:	4f007100 	svcmi	0x00007100
    54dc:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    54e0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    54e4:	00000000 	andeq	r0, r0, r0
    54e8:	01760000 	cmneq	r6, r0
    54ec:	01880000 	orreq	r0, r8, r0
    54f0:	00020000 	andeq	r0, r2, r0
    54f4:	01889f30 	orreq	r9, r8, r0, lsr pc
    54f8:	01aa0000 			; <UNDEFINED> instruction: 0x01aa0000
    54fc:	00010000 	andeq	r0, r1, r0
    5500:	00000051 	andeq	r0, r0, r1, asr r0
    5504:	00000000 	andeq	r0, r0, r0
    5508:	0001aa00 	andeq	sl, r1, r0, lsl #20
    550c:	0001b200 	andeq	fp, r1, r0, lsl #4
    5510:	51000100 	mrspl	r0, (UNDEF: 16)
    5514:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    5518:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
    551c:	01f30004 	mvnseq	r0, r4
    5520:	01b49f51 			; <UNDEFINED> instruction: 0x01b49f51
    5524:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    5528:	00010000 	andeq	r0, r1, r0
    552c:	0001b851 	andeq	fp, r1, r1, asr r8
    5530:	0001bc00 	andeq	fp, r1, r0, lsl #24
    5534:	f3000400 	vshl.u8	d0, d0, d0
    5538:	009f5101 	addseq	r5, pc, r1, lsl #2
    553c:	00000000 	andeq	r0, r0, r0
    5540:	bc000000 	stclt	0, cr0, [r0], {-0}
    5544:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
    5548:	01000001 	tsteq	r0, r1
    554c:	01ce5100 	biceq	r5, lr, r0, lsl #2
    5550:	01d20000 	bicseq	r0, r2, r0
    5554:	00040000 	andeq	r0, r4, r0
    5558:	9f5101f3 	svcls	0x005101f3
	...
    5564:	000001d2 	ldrdeq	r0, [r0], -r2
    5568:	000001e4 	andeq	r0, r0, r4, ror #3
    556c:	e4510001 	ldrb	r0, [r1], #-1
    5570:	e8000001 	stmda	r0, {r0}
    5574:	04000001 	streq	r0, [r0], #-1
    5578:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    557c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5580:	00000000 	andeq	r0, r0, r0
    5584:	0001e800 	andeq	lr, r1, r0, lsl #16
    5588:	0001ee00 	andeq	lr, r1, r0, lsl #28
    558c:	51000100 	mrspl	r0, (UNDEF: 16)
    5590:	000001ee 	andeq	r0, r0, lr, ror #3
    5594:	000001f4 	strdeq	r0, [r0], -r4
    5598:	01f30004 	mvnseq	r0, r4
    559c:	01f49f51 	mvnseq	r9, r1, asr pc
    55a0:	01f80000 	mvnseq	r0, r0
    55a4:	00010000 	andeq	r0, r1, r0
    55a8:	0001f851 	andeq	pc, r1, r1, asr r8	; <UNPREDICTABLE>
    55ac:	00020000 	andeq	r0, r2, r0
    55b0:	f3000400 	vshl.u8	d0, d0, d0
    55b4:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    55c0:	12000002 	andne	r0, r0, #2
    55c4:	01000002 	tsteq	r0, r2
    55c8:	02125100 	andseq	r5, r2, #0
    55cc:	02160000 	andseq	r0, r6, #0
    55d0:	00040000 	andeq	r0, r4, r0
    55d4:	9f5101f3 	svcls	0x005101f3
	...
    55e0:	00000216 	andeq	r0, r0, r6, lsl r2
    55e4:	0000021c 	andeq	r0, r0, ip, lsl r2
    55e8:	1c510001 	mrrcne	0, 0, r0, r1, cr1
    55ec:	22000002 	andcs	r0, r0, #2
    55f0:	04000002 	streq	r0, [r0], #-2
    55f4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    55f8:	0002229f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    55fc:	00022600 	andeq	r2, r2, r0, lsl #12
    5600:	51000100 	mrspl	r0, (UNDEF: 16)
    5604:	00000226 	andeq	r0, r0, r6, lsr #4
    5608:	0000022e 	andeq	r0, r0, lr, lsr #4
    560c:	01f30004 	mvnseq	r0, r4
    5610:	00009f51 	andeq	r9, r0, r1, asr pc
    5614:	00000000 	andeq	r0, r0, r0
    5618:	022e0000 	eoreq	r0, lr, #0
    561c:	02300000 	eorseq	r0, r0, #0
    5620:	00010000 	andeq	r0, r1, r0
    5624:	00023051 	andeq	r3, r2, r1, asr r0
    5628:	00023600 	andeq	r3, r2, r0, lsl #12
    562c:	f3000400 	vshl.u8	d0, d0, d0
    5630:	009f5101 	addseq	r5, pc, r1, lsl #2
    5634:	00000000 	andeq	r0, r0, r0
    5638:	36000000 	strcc	r0, [r0], -r0
    563c:	38000002 	stmdacc	r0, {r1}
    5640:	01000002 	tsteq	r0, r2
    5644:	02385000 	eorseq	r5, r8, #0
    5648:	023e0000 	eorseq	r0, lr, #0
    564c:	00040000 	andeq	r0, r4, r0
    5650:	9f5001f3 	svcls	0x005001f3
	...
    565c:	0000024a 	andeq	r0, r0, sl, asr #4
    5660:	00000258 	andeq	r0, r0, r8, asr r2
    5664:	58510001 	ldmdapl	r1, {r0}^
    5668:	5c000002 	stcpl	0, cr0, [r0], {2}
    566c:	04000002 	streq	r0, [r0], #-2
    5670:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5674:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5678:	00000000 	andeq	r0, r0, r0
    567c:	00025c00 	andeq	r5, r2, r0, lsl #24
    5680:	00026a00 	andeq	r6, r2, r0, lsl #20
    5684:	51000100 	mrspl	r0, (UNDEF: 16)
    5688:	0000026a 	andeq	r0, r0, sl, ror #4
    568c:	0000026e 	andeq	r0, r0, lr, ror #4
    5690:	01f30004 	mvnseq	r0, r4
    5694:	00009f51 	andeq	r9, r0, r1, asr pc
    5698:	00000000 	andeq	r0, r0, r0
    569c:	026e0000 	rsbeq	r0, lr, #0
    56a0:	02740000 	rsbseq	r0, r4, #0
    56a4:	00010000 	andeq	r0, r1, r0
    56a8:	00027451 	andeq	r7, r2, r1, asr r4
    56ac:	00027a00 	andeq	r7, r2, r0, lsl #20
    56b0:	f3000400 	vshl.u8	d0, d0, d0
    56b4:	7a9f5101 	bvc	fe7d9ac0 <SCS_BASE+0x1e7cbac0>
    56b8:	7e000002 	cdpvc	0, 0, cr0, cr0, cr2, {0}
    56bc:	01000002 	tsteq	r0, r2
    56c0:	027e5100 	rsbseq	r5, lr, #0
    56c4:	02860000 	addeq	r0, r6, #0
    56c8:	00040000 	andeq	r0, r4, r0
    56cc:	9f5101f3 	svcls	0x005101f3
	...
    56d8:	00000286 	andeq	r0, r0, r6, lsl #5
    56dc:	0000028c 	andeq	r0, r0, ip, lsl #5
    56e0:	8c510001 	mrrchi	0, 0, r0, r1, cr1
    56e4:	92000002 	andls	r0, r0, #2
    56e8:	04000002 	streq	r0, [r0], #-2
    56ec:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    56f0:	0002929f 	muleq	r2, pc, r2	; <UNPREDICTABLE>
    56f4:	00029600 	andeq	r9, r2, r0, lsl #12
    56f8:	51000100 	mrspl	r0, (UNDEF: 16)
    56fc:	00000296 	muleq	r0, r6, r2
    5700:	0000029e 	muleq	r0, lr, r2
    5704:	01f30004 	mvnseq	r0, r4
    5708:	00009f51 	andeq	r9, r0, r1, asr pc
    570c:	00000000 	andeq	r0, r0, r0
    5710:	029e0000 	addseq	r0, lr, #0
    5714:	02a40000 	adceq	r0, r4, #0
    5718:	00010000 	andeq	r0, r1, r0
    571c:	0002a451 	andeq	sl, r2, r1, asr r4
    5720:	0002aa00 	andeq	sl, r2, r0, lsl #20
    5724:	f3000400 	vshl.u8	d0, d0, d0
    5728:	aa9f5101 	bge	fe7d9b34 <SCS_BASE+0x1e7cbb34>
    572c:	ae000002 	cdpge	0, 0, cr0, cr0, cr2, {0}
    5730:	01000002 	tsteq	r0, r2
    5734:	02ae5100 	adceq	r5, lr, #0
    5738:	02b60000 	adcseq	r0, r6, #0
    573c:	00040000 	andeq	r0, r4, r0
    5740:	9f5101f3 	svcls	0x005101f3
	...
    574c:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    5750:	000002c8 	andeq	r0, r0, r8, asr #5
    5754:	c8510001 	ldmdagt	r1, {r0}^
    5758:	cc000002 	stcgt	0, cr0, [r0], {2}
    575c:	04000002 	streq	r0, [r0], #-2
    5760:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5764:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5768:	00000000 	andeq	r0, r0, r0
    576c:	0002cc00 	andeq	ip, r2, r0, lsl #24
    5770:	0002d200 	andeq	sp, r2, r0, lsl #4
    5774:	51000100 	mrspl	r0, (UNDEF: 16)
    5778:	000002d2 	ldrdeq	r0, [r0], -r2
    577c:	000002d8 	ldrdeq	r0, [r0], -r8
    5780:	01f30004 	mvnseq	r0, r4
    5784:	02d89f51 	sbcseq	r9, r8, #324	; 0x144
    5788:	02dc0000 	sbcseq	r0, ip, #0
    578c:	00010000 	andeq	r0, r1, r0
    5790:	0002dc51 	andeq	sp, r2, r1, asr ip
    5794:	0002e400 	andeq	lr, r2, r0, lsl #8
    5798:	f3000400 	vshl.u8	d0, d0, d0
    579c:	009f5101 	addseq	r5, pc, r1, lsl #2
    57a0:	00000000 	andeq	r0, r0, r0
    57a4:	e4000000 	str	r0, [r0], #-0
    57a8:	ee000002 	cdp	0, 0, cr0, cr0, cr2, {0}
    57ac:	01000002 	tsteq	r0, r2
    57b0:	02ee5000 	rsceq	r5, lr, #0
    57b4:	02f00000 	rscseq	r0, r0, #0
    57b8:	00040000 	andeq	r0, r4, r0
    57bc:	9f5001f3 	svcls	0x005001f3
	...
    57c8:	000002e4 	andeq	r0, r0, r4, ror #5
    57cc:	000002e6 	andeq	r0, r0, r6, ror #5
    57d0:	9f300002 	svcls	0x00300002
    57d4:	000002e6 	andeq	r0, r0, r6, ror #5
    57d8:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    57dc:	0071000a 	rsbseq	r0, r1, sl
    57e0:	401a0073 	andsmi	r0, sl, r3, ror r0
    57e4:	9f2e3024 	svcls	0x002e3024
	...
    57f0:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    57f4:	000002f2 	strdeq	r0, [r0], -r2
    57f8:	f2510001 	vhadd.s16	d16, d1, d1
    57fc:	f8000002 			; <UNDEFINED> instruction: 0xf8000002
    5800:	04000002 	streq	r0, [r0], #-2
    5804:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5808:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    580c:	00000000 	andeq	r0, r0, r0
    5810:	0002f800 	andeq	pc, r2, r0, lsl #16
    5814:	0002fa00 	andeq	pc, r2, r0, lsl #20
    5818:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    581c:	0002fa00 	andeq	pc, r2, r0, lsl #20
    5820:	00033800 	andeq	r3, r3, r0, lsl #16
    5824:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    5828:	00000008 	andeq	r0, r0, r8
    582c:	00000000 	andeq	r0, r0, r0
    5830:	0002f800 	andeq	pc, r2, r0, lsl #16
    5834:	00031c00 	andeq	r1, r3, r0, lsl #24
    5838:	50000100 	andpl	r0, r0, r0, lsl #2
    583c:	0000031c 	andeq	r0, r0, ip, lsl r3
    5840:	00000338 	andeq	r0, r0, r8, lsr r3
    5844:	01f30004 	mvnseq	r0, r4
    5848:	00009f50 	andeq	r9, r0, r0, asr pc
    584c:	00000000 	andeq	r0, r0, r0
    5850:	02f80000 	rscseq	r0, r8, #0
    5854:	03240000 	teqeq	r4, #0
    5858:	00010000 	andeq	r0, r1, r0
    585c:	00032451 	andeq	r2, r3, r1, asr r4
    5860:	00033400 	andeq	r3, r3, r0, lsl #8
    5864:	f3000400 	vshl.u8	d0, d0, d0
    5868:	349f5101 	ldrcc	r5, [pc], #257	; 5870 <__Stack_Size+0x5470>
    586c:	38000003 	stmdacc	r0, {r0, r1}
    5870:	01000003 	tsteq	r0, r3
    5874:	00005100 	andeq	r5, r0, r0, lsl #2
    5878:	00000000 	andeq	r0, r0, r0
    587c:	02f80000 	rscseq	r0, r8, #0
    5880:	031e0000 	tsteq	lr, #0
    5884:	00020000 	andeq	r0, r2, r0
    5888:	031e9f30 	tsteq	lr, #192	; 0xc0
    588c:	03200000 	teqeq	r0, #0
    5890:	000b0000 	andeq	r0, fp, r0
    5894:	38007131 	stmdacc	r0, {r0, r4, r5, r8, ip, sp, lr}
    5898:	ffff0a25 			; <UNDEFINED> instruction: 0xffff0a25
    589c:	209f241a 	addscs	r2, pc, sl, lsl r4	; <UNPREDICTABLE>
    58a0:	24000003 	strcs	r0, [r0], #-3
    58a4:	12000003 	andne	r0, r0, #3
    58a8:	00713100 	rsbseq	r3, r1, r0, lsl #2
    58ac:	ff0a2538 			; <UNDEFINED> instruction: 0xff0a2538
    58b0:	72241aff 	eorvc	r1, r4, #1044480	; 0xff000
    58b4:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    58b8:	349f1a1a 	ldrcc	r1, [pc], #2586	; 58c0 <__Stack_Size+0x54c0>
    58bc:	38000003 	stmdacc	r0, {r0, r1}
    58c0:	12000003 	andne	r0, r0, #3
    58c4:	00713100 	rsbseq	r3, r1, r0, lsl #2
    58c8:	ff0a2538 			; <UNDEFINED> instruction: 0xff0a2538
    58cc:	72241aff 	eorvc	r1, r4, #1044480	; 0xff000
    58d0:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    58d4:	009f1a1a 	addseq	r1, pc, sl, lsl sl	; <UNPREDICTABLE>
    58d8:	00000000 	andeq	r0, r0, r0
    58dc:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    58e0:	fe000002 	cdp2	0, 0, cr0, cr0, cr2, {0}
    58e4:	02000002 	andeq	r0, r0, #2
    58e8:	fe9f3000 	cdp2	0, 9, cr3, cr15, cr0, {0}
    58ec:	0a000002 	beq	58fc <__Stack_Size+0x54fc>
    58f0:	09000003 	stmdbeq	r0, {r0, r1}
    58f4:	4f007100 	svcmi	0x00007100
    58f8:	ffff0a1a 			; <UNDEFINED> instruction: 0xffff0a1a
    58fc:	030a9f1a 	movweq	r9, #44826	; 0xaf1a
    5900:	031e0000 	tsteq	lr, #0
    5904:	00010000 	andeq	r0, r1, r0
    5908:	00031e52 	andeq	r1, r3, r2, asr lr
    590c:	00032600 	andeq	r2, r3, r0, lsl #12
    5910:	53000100 	movwpl	r0, #256	; 0x100
    5914:	00000334 	andeq	r0, r0, r4, lsr r3
    5918:	00000338 	andeq	r0, r0, r8, lsr r3
    591c:	00530001 	subseq	r0, r3, r1
    5920:	00000000 	andeq	r0, r0, r0
    5924:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    5928:	fe000002 	cdp2	0, 0, cr0, cr0, cr2, {0}
    592c:	02000002 	andeq	r0, r0, #2
    5930:	fe9f3000 	cdp2	0, 9, cr3, cr15, cr0, {0}
    5934:	38000002 	stmdacc	r0, {r1}
    5938:	01000003 	tsteq	r0, r3
    593c:	00005400 	andeq	r5, r0, r0, lsl #8
    5940:	00000000 	andeq	r0, r0, r0
    5944:	02f80000 	rscseq	r0, r8, #0
    5948:	03360000 	teqeq	r6, #0
    594c:	00020000 	andeq	r0, r2, r0
    5950:	03369f30 	teqeq	r6, #192	; 0xc0
    5954:	03380000 	teqeq	r8, #0
    5958:	00010000 	andeq	r0, r1, r0
    595c:	00000050 	andeq	r0, r0, r0, asr r0
    5960:	00000000 	andeq	r0, r0, r0
    5964:	00033800 	andeq	r3, r3, r0, lsl #16
    5968:	00033a00 	andeq	r3, r3, r0, lsl #20
    596c:	51000100 	mrspl	r0, (UNDEF: 16)
    5970:	0000033a 	andeq	r0, r0, sl, lsr r3
    5974:	00000348 	andeq	r0, r0, r8, asr #6
    5978:	01f30004 	mvnseq	r0, r4
    597c:	00009f51 	andeq	r9, r0, r1, asr pc
    5980:	00000000 	andeq	r0, r0, r0
    5984:	03380000 	teqeq	r8, #0
    5988:	033a0000 	teqeq	sl, #0
    598c:	00050000 	andeq	r0, r5, r0
    5990:	25380071 	ldrcs	r0, [r8, #-113]!	; 0x71
    5994:	00033a9f 	muleq	r3, pc, sl	; <UNPREDICTABLE>
    5998:	00034800 	andeq	r4, r3, r0, lsl #16
    599c:	f3000600 	vmax.u8	d0, d0, d0
    59a0:	25385101 	ldrcs	r5, [r8, #-257]!	; 0x101
    59a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    59b0:	00000a00 	andeq	r0, r0, r0, lsl #20
    59b4:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    59b8:	00000a00 	andeq	r0, r0, r0, lsl #20
    59bc:	00005000 	andeq	r5, r0, r0
    59c0:	7d000200 	sfmvc	f0, 4, [r0, #-0]
    59c4:	00000008 	andeq	r0, r0, r8
    59c8:	00000000 	andeq	r0, r0, r0
    59cc:	00002200 	andeq	r2, r0, r0, lsl #4
    59d0:	00003300 	andeq	r3, r0, r0, lsl #6
    59d4:	53000100 	movwpl	r0, #256	; 0x100
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
	mDelay(50);
	end();
	return 0;
}

void blinky(uint8 level) {
   0:	00000001 	andeq	r0, r0, r1
   4:	00000001 	andeq	r0, r0, r1
	// Turn them all off first.
	SetLED(MANAGE, 0);
   8:	08006684 	stmdaeq	r0, {r2, r7, r9, sl, sp, lr}
	SetLED(TXD, 0);
   c:	08006724 	stmdaeq	r0, {r2, r5, r8, r9, sl, sp, lr}
	...
	SetLED(PROGRAM, 0);
  18:	000001ec 	andeq	r0, r0, ip, ror #3
	SetLED(RXD, 0);
  1c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  20:	000001f2 	strdeq	r0, [r0], -r2
	SetLED(PLAY, 0);
  24:	000001f6 	strdeq	r0, [r0], -r6
  28:	000001f6 	strdeq	r0, [r0], -r6
	SetLED(AUX, 0);
  2c:	000001fa 	strdeq	r0, [r0], -sl
	...
	switch (level) {	// Turn them on.
  38:	000001ec 	andeq	r0, r0, ip, ror #3
  3c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
  40:	000001f2 	strdeq	r0, [r0], -r2
  44:	000001f6 	strdeq	r0, [r0], -r6
  48:	000001f6 	strdeq	r0, [r0], -r6
  4c:	000001fa 	strdeq	r0, [r0], -sl
	...
	SetLED(PROGRAM, 0);
	SetLED(RXD, 0);
	SetLED(PLAY, 0);
	SetLED(AUX, 0);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 1);	SetLED(TXD, 1); break;
  58:	00000382 	andeq	r0, r0, r2, lsl #7
		case 2: SetLED(PROGRAM, 1);	SetLED(RXD, 1); break;
  5c:	00000384 	andeq	r0, r0, r4, lsl #7
  60:	00000388 	andeq	r0, r0, r8, lsl #7
  64:	0000038c 	andeq	r0, r0, ip, lsl #7
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
  68:	00000392 	muleq	r0, r2, r3
		default: return;
	}
	mDelay(100);
  6c:	0000039c 	muleq	r0, ip, r3
	...
	switch (level) {	// Turn them on.
  78:	00000382 	andeq	r0, r0, r2, lsl #7
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
  7c:	00000384 	andeq	r0, r0, r4, lsl #7
  80:	00000388 	andeq	r0, r0, r8, lsl #7
  84:	0000038c 	andeq	r0, r0, ip, lsl #7
		case 1: SetLED(PLAY, 1);		SetLED(AUX, 1); break;
		default: return;
	}
	mDelay(100);
	switch (level) {	// Turn them on.
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
  88:	00000392 	muleq	r0, r2, r3
  8c:	0000039c 	muleq	r0, ip, r3
	...
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
  98:	00000382 	andeq	r0, r0, r2, lsl #7
  9c:	00000384 	andeq	r0, r0, r4, lsl #7
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
  a0:	00000388 	andeq	r0, r0, r8, lsl #7
		default: return;
	}
	mDelay(100);
  a4:	0000038c 	andeq	r0, r0, ip, lsl #7
}
  a8:	00000392 	muleq	r0, r2, r3
		case 3: SetLED(MANAGE, 0);	SetLED(TXD, 0); break;
		case 2: SetLED(PROGRAM, 0);	SetLED(RXD, 0); break;
		case 1: SetLED(PLAY, 0);		SetLED(AUX, 0); break;
		default: return;
	}
	mDelay(100);
  ac:	0000039c 	muleq	r0, ip, r3
	...
  b8:	00000480 	andeq	r0, r0, r0, lsl #9
  bc:	00000482 	andeq	r0, r0, r2, lsl #9
  c0:	00000486 	andeq	r0, r0, r6, lsl #9
  c4:	00000494 	muleq	r0, r4, r4
	...
  d0:	00001040 	andeq	r1, r0, r0, asr #32
  d4:	00001044 	andeq	r1, r0, r4, asr #32
  d8:	0000104a 	andeq	r1, r0, sl, asr #32
  dc:	0000104e 	andeq	r1, r0, lr, asr #32
	...
  e8:	0000137a 	andeq	r1, r0, sl, ror r3
  ec:	0000137c 	andeq	r1, r0, ip, ror r3
  f0:	0000138c 	andeq	r1, r0, ip, lsl #7
  f4:	00001390 	muleq	r0, r0, r3
	...
 100:	0000137a 	andeq	r1, r0, sl, ror r3
 104:	0000137c 	andeq	r1, r0, ip, ror r3
 108:	0000138c 	andeq	r1, r0, ip, lsl #7
 10c:	00001390 	muleq	r0, r0, r3
	...
 118:	000015ba 			; <UNDEFINED> instruction: 0x000015ba
 11c:	000015bc 			; <UNDEFINED> instruction: 0x000015bc
 120:	000015be 			; <UNDEFINED> instruction: 0x000015be
 124:	000015c2 	andeq	r1, r0, r2, asr #11
	...
 130:	000015bc 			; <UNDEFINED> instruction: 0x000015bc
 134:	000015be 			; <UNDEFINED> instruction: 0x000015be
 138:	000015c4 	andeq	r1, r0, r4, asr #11
 13c:	000015c8 	andeq	r1, r0, r8, asr #11
	...
 148:	00001608 	andeq	r1, r0, r8, lsl #12
 14c:	0000160c 	andeq	r1, r0, ip, lsl #12
 150:	0000160e 	andeq	r1, r0, lr, lsl #12
 154:	00001612 	andeq	r1, r0, r2, lsl r6
	...
 160:	00001684 	andeq	r1, r0, r4, lsl #13
 164:	00001686 	andeq	r1, r0, r6, lsl #13
 168:	00001688 	andeq	r1, r0, r8, lsl #13
 16c:	0000168c 	andeq	r1, r0, ip, lsl #13
	...
 178:	00001686 	andeq	r1, r0, r6, lsl #13
 17c:	00001688 	andeq	r1, r0, r8, lsl #13
 180:	0000168e 	andeq	r1, r0, lr, lsl #13
 184:	00001692 	muleq	r0, r2, r6
	...
 190:	0000170e 	andeq	r1, r0, lr, lsl #14
 194:	00001712 	andeq	r1, r0, r2, lsl r7
 198:	00001716 	andeq	r1, r0, r6, lsl r7
 19c:	00001728 	andeq	r1, r0, r8, lsr #14
	...
 1a8:	00001e5a 	andeq	r1, r0, sl, asr lr
 1ac:	00001e5c 	andeq	r1, r0, ip, asr lr
 1b0:	00001e60 	andeq	r1, r0, r0, ror #28
 1b4:	00001e64 	andeq	r1, r0, r4, ror #28
	...
 1c0:	00001e9c 	muleq	r0, ip, lr
 1c4:	00001e9e 	muleq	r0, lr, lr
 1c8:	00001ea2 	andeq	r1, r0, r2, lsr #29
 1cc:	00001ea8 	andeq	r1, r0, r8, lsr #29
	...
